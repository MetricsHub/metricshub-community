---
connector:
  displayName: IBM AIX - LUN
  platforms: IBM POWER
  reliesOn: IBM AIX lspath system command
  information: Provides LUN MPIO status information on IBM AIX systems.
  version: 1.0
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - RS6000
    criteria:
    # OS should be AIX (whatever version)
    - type: deviceType
      keep:
      - RS6000
    # Test the lspath command
    - type: osCommand
      commandLine: /usr/sbin/lspath
      timeout: 300
      expectedResult: fscsi
monitors:
  lun:
    discovery:
      sources:
        source(1):
          # Source(1) = lspath output
          # Get the list of Ports from lspath
          type: osCommand
          commandLine: /usr/sbin/lspath
          timeout: 300
          computes:
            # AWK it
            # LunName;ExpectedPaths;AvailablePaths;
          - type: awk
            script: $embedded.EmbeddedFile(1)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove '1' from ExpectedPaths to get the AvailablePathWarning threshold
            # LunName;AvailablePathWarning;AvailablePaths;
          - type: subtract
            column: 2
            value: 1
        source(2):
          # Source(2) = lsdev/lscfg on disks (which includes LUNs)
          type: osCommand
          commandLine: for DISK in `/usr/sbin/lsdev -C -c disk -F 'name'`; do /usr/sbin/lscfg -vp -l $DISK; done
          computes:
            # AWK it
            # LunName;HardwareLocationCode;DiskArray;WWN;
          - type: awk
            script: $embedded.EmbeddedFile(2)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add "Hardware Location Code: " to the 2nd column
            # LunName;HardwareLocationCode;DiskArray;WWN;
          - type: leftConcat
            column: 2
            value: "Location: "
        source(3):
          # Source(3) = Table Joint of Source(1) and Source(2)
          # LunName;AvailablePathWarning;AvailablePaths;LunName;HardwareLocationCode;DiskArray;WWN;
          type: tableJoin
          leftTable: $monitors.lun.discovery.sources.source(1)$
          rightTable: $monitors.lun.discovery.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;
      mapping:
        # InstanceTable = Source(3)
        # LunName;AvailablePathWarning;AvailablePaths;LunName;HardwareLocationCode;DiskArray;WWN;
        source: $monitors.lun.discovery.sources.source(3)$
        attributes:
          id: $column(1)
          array_name: $column(6)
          wwn: $column(7)
          info: $column(5)
          hw.parent.type: enclosure
          name: $column(6)
        metrics:
          hw.lun.paths.limit{limit_type="low.degraded"}: $column(2)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Get the list of Ports from multipath -l
          type: osCommand
          commandLine: /usr/sbin/lspath
          timeout: 300
          computes:
            # AWK it
            # LunName;NumberPaths;
          - type: awk
            script: $embedded.EmbeddedFile(1)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # ValueTable = Source(1)
        # LunName;NumberPaths;LunStatus;LunStatusInfo;AvailablePathInformation;
        source: $monitors.lun.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.lun.paths: $column(2)
embedded:
  EmbeddedFile(1): |-
    ($2 ~ /hdisk[0-9]+/ && $3 ~ /fscsi/) {
        if ($2 in ExpectedPaths == 0)
        {
            ExpectedPaths[$2] = 0;
            AvailablePaths[$2] = 0;
        }

        ExpectedPaths[$2] = ExpectedPaths[$2] + 1;
        if ($1 ~ /[Ee]nabled/)
        {
            AvailablePaths[$2] = AvailablePaths[$2] + 1;
        }
    }
    END {
        for (id in ExpectedPaths)
        {
            print "MSHW;" id ";" ExpectedPaths[id] ";" AvailablePaths[id] ";"
        }
    }
  EmbeddedFile(2): |-
    BEGIN {
        manufacturer = "";
        model = "";
        hardwareLocationCode = "";
        wwn = "";
        diskId = "";
    }
    ($1 ~ /^hdisk[0-9]+$/) {
        if (diskId != "")
        {
            print "MSHW;" diskId ";" hardwareLocationCode ";" manufacturer " " model ";" wwn;
            manufacturer = "";
            model = "";
            hardwareLocationCode = "";
            wwn = "";
            diskId = "";
        }

        diskId = $1;
        hardwareLocationCode = $2;
    }
    /^ *Manufacturer/ {
        gsub("\\.+", " ");
        manufacturer = $2;
    }
    /^ *Machine Type and Model/ {
        gsub("\\.+", " ");
        model = $5;
        for (i=6 ; i<=NF ; i++) { model = model $i; }
    }
    /^ *Device Specific..Z0/ {
        gsub("\\.+", " ");
        wwn = $4;
    }
    END {
        print "MSHW;" diskId ";" hardwareLocationCode ";" manufacturer " " model ";" wwn
    }
