---
connector:
  displayName: Lenovo IMM (SNMP)
  platforms: Lenovo
  reliesOn: Lenovo IMM's SNMP Service
  version: 1.0
  information: This connector provides hardware monitoring through Lenovo's IMM management card.  The connector also usually works with the last generation of IBM xSeries servers (m5).
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - OOB
    supersedes:
    - IpmiTool
    - Director52ServeRAIDLinux
    criteria:
      # Detection
      # Look for a CPU (Indicates an m5 or later server) with a status
      # Servers without this OID generally do not have enough information available from SNMP and IPMI-over-LAN should be used.
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.2.3.51.3.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model code in the chassis table
          # ModelNumberPart1;ModelNumberPart2;SerialNumber;ModelName;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.5.2.1
          selectColumns: "1,2,3,5"
          forceSerialization: true
          computes:
            # Add Part2 of the Model to Part One
            # ModelNumber;ModelNumberPart2;SerialNumber;ModelName;
          - type: rightConcat
            column: 1
            value: '-'
          - type: rightConcat
            column: 1
            value: $2
          # ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID
          - type: rightConcat
            column: 4
            value: ;Server
        source(2):
          # Enclosure power consumption
          # PowerConsumption
          type: snmpGet
          oid: 1.3.6.1.4.1.2.3.51.3.1.10.1.10.0
          forceSerialization: true
          computes:
            # Add Id for the tablejoin
            # ID;PowerConsumption
          - type: leftConcat
            column: 1
            value: Server;
        source(3):
          # Join the Chassis to the Power Consumption
          # ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID;ID;PowerConsumption
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          leftKeyColumn: 5
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # Now we have what is necessary to define the computer model
        # ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID;ID;PowerConsumption
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: Server
          __display_id: $4
          vendor: Lenovo
          model: $1
          type: Computer
          serial_number: $3
          name: "${awk::sprintf(\"Computer: %s (%s %s)\", $4, \"Lenovo\", $1)}"
        conditionalCollection:
          hw.enclosure.power: $7
    collect:
      # Collect type is mono-instance
      type: multiInstance
      sources:
        source(1):
          # CurrentReading;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.10.1
          selectColumns: 10
          forceSerialization: true
      mapping:
        # ValueTable = Source(1)
        # CurrentReading;
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: Server
        metrics:
          hw.enclosure.power: $1
          hw.enclosure.energy: fakeCounter($1)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1)
          # Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.1.2.1
          selectColumns: "2,6,7,11,3"
          forceSerialization: true
          computes:
            # Remove Thresholds and Current Readings of Zero
            # Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
          - type: leftConcat
            column: 2
            value: MSHW_
          - type: leftConcat
            column: 3
            value: MSHW_
          - type: leftConcat
            column: 5
            value: MSHW_
          # Remove 0 value
          - type: replace
            column: 2
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 3
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 5
            existingValue: MSHW_0
            newValue: ""
          # Remove MSHW_ for non 0 values
          - type: replace
            column: 2
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 3
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 5
            existingValue: MSHW_
            newValue: ""
            # Blank Status of Unknown
            # Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
          - type: replace
            column: 4
            existingValue: Unknown
            newValue: ""
            # Now transfor Status into an overall instance activation
            # Description;AlarmThreshold;WarningThreshold;InstanceActivation;CurrentReading;
          - type: leftConcat
            column: 4
            value: $5
            # Keep only instances with either a valid current reading or status
            # Description;AlarmThreshold;WarningThreshold;InstanceActivation;CurrentReading;
          - type: keepOnlyMatchingLines
            column: 4
            regExp: .
            # Set Status to Alarm Threshold
            # Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
          - type: replace
            column: 4
            existingValue: $4
            newValue: $2
            # Add the warning threshold
            # Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
          - type: leftConcat
            column: 4
            value: $3
          # Add MSHW to both sides
          - type: leftConcat
            column: 4
            value: MSHW
          - type: rightConcat
            column: 4
            value: MSHW
            # If the result is MSHWMSHW (i.e. no current reading, replace with NoCurrentReading
            # Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
          - type: replace
            column: 4
            existingValue: MSHWMSHW
            newValue: NoCurrentReading
            # Now remove the warning, alarm and MSHW from the Status Activation
            # Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
          - type: replace
            column: 4
            existingValue: $3
            newValue: ""
          - type: replace
            column: 4
            existingValue: $2
            newValue: ""
          - type: replace
            column: 4
            existingValue: MSHW
            newValue: ""
      mapping:
        # Instance table = Source(1)
        # Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $2
        conditionalCollection:
          hw.temperature: $5
          hw.status{hw.type="temperature"}: $4
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;CurrentReading;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.1.2.1
          selectColumns: "2,3,11"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;CurrentReading;Status;Status;
          - type: duplicateColumn
            column: 3
            # Translate Status into PATROLStatus
            # Description;CurrentReading;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # And Finally, remove Temp from the ID
            # Description;CurrentReading;PATROLStatus;Status;
          - type: replace
            column: 1
            existingValue: ' Temp'
            newValue: ""
      mapping:
        # The ValueTable = Source(1)
        # Description;CurrentReading;PATROLStatus;Status;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
          hw.status{hw.type="temperature"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1)
          # Description;FanStatus;SpeedPercent;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.3.2.1
          selectColumns: "2,10,3"
          forceSerialization: true
          computes:
            # remove tach from the ID
            # Description;FanStatus;SpeedPercent;
          - type: replace
            column: 1
            existingValue: ' Tach'
            newValue: ""
        source(2):
          # Copy to only get discrete sensors
          type: copy
          from: "${source::monitors.fan.discovery.sources.source(1)}"
          computes:
            # Exclude fans with an unknown status
            # Description;FanStatus;SpeedPercent;
          - type: excludeMatchingLines
            column: 2
            valueList: Unknown
          # Keep only fans with a status
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
          # Blank the SpeedPercent
          - type: replace
            column: 3
            existingValue: offline
            newValue: ""
          - type: replace
            column: 3
            existingValue: Unavailable
            newValue: ""
        source(3):
          # Copy to only get unknown sensors
          type: copy
          from: "${source::monitors.fan.discovery.sources.source(1)}"
          computes:
            # KeepOnly fans with an unknown status
            # Description;FanStatus;SpeedPercent;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: Unknown
          # Keep only fans with a SpeedPercent
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
          # Blank the status
          - type: replace
            column: 2
            existingValue: $2
            newValue: ""
          # Exclude fans with unavailable or offline speed
          - type: excludeMatchingLines
            column: 3
            valueList: "Unavailable,offline"
        source(4):
          # Copy to only get unknown sensors
          type: copy
          from: "${source::monitors.fan.discovery.sources.source(1)}"
          computes:
            # KeepOnly fans with an blank status
            # Description;FanStatus;SpeedPercent;
          - type: excludeMatchingLines
            column: 2
            regExp: .
          # Keep only fans with a SpeedPercent
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
          # Blank the status
          - type: replace
            column: 2
            existingValue: $2
            newValue: ""
          # Exclude fans with unavailable speed
          - type: excludeMatchingLines
            column: 3
            valueList: Unavailable
        source(5):
          # Union 1 , 2 and 3
          # Description;FanStatus;SpeedPercent;
          type: tableUnion
          tables:
          - "${source::monitors.fan.discovery.sources.source(2)}"
          - "${source::monitors.fan.discovery.sources.source(3)}"
          - "${source::monitors.fan.discovery.sources.source(4)}"
          computes:
          - type: replace
            column: 3
            existingValue: ofmaximum
            newValue: ""
      mapping:
        # Instance table = Source(4)
        source: "${source::monitors.fan.discovery.sources.source(5)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        conditionalCollection:
          hw.status{hw.type="fan"}: $2
          hw.fan.speed_ratio: $3
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;SpeedPercent;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.3.2.1
          selectColumns: "2,10,3"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;SpeedPercent;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;SpeedPercent;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Remove Tach from the ID
            # Description;PATROLStatus;Status;SpeedPercent;
          - type: replace
            column: 1
            existingValue: ' Tach'
            newValue: ""
            # Remove Spaces and Percentage signs from SpeedPercent
            # Description;PATROLStatus;Status;SpeedPercent;
          - type: replace
            column: 4
            existingValue: '%%'
            newValue: ""
          - type: replace
            column: 4
            existingValue: ' '
            newValue: ""
          - type: replace
            column: 4
            existingValue: ofmaximum
            newValue: ""
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
          hw.fan.speed_ratio: percent2Ratio($4)
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1)
          # Description;LowerThreshold;UpperThreshold;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.2.2.1
          selectColumns: "2,9,6"
          forceSerialization: true
          computes:
            # Blank zero thresholds
            # Description;LowerThreshold;UpperThreshold;
          - type: leftConcat
            column: 2
            value: MSHW_
          - type: leftConcat
            column: 3
            value: MSHW_
          # Remove 0 value
          - type: replace
            column: 2
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 3
            existingValue: MSHW_0
            newValue: ""
          # Remove MSHW_ for non 0 values
          - type: replace
            column: 2
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 3
            existingValue: MSHW_
            newValue: ""
      mapping:
        # Instance table = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $3
          hw.voltage.limit{limit_type="low.critical"}: $2
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;CurrentReading;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.2.2.1
          selectColumns: "2,3"
          forceSerialization: true
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $2
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;Speed;Family;Cores;Threads;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.5.20.1
          selectColumns: "2,3,6,7,8,11"
          forceSerialization: true
          computes:
            # Exclude cpu with an unknown status
            # Description;Speed;Family;Cores;Threads;Status;
          - type: excludeMatchingLines
            column: 6
            valueList: Unknown
            # Add some descriptors
            # Description;Speed;Family;Cores;Threads;Status;
          - type: leftConcat
            column: 4
            value: "Cores: "
          - type: leftConcat
            column: 5
            value: "Threads: "
      mapping:
        # InstanceTable = Source(1)
        # Description;Speed;Family;Cores;Threads;Status;
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          model: $3
          info: "${awk::join(\" \", $4, $5)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $3, megaHertz2HumanFormat($2))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($2)
        conditionalCollection:
          hw.status{hw.type="cpu"}: $6
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.5.20.1
          selectColumns: "2,11"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="cpu"}: $2
        legacyTextParameters:
          StatusInformation: $3
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;PartNumber;SerialNumber;Type;Size;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.5.21.1
          selectColumns: "2,3,4,6,7,8"
          forceSerialization: true
          computes:
            # Exclude Memory with an unknown status
            # Description;PartNumber;SerialNumber;Type;Size;Status;
          - type: excludeMatchingLines
            column: 6
            valueList: Unknown
            # Add some descriptors
            # Description;PartNumber;SerialNumber;Type;Size;Status;
          - type: leftConcat
            column: 2
            value: "Part Number: "
            # Convert size from GB to MB
            # Description;PartNumber;SerialNumber;Type;Size;Status;
          - type: multiply
            column: 5
            value: 1024
      mapping:
        # InstanceTable = Source(1)
        # Description;PartNumber;SerialNumber;Type;Size;Status;
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          type: $4
          serial_number: $3
          info: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $1, $4, $5)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($5)
        conditionalCollection:
          hw.status{hw.type="memory"}: $6
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.5.21.1
          selectColumns: "2,8"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;PartNumber;FruNumber;SerialNumber;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.11.2.1
          selectColumns: "2,3,4,5,6"
          forceSerialization: true
          computes:
            # Exclude PowerSupply with an unknown status
            # Description;PartNumber;FruNumber;SerialNumber;Status;
          - type: excludeMatchingLines
            column: 5
            valueList: Unknown
            # Add some descriptors
            # Description;PartNumber;FruNumber;SerialNumber;Status;
          - type: leftConcat
            column: 2
            value: "Part Number: "
          - type: leftConcat
            column: 3
            value: "Alternative Part Number: "
          - type: leftConcat
            column: 4
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        # Description;PartNumber;FruNumber;SerialNumber;Status;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          info: "${awk::join(\" \", $2, $3, $4)}"
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.11.2.1
          selectColumns: "2,6"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.2.1
          selectColumns: "2,4,6,9,10,13"
          forceSerialization: true
          computes:
            # Replace Unknown with blank to deactivate DiskController status
            # Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
          - type: replace
            column: 6
            existingValue: Unknown
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          vendor: $3
          model: $4
          serial_number: $5
          firmware_version: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s %s)\", $1, $3, $4)}"
        conditionalCollection:
          hw.status{hw.type="disk_controller"}: $6
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.2.1
          selectColumns: "2,13"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="disk_controller"}: $2
        legacyTextParameters:
          StatusInformation: $3
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;ControllerName;Size;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.7.1
          selectColumns: "2,3,5"
          forceSerialization: true
          computes:
            # Split the size units from the size
            # Description;ControllerName;Size;SizeUnits;
          - type: replace
            column: 3
            existingValue: ' '
            newValue: ;
            # Convert the Size units to a multiplier factor
            # Description;ControllerName;Size;SizeUnits;
          - type: translate
            column: 4
            translationTable: "${translation::SizeUnitsTranslationTable}"
            # Multiply the Size by the Size Units Multiplier
            # Description;ControllerName;Size;SizeUnits;
          - type: multiply
            column: 3
            value: $4
      mapping:
        # InstanceTable = Source(1)
        # Description;ControllerName;Size;SizeUnits;
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: disk_controller
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $1, bytes2HumanFormatBase2($3))}"
        metrics:
          hw.logical_disk.limit: $3
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.7.1
          selectColumns: "2,4"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.3.1
          selectColumns: "2,3,5,7,8,9,11,13,14,17,18,19,12"
          forceSerialization: true
          computes:
            # Split the size units from the size
            # Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
          - type: replace
            column: 13
            existingValue: ' '
            newValue: ;
            # Convert the Size units to a multiplier factor
            # Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
          - type: translate
            column: 14
            translationTable: "${translation::SizeUnitsTranslationTable}"
            # Multiply the Size by the Size Units Multiplier
            # Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
          - type: multiply
            column: 13
            value: $14
            # Create the Location
            # Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
          - type: leftConcat
            column: 3
            value: " - Slot: "
          - type: leftConcat
            column: 3
            value: $9
          - type: leftConcat
            column: 3
            value: "Enclosure: "
            # Create Drive Type
            # Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
          - type: leftConcat
            column: 4
            value: ' - '
          - type: leftConcat
            column: 4
            value: $5
          - type: leftConcat
            column: 4
            value: ' - '
          - type: leftConcat
            column: 4
            value: $6
          - type: leftConcat
            column: 4
            value: "Speed: "
          # Create the Model/FRU Number
          - type: leftConcat
            column: 11
            value: " - Alternative Part Number: "
          - type: leftConcat
            column: 11
            value: $12
          - type: leftConcat
            column: 11
            value: "Part Number: "
        source(2):
          # Retrieve disks' FirmwareVersion
          # DriveName;FirmwareVersion
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.5.1
          selectColumns: "3,6"
          forceSerialization: true
        source(3):
          # Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;DriveName;FirmwareVersion
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.discovery.sources.source(1)}"
          rightTable: "${source::monitors.physical_disk.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(3)
        # Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;DriveName;FirmwareVersion
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $1
          vendor: $8
          model: $2
          serial_number: $10
          firmware_version: $16
          info: "${awk::join(\" \", $4, $11)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $8, bytes2HumanFormatBase10($13))}"
        metrics:
          hw.physical_disk.size: $13
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.3.1
          selectColumns: "2,4"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = the processorDeviceTable snmp table
          # Description;Model;Manufacturer;Status:Serial;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.2.1
          selectColumns: "2,22,23,24,27"
          forceSerialization: true
          computes:
            # Exclude Battery with an unknown status
            # Description;PartNumber;Vendor;Status;SerialNumber;
          - type: excludeMatchingLines
            column: 4
            valueList: Unknown
            # Add some descriptors
            # Description;PartNumber;Vendor;Status;SerialNumber;
          - type: leftConcat
            column: 2
            value: "Part Number: "
          - type: leftConcat
            column: 5
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        # Description;PartNumber;Vendor;Status;SerialNumber;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          vendor: $3
          info: "${awk::join(\" \", $2, $5)}"
          hw.parent.type: disk_controller
          hw.parent.id: $1
          name: "${awk::sprintf(\"%s (%s)\", $1, $3)}"
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.13.1.2.1
          selectColumns: "2,24"
          forceSerialization: true
          computes:
            # Duplicate status
            # Description;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # Description;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="battery"}: $2
        legacyTextParameters:
          StatusInformation: $3
  led:
    discovery:
      sources:
        source(1):
          # Source(1)
          # Description;Color;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.8.2.1
          selectColumns: "4,6"
          forceSerialization: true
          computes:
            # Duplicate Color
            # Description;Color;Color;
          - type: duplicateColumn
            column: 2
            # Translate the Color to
            # Description;Color;ON;BLINKING;OFF;
          - type: translate
            column: 3
            translationTable: "${translation::LEDColorTranslationTable}"
      mapping:
        # The Instance Table
        # Description;Color;ON;BLINKING;OFF;
        source: "${source::monitors.led.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          color: $2
          __on_status: $3
          __blinking_status: $4
          __off_status: $5
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # Description;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.3.51.3.1.8.2.1
          selectColumns: "4,5"
          forceSerialization: true
          computes:
            # Translate the State
            # Description;State;
          - type: translate
            column: 2
            translationTable: "${translation::LEDStateTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # Description;State;
        source: "${source::monitors.led.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="led"}: legacyLedStatus($2)
translations:
  SizeUnitsTranslationTable:
    MB: 1048576
    GB: 1073741824
    Default: 1
    TB: 1099511627776
  statusTranslationTable:
    Unknown: UNKNOWN
    Unconfigured Good: ok
    Operational: ok
    Critical: failed
    Normal: ok
    Online: ok
    Optimal: ok
    Default: degraded
  LEDColorTranslationTable:
    green: OK;OK;ALARM
    blue: OK;OK;OK
    yellow: ALARM;ALARM;OK
  LEDStateTranslationTable:
    "0": "Off"
    "1": "On"
    "2": Blinking
