---
connector:
  displayName: HP TopTools NetRaid Agent
  platforms: HP NetServer
  reliesOn: HP TopTools NetRaid Agent
  version: 1.0
  information: "This connector monitors the RAID disks (physical and logical) attached to an HP NetRAID controller. It uses the information provided by the HP NetRAID SNMP Sub-Agent, installed with the HP TopTools Server Agent."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Linux
    - NT
    criteria:
    # Simply check that the hpnr MIB is populated
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.16.1.1.1.1
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # HP NetRAID controllers table
          type: snmpTable
          oid: 1.3.6.1.4.1.16.1.1.1.1
          selectColumns: "ID,1,3,4,23"
        source(2):
          # Physical disk table
          type: snmpTable
          oid: 1.3.6.1.4.1.16.1.1.3.1
          selectColumns: 1
        source(3):
          # We joint the controllers and the physical disk table
          # in order to keep only controllers for which there is disks attached
          type: tableJoin
          leftTable: $monitors.disk_controller.discovery.sources.source(1)$
          rightTable: $monitors.disk_controller.discovery.sources.source(2)$
          leftKeyColumn: 2
          rightKeyColumn: 1
      mapping:
        # The Instance table...
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          controller_number: $column(2)
          vendor: HP
          model: $column(5)
          firmware_version: $column(3)
          bios_version: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(2), \"HP\", $column(5))"
  physical_disk:
    discovery:
      sources:
        source(1):
          type: snmpTable
          oid: 1.3.6.1.4.1.16.1.1.3.1
          selectColumns: "ID,1,4,6,7,8"
          computes:
          - type: excludeMatchingLines
            column: 3
            valueList: 20
          - type: keepOnlyMatchingLines
            column: 5
            valueList: 0
          - type: multiply
            column: 4
            value: 1048576
      mapping:
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          model: $column(6)
          vendor: HP
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(2))"
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(6), $column(4))"
        metrics:
          hw.physical_disk.size: $column(4)
    collect:
      # This is a mono-instance collect (execute the collect for each disk)
      type: monoInstance
      sources:
        source(1):
          # Source(1) = the state column of the physical disk table
          type: snmpGet
          oid: 1.3.6.1.4.1.16.1.1.3.1.4.%PhysicalDisk.Collect.DeviceID%
          computes:
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
          # translate the snmp state into PATROL status and into a more readable string
          - type: translate
            column: 2
            translationTable: PhysicalDiskStatusTranslationTable
          - type: translate
            column: 3
            translationTable: PhysicalDiskStatusInformationTranslationTable
      mapping:
        source: $monitors.physical_disk.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the snmp logical drive table
          type: snmpTable
          oid: 1.3.6.1.4.1.16.1.1.2.1
          selectColumns: "ID,1,4,5"
          computes:
          - type: multiply
            column: 3
            value: 1048576
      mapping:
        # The instance table
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.logical_disk.limit: $column(3)
          raid_level: $column(4)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(2))"
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(4), $column(3))"
    collect:
      # Type = MonoInstance (executed for each logical drive instance)
      type: monoInstance
      sources:
        source(1):
          # Source(1) = the status of the drive in the logical drive snmp table
          type: snmpGet
          oid: 1.3.6.1.4.1.16.1.1.2.1.3.%LogicalDisk.Collect.DeviceID%
          computes:
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
          # translate the snmp status into PATROL status and into a more readable string
          - type: translate
            column: 2
            translationTable: LogicalDiskStatusTranslationTable
          - type: translate
            column: 3
            translationTable: LogicalDiskStatusInformationTranslationTable
      mapping:
        source: $monitors.logical_disk.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  PhysicalDiskStatusInformationTranslationTable:
    "1": ""
    default: Unknown Status
    "3": On-line
    "4": Failed
    "5": Rebuild
    "6": Hot-spare
    "20": Non-disk
  LogicalDiskStatusInformationTranslationTable:
    "0": Off-line
    "1": Degraded
    "2": ""
    default: Unknown Status
    "3": Initializing
    "4": Check consistency
  LogicalDiskStatusTranslationTable:
    "0": failed
    "1": degraded
    "2": ok
    default: UNKNOWN
    "3": degraded
    "4": degraded
  PhysicalDiskStatusTranslationTable:
    "1": ok
    default: UNKNOWN
    "3": ok
    "4": failed
    "5": degraded
    "6": ok
    "20": ok
