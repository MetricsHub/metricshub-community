---
connector:
  displayName: IBM AIX - Environment (uesensor)
  platforms: IBM POWER
  reliesOn: IBM AIX system commands (uesensor)
  information: "Provides hardware environment information (temperature sensors, voltage sensors, fans, power supplies) on IBM AIX systems."
  version: 1.1
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - RS6000
    criteria:
    # OS should be RS6000 (for AIX, whatever version)
    - type: deviceType
      keep:
      - RS6000
    # The uesensor utility have to be present
    - type: osCommand
      commandLine: /bin/ls /usr/lpp/diagnostics/bin/uesensor
      expectedResult: ^/usr/lpp/diagnostics/bin/uesensor$
    # And uesensor must be returning something interesting
    - type: osCommand
      commandLine: /usr/lpp/diagnostics/bin/uesensor -a
      expectedResult: '^3 \|^9001 \|^9002 \|^9004 '
monitors:
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = uesensor -a|grep "^3 " (keep only temperatures)
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^3 '
          separators: ' '
          selectColumns: "2,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: 55
          hw.temperature.limit{limit_type="high.critical"}: 65
    collect:
      # Collect type = multi-instance (one pass for all temperatures)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = usensor -a, again
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^3 '
          separators: ' '
          selectColumns: "2,4"
      mapping:
        # ValueTable = Source(1) (easy enough)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = uesensor -a|grep "^9001 " (keep only fans)
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9001 '
          separators: ' '
          selectColumns: "2,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: 1000
          hw.fan.speed.limit{limit_type="low.critical"}: 100
    collect:
      # Collect type = multi-instance (one pass for all fans)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = usensor -a, again
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9001 '
          separators: ' '
          selectColumns: "2,4"
      mapping:
        # ValueTable = Source(1) (easy enough)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.fan.speed: $2
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = uesensor -a|grep "^9002 " (keep only voltages)
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9002 '
          separators: ' '
          selectColumns: "2,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type = multi-instance (one pass for all voltages)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = usensor -a, again
          # DeviceID;StatusNumber;Voltage
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9002 '
          separators: ' '
          selectColumns: "2,3,4"
          computes:
            # Duplicate the status column
            # DeviceID;StatusNumber;StatusNumber;Voltage
          - type: duplicateColumn
            column: 2
            # Translate the first StatusNumber column into a PATROL Status
            # DeviceID;PATROLStatus;StatusNumber;Voltage
          - type: translate
            column: 2
            translationTable: "${translation::VoltageStatusTranslationTable}"
            # Translate the second StatusNumber column into a more readable string
            # DeviceID;PATROLStatus;StatusInformation;Voltage
          - type: translate
            column: 3
            translationTable: "${translation::VoltageStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1) (easy enough)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="voltage"}: $2
          hw.voltage: $4
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = uesensor -a|grep "^9004 " (keep only power supplies)
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9004 '
          separators: ' '
          selectColumns: "2,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          power_supply_type: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type = multi-instance (one pass for all power supplies)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = uesensor -a, again
          # DeviceID;StatusNumber
          type: osCommand
          commandLine: /usr/lpp/diagnostics/bin/uesensor -a
          keep: '^9004 '
          separators: ' '
          selectColumns: "2,3"
          computes:
            # Duplicate the status column
            # DeviceID;StatusNumber;StatusNumber
          - type: duplicateColumn
            column: 2
            # Translate the first StatusNumber column into a PATROL Status
            # DeviceID;PATROLStatus;StatusNumber
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
            # Translate the second StatusNumber column into a more readable string
            # DeviceID;PATROLStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1) (easy enough)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  VoltageStatusTranslationTable:
    "11": ok
    Default: failed
  PowerSupplyStatusTranslationTable:
    "11": ok
    Default: failed
  VoltageStatusInformationTranslationTable:
    "11": Normal
    Default: Failed
  PowerSupplyStatusInformationTranslationTable:
    "11": Normal
    Default: Failed
