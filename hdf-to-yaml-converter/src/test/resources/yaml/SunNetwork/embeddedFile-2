#!/bin/sh

# First of all, make sure the thing speaks english
LANG=C
export LANG

# Get the Solaris version, because kstat is not available in pre-Solaris 9
# and netstat -k is not available in Solaris 10...
OSVERSION=`/usr/bin/uname -r|/usr/bin/awk -F. '{print $2}'`

# Extract the name of the driver and the instance number
DRIVER=`/usr/bin/echo $1 | /usr/bin/sed -e "s/[0-9]*$//"`
INSTANCE=`/usr/bin/echo $1 | /usr/bin/sed -e "s/^$DRIVER//"`

# Print out the device ID
/usr/bin/echo "DeviceID $1"

####  KERNELSTAT Section (Statistics)

#
# Solaris 8 or earlier
#
if /usr/bin/test $OSVERSION -le 8; then
    # Check that ifconfig knows the card
    /usr/sbin/ifconfig $1 1>/dev/null 2>/dev/null;
    if [ $? -ne 0 ]; then
        /usr/sbin/ifconfig $1; exit;
    fi

    # Get KernelStat info (in this case netstat)
    KERNELSTAT=`/usr/bin/netstat -k $1|/usr/bin/awk '{
        for (i=1 ; i<=NF ; i++)
        {
            statName = $i;
            i++;
            statValue = $i;
            if ($(i+1) ~ /^[0-9]+$/)
            {
                i++;
                statValue = statValue * 4294967296 + $i;
            }
            print statName,statValue;
        }
    }'`
fi

#
# Solaris 9
#
if /usr/bin/test $OSVERSION -eq 9; then
    # Check that ifconfig knows the card
    /usr/sbin/ifconfig $1 1>/dev/null 2>/dev/null;
    if [ $? -ne 0 ]; then
        /usr/sbin/ifconfig $1; exit;
    fi
    # Get KernelStat Information
    KERNELSTAT=`/usr/bin/kstat -m $DRIVER -i $INSTANCE -n $1`
fi

#
# Solaris 10
#
if /usr/bin/test $OSVERSION -eq 10; then
    # Check that ifconfig knows the card
    /usr/sbin/ifconfig $1 1>/dev/null 2>/dev/null;
    if [ $? -eq 0 ]; then
        KERNELSTAT=`/usr/bin/kstat -m $DRIVER -i $INSTANCE -n $1`
    else
        %{SUDO:/usr/sbin/dladm}/usr/sbin/dladm show-aggr -p | grep $1 1>/dev/null;
        if [ $? -eq 0 ]; then
            # Port is part of a Solaris 10 Aggregate, so print information and exit
            %{SUDO:/usr/sbin/dladm}/usr/sbin/dladm show-dev -s -p $1 ;%{SUDO:/usr/sbin/dladm}/usr/sbin/dladm show-dev -p $1;exit
        else
            echo
            /usr/sbin/ifconfig $1
            echo /usr/sbin/ifconfig and dladm failed;
            echo If port is part of an aggregate, check that patrol user has rights to execute "/usr/sbin/dladm show-dev -s -p $1" and "/usr/sbin/dladm show-dev -p $1" or enable sudo
            echo Otherwise, check that port if plumbed and listed in the output of ifconfig -a
            exit;
        fi
    fi
fi

#
# Solaris 11
#
if /usr/bin/test $OSVERSION -eq 11; then
    KERNELSTAT=`/usr/bin/kstat link | /usr/bin/nawk -v port="$1" '{if ($1 ~ /module:/) {correctPort=0};if ($2 == port) {correctPort=1}; if (correctPort==1) {print $0}}'`
fi


# Print out the information provided by the kernel
/usr/bin/echo "$KERNELSTAT"

# Now, check whether we got the link information that we need
REQUIRESDLADM=0
LINKUP=`/usr/bin/echo "$KERNELSTAT"|/usr/bin/grep link_up`
if /usr/bin/test "$LINKUP" = ""; then
    REQUIRESDLADM=1
fi
LINKSPEED=`/usr/bin/echo "$KERNELSTAT"|/usr/xpg4/bin/grep -e link_speed -e ifspeed`
if /usr/bin/test "$LINKSPEED" = ""; then
    REQUIRESDLADM=1
fi
LINKDUPLEX=`/usr/bin/echo "$KERNELSTAT"|/usr/xpg4/bin/grep -e link_duplex -e duplex`
if /usr/bin/test "$LINKDUPLEX" = ""; then
    REQUIRESDLADM=1
fi


#### dladm and maybe ndd section (link status, etc.)

if /usr/bin/test $REQUIRESDLADM = 1; then

    # We will try ndd if dladm fails (by default, we consider dladm is going to fail, and if successful, we cancel the ndd try)
    REQUIRESNDD=1

    # Solaris 10 or earlier
    if /usr/bin/test $OSVERSION -le 10; then

        # Try dladm if dladm is available
         if /usr/bin/test -x /usr/sbin/dladm; then
             echo Trying dladm
             DLADMOUTPUT=`%{SUDO:/usr/sbin/dladm}/usr/sbin/dladm show-dev $1`
             if /usr/bin/test $? = 0; then
                 REQUIRESNDD=0
                 echo "$DLADMOUTPUT" | /usr/bin/awk '{
                                            if ($2 ~ /link:/ && $3 ~ /up/) {print "link_status 1"}
                                            if ($2 ~ /link:/ && $3 ~ /down/) {print "link_status 0"}
                                            if ($4 ~ /speed:/ && $6 ~ /[Mm]bps/) {print "link_speed " $5}
                                            if ($4 ~ /speed:/ && $6 ~ /[Gg]bps/) {print "link_speed " $5*1000}
                                            if ($7 ~ /duplex:/ ) {print "duplex " $8}
                                                     }'
            fi
        fi

        # If dladm failed, we will have a last try with ndd
        if /usr/bin/test $REQUIRESNDD = 1; then

            if /usr/bin/test "$DRIVER" = "dmfe" -o "$DRIVER" = "bge" -o "$DRIVER" = "e1000g" -o "$DRIVER" = "rge"; then
                NDDDEV=/dev/$1
            else
                %{SUDO:/usr/sbin/ndd}/usr/sbin/ndd -set /dev/$DRIVER instance $INSTANCE 2>/dev/null
                NDDDEV=/dev/$DRIVER
            fi

            # Check we have rights to execute ndd
            if `%{SUDO:/usr/sbin/ndd}/usr/sbin/ndd $NDDDEV ? >/dev/null 2>/dev/null`; then

                VALUE=`%{SUDO:/usr/sbin/ndd}/usr/sbin/ndd $NDDDEV link_status 2>/dev/null`;  if /usr/bin/test $? = 0; then /usr/bin/echo "link_status $VALUE"; else $REQUIRESDLADM=1; fi
                VALUE=`%{SUDO:/usr/sbin/ndd}/usr/sbin/ndd $NDDDEV link_speed 2>/dev/null`; if /usr/bin/test $? = 0; then /usr/bin/echo "link_speed $VALUE"; fi
                VALUE=`%{SUDO:/usr/sbin/ndd}/usr/sbin/ndd $NDDDEV link_mode 2>/dev/null`; if /usr/bin/test $? -eq 0; then /usr/bin/echo "link_mode $VALUE"; fi
                VALUE=`%{SUDO:/usr/sbin/ndd}/usr/sbin/ndd $NDDDEV link_duplex 2>/dev/null`; if /usr/bin/test $? -eq 0; then /usr/bin/echo "link_duplex $VALUE"; fi

            else

                echo insufficient rights to execute ndd on $1
            fi
        fi

    fi

    # Solaris 11  (dladm only)
    if /usr/bin/test $OSVERSION -ge 11; then
    %{SUDO:/usr/sbin/dladm}/usr/sbin/dladm show-ether -p -o LINK,STATE,SPEED-DUPLEX $1 | /usr/bin/nawk 'BEGIN{FS=":"} {
                            if ($2 ~ /up/ ) {print "link_status 1"}
                            if ($2 ~ /down/ ) {print "link_status 0"}
                      if ($3 ~ /M/) {speed=$3
                                     gsub(/M.*/,"",speed)
                                     print "link_speed " speed}
                      if ($3 ~ /G/) {speed=$3
                                     gsub(/G.*/,"000",speed)
                                     print "link_speed " speed}
                      if ($3 ~ /-f/) {print "duplex full" }
                                                                         }'
    fi
fi