---
embedded:
  EmbeddedFile(1): "BEGIN {basetype=\"\"}\n$0 ~ /<OBJECT/ && $0 ~ /basetype=/ {for (i=1; i<=NF; i++) {if ($i ~ /^basetype=/) {basetype=$i;gsub(/(^.*=\")|(\"$)/,\"\",basetype);\n\t                                                                               }\n\t                                                        }\n\t                                 }\n\nfunction setValue(value) {value=$0\n\t                        gsub(\"</PROPERTY>.*\",\"\",value);\n\t                        gsub(\"^.*<PROPERTY.*>\",\"\",value)\n\t                        return value}\n\n\n#Extract Enclosure information\n# G1 and G2 use \"system\", G3 uses \"system-information\"\nbasetype == \"system-information\" {basetype = \"system\"}\n($1 ~ /<PROPERTY/ && basetype == \"system\") {\n     if ($0 ~ /name=\"system-name\"/) {DisplayName=setValue($0)}\n     if ($0 ~ /name=\"vendor.name\"/) {vendor=setValue($0)}\n     if ($0 ~ /name=\"product.id\"/)  {model=setValue($0)}\n    }\n$1 ~ \"/OBJECT\" && (basetype == \"system\" || basetype == \"system-information\") {print (\"MSHW;\"basetype\";\"DisplayName\";\"vendor\";\"model\";\");\n\t                                         basetype=\"\";DisplayName=\"\";vendor=\"\";model=\"\";\n\t                                        }\n\n#Extract Blade Information (enclosure-environmental / enclosure-sku)\n($1 ~ /<PROPERTY/ && basetype == \"enclosure-sku\") {basetype=\"enclosure-environmental\"\n\t                                                 bladeID=\"System\"\n\t                                                }\n\n($1 ~ /<PROPERTY/ && basetype == \"enclosure-environmental\") {\n\t   if ($0 ~ /name=\"sku.partnumber\"/) {productID=setValue($0)}\n     if ($0 ~ /name=\"sku.serialnumber\"/) {bladeSerial=setValue($0)}\n     if ($0 ~ /name=\"chassis\"/) {bladeSerial=setValue($0)}\n     if ($0 ~ /name=\"id\"/) {bladeID=setValue($0)}\n     if ($0 ~ /name=\"status\"/)  {healthnumeric=tolower(setValue($0))}\n     if ($0 ~ /name=\"Product ID\"/) {productID=setValue($0)}\n    }\n$1 ~ \"/OBJECT\" && basetype == \"enclosure-environmental\" {print (\"MSHW;\"basetype\";\"bladeSerial\";\"bladeID\";\"healthnumeric\";\"productID\";\");\n\t                                       basetype=\"\";bladeSerial=\"\";bladeID=\"\";healthnumeric=\"\";productID=\"\";\n                                                                      }\n\n#Extract Controllers information\n($1 ~ /<PROPERTY/ && basetype == \"controllers\") {\n     if ($0 ~ /name=\"controller.id\"/) {ID=setValue($0)}\n     if ($0 ~ /name=\"serial.number\"/) {serialnumber=setValue($0)}\n     if ($0 ~ /name=\"sc.fw\"/) {firmwareversion=setValue($0)}\n     if ($0 ~ /name=\"health.numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"health.reason\"/) {healthreason=setValue($0)}\n     if ($0 ~ /name=\"position\"/) {position=setValue($0)}\n     if ($0 ~ /name=\"description\"/) {description=setValue($0)}\n     }\n\n\n# Print Must Matchup with Compact Flash\n$1 ~ \"/OBJECT\" && basetype == \"controllers\" {print (\"MSHW;\"basetype\";CTRL-\"ID\";\"healthnumeric\";\"healthreason\";\"position\";\"description\";SN: \"serialnumber\";SC FW: \"firmwareversion\";\");\n\t                                         basetype=\"\";ID=\"\";serialnumber=\"\";firmwareversion=\"\";healthnumeric=\"\";healthreason=\"\";position=\"\";description=\"\";\n\t                                        }\n\n#Extract Management Port information\n\n($1 ~ /<PROPERTY/ && basetype == \"network-parameters\") {\n     if ($0 ~ /name=\"durable.id\"/) {ID=setValue($0)}\n     if ($0 ~ /name=\"network-parameters\"/) {ipaddress=setValue($0)}\n     if ($0 ~ /name=\"health-numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"healthreason\"/) {healthreason=setValue($0)}\n     if ($0 ~ /name=\"mac-address\"/) { macaddress=setValue($0)}\n     }\n# Print Must Matchup with FC Ports\n$1 ~ \"/OBJECT\" && basetype == \"network-parameters\" {print (\"MSHW;\"basetype\";\"ID\";Ethernet;\"        \";\"           \";\"healthnumeric\";\"healthreason\";\");\n\t                                         basetype=\"\";ID=\"\";ipaddress=\"\";healthnumeric=\"\";healthreason=\"\";macaddress=\"\";addresstype=\"\";\n\t                                        }\n\n#Extract FC Port information\n#G1 and G2\n\n($1 ~ /<PROPERTY/ && basetype == \"port\") {\n     if ($0 ~ /name=\"port\"/) {ID=setValue($0)}\n     if ($0 ~ /name=\"media\"/) {media=setValue($0)}\n     if ($0 ~ /name=\"target.id\"/) {targetid=setValue($0)}\n     if ($0 ~ /name=\"actual.speed\"/) {actualspeed=setValue($0);gsub(/[gG][Bb]/,\"000\",actualspeed);}\n     if ($0 ~ /name=\"health.numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"health.reason\"/) {healthreason=setValue($0);gsub(/Host port is OK/,\"\",healthreason)}\n     }\n#G3\n($1 ~ /<PROPERTY/ && basetype == \"name\") {\n     if ($0 ~ /name=\"controller\"/) {ID=\"Ctlr-\" setValue($0) ID}\n     if ($0 ~ /name=\"channel\"/) {ID=ID \" Ch-\" setValue($0) }\n     if ($0 ~ /name=\"media\"/) {media=setValue($0);if (media==\"SAS\") {basetype=\"\";ID=\"\";media=\"\";targetid=\"\";actualspeed=\"\";healthnumeric=\"\";healthreason=\"\";}}\n     if ($0 ~ /name=\"actual.speed\"/) {actualspeed=setValue($0);gsub(/[gG][Bb]*/,\"000\",actualspeed);gsub(/[\\.A-Za-z]/,\"\",actualspeed);}\n     if ($0 ~ /name=\"status\"/) {healthnumeric=setValue($0);if (status==\"Not Present\") {basetype=\"\"}}\n     }\n# Print Must Matchup with Management Ports\n$1 ~ \"/OBJECT\" && (basetype == \"port\" || ( basetype == \"name\" && media != \"\") ) {basetype = \"port\"\n\t                                         print (\"MSHW;\"basetype\";\"ID\";\"media \";\"targetid\";\"actualspeed\";\"healthnumeric\";\"healthreason\";\");\n\t                                         basetype=\"\";ID=\"\";media=\"\";targetid=\"\";actualspeed=\"\";healthnumeric=\"\";healthreason=\"\";\n\t                                        }\n\n#Extract compact-flash information\n($1 ~ /<PROPERTY/ && basetype == \"compact-flash\") {\n     if ($0 ~ /name=\"controller.id\"/) {ID=setValue($0)}\n     if ($0 ~ /name=\"name\"/) {name=setValue($0)}\n     if ($0 ~ /name=\"cache.flush\"/) {cacheflush=setValue($0)}\n     if ($0 ~ /name=\"health.numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"healthreason\"/) {healthreason=setValue($0);gsub(/CompactFlash is OK./,\"\",healthreason);}\n     }\n# Print Must Matchup with Controllers\n$1 ~ \"/OBJECT\" && basetype == \"compact-flash\" {print (\"MSHW;\"basetype\";CF-\"ID\";\"healthnumeric\";\"cacheflush\" \"healthreason\";\"        \";\"name       \";\"            \";\");\n\t                                                            basetype=\"\";ID=\"\";name=\"\";cacheflush=\"\";healthnumeric=\"\";healthreason=\"\";\n\t                                        }\n\n#Extract drives information\n# G1 and G2 use \"drives\", G3 uses \"drive\"\nbasetype == \"drive\" {basetype = \"drives\"}\n($1 ~ /<PROPERTY/ && basetype == \"drives\") {\n     if ($0 ~ /name=\"location\"/) {ID=setValue($0)}\n     if ($0 ~ /name=\"enclosure.id\"/) {enclosureid=setValue($0)}\n     if ($0 ~ /name=\"serial.number\"/) {serialnumber=setValue($0)}\n     if ($0 ~ /name=\"vendor\"/) {vendor=setValue($0)}\n     if ($0 ~ /name=\"model\"/) {model=setValue($0)}\n     if ($0 ~ /name=\"revision\"/) {revision=setValue($0)}\n     if ($0 ~ /name=\"type\"/) {type=setValue($0)}\n     if ($0 ~ /name=\"size\"/) {size=setValue($0)}\n     if ($0 ~ /name=\"size.numeric\"/) {sizenumeric=setValue($0)}\n     if ($0 ~ /name=\"health.numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"health.reason\"/) {healthreason=setValue($0)}\n #G3 Specific\n     if ($0 ~ /name=\"status\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"size\" units=\"gb\"/) {size=setValue($0)}\n     }\n$1 ~ \"/OBJECT\" && basetype == \"drives\" {print (\"MSHW;\"basetype\";\"ID\";\"enclosureid\";\"serialnumber\";\"vendor\";\"model\";\"revision\";\"type\";\"size\";\"sizenumeric\";\"healthnumeric\";\"healthreason\";\");\n\t                                                    basetype=\"\";ID=\"\";enclosureid=\"\";serialnumber=\"\";vendor=\"\";model=\"\";revision=\"\";type=\"\";size=\"\";sizenumeric=\"\";healthnumeric=\"\";healthreason=\"\";\n\t                                        }\n\n#Extract virtual-disks information\n# G1 and G2 use \"virtual-disks\", G3 uses \"virtual-disk\"\nbasetype == \"virtual-disk\" {basetype = \"virtual-disks\"}\n ($1 ~ /<PROPERTY/ && basetype == \"virtual-disks\") {\n     if ($0 ~ /name=\"name\"/) {name=setValue($0)}\n     if ($0 ~ /name=\"size\"/) {size=setValue($0)}\n     if ($0 ~ /name=\"size.numeric\"/) {sizenumeric=setValue($0)}\n     if ($0 ~ /name=\"freespace\"/) {freespace=setValue($0)}\n     if ($0 ~ /name=\"freespace.numeric\"/) {freespacenumeric=setValue($0)}\n     if ($0 ~ /name=\"raidtype\"/) {raidtype=setValue($0)}\n     if ($0 ~ /name=\"diskcount\"/) {diskcount=setValue($0);diskcount=\"Disk Count: \" diskcount;}\n     if ($0 ~ /name=\"health.numeric\"/) {healthnumeric=setValue($0)}\n     if ($0 ~ /name=\"health.reason\"/) {healthreason=setValue($0)}\n#G3 Specific\n        if ($0 ~ /name=\"status\"/) {healthnumeric=setValue($0)\n        \t                         healthreason=setValue($0)\n# Translate the Health Reason Here to avoid conflict with G1/G2 healthreason\n                                   gsub(\"CRIT\",\"Critical\",healthreason)\n                                   gsub(\"FTDN\",\"Fault tolerant with down disks\",healthreason)\n                                   gsub(\"FTOL\",\"Fault tolerant and online\",healthreason)\n                                   gsub(\"OFFL\",\"Offline\",healthreason)\n                                   gsub(\"QTCR\",\"Quarantined critical\",healthreason)\n                                   gsub(\"QTDN\",\"Quarantined with down disks\",healthreason)\n                                   gsub(\"QTOF\",\"Quarantined offline\",healthreason)\n                                   gsub(\"STOP\",\"Stopped\",healthreason)\n                                   gsub(\"U[Pp]\",\"Up. No Fault Tolerance Attributes\",healthreason)\n                                   gsub(\"UNKN\",\"Unknown\",healthreason)\n        \t                         }\n    if ($0 ~ /name=\"blocks\"/) {sizenumeric=setValue($0)\n    \t                         blocksize=$0\n    \t                         gsub(/^.*blocksize=\"/,\"\",blocksize);\n\t                             gsub(/\".*$/,\"\",blocksize)\n                               sizenumeric=sizenumeric * blocksize / 512;\n    \t                        }\n\n     }\n$1 ~ \"/OBJECT\" && basetype == \"virtual-disks\" {print (\"MSHW;\"basetype\";\"name\";\"size\";\"sizenumeric\";\"freespace\";\"freespacenumeric\";\"raidtype\";\"diskcount\";\"healthnumeric\";\"healthreason\";\");\n\t                                                    basetype=\"\";name=\"\";size=\"\";sizenumeric=\"\";freespace=\"\";freespacenumeric=\"\";raidtype=\"\";diskcount=\"\";healthnumeric=\"\";healthreason=\"\";\n\t                                        }\n\n#Extract enclosure-components information (FANS, TEMPERATURES, VOLTAGES, POWER SUPPLIES)\n# G1 and G2 use \"enclosure-components\", G3 uses \"patr\"\nbasetype == \"enclosure-component\" {basetype = \"enclosure-components\"}\n($1 ~ /<PROPERTY/ && basetype == \"enclosure-components\") {\n     if ($0 ~ /name=\"type\"/) {type=setValue($0)}\n     if ($0 ~ /name=\"enclosure.unit.number\"/) {enclosureunitnumber=setValue($0)}\n     if ($0 ~ /name=\"status\"/) {status=setValue($0);status=tolower(status);if (status==\"absent\") {basetype=\"\"}}\n     if ($0 ~ /name=\"fru.partnnumber\"/) {partnnumber=setValue($0)}\n     if ($0 ~ /name=\"fru.serialnumber\"/) {serialnumber=setValue($0)}\n     if ($0 ~ /name=\"additional.data\"/) {additionaldata=setValue($0);property=$0;gsub(/[^0-9.]/,\"\",additionaldata)}\n     if ($0 ~ /name=\"FRU S.N\"/) {componentSN=setValue($0)}\n     }\n$1 ~ \"/OBJECT\" && basetype == \"enclosure-components\" {if (type !~ /[Dd]isk/) {\n\t                                                       print (\"MSHW;\"basetype\";\"type\";\"enclosureunitnumber\";\"status\";Part Number: \"partnnumber\"; \"serialnumber\";\"additionaldata\";\"componentSN\";\");\n\t                                                       basetype=\"\";type=\"\";name=\"\";enclosureunitnumber=\"\";status=\"\";partnnumber=\"\";serialnumber=\"\";additionaldata=\"\";componentSN=\"\";\n\t                                                                              }\n\t                                                      }\n\n# Other G3s have seperate FAN and Power Supply Sections\n($1 ~ /<PROPERTY/ && basetype == \"fan\") {\n     if ($0 ~ /name=\"location\"/) {location=setValue($0)}\n\t   if ($0 ~ /name=\"status\"/) {status=setValue($0);status=tolower(status);if (status==\"not present\" || status==\"disconnected\") {basetype=\"\"}}\n     if ($0 ~ /name=\"speed\"/) {speed=setValue($0)}\n     }\n$1 ~ \"/OBJECT\" && basetype == \"fan\" {print (\"MSHW;\"basetype\";;\"location\";\"status\";;;;system;\");\n\t                                                       basetype=\"\";location=\"\";status=\"\";\n\t                                                      }\n\n($1 ~ /<PROPERTY/ && basetype == \"power-supplies\") {\n     if ($0 ~ /name=\"location\"/) {location=setValue($0)}\n     if ($0 ~ /name=\"serial.number\"/) {serialnumber=setValue($0)}\n     if ($0 ~ /name=\"configuration.serialnumber\"/) {componentSN=setValue($0)}\n\t   if ($0 ~ /name=\"status\"/) {status=setValue($0);status=tolower(status);if (status==\"not present\" || status==\"disconnected\") {basetype=\"\"}}\n     if ($0 ~ /name=\"part.number\"/) {partnnumber=setValue($0)}\n     }\n$1 ~ \"/OBJECT\" && basetype == \"power-supplies\" {print (\"MSHW;\"basetype\";;Location: \"location\";\"status\";Part Number: \"partnnumber\"; \"serialnumber\";;system;\");\n\t                                                       basetype=\"\";location=\"\";status=\"\";partnnumber=\"\";serialnumber=\"\";\n\t                                                      }\n\n\n\n#Extract the Component to EnvEnc (Blade) table\n# G3s do not use basetype for these variables, using a different test:\n$0 ~ /<OBJECT/ && $0 ~ /name=\"enclosure-fru\"/ {basetype = \"enclosure-fru\"}\n$0 ~ /<OBJECT/ && $0 ~ /name=\"midplane-fru\"/ {basetype = \"enclosure-fru\"}\n\n($1 ~ /<PROPERTY/ && basetype == \"enclosure-fru\") {\n     if ($0 ~ /name=\"Configuration SN\"/) {bladeSN=setValue($0)}\n     if ($0 ~ /name=\"Serial Number\"/) {componentSN=setValue($0)}\n     if ($0 ~ /name=\"FRU Location\"/) {componentID=setValue($0)}\n     }\n$1 ~ \"/OBJECT\" && basetype == \"enclosure-fru\" {print (\"MSHW;\"basetype\";\"bladeSN\";\"componentSN\";\"componentID\";\")\n\t                                                basetype=\"\";bladeSN=\"\";componentSN=\"\";componentID=\"\"\n\t                                               }"
translations:
  EnclosureComponentsStatusTranslationTable:
    n/a: "UNKNOWN"
    default: "failed"
    fault: "failed"
    warning: "failed"
    up: "ok"
    ok: "ok"
    degraded: "degraded"
    error: "degraded"
    unknown: "UNKNOWN"
  PhysicalDiskHealthNumericTranslationTable:
    "0": "ok"
    "1": "degraded"
    n/a: "UNKNOWN"
    default: "failed"
    fault: "ok"
    up: "ok"
    degraded: "ok"
    unknown: "UNKNOWN"
  LogicalDiskHealthNumericTranslationTable:
    qtcr: "degraded"
    ftdn: "degraded"
    offl: "failed"
    unkn: "UNKNOWN"
    qtof: "failed"
    "0": "ok"
    "1": "degraded"
    default: "failed"
    crit: "failed"
    stop: "failed"
    qtdn: "degraded"
    ftol: "ok"
    up: "ok"
  NetworkLinkStatusTranslationTable:
    disconnected: "degraded"
    default: "ok"
    "4": "degraded"
  OtherDeviceHealthNumericTranslationTable:
    "0": "ok"
    "1": "degraded"
    default: "failed"
  NetworkCardStatusTranslationTable:
    "0": "ok"
    "1": "degraded"
    not present: ""
    disconnected: "ok"
    default: "failed"
    "4": "ok"
    warning: "degraded"
    up: "ok"
    error: "failed"
    unknown: "UNKNOWN"
connector:
  displayName: "HP MSA 2000 & P2000"
  platforms: "HP StorageWorks MSA P2000"
  reliesOn: "HP MSA Management Card"
  version: "1.0"
  information: "This connector discovers the Environmental, Physical Disk, Logical Disk, Management Network Cards and Fibre Ports on P2000 / MSA Series Filers. We recommend setting the collection interval for all MSA Disk arrays to at least 15 minutes to prevent the management card from being overloaded."
  detection:
    connectionTypes:
    - "remote"
    appliesTo:
    - "Storage"
    supersedes:
    - "MIB2"
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          computes:
            # Now process this information through an awk script to get a table of all parameters
            # Various Table Configurations depending on component type
            # MSHW;basetype;....................
          - type: "awk"
            script: "EmbeddedFile(1)"
            separators: ";"
            keep: "^MSHW;"
        source(2):
          # Make a copy of Table 1 so that a clean copy can be used by other discoveries
          # MSHW;basetype;....................
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "system"
            # MSHW;basetype;DisplayName;vendor;model;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^system$"
        source(3):
          # Get another copy of Enclosure 1 to get SKU information
          # Make a copy of Table 1 so that a clean copy can be used by other discoveries
          # MSHW;basetype;....................
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-sku"
            # Last column artificially set in awk script to "system" to match up in table join
            # MSHW;basetype;skupartnumber;skuserialnumber;"system"
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure-sku$"
        source(4):
          # Source(4) = Table joint of source(2) and source(3)
          # MSHW;basetype;DisplayName;vendor;model;basetype;skupartnumber;skuserialnumber;basetype;
          type: "tableJoin"
          leftTable: "$monitors.enclosure.discovery.sources.source(2)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(3)$"
          leftKeyColumn: 1
          rightKeyColumn: 5
          defaultRightLine: ";;;"
          computes:
          - type: "leftConcat"
            column: 7
            value: "Part Number: "
        source(5):
          # Now going to try and sort out the component to enclosure
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only enclosure fru's, i.e. component to blade
            # MSHW;basetype;bladeSN;componentSN;componentID;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure-fru$"
        source(6):
          # Now getting blade info
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only enclosure environmental i.e. blade info
            # MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.environmental$"
        source(7):
          # Join the Component to Blade table with the Blade Info Table
          # MSHW;basetype;bladeSN;componentSN;componentID;MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
          type: "tableJoin"
          leftTable: "$monitors.enclosure.discovery.sources.source(5)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(6)$"
          leftKeyColumn: 3
          rightKeyColumn: 3
          computes:
            # Filter out unwated columns
            #   1      2       3         4           5        6      7        8         9        10            11
            # MSHW;basetype;bladeSN;componentSN;componentID;MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
            #             #         componentSN;componentID;            #             bladeID;             ;productID;
          - type: "keepColumns"
            columnNumbers: "4,5,9,11"
            # Add the blade ID to the ProductID
            # componentSN;componentID;bladeID;productID;
          - type: "rightConcat"
            column: 4
            value: "Column(3)"
            # Add a dash to the product ID
            # componentSN;componentID;bladeID;productID;
          - type: "rightConcat"
            column: 4
            value: "-"
            # Add the componentID to the productID
            # componentSN;componentID;bladeID;productID;
          - type: "rightConcat"
            column: 4
            value: "Column(2)"
            # Add a dash to the product ID
            # componentSN;componentID;bladeID;productID;
          - type: "rightConcat"
            column: 4
            value: "-"
            # Add a Attach to Device type of Blade
            # componentSN;componentID;bladeID;productID;AttachToType;
          - type: "rightConcat"
            column: 4
            value: ";Blade"
      mapping:
        # The Enclosure Instance Table
        # MSHW;basetype;DisplayName;vendor;model;basetype;skupartnumber;skuserialnumber;basetype;
        source: "$monitors.enclosure.discovery.sources.source(4)$"
        attributes:
          id: "HPMSA2000"
          __display_id: "$column(3)"
          vendor: "$column(4)"
          model: "$column(5)"
          serial_number: "$column(8)"
          type: "Storage"
          info: "$column(7)"
          name: "sprintf(\"%s (%s %s - %s)\", $column(3), $column(4), $column(5), \"Storage\")"
    collect:
      type: "multiInstance"
      sources:
        source(1):
          computes:
            # Now process this information through an awk script to get a table of all parameters
            # Various Table Configurations depending on component type
            # MSHW;basetype;....................
          - type: "awk"
            script: "EmbeddedFile(1)"
            separators: ";"
            keep: "^MSHW;"
        source(2):
          # Source(2) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "system"
            # MSHW;basetype;ID;vendor;model;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^system$"
      mapping:
        # ValueTable = Source(2)
        # basetype;ID;vendor;model;
        source: "$monitors.enclosure.collect.sources.source(2)$"
        deviceId: "HPMSA2000"
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-environmental"
            # MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.environmental$"
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.blade.discovery.sources.source(1)$"
        attributes:
          id: "$column(4)"
          model: "$column(6)"
          serial_number: "$column(3)"
          hw.parent.type: "enclosure"
          hw.parent.id: "HPMSA2000"
          name: "sprintf(\"%s (%s)\", $column(4), $column(6))"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.environmental$"
            # Translate the healthnumeric
            # MSHW;basetype;bladeSerial;bladeID;healthnumeric;productID;
          - type: "translate"
            column: 5
            translationTable: "EnclosureComponentsStatusTranslationTable"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.blade.collect.sources.source(1)$"
        deviceId: "$column(4)"
        metrics:
          hw.status{hw.type="blade"}: "$column(5)"
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "controllers or compact flash"
            # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(controllers\\)\\|\\(compact.flash\\)$"
            # Exclude second controller in single controller systems
            # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
          - type: "excludeMatchingLines"
            column: 5
            regExp: "\\(single controller only\\)\\|\\(Disabled\\)"
          - type: "leftConcat"
            column: 6
            value: "Location: "
          - type: "leftConcat"
            column: 9
            value: "firmwareversion: "
          - type: "leftConcat"
            column: 8
            value: "serialnumber: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
        source: "$monitors.other_device.discovery.sources.source(1)$"
        attributes:
          id: "$column(3)"
          device_type: "$column(7)"
          info: "join($column(6), $column(8), $column(9), \" \")"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s: %s\", $column(7), $column(3))"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "controllers or compact flash"
            # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(controllers\\)\\|\\(compact.flash\\)$"
            # Translate the healthnumeric
            # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
          - type: "translate"
            column: 4
            translationTable: "OtherDeviceHealthNumericTranslationTable"
      mapping:
        # The value table
        # MSHW;basetype;ID;healthnumeric;healthreason;position;description;serialnumber;firmwareversion;
        source: "$monitors.other_device.collect.sources.source(1)$"
        deviceId: "$column(3)"
        metrics:
          hw.status{hw.type="other_device"}: "$column(4)"
        legacyTextParameters:
          StatusInformation: "$column(5)"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "drives"
            # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^drives$"
            # Convert SizeNumeric to bytes
            # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
          - type: "multiply"
            column: 11
            value: "512"
          - type: "leftConcat"
            column: 9
            value: "Type: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
        source: "$monitors.physical_disk.discovery.sources.source(1)$"
        attributes:
          id: "$column(3)"
          serial_number: "$column(5)"
          vendor: "$column(6)"
          model: "$column(7)"
          firmware_version: "$column(8)"
          info: "$column(9)"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(7), $column(11))"
        metrics:
          hw.physical_disk.size: "$column(11)"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "drives"
            # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^drives$"
            # Translate the healthnumeric
            # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
          - type: "translate"
            column: 12
            translationTable: "PhysicalDiskHealthNumericTranslationTable"
      mapping:
        # The value table
        # MSHW;basetype;ID;enclosureid;serialnumber;vendor;model;revision;type;size;sizenumeric;healthnumeric;healthreason;
        source: "$monitors.physical_disk.collect.sources.source(1)$"
        deviceId: "$column(3)"
        metrics:
          hw.status{hw.type="physical_disk"}: "$column(12)"
        legacyTextParameters:
          StatusInformation: "$column(13)"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.components$"
            # Keep only components of type "Temp"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "keepOnlyMatchingLines"
            column: 3
            regExp: "^[Tt][Ee][Mm][Pp]"
        source(2):
          # Join the Temperature table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.temperature.discovery.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
          - type: "leftConcat"
            column: 4
            value: "Part Number: "
          - type: "leftConcat"
            column: 7
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
        source: "$monitors.temperature.discovery.sources.source(2)$"
        attributes:
          id: "$column(4)"
          info: "join($column(6), $column(7), \" \")"
          hw.parent.type: "enclosure"
          hw.parent.id: "$column(12)"
          name: "$column(4)"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.components$"
            # Keep only components of type "Temp"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "keepOnlyMatchingLines"
            column: 3
            regExp: "^[Tt][Ee][Mm][Pp]"
            # Translate the healthnumeric
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "translate"
            column: 5
            translationTable: "EnclosureComponentsStatusTranslationTable"
        source(2):
          # Join the Fan table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.temperature.collect.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.temperature.collect.sources.source(2)$"
        deviceId: "$column(4)"
        metrics:
          hw.status{hw.type="temperature"}: "$column(5)"
          hw.temperature: "$column(8)"
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(enclosure.components\\)\\|\\(fan\\)$"
            # Keep only components of type "Fan" or ""  (note the RegEx is a negative Exclude
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "excludeMatchingLines"
            column: 3
            regExp: "^[^Ff]*[^Aa]*[^Nn]*$"
        source(2):
          # Join the Fan table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.fan.discovery.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          defaultRightLine: ";;HPMSA2000;;Enclosure;"
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
          - type: "leftConcat"
            column: 7
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
        source: "$monitors.fan.discovery.sources.source(2)$"
        attributes:
          id: "$column(4)"
          info: "join($column(6), $column(7), \" \")"
          hw.parent.type: "$column(14)"
          hw.parent.id: "$column(12)"
          name: "$column(4)"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(enclosure.components\\)\\|\\(fan\\)$"
            # Keep only components of type "Fan" or ""  (note the RegEx is a negative Exclude
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "excludeMatchingLines"
            column: 3
            regExp: "^[^Ff]*[^Aa]*[^Nn]*$"
            # Translate the healthnumeric
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "translate"
            column: 5
            translationTable: "EnclosureComponentsStatusTranslationTable"
        source(2):
          # Join the Fan table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.fan.collect.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          defaultRightLine: ";;HPMSA2000;;"
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.fan.collect.sources.source(2)$"
        deviceId: "$column(4)"
        metrics:
          hw.status{hw.type="fan"}: "$column(5)"
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(enclosure.components\\)\\|\\(power.supplies\\)$"
            # Keep only components of type "PSU" or ""  (note the RegEx is a negative Exclude
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "excludeMatchingLines"
            column: 3
            regExp: "^[^Pp]*[^Ss]*[^Uu]*$"
        source(2):
          # Join the PowerSupply table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.power_supply.discovery.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          defaultRightLine: ";;HPMSA2000;;Enclosure;"
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 7
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
        source: "$monitors.power_supply.discovery.sources.source(2)$"
        attributes:
          id: "$column(4)"
          info: "join($column(6), $column(7), \" \")"
          hw.parent.type: "$column(14)"
          hw.parent.id: "$column(12)"
          name: "sprintf(\"%s, $column(4))"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(enclosure.components\\)\\|\\(power.supplies\\)$"
            # Keep only components of type "PSU" or ""  (note the RegEx is a negative Exclude
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "excludeMatchingLines"
            column: 3
            regExp: "^[^Pp]*[^Ss]*[^Uu]*$"
            # Translate the healthnumeric
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;
          - type: "translate"
            column: 5
            translationTable: "EnclosureComponentsStatusTranslationTable"
        source(2):
          # Join the PowerSupply table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.power_supply.collect.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          defaultRightLine: ";;HPMSA2000;;"
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.power_supply.collect.sources.source(2)$"
        deviceId: "$column(4)"
        metrics:
          hw.status{hw.type="power_supply"}: "$column(5)"
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.components$"
            # Keep only components of type "Voltage"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 3
            regExp: "^[Vv][Oo][Ll][Tt]"
        source(2):
          # Join the Voltage table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.voltage.discovery.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Part Number: "
          - type: "leftConcat"
            column: 6
          - type: "leftConcat"
            column: 7
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
        source: "$monitors.voltage.discovery.sources.source(2)$"
        attributes:
          id: "$column(4)"
          info: "join($column(6), $column(7), \" \")"
          hw.parent.type: "blade"
          hw.parent.id: "$column(12)"
          name: "$column(4)"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "enclosure-components"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^enclosure.components$"
            # Keep only components of type "Voltage"
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "keepOnlyMatchingLines"
            column: 3
            regExp: "^[Vv][Oo][Ll][Tt]"
            # Translate the healthnumeric
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "translate"
            column: 5
            translationTable: "EnclosureComponentsStatusTranslationTable"
            # Convert Volts to MilliVolts
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;
          - type: "multiply"
            column: 8
            value: "1000"
        source(2):
          # Join the Voltage table with the component identifier table (ENC.DISC.7)
          # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          type: "tableJoin"
          leftTable: "$monitors.voltage.collect.sources.source(1)$"
          rightTable: "$monitors.enclosure.discovery.sources.source(7)$"
          leftKeyColumn: 9
          rightKeyColumn: 1
          computes:
            # Add the type to the ID:
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(3)"
            # Add component description to the ID
            # MSHW;basetype;type;enclosureunitnumber;status;partnnumber;serialnumber;additionaldata;componentSN;componentSN;componentID;bladeID;componentDescription;AttachToType;
          - type: "leftConcat"
            column: 4
            value: "Column(13)"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.voltage.collect.sources.source(2)$"
        deviceId: "$column(4)"
        metrics:
          hw.status{hw.type="voltage"}: "$column(5)"
          hw.voltage: "$column(8)"
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "port or network-parameters"
            # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(port\\)\\|\\(network.parameters\\)$"
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthreason;
        source: "$monitors.network.discovery.sources.source(1)$"
        attributes:
          id: "$column(3)"
          device_type: "$column(4)"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s)\", $column(3), $column(4))"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "port or network-parameters"
            # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^\\(port\\)\\|\\(network.parameters\\)$"
            # Duplicate the Health Numeric column
            # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthnumeric;healthreason;
          - type: "duplicateColumn"
            column: 7
            # Translate the First Health Numeric into a Patrol Status
            # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthnumeric;healthreason;
          - type: "translate"
            column: 7
            translationTable: "NetworkCardStatusTranslationTable"
            # Translate the First Health Numeric into a LinkStatus
            # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthnumeric;healthreason;
          - type: "translate"
            column: 8
            translationTable: "NetworkLinkStatusTranslationTable"
      mapping:
        # ValueTable = Source(1)
        # MSHW;basetype;ID;media;targetid;actualspeed;healthnumeric;healthnumeric;healthreason;
        source: "$monitors.network.collect.sources.source(1)$"
        deviceId: "$column(3)"
        legacyTextParameters:
          StatusInformation: "$column(9)"
        metrics:
          hw.network.up: "legacyLinkStatus($column(8))"
          hw.network.bandwidth.limit: "megaBit2Bit($column(6))"
          hw.status{hw.type="network"}: "$column(7)"
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only components of basetype "virtual.disks"
            # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^virtual.disks$"
            # Convert SizeNumeric to bytes
            # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
          - type: "multiply"
            column: 5
            value: "512"
      mapping:
        # InstanceTable = Source(1)
        # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
        source: "$monitors.logical_disk.discovery.sources.source(1)$"
        attributes:
          id: "$column(3)"
          raid_level: "$column(8)"
          hw.logical_disk.limit: "$column(5)"
          info: "$column(9)"
          hw.parent.type: "enclosure"
          hw.parent.id: "HPMSA2000"
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(8), $column(5))"
    collect:
      # Collect type is multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only components of basetype "virtual.disks"
            # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
          - type: "keepOnlyMatchingLines"
            column: 2
            regExp: "^virtual.disks$"
            # Translate the healthnumeric
            # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
          - type: "translate"
            column: 10
            translationTable: "LogicalDiskHealthNumericTranslationTable"
            # Convert freespacenumeric to bytes
            # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
          - type: "multiply"
            column: 7
            value: "512"
      mapping:
        # The value table
        # MSHW;basetype;name;size;sizenumeric;freespace;freespacenumeric;raidtype;diskcount;healthnumeric;healthreason;
        source: "$monitors.logical_disk.collect.sources.source(1)$"
        deviceId: "$column(3)"
        metrics:
          hw.status{hw.type="logical_disk"}: "$column(10)"
          hw.logical_disk.usage{state="free"}: "$column(7)"
          hw.logical_disk.usage{state="used"}: "collectAllocatedSpace()"
        legacyTextParameters:
          StatusInformation: "$column(11)"
