---
connector:
  displayName: HP Synergy - REST
  platforms: HP Synergy REST
  version: 1.0
  information: "This connector provides hardware monitoring for HP Synergy through REST. It monitors the Enclosures and Blades as well as the various environment sensors (fans, power supplies, Memory, Disk Controllers, batteries and Network cards). Physical and Logical disk as well as the CPU Status are not collected as they are unavailable. CPU instances created to help if blade reports a fault."
  detection:
    connectionTypes:
    - remote
    disableAutoDetection: true
    appliesTo:
    - OOB
    criteria:
    # Hardware Sentry v10.2.00+
    - type: productRequirements
      kmVersion: 10.2.00
    - type: http
      method: GET
      url: /rest/version
      header: "${file::embeddedFile-1}"
      expectedResult: minimumVersion
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: http
          method: DELETE
          url: /rest/login-sessions
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(4)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
        source(2):
          type: http
          method: POST
          url: /rest/login-sessions
          header: "${file::embeddedFile-1}"
          body: "${file::embeddedFile-2}"
          computes:
          - type: json2csv
            entryKey: /
            properties: /sessionID
            separator: ;
          # exclude jsonID
          - type: keepColumns
            columnNumbers: 2
        source(3):
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /uuid;/name;/serialNumber;/enclosureModel;/partNumber
            separator: ;
          - type: leftConcat
            column: 6
            value: "Part Number: "
        source(4):
          # now copy enclosure 2 to get a copy of the token for closing the session at the next Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
      mapping:
        # Enclosure Instance Table
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $5
          serial_number: $4
          model: $3
          vendor: HP Enterprise
          type: Chassis
          info: $6
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $5, \"HP Enterprise\", $3)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /uuid;/status;/status;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Enclosure Value Table
        # JsonID;<System>;PatrolStatus;StatusInformation
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="enclosure"}: $3
        legacyTextParameters:
          StatusInformation: $4
  blade:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/deviceBays
            properties: ../uuid;/devicePresence;/deviceUri;/bayNumber;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: Present
        source(2):
          type: copy
          from: "${source::monitors.blade.discovery.sources.source(1)}"
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);../Column(4);../Column(5);/shortModel;/model;/serialNumber;/romVersion;/position;
          - type: leftConcat
            column: 4
            value: "Bay # "
          - type: rightConcat
            column: 6
            value: ' - '
          # Blade.Discovery.Source(3).Compute(4).Type="RightConcat
          - type: leftConcat
            column: 4
            value: $6
          - type: leftConcat
            column: 8
            value: "FirmwareVersion: "
      mapping:
        # Enclosure Instance Table
        source: "${source::monitors.blade.discovery.sources.source(3)}"
        attributes:
          id: $3
          __display_id: $4
          model: $6
          serial_number: $7
          info: "${awk::join(\" \", $8, $8, \"Vendor: HP Enterprise\")}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $6)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/deviceBays
            properties: ../uuid;/devicePresence;/deviceUri;
            separator: ;
          - type: excludeMatchingLines
            column: 3
            regExp: Absent
        source(2):
          type: copy
          from: "${source::monitors.blade.collect.sources.source(1)}"
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.collect.sources.source(2)}"
            concatMethod: json_array_extended
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          url: $4
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(4);/status;/status;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Enclosure Value Table
        # JsonID;<System>;PatrolStatus;StatusInformation
        source: "${source::monitors.blade.collect.sources.source(3)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="blade"}: $3
        legacyTextParameters:
          StatusInformation: $4
  physical_disk:
    discovery:
      sources:
        source(1):
          # Physical disks
          type: copy
          from: "${source::monitors.blade.discovery.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 4
            regExp: drive-enclosures
        source(2):
          type: copy
          from: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/driveBays/drive
            properties: /name;/model;/serialNumber;/wwid;/capacity;/firmwareVersion;/driveMedia;/status;../../SerialNumber;../../uri;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
      mapping:
        # Enclosure Instance Table
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $2
          model: $3
          serial_number: $4
          firmware_version: $7
          info: "Type: Disk"
          hw.parent.type: blade
          hw.parent.id: $11
          name: $2
    collect:
      # collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: copy
          from: "${source::monitors.blade.collect.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 4
            regExp: drive-enclosures
        source(2):
          type: copy
          from: "${source::monitors.physical_disk.collect.sources.source(1)}"
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/driveBays/drive
            properties: /name;/status;/status;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.physical_disk.collect.sources.source(3)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
  cpu:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(4);/name;/name;/processorType;/processorSpeedMhz;
            separator: ;
          - type: leftConcat
            column: 3
            value: $2
          - type: replace
            column: 5
            existingValue: (R)
            newValue: ""
      mapping:
        # CPU Instance Table
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $3
          model: $5
          __display_id: $4
          hw.parent.type: blade
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s)\", $4, $5, megaHertz2HumanFormat($6))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($6)
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.collect.sources.source(2)}"
            concatMethod: json_array
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(4);/name;
            separator: ;
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # CPU collect value table
        # JsonId;Id;PatrolStatus;StatusInformation;
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        attributes:
          id: $2
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4/memory
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(4);/name;/DeviceLocator;/Status/State;/CapacityMiB;/Manufacturer;/PartNumber;/Type;/
            separator: ;
          - type: keepOnlyMatchingLines
            column: 5
            regExp: Enabled
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Memory Instance Table
        # JsonId;<System>;Name;SerialNumber;PartNumber;Manufacturer;VolatileSizeMiB;
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          vendor: $7
          model: $8
          type: $9
          hw.parent.type: blade
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s - %s MB)\", $4, $7, $9, $6)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($6)
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.collect.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4/memory
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(4);/name;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Memory Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: "${source::monitors.memory.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="memory"}: $4
        legacyTextParameters:
          StatusInformation: $5
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4/devices
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(4);/DeviceType;/@odata.etag;/name;/PartNumber;/Manufacturer;/SerialNumber;/FirmwareVersion/Current/VersionString;/ProductPartNumber;/PartNumber;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: Smart Storage Battery
          - type: leftConcat
            column: 6
            value: "Part Number: "
          - type: leftConcat
            column: 10
            value: "Product Part Number: "
          - type: keepOnlyMatchingLines
            column: 8
            regExp: .
          - type: leftConcat
            column: 8
            value: "FirmwareVersion: "
      mapping:
        # Battery Instance Table
        # JsonId;<System>;Name;SerialNumber;PartNumber;Manufacturer;VolatileSizeMiB;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $4
          __display_id: $5
          model: $11
          vendor: $7
          info: "${awk::join(\" \", $6, $8, $10)}"
          hw.parent.type: blade
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s %s)\", $5, $7, $11)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.collect.sources.source(2)}"
            concatMethod: json_array
          url: $4/devices
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /data
            properties: /@odata.etag;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Battery Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: "${source::monitors.battery.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="battery"}: $3
        legacyTextParameters:
          StatusInformation: $4
  disk_controller:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4/devices
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(4);/DeviceType;/@odata.etag;/name;/PartNumber;/SerialNumber;/FirmwareVersion/Current/VersionString;/ProductPartNumber;/PartNumber;/Status/Health
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: ^Smart Storage$
          - type: leftConcat
            column: 9
            value: "Product Part Number: "
          - type: keepOnlyMatchingLines
            column: 10
            regExp: .
          - type: leftConcat
            column: 10
            value: "Part Number: "
          - type: excludeMatchingLines
            column: 11
            regExp: "null"
      mapping:
        # DiskController Instance Table
        # JsonId;<System>;Name;SerialNumber;PartNumber;Manufacturer;VolatileSizeMiB;
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $4
          __display_id: $5
          model: $6
          serial_number: $7
          firmware_version: $8
          info: "${awk::join(\" \", $9, $6)}"
          hw.parent.type: blade
          hw.parent.id: $2
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $5, $6)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.collect.sources.source(2)}"
            concatMethod: json_array
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          url: $4/devices
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /data
            properties: /@odata.etag;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # DiskController Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="disk_controller"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/fanBays
            properties: ../uuid;/bayNumber;/bayNumber;/devicePresence;/model;/model;/serialNumber;
            separator: ;
          - type: excludeMatchingLines
            column: 5
            regExp: Absent
          - type: leftConcat
            column: 3
            value: $2
          - type: rightConcat
            column: 7
            value: " Bay # "
          - type: rightConcat
            column: 7
            value: $4
          - type: leftConcat
            column: 6
            value: "Model: "
          - type: leftConcat
            column: 8
            value: "SerialNumber: "
      mapping:
        # Fan Instance Table
        # JsonID;<System>;FanName;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $7
          info: "${awk::join(\" \", $6, $8)}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $7
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/fanBays
            properties: ../uuid;/bayNumber;/Status;/Status;
            separator: ;
          - type: leftConcat
            column: 3
            value: $2
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Fan Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="fan"}: $4
        legacyTextParameters:
          StatusInformation: $5
  power_supply:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/powerSupplyBays
            properties: ../uuid;/bayNumber;/bayNumber;/devicePresence;/model;/model;/serialNumber;/outputCapacityWatts;/partNumber;/sparePartNumber;
            separator: ;
          - type: excludeMatchingLines
            column: 4
            regExp: Absent
          - type: leftConcat
            column: 3
            value: $2
          - type: rightConcat
            column: 7
            value: " Bay # "
          - type: rightConcat
            column: 7
            value: $4
          - type: leftConcat
            column: 10
            value: "Part Number: "
          - type: leftConcat
            column: 11
            value: "Product Part Number: "
          - type: leftConcat
            column: 6
            value: "Model: "
          - type: leftConcat
            column: 8
            value: "SerialNumber: "
      mapping:
        # Fan Instance Table
        # JsonID;<System>;FanName;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $7
          info: "${awk::join(\" \", $10, $11, $6)}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s W)\", $7, $9)}"
        metrics:
          hw.power_supply.limit: $9
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: /rest/enclosures
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members/powerSupplyBays
            properties: ../uuid;/bayNumber;/Status;/Status;
            separator: ;
          - type: leftConcat
            column: 3
            value: $2
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Fan Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="power_supply"}: $4
        legacyTextParameters:
          StatusInformation: $5
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /rest/interconnects
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /members/interconnectLocation/locationEntries
            properties: /type;/value;../../eTag;../../productName;../../FirmwareVersion;../../maxBandwidth;../../serialNumber;../../partNumber;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: enclosure
        source(2):
          type: http
          method: GET
          url: /rest/interconnects
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /members/ports
            properties: ../eTag;/../uri;/interconnectName;/portName;/enabled;
          - type: keepOnlyMatchingLines
            column: 6
            regExp: "true"
        source(3):
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(2)}"
          rightTable: "${source::monitors.network.discovery.sources.source(1)}"
          leftKeyColumn: 2
          rightKeyColumn: 4
        source(4):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.blade.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $4
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/portMap/deviceSlots/physicalPorts
            properties: /interconnectUri;/mac;/portNumber;/type;../deviceName;../deviceNumber;
            separator: ;
        source(5):
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(3)}"
          rightTable: "${source::monitors.network.discovery.sources.source(4)}"
          leftKeyColumn: 3
          rightKeyColumn: 2
          computes:
          - type: rightConcat
            column: 21
            value: ' Port '
          - type: rightConcat
            column: 21
            value: $5
          - type: rightConcat
            column: 17
            value: $5
          - type: replace
            column: 9
            existingValue: /rest/enclosures/
            newValue: ^$
          - type: leftConcat
            column: 12
            value: "firmwareVersion: "
      mapping:
        # NetworkCard Instance Table
        source: "${source::monitors.network.discovery.sources.source(5)}"
        attributes:
          id: $17
          __display_id: $21
          physical_address: $18
          model: $15
          serial_number: $14
          info: $12
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: "${awk::sprintf(\"%s (%s)\", $21, $15)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: /rest/interconnects
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(2)}"
          header: "${file::embeddedFile-3}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /members/ports
            properties: ../uri;/portName;/portStatus;/portStatus;../maxBandwidth;
          - type: rightConcat
            column: 2
            value: $3
          - type: translate
            column: 4
            translationTable: "${translation::NetworkCardStatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::LinkStatusTranslationTable}"
          - type: translate
            column: 6
            translationTable: "${translation::SpeedTranslationTable}"
      mapping:
        # NetworkCard Value Table
        source: "${source::monitors.network.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="network"}: $4
          hw.network.up: legacyLinkStatus($5)
          hw.network.bandwidth.limit: megaBit2Bit($6)
translations:
  LinkStatusTranslationTable:
    Linked: ok
    Unknown: degraded
    Unlinked: degraded
    Default: degraded
  StatusInformationTranslationTable:
    Warning: The device has warning state.
    optimal: The device is running normal.
    "null": The device is not reporting a status.
    needsAttn: The device needs attention.
    maintenanceCharging: The device is performing routine maintenance.
    Critical: The device is in critical state.
    OK: The device is running normal.
    Good: The device is running normal.
    Default: The device is in a critical state
  StatusTranslationTable:
    Warning: degraded
    optimal: ok
    "null": degraded
    needsAttn: degraded
    maintenanceCharging: ok
    Critical: failed
    OK: ok
    Default: failed
  SpeedTranslationTable:
    Speed_12G: 12000
    Speed_13G: 13000
    Speed_24G: 24000
    Speed_15G: 15000
    Speed_16G: 16000
    Speed_1M: 1
    Speed_100G: 100000
    Default: 0
    Auto: Auto
    Speed_2_5G: 2500
    Speed_8G: 8000
    Speed_100M: 100
    Speed_4G: 4000
    Speed_10M: 10
    Speed_5G: 5000
    Speed_40G: 40000
    Speed_1G: 1000
    Speed_30G: 30000
    Speed_20G: 20000
    Speed_2G: 2000
    Speed_10G: 10000
  NetworkCardStatusTranslationTable:
    Linked: ok
    Unknown: ok
    Unlinked: ok
    Default: failed
