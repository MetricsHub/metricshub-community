---
connector:
  displayName: Brocade SAN Switch
  platforms: Brocade SAN
  reliesOn: Brocade SNMP Agent (fcSwitch)
  version: 1.0
  information: "This connector discovers the enclosure and fiber-channel ports of SAN switches as well as the various environment sensors (temperatures, fans, power supplies, etc.). It relies on the SNMP protocol and supports the Brocade MIB (fcSwitch-MIB)."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    supersedes:
    - FibreAllianceSwitch
    - GenericSwitchEnclosure
    criteria:
    # DETECTION
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.1588.2.1.1.1.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = \tconnUnitTable SNMP table\nID,Model,Manufacturer,SerialNumber
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.50.2.4.1
          selectColumns: "ID,5,6,8"
          computes:
            # Replace abrivitation BRD with Brocade
            # ID,Model,Manufacturer,SerialNumber
          - type: replace
            column: 3
            existingValue: BRD
            newValue: Brocade
      mapping:
        # InstanceTable = Source(1)
        # Class;Status;ID;SupplierID;PartNumber;SerialNumber
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: $3
          model: $2
          serial_number: $4
          type: Chassis
          name: "${awk::sprintf(\"Enclosure: (%s %s)\", $3, $2)}"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = swSensorEntry
          # ID;SensorType;Status;Value;SensorDescription;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,2,3,4,5"
          computes:
            # Keep only temperature sensors (Type 1)
            # ID;SensorType;Status;Value;SensorDescription;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: 1
            # Exclude Values of -2147483648 as these represent unknown
            # ID;SensorType;Status;Value;SensorDescription;
          - type: replace
            column: 4
            existingValue: -2147483648
            newValue: ""
            # Exclude Status Values of 6 (Absent)
            # ID;SensorType;Status;Value;SensorDescription;
          - type: excludeMatchingLines
            column: 3
            valueList: 6
      mapping:
        # InstanceTable = Source(1)
        # ID;SensorType;Status;Value;SensorDescription;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $5
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $5)}"
        conditionalCollection:
          hw.temperature: $4
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Status;Value;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,3,4"
          computes:
            # Translate the first column status into a PATROLStatus
            # ID;PatrolStatus;Value;
          - type: translate
            column: 2
            translationTable: "${translation::SensorStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;Value;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="temperature"}: $2
          hw.temperature: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = swSensorEntry
          # ID;SensorType;Status;Value;SensorDescription;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,2,3,4,5"
          computes:
            # Keep only Fabs sensors (Type 2)
            # ID;SensorType;Status;Value;SensorDescription;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: 2
            # Exclude Values of -2147483648 as these represent unknown
            # ID;SensorType;Status;Value;SensorDescription;
          - type: replace
            column: 4
            existingValue: -2147483648
            newValue: ""
            # Exclude Status Values of 6 (Absent)
            # ID;SensorType;Status;Value;SensorDescription;
          - type: excludeMatchingLines
            column: 3
            valueList: 6
      mapping:
        # InstanceTable = Source(1)
        # ID;SensorType;Status;Value;SensorDescription;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $5
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $5)}"
        conditionalCollection:
          hw.fan.speed: $4
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Status;Value;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,3,4"
          computes:
            # Translate the first column status into a PATROLStatus
            # ID;PatrolStatus;Value;
          - type: translate
            column: 2
            translationTable: "${translation::SensorStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;Value;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
          hw.fan.speed: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = swSensorEntry
          # ID;SensorType;Status;SensorDescription;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,2,3,5"
          computes:
            # Keep only Power Supply sensors (Type 3)
            # ID;SensorType;Status;SensorDescription;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: 3
            # Exclude Status Values of 6 (Absent)
            # ID;SensorType;Status;SensorDescription;
          - type: excludeMatchingLines
            column: 3
            valueList: 6
      mapping:
        # InstanceTable = Source(1)
        # ID;SensorType;Status;Value;SensorDescription;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          power_supply_type: $4
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $4)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.1.22.1
          selectColumns: "ID,3"
          computes:
            # Translate the first column status into a PATROLStatus
            # ID;PatrolStatus;Value;
          - type: translate
            column: 2
            translationTable: "${translation::SensorStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = connUnitPortTable SNMP Table
          # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.6.2.1
          selectColumns: "1,3,7,34,35,37,39"
          computes:
            # Exclude Slots with No SFP (1= No Card, 2=No Transceiver)
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: excludeMatchingLines
            column: 2
            valueList: "1,2"
            # Translate Wave Type
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: translate
            column: 3
            translationTable: "${translation::WaveTypeTranslationTable}"
            # Translate Admin Speed
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: translate
            column: 5
            translationTable: "${translation::AdminSpeedTranslationTable}"
            # Translate Port Type
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: translate
            column: 7
            translationTable: "${translation::PortTypeTranslationTable}"
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: replace
            column: 4
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
            # Remove the spaces from the WWN
            # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
          - type: replace
            column: 4
            existingValue: ' '
            newValue: ""
          - type: leftConcat
            column: 3
            value: "Wave Type: "
        source(2):
          # Source(2) = connUnitSnsTable SNMP Table
          # RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.7.2.1
          selectColumns: "4,13,5,6"
          computes:
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
          - type: replace
            column: 1
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
            # Remove the spaces from the WWN
            # RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
          - type: replace
            column: 1
            existingValue: ' '
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
          - type: replace
            column: 4
            existingValue: ' '
            newValue: ""
            # Add decriptive to Remote Port
            # RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
          - type: leftConcat
            column: 3
            value: "Remote Host: "
            # Add decriptive to Remote Node Name
            # RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
          - type: leftConcat
            column: 4
            value: "Remote Node Name: "
        source(3):
          # Source(3) = Table joint of Source(1) and Source(2)
          # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(1)}"
          rightTable: "${source::monitors.network.discovery.sources.source(2)}"
          leftKeyColumn: 4
          rightKeyColumn: 2
          defaultRightLine: ;;;;
        source(4):
          # Source(4) = connUnitPortTable SNMP Table from MIB2 (speed is not available in Brocade MIB)
          # WWN;SpeedKB;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.10.1
          selectColumns: "10,15"
          computes:
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # WWN;SpeedKB;
          - type: replace
            column: 1
            existingValue: ' 00 00 00 00 00 00 00 00'
            # Remove the spaces from the WWN
            # WWN;SpeedKB;
          - type: replace
            column: 1
            existingValue: ' '
            newValue: ""
            # Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
            # WWN;SpeedMB;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(5):
          # Source(5) = Table joint of Source(3) and Source(4)
          # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;WWN;SpeedMB;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(3)}"
          rightTable: "${source::monitors.network.discovery.sources.source(4)}"
          leftKeyColumn: 4
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(5)
        # PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;WWN;SpeedMB;
        source: "${source::monitors.network.discovery.sources.source(5)}"
        attributes:
          id: $6
          bandwidth: $13
          physical_address: $4
          physical_address_type: WWN
          device_type: $7
          info: "${awk::join(\" \", $3, $10, $11)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $6, $7)}"
        conditionalCollection:
          hw.network.bandwidth.limit: $13
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitPortTable SNMP Table
          # ID;Name;PhysicalState;LinkStatus;wwn
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.1.1.6.2.1
          selectColumns: "1,37,3,5,34"
          computes:
            # Duplicate PhysicalState
            # ID;Name;PhysicalState;PhysicalState;LinkStatus;wwn
          - type: duplicateColumn
            column: 3
            # Translate the first column status into a PATROLStatus
            # ID;Name;PATROLStatus;PhysicalState;LinkStatus;wwn
          - type: translate
            column: 3
            translationTable: "${translation::PortStatusTranslationTable}"
            # Translate the second column status into a more readable string
            # ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
          - type: translate
            column: 4
            translationTable: "${translation::PortStatusInformationTranslationTable}"
            # Translate the third column status into a LinkStatus value
            # ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
          - type: translate
            column: 5
            translationTable: "${translation::PortLinkStatusInformationTranslationTable}"
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
          - type: replace
            column: 6
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
            # Remove the spaces from the WWN
            # ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
          - type: replace
            column: 6
            existingValue: ' '
            newValue: ""
        source(2):
          # Source(2) = connUnitPortTable SNMP Table from MIB2 (speed is not available in Brocade MIB)
          # WWN;SpeedKB;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.10.1
          selectColumns: "10,15"
          computes:
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # WWN;SpeedKB;
          - type: replace
            column: 1
            existingValue: ' 00 00 00 00 00 00 00 00'
            # Remove the spaces from the WWN
            # WWN;SpeedKB;
          - type: replace
            column: 1
            existingValue: ' '
            newValue: ""
            # Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
            # WWN;SpeedMB;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(3):
          # Source(3) = Table joint of Source(1) and Source(2)
          # ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(2)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
          defaultRightLine: ;;
        source(4):
          # Source(4) = connUnitPortStatTable SNMP Table
          # PortIndex;ErrorCountHex;TransmitTotalHex;ReceiveTotalHex;TransmitttedBytesHex;ReceivedBytesHex;
          type: snmpTable
          oid: 1.3.6.1.3.94.4.5.1
          selectColumns: "2,3,4,5,6,7"
          computes:
            # Convert all these values from hex to dec
            # PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: convert
            column: 2
            conversion: hex2Dec
          - type: convert
            column: 3
            conversion: hex2Dec
          - type: convert
            column: 4
            conversion: hex2Dec
          - type: convert
            column: 5
            conversion: hex2Dec
          - type: convert
            column: 6
            conversion: hex2Dec
        source(5):
          # Source(5) = Table joint of Source(3) and Source(4)
          # ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(3)}"
          rightTable: "${source::monitors.network.collect.sources.source(4)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
      mapping:
        # ValueTable = Source(1)
        # ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
        source: "${source::monitors.network.collect.sources.source(5)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $3
          hw.network.up: legacyLinkStatus($5)
          hw.network.bandwidth.limit: megaBit2Bit($8)
          hw.network.full_duplex: legacyFullDuplex("full")
          hw.errors{hw.type="network"}: $10
          hw.network.packets{direction="transmit"}: $11
          hw.network.packets{direction="receive"}: $12
          hw.network.io{direction="transmit"}: $13
          hw.network.io{direction="receive"}: $14
        legacyTextParameters:
          StatusInformation: $4
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = fruTable
          # ID,DeviceType,SlotID
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.2.1.5.1
          selectColumns: "ID,1,3"
          computes:
            # Keep only CPs(4),CP-Other(5),SwitchBlade(6),WWN(7),CR Switching Blades(10)
            # ID,DeviceType,SlotID
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "4,5,6,7,10"
            # Add a descriptor to SlotID
            # ID,DeviceType,SlotID
          - type: leftConcat
            column: 3
            value: "Location: "
            # Translate the DeviceType
            # ID,DeviceType,SlotID
          - type: translate
            column: 2
            translationTable: "${translation::OtherDeviceTypeTT}"
      mapping:
        # InstanceTable = Source(1)
        # ID,DeviceType,SlotID
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $1
          device_type: $2
          info: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s: %s\", $2, $1)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = fruTable
          # ID,Status
          type: snmpTable
          oid: 1.3.6.1.4.1.1588.2.1.2.1.5.1
          selectColumns: "ID,2"
          computes:
            # Translate the DeviceType
            # ID,Status,StatusInfo
          - type: duplicateColumn
            column: 2
            # Translate the DeviceType
            # ID,Status,StatusInfo
          - type: translate
            column: 2
            translationTable: "${translation::OtherDeviceStatusTT}"
            # Translate the DeviceType
            # ID,DeviceType,SlotID
          - type: translate
            column: 3
            translationTable: "${translation::OtherDeviceStatusInfoTT}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  WaveTypeTranslationTable:
    "2": LongWave Laser
    "3": ShortWave Laser
    "4": LongWave LED
    "5": Copper
    Default: ""
  PortLinkStatusInformationTranslationTable:
    "1": ok
    "2": degraded
    "3": degraded
    Default: ok
  PortStatusInformationTranslationTable:
    "1": Card No Longer Present
    "2": Transceiver No Longer Present
    "3": Laser Fault
    "4": No Light
    "5": No Sync
    "6": ""
    "7": Port Faulty
    "8": Failed Diagnostics
    "9": Port is Locking to Reference Signal
    Default: Unknown Status
  SensorStatusTranslationTable:
    "1": UNKNOWN
    "2": failed
    "3": degraded
    "4": ok
    "5": degraded
    "6": failed
    Default: UNKNOWN
  OtherDeviceTypeTT:
    "4": CP
    "5": CP-Other
    "6": SB
    "7": WWN
    "10": CR-SB
  PortTypeTranslationTable:
    "3": FC Port FL
    "4": FC Port F
    "5": FC Port E
    "6": FC Port G
    "7": FC Port EX
    Default: FC Port
  AdminSpeedTranslationTable:
    "1": 1000
    "2": 2000
    "3": ""
    "4": 4000
    "5": 8000
    "6": 10000
    Default: ""
  OtherDeviceStatusInfoTT:
    "1": Other Status
    "2": Unknown Status
    "3": "On"
    "4": "Off"
    "5": Faulty
    Default: UNKNOWN
  PortStatusTranslationTable:
    "1": failed
    "2": failed
    "3": failed
    "4": ok
    "5": ok
    "6": ok
    "7": failed
    "8": failed
    "9": degraded
    Default: UNKNOWN
  OtherDeviceStatusTT:
    "1": UNKNOWN
    "2": UNKNOWN
    "3": ok
    "4": degraded
    "5": failed
    Default: UNKNOWN
