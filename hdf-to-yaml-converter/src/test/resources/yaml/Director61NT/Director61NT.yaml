---
connector:
  displayName: IBM Director Agent 6 - Windows
  platforms: IBM xSeries
  reliesOn: IBM Director Agent 6
  version: 1.1
  information: This connector provides hardware monitoring through the IBM Director Agent version 6
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    supersedes:
    - IpmiTool
    criteria:
    # OS must be Windows
    - type: deviceType
      keep:
      - NT
    # Verify that the root/ibmsd WBEM namespace actually exists
    - type: wmi
      namespace: root
      query: SELECT Name FROM __NAMESPACE
      expectedResult: ^ibmsd;*$
    # The IBM Director Agent must be in version 6.x
    - type: wmi
      query: SELECT Version FROM IBMPSG_DirectorAgent
      namespace: root\ibmsd
      expectedResult: "\\(^6\\.1\\.[2-9].*\\)\\|\\(^6\\.[2-9].*\\)"
    # The IBMPSG_ComputerSystemDetails WBEM class must be instanciated
    - type: wmi
      query: SELECT ProductName FROM IBMPSG_ComputerSystemDetails
      namespace: root\ibmsd
      errorMessage: The IBM Director Agent seems to not be working properly. Please reinstall the IBM Director Agent.
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = the IBMPSG_ComputerSystemDetails WBEM class
          type: wmi
          query: "SELECT Model,SerialNumber FROM IBMPSG_ComputerSystemDetails"
          namespace: root\ibmsd
      mapping:
        # InstanceTable = Source(1)
        # Note: InstanceTable must contain only one line!
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: DIR6
          vendor: IBM
          model: $1
          serial_number: $2
          type: Computer
          name: "${awk::sprintf(\"Computer: (%s %s)\", \"IBM\", $1)}"
  cpu:
    discovery:
      sources:
        source(1):
          type: wmi
          query: "SELECT CurrentClockSpeed,DeviceID,Version FROM IBMPSG_Processor"
          namespace: root\ibmsd
          computes:
          # Replace GenuineIntel by Intel and AuthenticAMD by AMD
          - type: replace
            column: 3
            existingValue: (R)
            newValue: ""
          - type: replace
            column: 3
            existingValue: cpu
            newValue: ""
          # Exclude lines that have a CPU Speed in the six digits as these are not real CPUs
          - type: excludeMatchingLines
            column: 1
            regExp: '......'
          # Keep only entries with non-empty model information (MSHW-2464: probably fake entries)
          - type: keepOnlyMatchingLines
            column: 3
            regExp: '.....'
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          model: $3
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $3, megaHertz2HumanFormat($1))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($1)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The IBMPSG_Processor WBEM class
          type: wmi
          query: "SELECT CPUStatus,DeviceID FROM IBMPSG_Processor"
          namespace: root\ibmsd
          computes:
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 1
            translationTable: "${translation::cpuStatusTranslationTable}"
          - type: translate
            column: 2
            translationTable: "${translation::cpuStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="cpu"}: $1
        legacyTextParameters:
          StatusInformation: $2
  memory:
    discovery:
      sources:
        source(1):
          # Source(1)
          type: wmi
          query: "SELECT Capacity,Name,Speed,Tag FROM IBMPSG_PhysicalMemory"
          namespace: root\ibmsd
          computes:
          # Convert size to MB
          - type: divide
            column: 1
            value: 1048576
          # Add Mhz to Speed
          - type: rightConcat
            column: 3
            value: ' MHz'
          - type: leftConcat
            column: 3
            value: "Speed: "
          - type: leftConcat
            column: 2
            value: "Label: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $4
          __display_id: $4
          info: "${awk::join(\" \", $2, $3)}"
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: "${awk::sprintf(\"%s (%s MB)\", $4, $1)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($1)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The IBMPSG_Processor WBEM class
          type: wmi
          query: "SELECT HasError,Tag FROM IBMPSG_PhysicalMemory"
          namespace: root\ibmsd
          computes:
          - type: translate
            column: 1
            translationTable: "${translation::memoryStatusTranslationTable}"
      mapping:
        source: "${source::monitors.memory.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="memory"}: $1
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = the IBMPSG_Tachometer WBEM class
          type: wmi
          query: "SELECT DeviceID,ElementName,LowerThresholdCritical FROM IBMPSG_Tachometer"
          namespace: root\ibmsd
          computes:
          - type: replace
            column: 2
            existingValue: ' Tach'
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: $2
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $3
          hw.fan.speed.limit{limit_type="low.critical"}: 0
    collect:
      # The collect (as all WBEM-based collects) is "MultiInstance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The IBMPSG_Tachometer WBEM class
          type: wmi
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_Tachometer"
          namespace: root\ibmsd
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.fan.speed: $1
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = The IBMPSG_TemperatureSensor WBEM class
          type: wmi
          query: "SELECT DeviceID,ElementName,LowerThresholdCritical,LowerThresholdNonCritical,UpperThresholdCritical,UpperThresholdNonCritical FROM IBMPSG_TemperatureSensor"
          namespace: root\ibmsd
          computes:
            # Replace a blank or zeo "Lower" thereshold with an "Upper" threshold
            # Version 6.3 of director uses upper, earlier versions used lower.
            # ID;Name;LowerThresholdCritical;LowerThresholdNonCritical;UpperThresholdCritical;UpperThresholdNonCritical;
          - type: leftConcat
            column: 3
            value: _MSHW_
          - type: rightConcat
            column: 3
            value: _MSHW_
          - type: leftConcat
            column: 4
            value: _MSHW_
          - type: rightConcat
            column: 4
            value: _MSHW_
          # Replace _MSHW__MSHW_ the field was originally blank with "Upper" values
          - type: replace
            column: 3
            existingValue: _MSHW__MSHW_
            newValue: $5
          - type: replace
            column: 4
            existingValue: _MSHW__MSHW_
            newValue: $6
          # Replace _MSHW_0_MSHW_ the field was originally zero with "Upper" values
          - type: replace
            column: 3
            existingValue: _MSHW_0_MSHW_
            newValue: $5
          - type: replace
            column: 4
            existingValue: _MSHW_0_MSHW_
            newValue: $6
            # Now if the threshold is STILL zero, we remove it.
            # ID;Name;LowerThresholdCritical;LowerThresholdNonCritical;UpperThresholdCritical;UpperThresholdNonCritical;
          - type: leftConcat
            column: 3
            value: _MSHW_
          - type: leftConcat
            column: 4
            value: _MSHW_
          - type: replace
            column: 3
            existingValue: _MSHW_0
            newValue: ""
          - type: replace
            column: 4
            existingValue: _MSHW_0
            newValue: ""
          # Remove _MSHW_ for non blank / non zero values
          - type: replace
            column: 3
            existingValue: _MSHW_
            newValue: ""
          - type: replace
            column: 4
            existingValue: _MSHW_
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: $2
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $4
          hw.temperature.limit{limit_type="high.critical"}: $3
    collect:
      # Like all WBEM collects, this one is \"MultiInstance\"
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the IBMPSG_TemperatureSensor WBEM class
          type: wmi
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_TemperatureSensor"
          namespace: root\ibmsd
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.temperature: $1
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = all the instances of the IBMPSG_VoltageSensor class
          type: wmi
          query: "SELECT DeviceID,LowerThresholdNonCritical,Name,UpperThresholdNonCritical,LowerThresholdCritical,UpperThresholdCritical FROM IBMPSG_VoltageSensor"
          namespace: root\ibmsd
          computes:
            # Replace a blank "NonCritical" thereshold with an "Critical" threshold
            # Version 6.3 of director uses Critical, earlier versions used NonCritical.
            # DeviceID,LowerThresholdNonCritical,Name,UpperThresholdNonCritical,LowerThresholdCritical,UpperThresholdCritical
          - type: leftConcat
            column: 2
            value: _MSHW_
          - type: rightConcat
            column: 2
            value: _MSHW_
          - type: leftConcat
            column: 4
            value: _MSHW_
          - type: rightConcat
            column: 4
            value: _MSHW_
          # Replace _MSHW__MSHW_ the field was originally blank with "Upper" values
          - type: replace
            column: 2
            existingValue: _MSHW__MSHW_
            newValue: $5
          - type: replace
            column: 4
            existingValue: _MSHW__MSHW_
            newValue: $6
          # Replace _MSHW_0_MSHW_ the field was originally zero with "Upper" values
          - type: replace
            column: 2
            existingValue: _MSHW_0_MSHW_
            newValue: $5
          - type: replace
            column: 4
            existingValue: _MSHW_0_MSHW_
            newValue: $6
          # Remove _MSHW_ for non blank values
          - type: replace
            column: 2
            existingValue: _MSHW_
            newValue: ""
          - type: replace
            column: 4
            existingValue: _MSHW_
            newValue: ""
            # Thresholds for voltages are sometimes reported as "0" by the agent.  Replacing these "0" by no value to prevent incorrect thresholds.
            # Add a MSHW_ string to our value and then remove MSHW_0. This should remove a 0 value and only that value
            # DeviceID,LowerThreshold,Name,UpperThreshold,LowerThresholdCritical,UpperThresholdCritical
          - type: leftConcat
            column: 2
            value: MSHW_
          - type: leftConcat
            column: 4
            value: MSHW_
          # Remove 0 value
          - type: replace
            column: 2
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 4
            existingValue: MSHW_0
            newValue: ""
          # Remove MSHW_ for non 0 values
          - type: replace
            column: 2
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 4
            existingValue: MSHW_
            newValue: ""
      mapping:
        # Here is the instance table = source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          sensor_location: $3
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: "${awk::sprintf(\"%s (%s)\", $1, $3)}"
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $4
          hw.voltage.limit{limit_type="low.critical"}: $2
    collect:
      # It's a "MultiInstance" collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the IBMPSG_VoltageSensor class
          type: wmi
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_VoltageSensor"
          namespace: root\ibmsd
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.voltage: $1
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = The IBMPSG_PowerSupply table
          type: wmi
          query: "SELECT DeviceID,Name FROM IBMPSG_PowerSupply"
          namespace: root\ibmsd
          computes:
          - type: replace
            column: 2
            existingValue: ' Status'
            newValue: ""
      mapping:
        # 'The instance table:'
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          hw.parent.id: DIR6
          name: $2
    collect:
      # Collect type : multi instance (one source for several instances)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the simple IBMPSG_PowerSupply table/class
          # DeviceID;WBEMStatus
          type: wmi
          query: "SELECT DeviceID,Status FROM IBMPSG_PowerSupply"
          namespace: root\ibmsd
          computes:
            # Duplicate the status column
            # DeviceID;WBEMStatus;WBEMStatus
          - type: duplicateColumn
            column: 2
            # Translate the first WBEM status column into a PATROL status
            # DeviceID;PatrolStatus;WBEMStatus
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
            # Translate the second WBEM status column into a PATROL status
            # DeviceID;PatrolStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  cpuStatusInformationTranslationTable:
    "1": ""
    "2": Disabled by User
    "3": Disabled by BIOS (POST Error)
    "4": Idle
    OK: ""
    Default: Unknown Status
  PowerSupplyStatusTranslationTable:
    No Contact: degraded
    Stopped: ok
    Error: failed
    Stopping: degraded
    Service: degraded
    Default: UNKNOWN
    Stressed: degraded
    Degraded: degraded
    Starting: degraded
    NonRecover: failed
    Pred Fail: degraded
    OK: ok
    Lost Comm: degraded
  cpuStatusTranslationTable:
    "1": ok
    "2": ok
    "3": failed
    "4": ok
    OK: ok
    Default: UNKNOWN
  memoryStatusTranslationTable:
    "0": ok
    "1": failed
    "TRUE": failed
    "FALSE": ok
    Default: UNKNOWN
  PowerSupplyStatusInformationTranslationTable:
    No Contact: No Contact
    Stopped: Stopped
    Error: Error
    Stopping: Stopping
    Service: Service
    Default: Unknown Status
    Stressed: Stressed
    Degraded: Degraded
    Starting: Starting
    NonRecover: Non Recover
    Pred Fail: Predicted Failure
    OK: ""
    Lost Comm: Lost Communication
