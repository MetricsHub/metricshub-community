---
connector:
  displayName: NEC ESMPRO Agent
  platforms: NEC Express5800
  reliesOn: NEC ESMPRO Agent
  version: 1.0
  information: This connector provides hardware monitoring through the NEC ESMPRO Agent which supports almost all NEC Express5800 and some BULL NovaScale servers running Windows and Linux.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    - Linux
    criteria:
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.119.2.2.4.4.1.2
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.1.2
          selectColumns: "1,3"
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: Computer01
          vendor: $2
          model: $1
          type: Computer
          name: "${awk::sprintf(\"Computer: (%s %s)\", $2, $1)}"
  cpu:
    discovery:
      sources:
        source(1):
          # CPU discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.2.2.1.22.1
          selectColumns: "ID,2,3,4"
          computes:
          # Translate memory vendor
          - type: translate
            column: 2
            translationTable: "${translation::cpuVendorTranslationTable}"
      mapping:
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: $2
          model: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $1, $2, $3, megaHertz2HumanFormat($4))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($4)
    collect:
      # CPU collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.2.2.1.22.1.12.${cpu::id}"
          computes:
          # Duplicate this status, because we will translate it two times
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 1
            translationTable: "${translation::GenericStatusTranslationTable}"
          - type: translate
            column: 2
            translationTable: "${translation::GenericStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="cpu"}: $1
        legacyTextParameters:
          StatusInformation: $2
  memory:
    discovery:
      sources:
        source(1):
          # Memory discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.4.2.1.9.1
          selectColumns: "ID,3,4"
          computes:
          # Remove modules for which we have no size
          - type: excludeMatchingLines
            column: 3
            regExp: ^0$
          # Convert memory size to MB
          - type: divide
            column: 3
            value: 1024
          # Translate memory type
          - type: translate
            column: 2
            translationTable: "${translation::memoryTypeTranslationTable}"
      mapping:
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          type: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $1, $2, $3)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($3)
    collect:
      # Memory collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.4.2.1.9.1.5.${memory::id}"
          computes:
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 1
            translationTable: "${translation::GenericStatusTranslationTable}"
          - type: translate
            column: 2
            translationTable: "${translation::GenericStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.memory.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="memory"}: $1
        legacyTextParameters:
          StatusInformation: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Temperature discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.10.2.1.2.1
          selectColumns: "ID,2,6,11,15"
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            valueList: 3
          # Remove "-1" thresholds
          - type: replace
            column: 4
            existingValue: -1
            newValue: ""
          - type: replace
            column: 5
            existingValue: -1
            newValue: ""
      mapping:
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $4
          hw.temperature.limit{limit_type="high.critical"}: $5
    collect:
      # Temperature collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.10.2.1.2.1.3.${temperature::id}"
      mapping:
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        metrics:
          hw.temperature: $1
  fan:
    discovery:
      sources:
        source(1):
          # Fan discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.10.2.3.2.1
          selectColumns: "ID,2,4"
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            valueList: 3
      mapping:
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Fan collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.10.2.3.2.1.3.${fan::id}"
          computes:
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 2
            translationTable: "${translation::GenericStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::GenericStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.fan.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Voltage discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.10.2.2.2.1
          selectColumns: "ID,2,5,11,19"
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            valueList: 3
          # Remove "-1" thresholds
          - type: rightConcat
            column: 4
            value: A
          - type: rightConcat
            column: 5
            value: A
          - type: replace
            column: 4
            existingValue: -1A
            newValue: ""
          - type: replace
            column: 5
            existingValue: -1A
            newValue: ""
          - type: replace
            column: 4
            existingValue: A
            newValue: ""
          - type: replace
            column: 5
            existingValue: A
            newValue: ""
      mapping:
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $4
          hw.voltage.limit{limit_type="low.critical"}: $5
    collect:
      # Voltage collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.10.2.2.2.1.3.${voltage::id}"
      mapping:
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        metrics:
          hw.voltage: $1
  power_supply:
    discovery:
      sources:
        source(1):
          # Power supply discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.119.2.2.4.4.11.2.3.3.1
          selectColumns: 1
      mapping:
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      # Power supply collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.119.2.2.4.4.11.2.3.3.1.2.${power_supply::id}"
          computes:
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 2
            translationTable: "${translation::GenericStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::GenericStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  memoryTypeTranslationTable:
    "1": ""
    "2": ""
    "3": SIMM
    "4": DIMM
  GenericStatusTranslationTable:
    "3": ok
    "4": degraded
    "5": failed
    "6": failed
    "7": ok
    "8": degraded
    "9": ok
    Default: UNKNOWN
    "10": failed
  GenericStatusInformationTranslationTable:
    "3": ""
    "4": Warning
    "5": Fatal
    "6": Non-recoverable
    "7": In test
    "8": Degraded
    "9": Disabled
    Default: UNKNOWN
    "10": Down
  cpuVendorTranslationTable:
    "1": ""
    "2": ""
    default: ""
    "3": Intel
    "4": Mips
