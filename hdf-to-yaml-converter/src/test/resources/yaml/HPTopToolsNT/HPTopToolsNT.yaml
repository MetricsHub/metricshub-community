---
extends:
- ../CpuFamilyTranslationTable-header/CpuFamilyTranslationTable-header
connector:
  displayName: HP TopTools Agent
  platforms: HP NetServer
  reliesOn: HP TopTools Agent
  version: 3.1
  information: This connector provides hardware monitoring through the HP TopTools Agent version 5.x which supports almost all HP NetServer servers under Windows.
  detection:
    appliesTo:
    - NT
    criteria:
    - type: deviceType
      keep:
      - NT
    - type: service
      name: SNMP
    - type: service
      name: hpwebsvc
    - type: osCommand
      commandLine: CSCRIPT.EXE //?
      expectedResult: Microsoft
      errorMessage: WSH is not present
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Retrieve the path were the hpnst.exe CGI is installed
          type: osCommand
          commandLine: "CSCRIPT.EXE //E:VBScript //NoLogo ${file::embeddedFile-2}"
        source(2):
          # Execute hpnst.exe to get the computer model
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-3} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_ComputerModel.html\"&&SET QUERY_STRING=c=p+i=MSHW_ComputerModel.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;ComputerModel;
          separators: ;
          selectColumns: 3
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: Computer01
          vendor: HP
          model: $1
          type: Computer
          name: "${awk::sprintf(\"Computer: (%s %s)\", \"HP\", $1)}"
  memory:
    discovery:
      sources:
        source(1):
          # Memory discovery
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-8} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_MemoryModules.html\"&&SET QUERY_STRING=c=p+i=MSHW_MemoryModules.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Memory;
          separators: ;
          selectColumns: "3,4,5,6"
          computes:
          # Keep only the memory modules for which we have a status
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "1,2,8,0"
          # Remove MB for the memory size
          - type: replace
            column: 3
            existingValue: MB
            newValue: ""
          # Remove spaces from memory size
          - type: replace
            column: 3
            existingValue: ' '
            newValue: ""
          # Remove spaces from memory size
          - type: replace
            column: 3
            existingValue: "\t"
            newValue: ""
          # Separate the different types by " - 
          - type: replace
            column: 4
            existingValue: ","
            newValue: ' - '
      mapping:
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          type: $4
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $1, $4, $3)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($3)
    collect:
      # Memory collect
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-8} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_MemoryModules.html\"&&SET QUERY_STRING=c=p+i=MSHW_MemoryModules.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Memory;
          separators: ;
          selectColumns: "3,4"
          computes:
          # Keep only the memory modules for which we have a status
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "1,2,8,0"
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: "${translation::memoryStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::memoryStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Temperature discovery
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-4} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_TemperatureSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_TemperatureSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Temperature;
          separators: ;
          selectColumns: "3,5"
      mapping:
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: 65
          hw.temperature.limit{limit_type="high.critical"}: 75
    collect:
      # Temperature collect
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-4} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_TemperatureSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_TemperatureSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Temperature;
          separators: ;
          selectColumns: "3,6"
          computes:
          - type: excludeMatchingLines
            column: 2
            valueList: '-'
      mapping:
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
  fan:
    discovery:
      sources:
        source(1):
          # Fan discovery
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-5} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_FanSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_FanSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Fan;
          separators: ;
          selectColumns: "3,4,5"
          computes:
          # Remove the fan that are not present
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "20,21,22"
      mapping:
        # Instancetable = source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $3)}"
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: 2000
          hw.fan.speed.limit{limit_type="low.critical"}: 1
    collect:
      # Fan collect
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-5} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_FanSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_FanSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Fan;
          separators: ;
          selectColumns: "3,4,6"
          computes:
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: "${translation::FanStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::FanStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.fan.speed: $4
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Voltage discovery
          # DeviceID;Status;Type
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-6} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_VoltageSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_VoltageSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Voltage;
          separators: ;
          selectColumns: "3,4,5"
          computes:
          # Remove bad voltages (status = 21 or 23)
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "20,21,22"
            # Duplicate the "type" status
            # DeviceID;Status;Type;Type;Type
          - type: duplicateColumn
            column: 3
          - type: duplicateColumn
            column: 4
            # Translate the second type column into a lower threshold
            # DeviceID;Status;Type;LowerThreshold;Type
          - type: translate
            column: 4
            translationTable: "${translation::VoltageLowerThresholdTranslationTable}"
            # Translate the last type column into a upper threshold
            # DeviceID;Status;Type;LowerThreshold;UpperThreshold
          - type: translate
            column: 5
            translationTable: "${translation::VoltageUpperThresholdTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $3)}"
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $4
          hw.voltage.limit{limit_type="high.degraded"}: $5
    collect:
      # Voltage collect
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-6} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_VoltageSensors.html\"&&SET QUERY_STRING=c=p+i=MSHW_VoltageSensors.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;Voltage;
          separators: ;
          selectColumns: "3,4,6"
          computes:
          # Convert Volts to milliVolts
          - type: multiply
            column: 3
            value: 1000
          # Duplicate the status column
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: "${translation::VoltageStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::VoltageStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $4
          hw.status{hw.type="voltage"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Power supply discovery
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-7} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_PowerSupply.html\"&&SET QUERY_STRING=c=p+i=MSHW_PowerSupply.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;PowerSupply;
          separators: ;
          selectColumns: "3,5"
          computes:
          # Keep only power supplies that are present
          - type: keepOnlyMatchingLines
            column: 2
            valueList: 1
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      # Power supply collect
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "COPY ${file::embeddedFile-7} \"${source::monitors.enclosure.discovery.sources.source(1)}\\MSHW_PowerSupply.html\"&&SET QUERY_STRING=c=p+i=MSHW_PowerSupply.html&&\"${source::monitors.enclosure.discovery.sources.source(1)}\\hpnst.exe\""
          keep: ^MSHW;PowerSupply;
          separators: ;
          selectColumns: "3,4"
          computes:
          # Duplicate the status column
          - type: duplicateColumn
            column: 2
          # Translate the status
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  cpu:
    discovery:
      sources:
        source(1):
          # CPU discovery
          type: wmi
          query: "SELECT CurrentClockSpeed,DeviceID,Family,Manufacturer FROM Win32_Processor"
          namespace: root\cimv2
          computes:
          # Translate CPU family
          - type: translate
            column: 3
            translationTable: "${translation::cpuFamilyTranslationTable}"
          # Remove Genuine from manufacturer's name
          - type: replace
            column: 4
            existingValue: Genuine
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $2
          vendor: $4
          model: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $2, $4, $3, megaHertz2HumanFormat($1))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($1)
    collect:
      # CPU supply collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = The IBMPSG_Processor WBEM class
          type: wmi
          query: "SELECT DeviceID,Status FROM Win32_Processor"
          namespace: root\cimv2
          computes:
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: "${translation::cpuStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::cpuStatusInformationTranslationTable}"
      mapping:
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="cpu"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  VoltageUpperThresholdTranslationTable:
    Sys Bd +12V: 13200
    Sys Bd -12V: -10800
    Sys Bd +3.3V: 3600
    Sys Bd -5V: -4500
    Sec Proc Core: 2200
    Sys Bd +5V: 5500
    Pri Proc Core: 2200
    Default: ""
  FanStatusTranslationTable:
    "22": failed
    "23": ok
    Default: UNKNOWN
    "20": ok
    "21": degraded
  VoltageStatusTranslationTable:
    "22": failed
    "23": ok
    Default: UNKNOWN
    "20": ok
    "21": degraded
  cpuStatusInformationTranslationTable:
    No Contact: No Contact
    Stopped: Stopped
    Error: Error
    Stopping: Stopping
    Service: Service
    Default: Unknown Status
    Stressed: Stressed
    Degraded: Degraded
    Starting: Starting
    NonRecover: Non Recover
    Pred Fail: Predicted Failure
    OK: ""
    Lost Comm: Lost Communication
  PowerSupplyStatusTranslationTable:
    "22": failed
    "3": ok
    "4": failed
    Default: UNKNOWN
    "20": ok
    "21": degraded
  VoltageStatusInformationTranslationTable:
    "22": Critical
    "23": Not available
    Default: Unknown Status
    "20": ""
    "21": Warning
  cpuStatusTranslationTable:
    No Contact: degraded
    Stopped: ok
    Error: failed
    Stopping: degraded
    Service: degraded
    Default: UNKNOWN
    Stressed: degraded
    Degraded: degraded
    Starting: degraded
    NonRecover: failed
    Pred Fail: degraded
    OK: ok
    Lost Comm: degraded
  FanStatusInformationTranslationTable:
    "22": Critical
    "23": Not available
    Default: Unknown Status
    "20": ""
    "21": Warning
  memoryStatusTranslationTable:
    "0": ok
    "1": degraded
    "2": failed
    "8": ok
    Default: UNKNOWN
  VoltageLowerThresholdTranslationTable:
    Sys Bd +12V: 10800
    Sys Bd -12V: -13200
    Sys Bd +3.3V: 3000
    Sys Bd -5V: -5500
    Sec Proc Core: 1800
    Sys Bd +5V: 4500
    Pri Proc Core: 1800
    Default: ""
  memoryStatusInformationTranslationTable:
    "0": ""
    "1": Warning
    "2": Critical
    "8": ""
    Default: Unknown Status
  PowerSupplyStatusInformationTranslationTable:
    "22": Critical
    "3": ""
    "4": Critical
    Default: Unknown Status
    "20": ""
    "21": Warning
