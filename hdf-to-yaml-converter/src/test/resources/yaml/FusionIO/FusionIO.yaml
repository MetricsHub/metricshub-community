---
connector:
  displayName: Fusion ioDrive (fio-status)
  platforms: Any system with Fusion IO
  reliesOn: fio-status CLI utility
  version: 1.0
  information: This connector monitors the Fusion ioDrive accelerator card.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    - Linux
    - Solaris
    criteria:
    - type: deviceType
      keep:
      - SunOS
      - Solaris
      - Linux
      - NT
    - type: osCommand
      commandLine: "%{SUDO:fio-status} fio-status -h"
      expectedResult: "usage: fio-status"
      errorMessage: fio-status not installed on this server or not in the Path.
    - type: osCommand
      commandLine: "%{SUDO:fio-status} fio-status"
      expectedResult: fct
      errorMessage: No Fusion IO Controllers detected.
sudoCommands:
- fio-status
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = Output of fio-status
          type: osCommand
          commandLine: "%{SUDO:fio-status} fio-status -a"
        source(2):
          # Make a copy of the output of fio-status
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(2)
            # adapterID;adapterModel;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW_ADAPTER;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # Instance Table
        # adapterID;adapterModel;
        source: "${source::monitors.disk_controller.discovery.sources.source(2)}"
        attributes:
          id: $1
          controller_number: $1
          __display_id: $1
          model: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $1, $2)}"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: "%{SUDO:fio-status} fio-status -a"
        source(2):
          # Make a copy of the output of fio-status
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # adapterID;PatrolStatus;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW_ADAPTER;
            separators: ;
            selectColumns: "2,4,5"
      mapping:
        # ValueTable = Source(1)
        # adapterID;PatrolStatus;StatusInformation;
        source: "${source::monitors.disk_controller.collect.sources.source(2)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="disk_controller"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(1)
            # ioDriveID;blockDeviceID;model;addInfo;physicalSize;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_PD;
            separators: ;
            selectColumns: "2,3,4,5,6"
        source(2):
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(2)
            # ioDriveID;adapterID;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW_DISK_TO_ADAPTER;
            separators: ;
            selectColumns: "2,3"
        source(3):
          # Table Joint the Physical Disk Table Source (1) to the Disk to Controller table source (2)
          # ioDriveID;blockDeviceID;model;addInfo;physicalSize;ioDriveID;adapterID;
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.discovery.sources.source(1)}"
          rightTable: "${source::monitors.physical_disk.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
          # Block Device: <blockDeviceID>
          - type: leftConcat
            column: 2
            value: "Block Device: "
            # Computes 2-6 Deal with column 4 (and 5) to standardize AdditionalInformation2
            # (original) Product Number:<productNumber> SN:<serialNumber>
            # Part Number: <productNumber> SN:<serialNumber>
          - type: replace
            column: 4
            existingValue: 'Product Number:'
            newValue: "Part Number: "
          # Part Number: <productNumber>,<serialNumber>
          - type: replace
            column: 4
            existingValue: ' SN:'
            newValue: ","
          # ioDriveID;blockDeviceID;model;Part Number <productNumber>,SerialNumber;Part Number <productNumber>MSHW_SerialNumber;physicalSize;ioDriveID;adapterID;
          - type: duplicateColumn
            column: 4
          # ioDriveID;blockDeviceID;model;Part Number <productNumber>;Part Number <productNumber>,SerialNumber;physicalSize;ioDriveID;adapterID;
          - type: extract
            column: 4
            subSeparators: ","
            subColumn: 1
          # ioDriveID;blockDeviceID;model;Part Number <productNumber>;SerialNumber;physicalSize;ioDriveID;adapterID;
          - type: extract
            column: 5
            subSeparators: ","
            subColumn: 2
      mapping:
        # Physical Disk Instance Table
        # ioDriveID;blockDeviceID;model;Part Number <productNumber>;SerialNumber;physicalSize;ioDriveID;adapterID;
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          model: $3
          id: $1
          __display_id: $1
          serial_number: $5
          info: "${awk::join(\" \", $2, $4, \"Type: Fusion ioDrive\")}"
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $8)"
          name: "${awk::sprintf(\"%s (%s)\", $1, bytes2HumanFormatBase10($6))}"
        metrics:
          hw.physical_disk.size: $6
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Make a copy of the output of disk controller collect (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # ioDriveID;PatrolStatus;StatusInformation
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_PD;
            separators: ;
            selectColumns: "2,7,8"
      mapping:
        # ValueTable = Source(1)
        # adapterID;PatrolStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Discovery
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(1)
            # ID;temperture;upperThreshold
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_TEMP;
            separators: ;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(1)
        # ID;temperture;upperThreshold
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.temperature.limit{limit_type="high.critical"}: $3
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(1)
            # ID;temperture;upperThreshold
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_TEMP;
            separators: ;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
  voltage:
    discovery:
      sources:
        source(1):
          # Discovery
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(1)
            # ID;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_VOLT;
            separators: ;
            selectColumns: 2
      mapping:
        # InstanceTable = Source(1)
        # ID;
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Make a copy of the output of disk controller discover (fio-status -a)
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Process fio-status's output through awk see EmbeddedFile(1)
            # ID;voltage;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW_VOLT;
            separators: ;
            selectColumns: "2,3"
            # Turn Volt into millivolt
            # ID;voltage;
          - type: multiply
            column: 2
            value: 1000
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.voltage: $2
