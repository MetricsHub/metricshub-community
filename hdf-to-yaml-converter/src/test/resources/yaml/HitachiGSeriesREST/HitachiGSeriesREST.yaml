---
connector:
  displayName: Hitachi G-Series (REST)
  platforms: Hitachi VSP F-Series and VSP G-Series Storage Systems
  reliesOn: Hitachi Configuration Manager
  information: This connector provides hardware monitoring for VSP F-Series and G-Series Hitachi Storage Systems through the Hitachi Configuration Manager REST API.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    criteria:
    # DETECTION
    - type: http
      method: GET
      url: /ConfigurationManager/v1/objects/storages
      header: "${file::embeddedFile-1}"
      expectedResult: storageDeviceId
      errorMessage: No storage devices detected. Host may not have the Hitachi Configuration Manager configured.
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /ConfigurationManager/v1/objects/storages
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Extract enclosure(s) information
            # JSON_ID; ID; Model; Serial Number
          - type: json2csv
            entryKey: /data
            properties: /storageDeviceId;/model;/serialNumber
        source(2):
          # Gather discovery of all components for future use
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/components/instance
          header: "${file::embeddedFile-1}"
          resultContent: body
      mapping:
        # Enclosure Instance Table - Source(2)
        # JSON_ID; ID; Model; Serial Number
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          device_hostname: $2
          model: $3
          serial_number: $4
          vendor: Hitachi
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $2, \"Hitachi\", $3)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Collect all values for other class' collects
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/components/instance
          header: "${file::embeddedFile-1}"
          resultContent: body
        source(2):
          # Source (2) = Source (1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract status
            # JSON_ID; ID; status
          - type: json2csv
            entryKey: /entry/value/system
            properties: ../../Column(2);/powerConsumption
      mapping:
        # Enclosure Instance Table - Source(2)
        # JSON_ID; ID; status
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        attributes:
          id: $2
        metrics:
          hw.enclosure.power: $3
          hw.enclosure.energy: fakeCounter($3)
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract battery(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID; AttachedToDeviceID
          - type: json2csv
            entryKey: /entry/value/bkmfs/batteries
            properties: ../../../Column(2);/location;/location;../../../Column(2)
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add battery type
            # JSON_ID; enclosureID; DeviceID; DisplayID; type; AttachedToDeviceType; AttachedToDeviceID
          - type: rightConcat
            column: 4
            value: ;Backup Module;Enclosure
        source(2):
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract battery(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID; type; AttachedToDeviceType; AttachedToDeviceID
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Add enclosure name to device ID for attaching to disk controller
          - type: leftConcat
            column: 5
            value: $2
            # Add enclosure name to device ID for attaching to disk controller
            # JSON_ID; enclosureID; DeviceID; DisplayID; type; AttachedToDeviceType; AttachedToDeviceID
          - type: leftConcat
            column: 5
            value: Disk Controller;DiskController;
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          # JSON_ID; enclosureID; DeviceID; DisplayID; type; AttachedToDeviceType; AttachedToDeviceID
          type: tableUnion
          tables:
          - "${source::monitors.battery.discovery.sources.source(1)}"
          - "${source::monitors.battery.discovery.sources.source(2)}"
      mapping:
        # Battery instance table - Source(3)
        # JSON_ID; enclosureID; DeviceID; DisplayID; type; AttachedToDeviceType; AttachedToDeviceID
        source: "${source::monitors.battery.discovery.sources.source(3)}"
        attributes:
          id: $3
          __display_id: $4
          type: $5
          hw.parent.type: $6
          hw.parent.id: $7
          name: "${awk::sprintf(\"%s (%s)\", $4, $5)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract battery(s) information
            # JSON_ID; enclosureID; DeviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/bkmfs/batteries
            properties: ../../../Column(2);/location;/status;/status;
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
        source(2):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract battery(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID;
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/charge
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Add empty fields to prepare for table union
          - type: leftConcat
            column: 4
            value: ;;
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          # JSON_ID; enclosureID; DeviceID; status; status information; charge
          type: tableUnion
          tables:
          - "${source::monitors.battery.collect.sources.source(1)}"
          - "${source::monitors.battery.collect.sources.source(2)}"
      mapping:
        # Battery value table - Source(3)
        # JSON_ID; enclosureID; DeviceID; status; status information; charge
        source: "${source::monitors.battery.collect.sources.source(3)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="battery"}: $4
          hw.battery.charge: percent2Ratio($6)
        legacyTextParameters:
          StatusInformation: $5
  disk_controller:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract disk controller(s) information
            # JSON_ID; enclosureID; deviceID; displayID
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Disk controller instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; displayID
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"Disk Controller: %s\", $4)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract disk controller(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # Disk controller instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; status; status information
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="disk_controller"}: $4
        legacyTextParameters:
          StatusInformation: $5
  fan:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract fan(s) information
            # JSON_ID; enclosureID; deviceID; displayID
          - type: json2csv
            entryKey: /entry/value/fans
            properties: ../../Column(2);/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Fan instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; displayID
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract fan(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/fans
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # Fan instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; status; status information
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="fan"}: $4
        legacyTextParameters:
          StatusInformation: $5
  led:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract led(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID;
          - type: json2csv
            entryKey: /entry/value/driveboxes
            properties: ../../Column(2);/location;/location;
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Led instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; DisplayID;
        source: "${source::monitors.led.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          __name: Drive Box
          __on_status: ALARM
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Drive Box\")}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract led(s) information
            # JSON_ID; enclosureID; DeviceID; status
          - type: json2csv
            entryKey: /entry/value/driveboxes
            properties: ../../Column(2);/location;/led
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Led instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; status
        source: "${source::monitors.led.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="led"}: legacyLedStatus($4)
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract memory(s) information
            # JSON_ID; enclosureID; deviceID; displayID; cache size
          - type: json2csv
            entryKey: /entry/value/cacheMemories
            properties: ../../Column(2);/location;/location;/cacheSize
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add memory type and model
            # JSON_ID; enclosureID; deviceID; displayID; type; model; cache size
          - type: leftConcat
            column: 5
            value: Cache Memory;;
        source(2):
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract memory(s) information
            # JSON_ID; enclosureID; deviceID; displayID; model
          - type: json2csv
            entryKey: /entry/value/cacheFlashMemories
            properties: ../../Column(2);/location;/location;/type
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add memory type and model
            # JSON_ID; enclosureID; deviceID; displayID; type; model; cache size
          - type: leftConcat
            column: 5
            value: Cache Flash Memory;
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          # JSON_ID; enclosureID; deviceID; displayID; type; model; cache size
          type: tableUnion
          tables:
          - "${source::monitors.memory.discovery.sources.source(1)}"
          - "${source::monitors.memory.discovery.sources.source(2)}"
      mapping:
        # Memory instance table - Source(3)
        # JSON_ID; enclosureID; deviceID; displayID; type; model; cache size
        source: "${source::monitors.memory.discovery.sources.source(3)}"
        attributes:
          id: $3
          __display_id: $4
          type: $5
          model: $6
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $4, $5, $7)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($7)
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract memory(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/cacheMemories
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
        source(2):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract memory(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/cacheFlashMemories
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          # JSON_ID; enclosureID; DeviceID; status; status information
          type: tableUnion
          tables:
          - "${source::monitors.memory.collect.sources.source(1)}"
          - "${source::monitors.memory.collect.sources.source(2)}"
      mapping:
        # Memory instance table - Source(3)
        # JSON_ID; enclosureID; deviceID; status; status information
        source: "${source::monitors.memory.collect.sources.source(3)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="memory"}: $4
        legacyTextParameters:
          StatusInformation: $5
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/ports
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Extract network card(s) information
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: json2csv
            entryKey: /entry/value/data
            properties: ../../Column(2);/portId;/portId;/portType
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # NetworkCard instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; displayID; type
        source: "${source::monitors.network.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          device_type: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $5)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/ports
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Extract network card(s) information
            # JSON_ID; enclosureID; deviceID; speed
          - type: json2csv
            entryKey: /entry/value/data
            properties: ../../Column(2);/portId;/portSpeed
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Remove the "G" from the link speed
          - type: replace
            column: 4
            existingValue: G
            newValue: ""
          # Convert linkspeed from Gbps to Mbps
          - type: multiply
            column: 4
            value: 1000
          # Remove the "AUT" from the link speed
          - type: replace
            column: 4
            existingValue: AUT
            newValue: ""
      mapping:
        # NetworkCard instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; status; status information
        source: "${source::monitors.network.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.network.bandwidth.limit: megaBit2Bit($4)
  other_device:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract other device(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID
          - type: json2csv
            entryKey: /entry/value/driveboxes/encs
            properties: ../../../Column(2);/location;/location
          # Remove results with no location
          - type: keepOnlyMatchingLines
            column: 4
            regExp: .
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add enclosure name to device ID
            # JSON_ID; enclosureID; DeviceID; DisplayID; type
          - type: rightConcat
            column: 4
            value: ;Drive Box Enclosure
      mapping:
        # OtherDevice instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; DisplayID; type
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          device_type: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s: %s\", $5, $4)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract other device(s) information
            # JSON_ID; enclosureID; DeviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/driveboxes/encs
            properties: ../../../Column(2);/location;/status;/status
          # Remove results with no location
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # OtherDevice instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; status; status information
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="other_device"}: $4
        legacyTextParameters:
          StatusInformation: $5
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/drives
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Extract physical disk(s) information
            # JSON_ID; enclosureID; DeviceID; DisplayID; model; size
          - type: json2csv
            entryKey: /entry/value/data
            properties: ../../Column(2);/driveLocationID;/driveLocationID;/driveType;/totalCapacity
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Covert size from GB to B
          - type: multiply
            column: 6
            value: 1000000000
      mapping:
        # PhysicalDisk instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; DisplayID; model; size
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          model: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, bytes2HumanFormatBase10($6))}"
        metrics:
          hw.physical_disk.size: $6
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: /ConfigurationManager/v1/objects/storages/$2/drives
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Extract physical disk(s) information
            # JSON_ID; enclosureID; DeviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/data
            properties: ../../Column(2);/driveLocationId;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::hddStatusTranslationTable}"
          # Translate device status to readable status value
          - type: translate
            column: 5
            translationTable: "${translation::hddStatusInformationTranslationTable}"
      mapping:
        # PhysicalDisk instance table - Source(1)
        # JSON_ID; enclosureID; DeviceID; status; status information
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="physical_disk"}: $4
        legacyTextParameters:
          StatusInformation: $5
  power_supply:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract power supply(s) information
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: json2csv
            entryKey: /entry/value/chbbps
            properties: ../../Column(2);/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Add power supply type
          - type: rightConcat
            column: 4
            value: ;Channel Board Box Power Supply
        source(2):
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract power supply(s) information
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: json2csv
            entryKey: /entry/value/dkcpss
            properties: ../../Column(2);/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add power supply type
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: rightConcat
            column: 4
            value: ;Disk Controller Power Supply
        source(3):
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract power supply(s) information
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: json2csv
            entryKey: /entry/value/driveBoxes/dbps
            properties: ../../../Column(2);/location;/location
          # Remove results with no location
          - type: keepOnlyMatchingLines
            column: 4
            regExp: .
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
            # Add power supply type
            # JSON_ID; enclosureID; deviceID; displayID; type
          - type: rightConcat
            column: 4
            value: ;Drive Box Power Supply
        source(4):
          # Source(4) = Union of Source(1), Source(2) and Source(3)
          # JSON_ID; enclosureID; deviceID; displayID; type
          type: tableUnion
          tables:
          - "${source::monitors.power_supply.discovery.sources.source(1)}"
          - "${source::monitors.power_supply.discovery.sources.source(2)}"
          - "${source::monitors.power_supply.discovery.sources.source(3)}"
      mapping:
        # PowerSupply instance table - Source(4)
        # JSON_ID; enclosureID; deviceID; displayID; type
        source: "${source::monitors.power_supply.discovery.sources.source(4)}"
        attributes:
          id: $3
          __display_id: $4
          power_supply_type: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $5)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract network card(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/chbbps
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
        source(2):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract network card(s) information
            # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/dkcpss
            properties: ../../Column(2);/location;/status;/status
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
        source(3):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          # JSON_ID; enclosureID; deviceID; status; status information
          - type: json2csv
            entryKey: /entry/value/driveBoxes/dbps
            properties: ../../../Column(2);/location;/status;/status
          # Remove results with no location
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
        source(4):
          # Source(4) = Union of Source(1), Source(2) and Source(3)
          # JSON_ID; enclosureID; DeviceID; status; status information
          type: tableUnion
          tables:
          - "${source::monitors.power_supply.collect.sources.source(1)}"
          - "${source::monitors.power_supply.collect.sources.source(2)}"
          - "${source::monitors.power_supply.collect.sources.source(3)}"
      mapping:
        # PowerSupply instance table - Source(4)
        # JSON_ID; enclosureID; deviceID; status; status information
        source: "${source::monitors.power_supply.collect.sources.source(4)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="power_supply"}: $4
        legacyTextParameters:
          StatusInformation: $5
  temperature:
    discovery:
      sources:
        source(1):
          # Discovery
          # Copy the enclosure component discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
            # Extract temperature(s) information
            # JSON_ID; enclosureID; deviceID; displayID
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/location
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
      mapping:
        # Temperature instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; displayID
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          sensor_location: Disk Controller
          hw.parent.type: disk_controller
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Disk Controller\")}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Copy the enclosure component collect
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Extract temperature(s) information
            # JSON_ID; enclosureID; deviceID; status; status information; temperature
          - type: json2csv
            entryKey: /entry/value/ctls
            properties: ../../Column(2);/location;/temperatureStatus;/temperatureStatus;/temperature
          # Add enclosure name to device ID
          - type: leftConcat
            column: 3
            value: $2
          # Translate status information to status value
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # Temperature instance table - Source(1)
        # JSON_ID; enclosureID; deviceID; status; status information; temperature
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="temperature"}: $4
          hw.temperature: $6
        legacyTextParameters:
          StatusInformation: $5
translations:
  statusTranslationTable:
    Warning: degraded
    default: UNKNOWN
    Failed: failed
    Normal: ok
    Blocked: failed
  hddStatusTranslationTable:
    BLK: failed
    default: UNKNOWN
    BSY: degraded
    NML: ok
  hddStatusInformationTranslationTable:
    BLK: Blocked
    default: Unknown
    BSY: Busy
    NML: Normal
