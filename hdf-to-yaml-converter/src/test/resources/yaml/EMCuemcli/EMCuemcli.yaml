---
connector:
  displayName: EMC uemcli (VNXe)
  platforms: EMC VNXe
  reliesOn: uemcli
  version: 1.0
  information: This connector provides hardware monitoring for EMC VNXe Storage Systems through the uemcli command line utility.
  detection:
    appliesTo:
    - Storage
    connectionTypes:
    - remote
    criteria:
    # Only for type storage
    - type: deviceType
      keep:
      - Storage
    # Checks that SMCLI is on the local machine - in Portal smcli is run from the RSM
    - type: osCommand
      commandLine: uemcli -version | more
      executeLocally: true
      forceSerialization: true
      expectedResult: 'Version:'
      errorMessage: uemcli not installed or not in path.
    # Checks that SMCLI returns a physical disk
    - type: osCommand
      commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /sys/general show | more"
      executeLocally: true
      forceSerialization: true
      expectedResult: Model
      errorMessage: uemcli could not connect or did not find a system.
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /sys/general show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # SystemID;SystemName;Model;SerialNumber;HealthValue;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6"
      mapping:
        # The discovery table
        # SystemID;SystemName;Model;SerialNumber;HealthValue;
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          vendor: EMC
          model: $3
          serial_number: $4
          type: Storage
          name: "${awk::sprintf(\"Storage: %s (%s %s)\", $2, \"EMC\", $3)}"
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /sys/general show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # SystemID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,6"
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="enclosure"}: $2
        legacyTextParameters:
          StatusInformation: $3
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/bat show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove BAT_ from the DeviceName
            # DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 2
            existingValue: BAT_
            newValue: ""
      mapping:
        # The discovery table
        # DeviceID;DeviceName;HealthValue;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept  /env/bat show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="battery"}: $2
        legacyTextParameters:
          StatusInformation: $3
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/mm show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove MM_ from the DeviceName
            # DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 2
            existingValue: MM_
            newValue: ""
      mapping:
        # The discovery table
        # DeviceID;DeviceName;HealthValue;
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/mm show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept  /env/ps show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove POW_ from the DeviceName
            # DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 2
            existingValue: POW_
            newValue: ""
      mapping:
        # The discovery table
        # DeviceID;DeviceName;HealthValue;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/ps show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/iomodule show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: IO Module;IO_
            # Remove IO_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: IO_
            newValue: ""
        source(2):
          # Source(2) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/dpe show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: Disk Processor Enclosure;DPE_
            # Remove DPE_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: DPE_
            newValue: ""
        source(3):
          # Source(3) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/sp show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: Storage Processor;SP_
            # Remove SP_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: SP_
            newValue: ""
        source(4):
          # Source(4) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/dae show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: Disk Array Enclosure;DAE_
            # Remove DAE_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: DAE_
            newValue: ""
        source(5):
          # Source(5) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/ccard show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: Cache Card;EHM_
            # Remove EHM_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: EHM_
            newValue: ""
        source(6):
          # Source(6) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/lcc show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: leftConcat
            column: 1
            value: Link Control Card;LCC_
            # Remove LCC_ from the DeviceName
            # DeviceType;DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 3
            existingValue: LCC_
            newValue: ""
        source(7):
          # Join all this into one table..
          # DeviceID;DeviceName;HealthValue;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(1)}"
          - "${source::monitors.other_device.discovery.sources.source(2)}"
          - "${source::monitors.other_device.discovery.sources.source(3)}"
          - "${source::monitors.other_device.discovery.sources.source(4)}"
        source(8):
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(7)}"
          - "${source::monitors.other_device.discovery.sources.source(5)}"
          - "${source::monitors.other_device.discovery.sources.source(6)}"
      mapping:
        # The discovery table
        # DeviceType;DeviceID;DeviceName;HealthValue;
        source: "${source::monitors.other_device.discovery.sources.source(8)}"
        attributes:
          device_type: $1
          id: $2
          __display_id: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s: %s\", $1, $3)}"
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/iomodule show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: IO_
        source(2):
          # Source(2) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/dpe show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: DPE_
        source(3):
          # Source(3) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/sp show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: SP_
        source(4):
          # Source(4) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/dae show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: DAE_
        source(5):
          # Source(5) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/ccard show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: EHM_
        source(6):
          # Source(6) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/lcc show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Make ID unique
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: LCC_
        source(7):
          # Join all this into one table..
          # DeviceID;HealthValue;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
          - "${source::monitors.other_device.collect.sources.source(3)}"
          - "${source::monitors.other_device.collect.sources.source(4)}"
        source(8):
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(7)}"
          - "${source::monitors.other_device.collect.sources.source(5)}"
          - "${source::monitors.other_device.collect.sources.source(6)}"
          computes:
          # Duplicate the Health Value
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.other_device.collect.sources.source(8)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/fan show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove Fan from the DeviceName
            # DeviceID;DeviceName;HealthValue;
          - type: replace
            column: 2
            existingValue: Fan_
            newValue: ""
      mapping:
        # The discovery table
        # DeviceID;DeviceName;HealthValue;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/fan show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/disk show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
            # Convert from GB to B
            # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          - type: multiply
            column: 4
            value: 1073741824
        source(2):
          # Source(2) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/ssd show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            #  DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
            # Convert from GB to B
            # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          - type: multiply
            column: 4
            value: 1073741824
            # Add SSD to the ID
            # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          - type: leftConcat
            column: 1
            value: SSD_
        source(3):
          # Union 1 and 2
          # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
          type: tableUnion
          tables:
          - "${source::monitors.physical_disk.discovery.sources.source(1)}"
          - "${source::monitors.physical_disk.discovery.sources.source(2)}"
      mapping:
        # The discovery table
        # DeviceID;DeviceName;HealthValue;Size;Pool;Manufacturer;Model;PartNumber;SerialNumber;Firmware;
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          vendor: $6
          model: $7
          serial_number: $9
          firmware_version: $10
          info: "${awk::join(\" \", $5, $8)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $6, bytes2HumanFormatBase10($4))}"
        metrics:
          hw.physical_disk.size: $4
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/disk show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
        source(2):
          # Source(1) = uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /env/ssd show | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;HealthValue;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Add SSD to the ID
            # DeviceID;HealthValue;
          - type: leftConcat
            column: 1
            value: SSD_
        source(3):
          # Union 1 and 2
          # DeviceID;HealthValue;
          type: tableUnion
          tables:
          - "${source::monitors.physical_disk.collect.sources.source(1)}"
          - "${source::monitors.physical_disk.collect.sources.source(2)}"
          computes:
          # Duplicate the Health Value
          - type: duplicateColumn
            column: 2
            # Now translate into OK/Warning/Alarm
            # SystemID;PatrolStatus;HealthValue;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # SystemID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.physical_disk.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/fc show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: FC Port;FC_
        source(2):
          # Source(2) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/sas show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: SAS Port;SAS_
        source(3):
          # Source(3) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/eth show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: Ethernet Port;ETH_
        source(4):
          # Join all this into one table..
          # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(1)}"
          - "${source::monitors.network.discovery.sources.source(2)}"
          - "${source::monitors.network.discovery.sources.source(3)}"
      mapping:
        # InstanceTable = Source(7)
        # DeviceType;DeviceID;DeviceName;HealthValue;Link;
        source: "${source::monitors.network.discovery.sources.source(4)}"
        attributes:
          id: $2
          __display_id: $3
          device_type: $1
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $3, $1)}"
    collect:
      # The NetworkCard collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/fc show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: FC Port;FC_
        source(2):
          # Source(2) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/sas show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: SAS Port;SAS_
        source(3):
          # Source(3) = the output of uemcli
          type: osCommand
          commandLine: "uemcli -d %{HOSTNAME} -u %{USERNAME} -p %{PASSWORD} -sslPolicy accept /net/port/eth show -detail | more"
          executeLocally: true
          forceSerialization: true
          timeout: 60
          computes:
            # Process uemcli's output through awk EmbeddedFile
            # DeviceID;DeviceName;HealthValue;Link;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add Device Type and make ID unique
            # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          - type: leftConcat
            column: 1
            value: Ethernet Port;ETH_
        source(4):
          # Join all this into one table..
          # DeviceType;DeviceID;DeviceName;HealthValue;Link;
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(1)}"
          - "${source::monitors.network.collect.sources.source(2)}"
          - "${source::monitors.network.collect.sources.source(3)}"
          computes:
            # Duplicate the Health Value
            # DeviceType;DeviceID;DeviceName;HealthValue;HealthValue;Link;
          - type: duplicateColumn
            column: 4
            # Now translate into OK/Warning/Alarm
            # DeviceType;DeviceID;DeviceName;HealthValue;HealthValue;Link;
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
            # Now translate Status information
            # DeviceType;DeviceID;DeviceName;HealthValue;HealthValue;Link;
          - type: translate
            column: 5
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # The value table
        source: "${source::monitors.network.collect.sources.source(4)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $4
          hw.network.up: legacyLinkStatus($6)
        legacyTextParameters:
          StatusInformation: $5
translations:
  statusInformationTranslationTable:
    "0": Unknown
    "25": Critical Failure
    "15": Minor Failure
    "5": ""
    "7": OK but some issue present
    "30": Non-Recoverable Error
    Default: Unknown Status
    "20": Major Failure
    "10": Degraded
  statusTranslationTable:
    "0": UNKNOWN
    "25": failed
    "15": degraded
    "5": ok
    "7": ok
    "30": failed
    Default: UNKNOWN
    "20": failed
    "10": degraded
