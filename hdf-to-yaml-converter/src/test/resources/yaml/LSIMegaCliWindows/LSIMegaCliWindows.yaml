---
connector:
  displayName: LSI MegaCli
  platforms: Any system with LSI MegaCli
  reliesOn: Windows system commands (MegaCli / CmdTool2)
  information: Gives physical disk and array status.
  version: 1.0
  detection:
    appliesTo:
    - NT
    criteria:
    - type: deviceType
      keep:
      - NT
    - type: osCommand
      commandLine: MegaCli -v -NoLog
      expectedResult: "Exit Code: 0x00"
      errorMessage: MegaCli not installed on this server.
    - type: osCommand
      commandLine: MegaCli -PDList -aALL -NoLog
      expectedResult: "[Pp][Dd] [Tt]ype"
      errorMessage: No Physical Disks Found
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          type: osCommand
          commandLine: MegaCli -AdpAllInfo -aALL -NoLog
          computes:
            # Reformat MegaCli's output through awk see EmbeddedFile(1)
            # MSHW;controllerID;model;serialnumber;firmwareversion;biosversion;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6"
        source(2):
          # Source(2) = lsiutil output
          type: osCommand
          commandLine: MegaCli -PDList -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # MSHW;controllernumber;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: 2
        source(3):
          # Source (3) Table Join of Source (1) and Source (2) to keep only controllers that have physical disks associated with them
          # controllerID;model;serialnumber;firmwareversion;biosversion;controllerID
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
        source(4):
          type: osCommand
          commandLine: MegaCli -AdpBbuCmd -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            #    MSHW;ControllerNumber;BatteryPatrolStatus;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(5):
          # Source (5) Table Join of Source (1) and Source (2) to activate / deactivate the battery parameter
          # controllerID;model;serialnumber;firmwareversion;biosversion;controllerID;ControllerNumber;BatteryPatrolStatus;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(3)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(4)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(5)
        # controllerID;model;serialnumber;firmwareversion;biosversion;controllerID;ControllerNumber;BatteryPatrolStatus;
        source: "${source::monitors.disk_controller.discovery.sources.source(5)}"
        attributes:
          id: $1
          controller_number: $1
          model: $2
          serial_number: $3
          firmware_version: $4
          bios_version: $5
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $1, $2)}"
        conditionalCollection:
          batterystatus: $8
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: MegaCli -AdpBbuCmd -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            #    MSHW;ControllerNumber;BatteryPatrolStatus;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # ValueTable = Source(1)
        # ControllerNumber;BatteryPatrolStatus;
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        attributes:
          id: $1
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: MegaCli -PDList -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # MSHW;controllernumber;location;type;size;model;status;statusinformation;deviceID;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,9"
            # Translate size into bytes
            # controllernumber;location;type;size;model;deviceID;
          - type: multiply
            column: 4
            value: 1073741824
          - type: leftConcat
            column: 3
            value: "Type: "
      mapping:
        # InstanceTable = Source(1)
        # controllernumber;location;type;size;model;deviceID;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          model: $5
          id: $6
          info: "${awk::join(\" \", $2, $3)}"
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $1)"
          name: "${awk::sprintf(\"%s (%s)\", $6, bytes2HumanFormatBase10($4))}"
        metrics:
          hw.physical_disk.size: $4
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: MegaCli -PDList -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # status;statusinformation;deviceID;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "7,8,9"
            # Translate the first status column into a PATROL status
            # Patrolstatus;statusinformation;deviceID;
          - type: translate
            column: 1
            translationTable: "${translation::PhysicalDiskStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        attributes:
          id: $3
        metrics:
          hw.status{hw.type="physical_disk"}: $1
        legacyTextParameters:
          StatusInformation: $2
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: MegaCli -LDInfo -Lall -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # MSHW;controllernumber;deviceID;name;raidLevel;size;status;statusInformation;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6"
            # Translate size into bytes
            # controllernumber;deviceID;name;raidLevel;size;
          - type: multiply
            column: 5
            value: 1073741824
      mapping:
        # InstanceTable = Source(1)
        # controllernumber;deviceID;name;raidLevel;size;
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          __display_id: $3
          raid_level: $4
          id: $2
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $1)"
          name: "${awk::sprintf(\"%s (%s - %s)\", $3, $4, bytes2HumanFormatBase2($5))}"
        metrics:
          hw.logical_disk.limit: $5
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: MegaCli -LDInfo -Lall -aALL -NoLog
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # MSHW;controllernumber;deviceID;name;raidLevel;size;status;statusInformation;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,7,8"
            # Translate the first status column into a PATROL status
            # deviceID;Patrolstatus;statusinformation;
          - type: translate
            column: 2
            translationTable: "${translation::LogicalDiskStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # deviceID;Patrolstatus;statusinformation;
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  LogicalDiskStatusTranslationTable:
    Degraded: degraded
    Offline: failed
    Partially: degraded
    Optimal: ok
    Default: UNKNOWN
  PhysicalDiskStatusTranslationTable:
    Copyback: degraded
    Failed: failed
    Unconfigured(good): ok
    Hotspare: failed
    Offline: ok
    Unconfigured(bad): degraded
    Online: ok
    Default: UNKNOWN
    Rebuild: degraded
