---
embedded:
  EmbeddedFile(1): "BEGIN {\n\tFS = \";\";\n\tsystemType = \"\";\n\tsystemVendor = \"\";\n\tsystemModel = \"\";\n\tsystemSerialNumber = \"\";\n\tfoundSystemType = 0;\n\tsystemPowerConsumption = \"\";\n\tsystemStatus = \"\";\n\tsystemStatusInformation = \"\";\n\tsystemSensorNameList = \"\";\n\tmachineStatus = \"ON\";\n}\n($1 == \"FRU\" && foundSystemType == 0) {\n\tsystemVendor = $2;\n\tlcaseSystemVendor = tolower(systemVendor);\n\tsystemModel = $3;\n\tsystemSerialNumber = $4;\n\n\tif (substr(lcaseSystemVendor, 1, 4) == \"sun \" || substr(lcaseSystemVendor, 1, 6) == \"oracle\" )\n\t{\n\t\tif (tolower(systemModel) == \"cmm\")\n\t\t{\n\t\t\tnext;\n\t\t}\n\t\tsystemVendor = \"Sun\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 7) == \"hewlett\" || substr(lcaseSystemVendor, 1, 2) == \"hp\")\n\t{\n\t\tsystemVendor = \"HP\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 4) == \"dell\")\n\t{\n\t\tsystemVendor = \"Dell\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 22) == \"international business\" || substr(lcaseSystemVendor, 1, 3) == \"ibm\" || systemModel ~ /^[Ss]ystem x/)\n\t{\n\t\tsystemVendor = \"IBM\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 5) == \"cisco\")\n\t{\n\t\tsystemVendor = \"Cisco\";\n\t\tsystemType = systemVendor;\n\t\tsystemModel = \"UCS \" systemModel;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 7) == \"fujitsu\")\n\t{\n\t\tsystemVendor = \"Fujitsu-Siemens\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 3) == \"nec\")\n\t{\n\t\tsystemVendor = \"NEC\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 4) == \"bull\")\n\t{\n\t\tsystemVendor = \"BULL\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 10) == \"supermicro\")\n\t{\n\t\tsystemVendor = \"SuperMicro\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 4) == \"acer\")\n\t{\n\t\tsystemVendor = \"Acer\";\n\t\tsystemType = systemVendor;\n\t}\n\telse if (substr(lcaseSystemVendor, 1, 7) == \"hitachi\" || substr(lcaseSystemVendor, 1, 3) == \"hds\")\n\t{\n\t\tsystemVendor = \"Hitachi\"\n\t\tsystemType = systemVendor;\n\t}\n\n\tif (systemType != \"\")\n\t{\n\t\tfoundSystemType = 1;\n\t}\n}\n($1 == \"PowerConsumption\") {\n\n\t##############################################################\n\t#\n\t# Section to be customized per vendor/model to handle\n\t# the power consumption of the monitored system\n\t#\n\t# (ex.: recognizing input/output currents, adding up the power\n\t# consumed by several power supplies, etc.)\n\t#\n\t##############################################################\n\n\tif (systemType == \"Cisco\")\n\t{\n\t\tif ($3 ~ /^PSU[0-9]_PIN$/ && $5 ~ /^[0-9]/)\n\t\t{\n\t\t\tsystemPowerConsumption = systemPowerConsumption + $5;\n\t\t}\n\t}\n\telse\n\t{\n\t\t# By default, take the highest reported value\n\t\tif ($5 ~ /^[0-9]/)\n\t\t{\n\t\t\tif ($5 > systemPowerConsumption || systemPowerConsumption == \"\")\n\t\t\t{\n\t\t\t\tsystemPowerConsumption = $5;\n\t\t\t}\n\t\t}\n\t}\n}\n{\n\t# Read the device characteristics\n\tdeviceType = $1;\n\tdeviceID = $2;\n\tentityID = $3;\n\tvendor = $4;\n\tmodel = $5;\n\tserialNumber = $6;\n\tsensorList = $7;\n\n\t# Skip empty stuff\n\tif (deviceType == \"\" || deviceID == \"\")\n\t{\n\t\tnext;\n\t}\n\n\t# Skip SEL Fullness Temperature Devices\n\tif (deviceType == \"Temperature\" && entityID == \"SEL Fullness\")\n\t{\n\t\tnext;\n\t}\n\n\t# Simply re-print numeric sensors\n\tif (deviceType == \"Voltage\" || deviceType == \"Temperature\" || deviceType == \"Fan\" || deviceType == \"Current\" || deviceType == \"PowerConsumption\" || deviceType == \"EnergyUsage\" || deviceType == \"FRU\")\n\t{\n\t\tprint \"MSHW;\" $0;\n\t\tnext;\n\t}\n\n\t##############################################################\n\t#\n\t# Section where you can customize the device identification\n\t# on a per-vendor basis\n\t#\n\t##############################################################\n\tif (systemType == \"Sun\")\n\t{\n\t\tif (sensorList ~ /nem[0-9]\\./ || sensorList ~ \"NEM[0-9]/\")\n\t\t{\n\t\t\tdeviceType = \"NEM\";\n\t\t}\n\n\t\tif (deviceType == \"System Board\")\n\t\t{\n\t\t\tif (sensorList ~ /bl[0-9]+\\./)\n\t\t\t{\n\t\t\t\tdeviceType = \"Blade\";\n\t\t\t}\n\t\t}\n\t}\n\telse if (systemType == \"IBM\")\n\t{\n\t\tif (deviceType == \"Add-in Card\")\n\t\t{\n\t\t\tif (sensorList ~ /SAS Riser/)\n\t\t\t{\n\t\t\t\tdeviceType = \"SAS Riser\"\n\t\t\t}\n\t\t\telse if (sensorList ~ /PCI Riser/)\n\t\t\t{\n\t\t\t\tdeviceType = \"PCI Riser\"\n\t\t\t}\n\t\t}\n\t\telse if (deviceType == \"Power Module\")\n\t\t{\n\t\t\tif (sensorList ~ /VRD Status/)\n\t\t\t{\n\t\t\t\tdeviceType = \"Voltage Regulator-Down\"\n\t\t\t}\n\t\t}\n\t\telse if (deviceType == \"Group\")\n\t\t{\n\t\t\tif (sensorList ~ /Mem Card/)\n\t\t\t{\n\t\t\t\tdeviceType = \"Memory Device\"\n\t\t\t}\n\t\t}\n\t}\n\n\t# Split that list into an array for further processing and interpretation\n\tsensorCount = split(sensorList, sensorArray, \"\\\\|\");\n\n\tstatus = \"\";\n\tstatusInformation = \"\";\n\tsensorNameList = \"\";\n\tfor (i=1 ; i<=sensorCount ; i++)\n\t{ status_atStart = status\n\t\tequalsIndex = index(sensorArray[i], \"=\");\n\t\tif (!equalsIndex)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tsensorName = substr(sensorArray[i], 1, equalsIndex - 1);\n\t\tsensorReading = substr(sensorArray[i], equalsIndex + 1, length(sensorArray[i]) - equalsIndex);\n\t\tlcaseSensorReading = tolower(sensorReading);\n\n\t\t# Add the sensor name to the list of sensor names, so that the user will be able to see the list of\n\t\t# sensors associated with one device\n\t\tsensorNameList = sensorNameList sensorName \", \";\n\n\t\t# Sensors whose state can only be YES or NO (Asserted or Deasserted)\n\t\t# and that, logically, need to be specifically interpreted\n\t\t# Like (P0_OK == 1) means OK, while (P0_FAULT == 1) means ALARM, see?\n\t\tif (sensorReading == \"\" || sensorReading == 0 || sensorReading == 1)\n\t\t{\n\t\t\t# Specific stuff\n\t\t\tif (systemType == \"Hitachi\")\n\t\t\t{\n\t\t\t\tif (sensorName ~ / INTR$/)\n\t\t\t\t{\n\t\t\t\t\t# Skip MB0 INTR and similar sensors, because they only report when a button has been pressed\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t\telse if (sensorName ~ /PWR MGMT$/ || sensorName ~ /Power Mgmt$/)\n\t\t\t\t{\n\t\t\t\t\t# Skip power management sensors\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t\telse if (sensorName == \"AGT_Notify\")\n\t\t\t\t{\n\t\t\t\t\t# Skip AGT_Notify, which we can't do anything with, since we couldn't test it\n\t\t\t\t\t# (it's actually on OEM sensor)\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t# For all sensors with boolean value, in Hitachi systems, '1' means 'BAD'\n\t\t\t\t\tif (sensorReading == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\t\t\tstatusInformation = statusInformation sensorName \" Asserted - \";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"OK|\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t# Dell Specific stuff\n\t\t\telse if (systemType == \"Dell\")\n      {\n\t\t\t\tif (sensorName ~ /VCORE/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" VCORE Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /VCACHE [0-9]+ PG/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" VCACHE Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /PROC VTT PG/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" PROC VTT PG Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /[0-9.]+ PG/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Voltage Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /[0-9.]+ VIDEO PG/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" VIDEO Voltage Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t}\n\n\t\t\t# Sun Specific stuff\n\t\t\telse if (systemType == \"Sun\")\n\t\t\t{\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057VINOK/)\n\t\t\t\t{ if (sensorReading == 0)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Voltage In Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t  if (sensorName ~ /^PS[0-9]+\\057PWROK/)\n\t\t\t\t{ if (sensorReading == 0)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Power In Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057FAN_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Fan In Fault - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057I_OUT_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Output Current Error - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057I_OUT_WARN/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"WARN|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Output Current Warning - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057T_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Temperature Error - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057FAN_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"WARN|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Temperature Warning - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057V_IN_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Input Voltage Error - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057V_IN_WARN/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"WARN|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Input Voltage Warning - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057V_OUT_ERR/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Output Voltage Error - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PS[0-9]+\\057V_OUT_OK/)\n\t\t\t\t{ if (sensorReading == 0)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Output Voltage Not OK - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^INTSW/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \" Intrusion Detected - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t\tif (sensorName ~ /^PWRBS/)\n\t\t\t\t{ if (sensorReading == 1)\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"ALARM|\";\n\t\t\t\t\t\t  statusInformation = statusInformation sensorName \"  A power supply sensor has detected an error - \";\n\t\t\t\t\t   }\n\t\t\t\t\t    else\n\t\t\t\t\t   {\n\t\t\t\t\t\t  status = status \"OK|\";\n\t\t\t\t\t  }\n\t\t\t  }\n\t\t\t}\n\n\t\t\t# Non vendor-specific stuff\n\t\t\telse\n\t\t\t{\n\t\t\t\t# Try to be clever\n\t\t\t\tif (index(tolower(sensorName), \"fault\") || index(tolower(sensorName), \"fail\") || tolower(sensorName) ~ /err$/)\n\t\t\t\t{\n\t\t\t\t\tif (sensorReading == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\t\t\tstatusInformation = statusInformation sensorName \" Asserted - \";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"OK|\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstatus = status sensorName \"=\" sensorReading \"|\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t# Here come OEM specific sensors, whose value need to be even more\n\t\t# specifically interpreted\n\t\telse if (substr(sensorReading, 1, 2) == \"0x\")\n\t\t{\n\t\t\t# Very specific stuff\n\t\t\tsensorReading = substr(sensorReading, 3, 4);\n\t\t\tdigit1 = substr(sensorReading, 1, 1);\n\t\t\tdigit2 = substr(sensorReading, 2, 1);\n\t\t\tdigit3 = substr(sensorReading, 3, 1);\n\t\t\tdigit4 = substr(sensorReading, 4, 1);\n\n\t\t\tif (systemType == \"Cisco\")\n\t\t\t{\n\t\t\t\tif (substr(sensorName, 1, 4) == \"LED_\")\n\t\t\t\t{\n\t\t\t\t\tif (digit3 == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor = \"Green\";\n\t\t\t\t\t\tonStatus = \"OK\";\n\t\t\t\t\t\toffStatus = \"OK\";\n\t\t\t\t\t\tblinkingStatus = \"OK\";\n\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit3 == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor = \"Amber\";\n\t\t\t\t\t\tonStatus = \"WARN\";\n\t\t\t\t\t\toffStatus = \"OK\";\n\t\t\t\t\t\tblinkingStatus = \"WARN\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit3 == 4)\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor = \"Blue\";\n\t\t\t\t\t\tonStatus = \"OK\";\n\t\t\t\t\t\toffStatus = \"OK\";\n\t\t\t\t\t\tblinkingStatus = \"OK\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit3 == 8)\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor = \"Red\";\n\t\t\t\t\t\tonStatus = \"WARN\";\n\t\t\t\t\t\toffStatus = \"OK\";\n\t\t\t\t\t\tblinkingStatus = \"WARN\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor = \"\";\n\t\t\t\t\t\tonStatus = \"OK\";\n\t\t\t\t\t\toffStatus = \"OK\";\n\t\t\t\t\t\tblinkingStatus = \"OK\";\n\t\t\t\t\t}\n\n\t\t\t\t\tif (digit4 == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tledStatus = \"Off\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit4 == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tledStatus = \"On\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit4 == 4)\n\t\t\t\t\t{\n\t\t\t\t\t\tledStatus = \"Blinking\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (digit4 == 8)\n\t\t\t\t\t{\n\t\t\t\t\t\tledStatus = \"Blinking\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tledStatus = \"UNKNOWN\";\n\t\t\t\t\t}\n\t\t\t\t\tprint \"MSHW;LED;\" sensorName \";\" sensorName \";\" deviceID \";\" color \";\" onStatus \";\" offStatus \";\" blinkingStatus \";\" ledStatus;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (substr(sensorName, 1, 5) == \"DDR3_\")\n\t\t\t\t{\n\t\t\t\t\tif (digit2 == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"OK|\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\t\t\tstatusInformation = statusInformation sensorName \" Failed - \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstatus = status sensorName \"=\" sensorReading \"|\";\n\t\t\t}\n\t\t}\n\n\t\t# And now, finally, the normal discrete sensors, with standard values\n\t\t# These should be easy to interpret, except when vendors screw up their instrumentation\n\t\t# chip, which does happen, unfortunately...\n\t\telse\n\t\t{\n\t\t\t# Cisco-specific mess\n\t\t\tif (systemType == \"Cisco\")\n\t\t\t{\n\t\t\t\tif (sensorName ~ /^SAS[0-9]+_LINK_STATUS$/)\n\t\t\t\t{\n\t\t\t\t\tif (lcaseSensorReading == \"transition to off line\")\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"OK|\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\t\t\tstatusInformation = statusInformation \"Disconnected - \";\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (sensorName == \"PSU_REDUNDANCY\")\n\t\t\t\t{\n\t\t\t\t\t# Skip this one entirely, because it creates a \"fake\" power supply\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t\telse if (sensorName == \"BIST_FAIL\")\n\t\t\t\t{\n\t\t\t\t\t# Skip this sensor (but keep the device).  Remove name from Sensor List and continue to next sensor.\n\t\t\t\t\tgsubregex = sensorName \", \"\n\t\t\t\t\tgsub(gsubregex,\"\",sensorNameList);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (sensorName ~ /^HDD_[0-9]+_STATUS$/)\n\t\t\t\t{\n\t\t\t\t\tdeviceID = substr(sensorName, 1, 6);\n\t\t\t\t\tif (lcaseSensorReading == \"state 0 asserted\" || lcaseSensorReading == \"drive present\")\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"OK|\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\t\t\tstatusInformation = statusInformation \"Faulty - \";\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t# IBM Specific stuff\n\t\t\telse if (systemType == \"IBM\")\n\t\t\t{\n\t\t\t\tif (sensorName ~ /^Cooling Zone/)\n\t\t\t\t{\n\t\t\t\t\t# Skip, because it just says that the fans' redundancy is OK\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t################################\n\t\t\t# IPMI standard states\n\t\t\t################################\n\n\t\t\t########### Digital states\n\t\t\tif (lcaseSensorReading == \"predictive failure deasserted\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"predictive failure asserted\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Predicted Failure - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"limit not exceeded\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"limit exceeded\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Limit Exceeded - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"performance met\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"performance lags\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Performance Lags - \";\n\t\t\t}\n\n\n\t\t\t########## Availability states\n\t\t\tif (lcaseSensorReading == \"device removed/device absent\" || lcaseSensorReading == \"device absent\")\n\t\t\t{\n\t\t\t\tstatus = \"ALARM|\";\n\t\t\t\tstatusInformation = \"Missing reported by \" sensorName;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"device inserted/device present\" || lcaseSensorReading == \"device present\")\n\t\t\t{\n\t\t\t\t# Present, well, it doesnt mean much, but at least it s detected\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"device enabled\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"device disabled\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation \"Disabled - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to running\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to in test\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": In Test - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to power off\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Power Off - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to on line\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Online - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to off line\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Offline - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to off duty\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Off Duty - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to degraded\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Degraded - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to power save\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Power Save - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"install error\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Install Error - \";\n\t\t\t}\n\n\n\t\t\t########## Power states\n\t\t\tif (lcaseSensorReading == \"d0 power state\" || lcaseSensorReading == \"d1 power state\" || lcaseSensorReading == \"d2 power state\" || lcaseSensorReading == \"d3 power state\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\n\t\t\t########## Redundancy states\n\t\t\tif (lcaseSensorReading == \"fully redundant\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"redundancy lost\" || lcaseSensorReading == \"redundancy degraded\" || lcaseSensorReading == \"redundancy degraded from fully redundant\" || lcaseSensorReading == \"redundancy degraded from non-redundant\" || lcaseSensorReading == \"non-redundant: sufficient from redundant\" || lcaseSensorReading == \"non-redundant: sufficient from insufficient\" || lcaseSensorReading == \"non-redundant: insufficient resources\" || lcaseSensorReading == \"non-redundant:sufficient resources from redundant redundancy has been lost but unit is functioning with minimum resources needed for normal operation\" || lcaseSensorReading == \"non-redundant:sufficient resources from insufficient resources unit has regained minimum resources needed for normal operation\" || lcaseSensorReading == \"non-redundant:insufficient resources unit is non-redundant and has insufficient resources to maintain normal operation\" || lcaseSensorReading == \"redundancy degraded from fully redundant unit has lost some redundant resource(s) but is still in a redundant state\" || lcaseSensorReading == \"redundancy degraded from non-redundant unit has regained some resource(s) and is redundant but not fully redundant\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\n\n\t\t\t######### Physical security\n\t\t\tif (lcaseSensorReading == \"general chassis intrusion\" || lcaseSensorReading == \"drive bay intrusion\" || lcaseSensorReading == \"i/o card area intrusion\" || lcaseSensorReading == \"processor area intrusion\" || lcaseSensorReading == \"system unplugged from lan\" || lcaseSensorReading == \"unauthorized dock\" || lcaseSensorReading == \"fan area intrusion\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\n\n\t\t\t########## Platform security\n\t\t\tif (lcaseSensorReading == \"front panel lockout violation attempted\" || lcaseSensorReading == \"pre-boot password violation - user password\" || lcaseSensorReading == \"pre-boot password violation - setup password\" || lcaseSensorReading == \"pre-boot password violation - network boot password\" || lcaseSensorReading == \"other pre-boot password violation\" || lcaseSensorReading == \"out-of-band access password violation\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\n\n\t\t\t######### Processor states\n\t\t\tif (lcaseSensorReading == \"ierr\" || lcaseSensorReading == \"thermal trip\" || lcaseSensorReading == \"frb1/bist failure\" || lcaseSensorReading == \"frb2/hang in post failure\" || lcaseSensorReading == \"frb3/processor startup/init failure\" || lcaseSensorReading == \"frb3/processor startup/initialization failure\" || lcaseSensorReading == \"configuration error\" || lcaseSensorReading == \"sm bios uncorrectable cpu-complex error\" || lcaseSensorReading == \"sm bios 'uncorrectable cpu-complex error'\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"presence detected\" || lcaseSensorReading == \"processor presence detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"throttled\" || lcaseSensorReading == \"processor automatically throttled\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Throttled - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"disabled\" || lcaseSensorReading == \"terminator presence detected\" || lcaseSensorReading == \"terminator presence detected\" || lcaseSensorReading == \"processor disabled\")\n\t\t\t{\n\t\t\t\t# Skip a disabled processor, or a terminator\n\t\t\t\tnext;\n\t\t\t}\n\n\n\t\t\t########### Power supply states\n\t\t\tif (lcaseSensorReading == \"presence detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"power supply failure detected\" || lcaseSensorReading == \"failure detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Failed - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"predictive failure\" || lcaseSensorReading == \"predictive failure\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Predicted Failure - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"power supply input lost (ac/dc)\" || lcaseSensorReading == \"power supply ac lost\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": AC Input Lost - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"power supply input lost or out-of-range\" || lcaseSensorReading == \"ac lost or out-of-range\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": AC Input Lost or Out-of-Range - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"power supply input out-of-range, but present\" || lcaseSensorReading == \"ac out-of-range, but present\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": AC Input Out-of-Range - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"configuration error\" || substr(lcaseSensorReading, 1, 12) == \"config error\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Configuration Error - \";\n\t\t\t}\n\n\n\t\t\t######### Power unit states\n\t\t\tif (lcaseSensorReading == \"power off/down\" || lcaseSensorReading == \"power cycle\" || lcaseSensorReading == \"240va power down\" || lcaseSensorReading == \"interlock power down\" || lcaseSensorReading == \"ac lost\" || lcaseSensorReading == \"soft-power control failure\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"failure detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Failed - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"predictive failure\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Predicted Failure - \";\n\t\t\t}\n\n\n\t\t\t########## Memory states\n\t\t\tif (lcaseSensorReading == \"correctable ecc\" || lcaseSensorReading == \"correctable ecc/other correctable memory error\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Corrected Errors - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"uncorrectable ecc\" || lcaseSensorReading == \"uncorrectable ecc/other uncorrectable memory error\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Uncorrectable Errors - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"parity\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"memory scrub failed\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Memory Scrub Failed - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"memory device disabled\")\n\t\t\t{\n\t\t\t\t# Skip this memory module\n\t\t\t\tnext;\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"correctable ecc logging limit reached\" || lcaseSensorReading == \"correctable ecc/other correctable memory error logging limit reached\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Too Many Errors - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"presence detected\" || lcaseSensorReading == \"presence detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"configuration error\" || lcaseSensorReading == \"configuration error\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Configuration Error - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"spare\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation \"Spare - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"throttled\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Throttled - \";\n\t\t\t}\n\n\n\t\t\t########## Disk states\n\t\t\tif (lcaseSensorReading == \"drive present\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"drive fault\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Faulty - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"predictive failure\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Predicted Failure - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"hot spare\" || lcaseSensorReading == \"in critical array\" || lcaseSensorReading == \"in failed array\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"parity check in progress\" || lcaseSensorReading == \"rebuild in progress\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"rebuild aborted\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Rebuild Aborted - \";\n\t\t\t}\n\n\t\t\t########### Cable interconnect states\n\t\t\tif (lcaseSensorReading == \"connected\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"config error\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Configuration Error - \";\n\t\t\t}\n\n\t\t\t########### Boot error states\n\t\t\tif (lcaseSensorReading == \"no bootable media\" || lcaseSensorReading == \"non-bootable disk in drive\" || lcaseSensorReading == \"pxe server not found\" || lcaseSensorReading == \"invalid boot sector\" || lcaseSensorReading == \"timeout waiting for selection\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": \" lcaseSensorReading \" - \";\n\t\t\t}\n\n\t\t\t########## Slot/connector states\n\t\t\tif (lcaseSensorReading == \"fault status\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Faulty - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"identify status\" || lcaseSensorReading == \"device installed\" || lcaseSensorReading == \"ready for device installation\" || lcaseSensorReading == \"ready for device removal\" || lcaseSensorReading == \"slot power is off\" || lcaseSensorReading == \"device removal request\" || lcaseSensorReading == \"interlock\" || lcaseSensorReading == \"slot is disabled\" || lcaseSensorReading == \"spare device\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\n\n\t\t\t########## Presence states\n\t\t\tif (lcaseSensorReading == \"present\" || lcaseSensorReading == \"entity present\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"absent\" || lcaseSensorReading == \"disabled\" || lcaseSensorReading == \"entity absent\" || lcaseSensorReading == \"entity disabled\")\n\t\t\t{\n\t\t\t\t# Skip\n\t\t\t\tnext;\n\t\t\t}\n\n\n\t\t\t########## LAN states\n\t\t\tif (lcaseSensorReading == \"heartbeat lost\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Heatbeat Lost - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"heartbeat\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\n\n\t\t\t########## Battery states\n\t\t\tif (lcaseSensorReading == \"low\" || lcaseSensorReading == \"battery low\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"failed\" || lcaseSensorReading == \"battery failed\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Failed - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"presence detected\" || lcaseSensorReading == \"battery presence detected\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\n\n\t\t\t########### Threshold states\n\t\t\tif (lcaseSensorReading == \"lower non-critical going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Lower Non-critical going low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"lower non-critical going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"lower critical going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Lower Critical going low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"lower critical going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Lower Critical going high - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"lower non-recoverable going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Lower Non-recoverable going low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"lower non-recoverable going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Lower Non-recoverable going high - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper non-critical going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper non-critical going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Upper Non-critical going high - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper critical going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Upper Critical going low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper critical going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Upper Critical going high - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper non-recoverable going low\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Upper Non-recoverable going low - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"upper non-recoverable going high\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Upper Non-recoverable going high - \";\n\t\t\t}\n\n\n\t\t\t########### Usage States\n\t\t\tif (lcaseSensorReading == \"transition to idle\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Idle - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to active\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Active - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to busy\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Busy - \";\n\t\t\t}\n\n\n\t\t\t########## Severity States\n\t\t\tif (lcaseSensorReading == \"transition to ok\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to non-critical from ok\" || lcaseSensorReading == \"transition to non-critical from ok\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Non-critical - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to critical from less severe\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Critical - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to non-recoverable from less severe\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Non-recoverable - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to non-critical from more severe\" || lcaseSensorReading == \"transition to non-critical from more severe\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Non-critical - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to critical from non-recoverable\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Critical - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"transition to non-recoverable\")\n\t\t\t{\n\t\t\t\tstatus = status \"ALARM|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Non-recoverable - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"monitor\")\n\t\t\t{\n\t\t\t\tstatus = status \"WARN|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Monitor - \";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"informational\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Informational - \";\n\t\t\t}\n\n\t\t\t######### System ACPI Power State\n\t\t\tif (lcaseSensorReading == \"s0/g0: working\" || lcaseSensorReading == \"s0/g0 working\" || lcaseSensorReading == \"legacy on state\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"s1: sleeping with system hw & processor context maintained\" || lcaseSensorReading == \"s1 sleeping with system h/w and processor context maintained\" || lcaseSensorReading == \"s2: sleeping, processor context lost\" || lcaseSensorReading == \"s2 sleeping,processor context lost\" || lcaseSensorReading == \"s3: sleeping, processor & hw context lost, memory retained\" || lcaseSensorReading == \"s3 sleeping,processor and h/w context lost, memory maintained\" || lcaseSensorReading == \"s4: non-volatile sleep/suspend-to-disk\" || lcaseSensorReading == \"s4 non-volatile sleep/suspend to disk\" || lcaseSensorReading == \"sleeping in s1/s2/s3 state\" || lcaseSensorReading == \"sleeping in an s1,s2 or s3 states\" || lcaseSensorReading == \"g1: sleeping\" || lcaseSensorReading == \"g1 sleeping\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": Sleeping - \";\n\t\t\t\tmachineStatus = \"Sleeping\";\n\t\t\t}\n\t\t\telse if (lcaseSensorReading == \"s5/g2: soft-off\" || lcaseSensorReading == \"s5/g2 soft-off\" || lcaseSensorReading == \"s4/s5: soft-off\" || lcaseSensorReading == \"s4/s5 soft-off\" || lcaseSensorReading == \"g3: mechanical off\" || lcaseSensorReading == \"g3/mechanical off\" || lcaseSensorReading == \"s5: entered by override\" || lcaseSensorReading == \"s5 entered by override\" || lcaseSensorReading == \"legacy off state\")\n\t\t\t{\n\t\t\t\tstatus = status \"OK|\";\n\t\t\t\tstatusInformation = statusInformation sensorName \": OFF - \";\n\t\t\t\tmachineStatus = \"OFF\";\n\t\t\t}\n\n\t\t\t########### Other unknown states\n\t\t\telse if (status_atStart == status)\n\t\t\t{\n\t\t\t\tstatus = status sensorName \"=\" sensorReading \"|\"\n\t\t\t}\n\n\n\t\t}\n\n\t\t#print \"MSHW;\" sensorName \";\" sensorReading;\n\t}\n\n\t# Last phase of processing\n\t# Make sure we at least got something, otherwise it means we are not able to intepret anything anyway\n\tif (status == \"\")\n\t{\n\t\tnext;\n\t}\n\n\t# Last question before we go, is this a system board, or BIOS, or stuff like that?\n\t# In which case, we''re going to attach that to the main enclosure\n\tif (tolower(deviceType) == \"bios\" || tolower(deviceType) == \"system board\")\n\t{\n\t\tsystemStatus = systemStatus status;\n\t\tsystemStatusInformation = systemStatusInformation statusInformation;\n\t\tsystemSensorNameList = systemSensorNameList sensorNameList;\n\t\tnext;\n\t}\n\n\t# Remove trailing comma at the end of sensorNameList\n\tif (length(sensorNameList) > 2)\n\t{\n\t\tsensorNameList = substr(sensorNameList, 1, length(sensorNameList) - 2);\n\t}\n\n\t# Good!\n\tprint \"MSHW;\" deviceType \";\" deviceID \";\" entityID \";\" vendor \";\" model \";\" serialNumber \";\" status \";\" statusInformation \";Monitored by sensors: \" sensorNameList;\n}\nEND {\n\t# At the very end, provide information about the system, including (if possible), power consumption, etc.\n\n\t# By the way, if we got no systemPowerConsumption but we know that the machine is sleeping of OFF, provide a low value instead\n\t# of nothing. Because if we provide no value, the KM (and PM) will try to evaluate the power consumption based on the devices\n\t# that we have discovered. Unfortunately, this will not take into account the fact that the machine may be not running, and\n\t# thus calculate a value that is meaningless\n\tif (systemPowerConsumption == \"\")\n\t{\n\t\tif (machineStatus == \"Sleeping\")\n\t\t{\n\t\t\t# If sleeping, assume 10 Watts for the system, plus another 10 Watts for the management card\n\t\t\t# which is still running (because able to tell us that the main system is sleeping)\n\t\t\tsystemPowerConsumption = 20;\n\t\t}\n\t\telse if (machineStatus == \"OFF\")\n\t\t{\n\t\t\t# If OFF, assume 0 Watts for the main system, plus another 10 Watts for the management card\n\t\t\t# (again, the management card must be present and running, since it told us the system was OFF)\n\t\t\tsystemPowerConsumption = 10;\n\t\t}\n\n\t\t# If the machine is ON, leave the powerConsumption empty (as it was before we arrived in this place)\n\t\t# so that Hardware Sentry will evaluate the power consumption by himself\n\t}\n\n\t# Remove trailing comma at the end of systemSensorNameList\n\tif (length(systemSensorNameList) > 2)\n\t{\n\t\tsystemSensorNameList = substr(systemSensorNameList, 1, length(systemSensorNameList) - 2);\n\t}\n\n\t# Print the enclosure stuff\n\tprint \"MSHW;Enclosure;\" systemVendor \";\" systemModel \";\" systemSerialNumber \";\" systemStatus \";\" systemStatusInformation \";\" systemPowerConsumption \";Monitored by sensors: \" systemSensorNameList;\n}"
connector:
  displayName: "IPMI"
  platforms: "Any system with IPMI"
  reliesOn: "IPMI"
  information: "Gives environmental information (temperatures, fans, etc.) on several IPMI-enabled servers in-band and out-of-band."
  version: "2.0"
  detection:
    connectionTypes:
    - "remote"
    appliesTo:
    - "Linux"
    - "Solaris"
    - "NT"
    - "OOB"
    criteria:
      # Let the KM/PM validate whether IPMI is available or not
    - type: "ipmi"
      forceSerialization: true
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = IPMI source
          type: "ipmi"
          forceSerialization: true
          computes:
            # Process IPMI result througn an AWK script to interpret what can be interpreted
          - type: "awk"
            script: "EmbeddedFile(1)"
            keep: "^MSHW;"
            separators: ";"
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
        source(2):
          # Source(2) = copy of Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only the enclosure line
            # Enclosure;Vendor;Model;SerialNumber;Status;StatusInformation;PowerConsumption;AdditionalInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "enclosure"
      mapping:
        # InstanceTable = Source(2)
        source: "$monitors.enclosure.discovery.sources.source(2)$"
        attributes:
          id: "IPMI"
          vendor: "$column(2)"
          model: "$column(3)"
          serial_number: "$column(4)"
          info: "$column(8)"
          name: "sprintf(\"%s (%s %s)\", \"IPMI\", $column(2), $column(3))"
    collect:
      # Collect type is \"all instances in one shot\"
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = Get IPMI, will be re-used by all other collects
          type: "ipmi"
          forceSerialization: true
          computes:
            # Post-processing of the IPMI mess (which has already been greatly sorted out!)
          - type: "awk"
            script: "EmbeddedFile(1)"
            keep: "^MSHW;"
            separators: ";"
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
        source(2):
          # Source(2) = copy of Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only the enclosure line
            # Enclosure;Vendor;Model;SerialNumber;StatusArray;StatusInformation;PowerConsumption
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "enclosure"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Enclosure;Vendor;Model;SerialNumber;Status;StatusInformation;PowerConsumption
          - type: "convert"
            column: 5
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(2)
        source: "$monitors.enclosure.collect.sources.source(2)$"
        deviceId: "IPMI"
        metrics:
          hw.status{hw.type="enclosure"}: "$column(5)"
          hw.enclosure.power: "$column(7)"
          hw.enclosure.energy: "fakeCounter($column(7))"
        legacyTextParameters:
          StatusInformation: "$column(6)"
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;FanSpeed;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only fans
            # Fan;SensorID;SensorName;Location;FanSpeed;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "fan"
            # Add empty Status and StatusInformation columns
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;
          - type: "rightConcat"
            column: 3
            value: ";;"
            # Add empty AdditionalInformation1 column at the very end
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          - type: "rightConcat"
            column: 9
            value: ";"
        source(2):
          # Source(2) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only "Fan Device" lines
            # Fan Device;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Fan Device"
            # Keep only interesting columns
            # Fan Device;DeviceID;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepColumns"
            columnNumbers: "1,2,3,7,8,9"
            # Add empty Location, FanSpeed, WarningThreshold and AlarmThreshold columns
            # Fan Device;DeviceID;DisplayID;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          - type: "rightConcat"
            column: 5
            value: ";;;;"
        source(3):
          # Source(3) = Table Union of Source(1) and Source(2)
          # Fan;DeviceID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          type: "tableUnion"
          tables:
          - "$monitors.fan.discovery.sources.source(1)$"
          - "$monitors.fan.discovery.sources.source(2)$"
      mapping:
        # The instance table
        source: "$monitors.fan.discovery.sources.source(3)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          info: "$column(10)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "$column(3)"
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: "$column(8)"
          hw.fan.speed.limit{limit_type="low.critical"}: "$column(9)"
    collect:
      # Collect type is \"all instances in one shot\"
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only fans
            # Fan;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "fan"
            # Add empty Status and StatusInformation columns
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold
          - type: "rightConcat"
            column: 3
            value: ";;"
        source(2):
          # Source(2) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only "Fan Device" lines
            # Fan Device;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Fan Device"
            # Keep only interesting columns
            # Fan Device;DeviceID;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepColumns"
            columnNumbers: "1,2,7,8,9"
            # Add an empty "SensorName" column
            # Fan Device;DeviceID;SensorName;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "rightConcat"
            column: 2
            value: ";"
            # Add empty FanSpeed, WarningThreshold and AlarmThreshold columns
            # Fan Device;DeviceID;SensorName;StatusArray;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          - type: "rightConcat"
            column: 6
            value: ";;;"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Fan Device;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          - type: "convert"
            column: 4
            conversion: "array2SimpleStatus"
        source(3):
          # Source(3) = Table Union of Source(1) and Source(2)
          # Fan;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          type: "tableUnion"
          tables:
          - "$monitors.fan.collect.sources.source(1)$"
          - "$monitors.fan.collect.sources.source(2)$"
      mapping:
        # CollectTable = Source(3)
        # Fan;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
        source: "$monitors.fan.collect.sources.source(3)$"
        deviceId: "$column(2)"
        metrics:
          hw.fan.speed: "$column(7)"
          hw.status{hw.type="fan"}: "$column(4)"
        legacyTextParameters:
          StatusInformation: "$column(5)"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only fans
            # Temperature;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "temperature"
      mapping:
        # The instance table
        source: "$monitors.temperature.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          temperature_type: "$column(4)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(3), $column(4))"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: "$column(6)"
          hw.temperature.limit{limit_type="high.critical"}: "$column(7)"
    collect:
      # Collect type is \"all instances in one shot\"
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only fans
            # Temperature;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "temperature"
      mapping:
        # CollectTable = Source(1)
        source: "$monitors.temperature.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.temperature: "$column(5)"
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only fans
            # Voltage;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "voltage"
      mapping:
        # The instance table
        source: "$monitors.voltage.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          voltage_type: "$column(4)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(3), $column(4))"
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: "$column(6)"
          hw.voltage.limit{limit_type="high.degraded"}: "$column(7)"
    collect:
      # Collect type is \"all instances in one shot\"
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only fans
            # Voltage;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "voltage"
      mapping:
        # CollectTable = Source(1)
        source: "$monitors.voltage.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.voltage: "$column(5)"
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only power supply lines
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Power supply"
          - type: "leftConcat"
            column: 6
            value: "SerialNumber: "
          - type: "leftConcat"
            column: 5
            value: "Model: "
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.power_supply.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          info: "join($column(9), $column(6), $column(5), \" \")"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s, $column(2))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only power supply lines
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Power supply"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.power_supply.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="power_supply"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only processor lines
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Processor"
          - type: "leftConcat"
            column: 6
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.cpu.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          vendor: "$column(4)"
          model: "$column(5)"
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(4), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only processor lines
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Processor"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.cpu.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="cpu"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only memory lines
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Memory module,Memory Device"
            # Duplicate the "Model" column because it is in the form of Model|Speed
            # Memory module;DeviceID;Entity ID;Vendor;Model|Speed;Model|Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "duplicateColumn"
            column: 5
            # Now extract "Model" from "Model|Size"
            # Memory module;DeviceID;Entity ID;Vendor;Model;Model|Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "extract"
            column: 5
            subColumn: 1
            subSeparators: "|"
            # Now extract "Size" from "Model|Size"
            # Memory module;DeviceID;Entity ID;Vendor;Model;Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "extract"
            column: 6
            subColumn: 2
            subSeparators: "|"
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.memory.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          vendor: "$column(4)"
          model: "$column(5)"
          serial_number: "$column(7)"
          info: "$column(10)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s (%s) - %s)\", $column(3), $column(4), $column(5), $column(6))"
        metrics:
          hw.memory.limit: "mebiByte2Byte($column(6))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only memory lines
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Memory module,Memory Device"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.memory.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="memory"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only disk lines
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Disk or disk bay,Disk or Disk Bay,Disk Drive Bay"
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.physical_disk.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          vendor: "$column(4)"
          model: "$column(5)"
          serial_number: "$column(6)"
          info: "$column(9)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(2), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only disk lines
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Disk or disk bay,Disk or Disk Bay,Disk Drive Bay"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.physical_disk.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="physical_disk"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  led:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only LED lines
            # LED;DeviceID;Name;EntityID;Color;OnStatus;OffStatus;BlinkingStatus;Status;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "led"
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.led.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          color: "$column(5)"
          __on_status: "$column(6)"
          __off_status: "$column(7)"
          __blinking_status: "$column(8)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(3), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only LED lines
            # LED;DeviceID;Name;EntityID;Color;OnStatus;OffStatus;BlinkingStatus;Status;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "led"
            # Duplicate the Status column
          - type: "duplicateColumn"
            column: 9
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.led.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="led"}: "legacyLedStatus($column(9))"
        legacyTextParameters:
          StatusInformation: "$column(10)"
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Exclude what we know already
            # DeviceType;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "excludeMatchingLines"
            column: 1
            valueList: "Battery,Disk or Disk Bay,Disk or disk bay,Disk Drive Bay,Memory module,Memory Device,LED,Temperature,Voltage,Power supply,Fan,Fan Device,Enclosure,FRU,Processor,Current,PowerConsumption,EnergyUsage,Blade,Processing Blade"
          - type: "leftConcat"
            column: 6
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.other_device.discovery.sources.source(1)$"
        attributes:
          device_type: "$column(1)"
          id: "$column(2)"
          __display_id: "$column(3)"
          additional_label: "$column(4)"
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s: %s (%s)\", $column(1), $column(3), $column(4))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Exclude what we know already
            # DeviceType;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "excludeMatchingLines"
            column: 1
            valueList: "Battery,Disk or Disk Bay,Disk or disk bay,Disk Drive Bay,Memory module,Memory Device,LED,Temperature,Voltage,Power supply,Fan,Fan Device,Enclosure,FRU,Processor,Current,PowerConsumption,EnergyUsage,Blade,Processing Blade"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.other_device.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="other_device"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only blade lines
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Blade,Processing Blade"
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.blade.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          model: "$column(5)"
          serial_number: "$column(6)"
          info: "$column(9)"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(2), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only blade lines
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "Blade,Processing Blade"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.blade.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="blade"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
            # Keep only battery lines
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "battery"
          - type: "leftConcat"
            column: 6
            value: "serialNumber: "
      mapping:
        # InstanceTable = Source(1)
        source: "$monitors.battery.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(3)"
          model: "$column(5)"
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: "enclosure"
          hw.parent.id: "IPMI"
          name: "sprintf(\"%s (%s)\", $column(3), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: "multiInstance"
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: "copy"
          from: "$monitors.enclosure.collect.sources.source(1)$"
          computes:
            # Keep only Battery lines
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: "keepOnlyMatchingLines"
            column: 1
            valueList: "battery"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: "convert"
            column: 7
            conversion: "array2SimpleStatus"
      mapping:
        # ValueTable = Source(1)
        source: "$monitors.battery.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="battery"}: "$column(7)"
        legacyTextParameters:
          StatusInformation: "$column(8)"
