---
connector:
  displayName: IPMI
  platforms: Any system with IPMI
  reliesOn: IPMI
  information: "Gives environmental information (temperatures, fans, etc.) on several IPMI-enabled servers in-band and out-of-band."
  version: 2.0
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Linux
    - Solaris
    - NT
    - OOB
    criteria:
    # Let the KM/PM validate whether IPMI is available or not
    - type: ipmi
      forceSerialization: true
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = IPMI source
          type: ipmi
          forceSerialization: true
          computes:
          # Process IPMI result througn an AWK script to interpret what can be interpreted
          - type: awk
            script: EmbeddedFile(1)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
        source(2):
          # Source(2) = copy of Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only the enclosure line
            # Enclosure;Vendor;Model;SerialNumber;Status;StatusInformation;PowerConsumption;AdditionalInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: enclosure
      mapping:
        # InstanceTable = Source(2)
        source: $monitors.enclosure.discovery.sources.source(2)$
        attributes:
          id: IPMI
          vendor: $column(2)
          model: $column(3)
          serial_number: $column(4)
          info: $column(8)
          name: "sprintf(\"%s (%s %s)\", \"IPMI\", $column(2), $column(3))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Get IPMI, will be re-used by all other collects
          type: ipmi
          forceSerialization: true
          computes:
          # Post-processing of the IPMI mess (which has already been greatly sorted out!)
          - type: awk
            script: EmbeddedFile(1)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
        source(2):
          # Source(2) = copy of Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only the enclosure line
            # Enclosure;Vendor;Model;SerialNumber;StatusArray;StatusInformation;PowerConsumption
          - type: keepOnlyMatchingLines
            column: 1
            valueList: enclosure
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Enclosure;Vendor;Model;SerialNumber;Status;StatusInformation;PowerConsumption
          - type: convert
            column: 5
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(2)
        source: $monitors.enclosure.collect.sources.source(2)$
        deviceId: IPMI
        metrics:
          hw.status{hw.type="enclosure"}: $column(5)
          hw.enclosure.power: $column(7)
          hw.enclosure.energy: fakeCounter($column(7))
        legacyTextParameters:
          StatusInformation: $column(6)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;FanSpeed;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only fans
            # Fan;SensorID;SensorName;Location;FanSpeed;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: fan
            # Add empty Status and StatusInformation columns
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;
          - type: rightConcat
            column: 3
            value: ;;
            # Add empty AdditionalInformation1 column at the very end
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          - type: rightConcat
            column: 9
            value: ;
        source(2):
          # Source(2) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only "Fan Device" lines
            # Fan Device;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Fan Device
            # Keep only interesting columns
            # Fan Device;DeviceID;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepColumns
            columnNumbers: "1,2,3,7,8,9"
            # Add empty Location, FanSpeed, WarningThreshold and AlarmThreshold columns
            # Fan Device;DeviceID;DisplayID;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          - type: rightConcat
            column: 5
            value: ;;;;
        source(3):
          # Source(3) = Table Union of Source(1) and Source(2)
          # Fan;DeviceID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold;AdditionalInformation1;
          type: tableUnion
          tables:
          - $monitors.fan.discovery.sources.source(1)$
          - $monitors.fan.discovery.sources.source(2)$
      mapping:
        # The instance table
        source: $monitors.fan.discovery.sources.source(3)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          info: $column(10)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: $column(3)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $column(8)
          hw.fan.speed.limit{limit_type="low.critical"}: $column(9)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only fans
            # Fan;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: fan
            # Add empty Status and StatusInformation columns
            # Fan;SensorID;SensorName;StatusArray;StatusInformation;Location;FanSpeed;WarningThreshold;AlarmThreshold
          - type: rightConcat
            column: 3
            value: ;;
        source(2):
          # Source(2) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only "Fan Device" lines
            # Fan Device;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Fan Device
            # Keep only interesting columns
            # Fan Device;DeviceID;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepColumns
            columnNumbers: "1,2,7,8,9"
            # Add an empty "SensorName" column
            # Fan Device;DeviceID;SensorName;StatusArray;StatusInformation;AdditionalInformation1;
          - type: rightConcat
            column: 2
            value: ;
            # Add empty FanSpeed, WarningThreshold and AlarmThreshold columns
            # Fan Device;DeviceID;SensorName;StatusArray;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          - type: rightConcat
            column: 6
            value: ;;;
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Fan Device;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          - type: convert
            column: 4
            conversion: array2SimpleStatus
        source(3):
          # Source(3) = Table Union of Source(1) and Source(2)
          # Fan;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
          type: tableUnion
          tables:
          - $monitors.fan.collect.sources.source(1)$
          - $monitors.fan.collect.sources.source(2)$
      mapping:
        # CollectTable = Source(3)
        # Fan;DeviceID;SensorName;Status;StatusInformation;AdditionalInformation1;FanSpeed;WarningThreshold;AlarmThreshold
        source: $monitors.fan.collect.sources.source(3)$
        deviceId: $column(2)
        metrics:
          hw.fan.speed: $column(7)
          hw.status{hw.type="fan"}: $column(4)
        legacyTextParameters:
          StatusInformation: $column(5)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only fans
            # Temperature;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: temperature
      mapping:
        # The instance table
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          temperature_type: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(3), $column(4))"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(6)
          hw.temperature.limit{limit_type="high.critical"}: $column(7)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only fans
            # Temperature;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: temperature
      mapping:
        # CollectTable = Source(1)
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.temperature: $column(5)
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only fans
            # Voltage;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: voltage
      mapping:
        # The instance table
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          voltage_type: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(3), $column(4))"
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $column(6)
          hw.voltage.limit{limit_type="high.degraded"}: $column(7)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          # SensorType;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only fans
            # Voltage;SensorID;SensorName;Location;Value;WarningThreshold;AlarmThreshold
          - type: keepOnlyMatchingLines
            column: 1
            valueList: voltage
      mapping:
        # CollectTable = Source(1)
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.voltage: $column(5)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only power supply lines
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Power supply
          - type: leftConcat
            column: 6
            value: "SerialNumber: "
          - type: leftConcat
            column: 5
            value: "Model: "
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          info: "join($column(9), $column(6), $column(5), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s, $column(2))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only power supply lines
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Power supply
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Power supply;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="power_supply"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only processor lines
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Processor
          - type: leftConcat
            column: 6
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.cpu.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          vendor: $column(4)
          model: $column(5)
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(4), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only processor lines
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: Processor
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Processor;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.cpu.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="cpu"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only memory lines
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Memory module,Memory Device"
            # Duplicate the "Model" column because it is in the form of Model|Speed
            # Memory module;DeviceID;Entity ID;Vendor;Model|Speed;Model|Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: duplicateColumn
            column: 5
            # Now extract "Model" from "Model|Size"
            # Memory module;DeviceID;Entity ID;Vendor;Model;Model|Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: extract
            column: 5
            subColumn: 1
            subSeparators: '|'
            # Now extract "Size" from "Model|Size"
            # Memory module;DeviceID;Entity ID;Vendor;Model;Speed;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: extract
            column: 6
            subColumn: 2
            subSeparators: '|'
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.memory.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          vendor: $column(4)
          model: $column(5)
          serial_number: $column(7)
          info: $column(10)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s (%s) - %s)\", $column(3), $column(4), $column(5), $column(6))"
        metrics:
          hw.memory.limit: mebiByte2Byte($column(6))
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only memory lines
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Memory module,Memory Device"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Memory module;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.memory.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="memory"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only disk lines
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Disk or disk bay,Disk or Disk Bay,Disk Drive Bay"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          vendor: $column(4)
          model: $column(5)
          serial_number: $column(6)
          info: $column(9)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(2), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only disk lines
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Disk or disk bay,Disk or Disk Bay,Disk Drive Bay"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  led:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only LED lines
            # LED;DeviceID;Name;EntityID;Color;OnStatus;OffStatus;BlinkingStatus;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: led
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.led.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          color: $column(5)
          __on_status: $column(6)
          __off_status: $column(7)
          __blinking_status: $column(8)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(3), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only LED lines
            # LED;DeviceID;Name;EntityID;Color;OnStatus;OffStatus;BlinkingStatus;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: led
          # Duplicate the Status column
          - type: duplicateColumn
            column: 9
      mapping:
        # ValueTable = Source(1)
        source: $monitors.led.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="led"}: legacyLedStatus($column(9))
        legacyTextParameters:
          StatusInformation: $column(10)
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Exclude what we know already
            # DeviceType;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: excludeMatchingLines
            column: 1
            valueList: "Battery,Disk or Disk Bay,Disk or disk bay,Disk Drive Bay,Memory module,Memory Device,LED,Temperature,Voltage,Power supply,Fan,Fan Device,Enclosure,FRU,Processor,Current,PowerConsumption,EnergyUsage,Blade,Processing Blade"
          - type: leftConcat
            column: 6
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.other_device.discovery.sources.source(1)$
        attributes:
          device_type: $column(1)
          id: $column(2)
          __display_id: $column(3)
          additional_label: $column(4)
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s: %s (%s)\", $column(1), $column(3), $column(4))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Exclude what we know already
            # DeviceType;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: excludeMatchingLines
            column: 1
            valueList: "Battery,Disk or Disk Bay,Disk or disk bay,Disk Drive Bay,Memory module,Memory Device,LED,Temperature,Voltage,Power supply,Fan,Fan Device,Enclosure,FRU,Processor,Current,PowerConsumption,EnergyUsage,Blade,Processing Blade"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Disk or disk bay;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.other_device.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="other_device"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only blade lines
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Blade,Processing Blade"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.blade.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          model: $column(5)
          serial_number: $column(6)
          info: $column(9)
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(2), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only blade lines
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: "Blade,Processing Blade"
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Blade;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.blade.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="blade"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(1)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
            # Keep only battery lines
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation;AdditionalInformation1;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: battery
          - type: leftConcat
            column: 6
            value: "serialNumber: "
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          model: $column(5)
          info: "join($column(9), $column(6), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: IPMI
          name: "sprintf(\"%s (%s)\", $column(3), $column(5))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
            # Keep only Battery lines
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;StatusArray;StatusInformation
          - type: keepOnlyMatchingLines
            column: 1
            valueList: battery
            # Convert StatusArray to a simple (unique) PATROLStatus
            # Battery;DeviceID;Entity ID;Vendor;Model;SerialNumber;Status;StatusInformation
          - type: convert
            column: 7
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        source: $monitors.battery.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="battery"}: $column(7)
        legacyTextParameters:
          StatusInformation: $column(8)
embedded:
  EmbeddedFile(1): |-
    BEGIN {
        FS = ";";
        systemType = "";
        systemVendor = "";
        systemModel = "";
        systemSerialNumber = "";
        foundSystemType = 0;
        systemPowerConsumption = "";
        systemStatus = "";
        systemStatusInformation = "";
        systemSensorNameList = "";
        machineStatus = "ON";
    }
    ($1 == "FRU" && foundSystemType == 0) {
        systemVendor = $2;
        lcaseSystemVendor = tolower(systemVendor);
        systemModel = $3;
        systemSerialNumber = $4;

        if (substr(lcaseSystemVendor, 1, 4) == "sun " || substr(lcaseSystemVendor, 1, 6) == "oracle" )
        {
            if (tolower(systemModel) == "cmm")
            {
                next;
            }
            systemVendor = "Sun";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 7) == "hewlett" || substr(lcaseSystemVendor, 1, 2) == "hp")
        {
            systemVendor = "HP";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 4) == "dell")
        {
            systemVendor = "Dell";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 22) == "international business" || substr(lcaseSystemVendor, 1, 3) == "ibm" || systemModel ~ /^[Ss]ystem x/)
        {
            systemVendor = "IBM";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 5) == "cisco")
        {
            systemVendor = "Cisco";
            systemType = systemVendor;
            systemModel = "UCS " systemModel;
        }
        else if (substr(lcaseSystemVendor, 1, 7) == "fujitsu")
        {
            systemVendor = "Fujitsu-Siemens";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 3) == "nec")
        {
            systemVendor = "NEC";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 4) == "bull")
        {
            systemVendor = "BULL";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 10) == "supermicro")
        {
            systemVendor = "SuperMicro";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 4) == "acer")
        {
            systemVendor = "Acer";
            systemType = systemVendor;
        }
        else if (substr(lcaseSystemVendor, 1, 7) == "hitachi" || substr(lcaseSystemVendor, 1, 3) == "hds")
        {
            systemVendor = "Hitachi"
            systemType = systemVendor;
        }

        if (systemType != "")
        {
            foundSystemType = 1;
        }
    }
    ($1 == "PowerConsumption") {

        ##############################################################
        #
        # Section to be customized per vendor/model to handle
        # the power consumption of the monitored system
        #
        # (ex.: recognizing input/output currents, adding up the power
        # consumed by several power supplies, etc.)
        #
        ##############################################################

        if (systemType == "Cisco")
        {
            if ($3 ~ /^PSU[0-9]_PIN$/ && $5 ~ /^[0-9]/)
            {
                systemPowerConsumption = systemPowerConsumption + $5;
            }
        }
        else
        {
            # By default, take the highest reported value
            if ($5 ~ /^[0-9]/)
            {
                if ($5 > systemPowerConsumption || systemPowerConsumption == "")
                {
                    systemPowerConsumption = $5;
                }
            }
        }
    }
    {
        # Read the device characteristics
        deviceType = $1;
        deviceID = $2;
        entityID = $3;
        vendor = $4;
        model = $5;
        serialNumber = $6;
        sensorList = $7;

        # Skip empty stuff
        if (deviceType == "" || deviceID == "")
        {
            next;
        }

        # Skip SEL Fullness Temperature Devices
        if (deviceType == "Temperature" && entityID == "SEL Fullness")
        {
            next;
        }

        # Simply re-print numeric sensors
        if (deviceType == "Voltage" || deviceType == "Temperature" || deviceType == "Fan" || deviceType == "Current" || deviceType == "PowerConsumption" || deviceType == "EnergyUsage" || deviceType == "FRU")
        {
            print "MSHW;" $0;
            next;
        }

        ##############################################################
        #
        # Section where you can customize the device identification
        # on a per-vendor basis
        #
        ##############################################################
        if (systemType == "Sun")
        {
            if (sensorList ~ /nem[0-9]\./ || sensorList ~ "NEM[0-9]/")
            {
                deviceType = "NEM";
            }

            if (deviceType == "System Board")
            {
                if (sensorList ~ /bl[0-9]+\./)
                {
                    deviceType = "Blade";
                }
            }
        }
        else if (systemType == "IBM")
        {
            if (deviceType == "Add-in Card")
            {
                if (sensorList ~ /SAS Riser/)
                {
                    deviceType = "SAS Riser"
                }
                else if (sensorList ~ /PCI Riser/)
                {
                    deviceType = "PCI Riser"
                }
            }
            else if (deviceType == "Power Module")
            {
                if (sensorList ~ /VRD Status/)
                {
                    deviceType = "Voltage Regulator-Down"
                }
            }
            else if (deviceType == "Group")
            {
                if (sensorList ~ /Mem Card/)
                {
                    deviceType = "Memory Device"
                }
            }
        }

        # Split that list into an array for further processing and interpretation
        sensorCount = split(sensorList, sensorArray, "\\|");

        status = "";
        statusInformation = "";
        sensorNameList = "";
        for (i=1 ; i<=sensorCount ; i++)
        { status_atStart = status
            equalsIndex = index(sensorArray[i], "=");
            if (!equalsIndex)
            {
                continue;
            }
            sensorName = substr(sensorArray[i], 1, equalsIndex - 1);
            sensorReading = substr(sensorArray[i], equalsIndex + 1, length(sensorArray[i]) - equalsIndex);
            lcaseSensorReading = tolower(sensorReading);

            # Add the sensor name to the list of sensor names, so that the user will be able to see the list of
            # sensors associated with one device
            sensorNameList = sensorNameList sensorName ", ";

            # Sensors whose state can only be YES or NO (Asserted or Deasserted)
            # and that, logically, need to be specifically interpreted
            # Like (P0_OK == 1) means OK, while (P0_FAULT == 1) means ALARM, see?
            if (sensorReading == "" || sensorReading == 0 || sensorReading == 1)
            {
                # Specific stuff
                if (systemType == "Hitachi")
                {
                    if (sensorName ~ / INTR$/)
                    {
                        # Skip MB0 INTR and similar sensors, because they only report when a button has been pressed
                        next;
                    }
                    else if (sensorName ~ /PWR MGMT$/ || sensorName ~ /Power Mgmt$/)
                    {
                        # Skip power management sensors
                        next;
                    }
                    else if (sensorName == "AGT_Notify")
                    {
                        # Skip AGT_Notify, which we can't do anything with, since we couldn't test it
                        # (it's actually on OEM sensor)
                        next;
                    }
                    else
                    {
                        # For all sensors with boolean value, in Hitachi systems, '1' means 'BAD'
                        if (sensorReading == 1)
                        {
                            status = status "ALARM|";
                            statusInformation = statusInformation sensorName " Asserted - ";
                        }
                        else
                        {
                            status = status "OK|";
                        }
                    }
                }


                # Dell Specific stuff
                else if (systemType == "Dell")
          {
                    if (sensorName ~ /VCORE/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " VCORE Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /VCACHE [0-9]+ PG/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " VCACHE Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /PROC VTT PG/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " PROC VTT PG Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /[0-9.]+ PG/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Voltage Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /[0-9.]+ VIDEO PG/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " VIDEO Voltage Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                }

                # Sun Specific stuff
                else if (systemType == "Sun")
                {
                    if (sensorName ~ /^PS[0-9]+\057VINOK/)
                    { if (sensorReading == 0)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Voltage In Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                  if (sensorName ~ /^PS[0-9]+\057PWROK/)
                    { if (sensorReading == 0)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Power In Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057FAN_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Fan In Fault - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057I_OUT_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Output Current Error - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057I_OUT_WARN/)
                    { if (sensorReading == 1)
                           {
                              status = status "WARN|";
                              statusInformation = statusInformation sensorName " Output Current Warning - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057T_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Temperature Error - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057FAN_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "WARN|";
                              statusInformation = statusInformation sensorName " Temperature Warning - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057V_IN_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Input Voltage Error - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057V_IN_WARN/)
                    { if (sensorReading == 1)
                           {
                              status = status "WARN|";
                              statusInformation = statusInformation sensorName " Input Voltage Warning - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057V_OUT_ERR/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Output Voltage Error - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PS[0-9]+\057V_OUT_OK/)
                    { if (sensorReading == 0)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName " Output Voltage Not OK - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^INTSW/)
                    { if (sensorReading == 1)
                           {
                              status = status "OK|";
                              statusInformation = statusInformation sensorName " Intrusion Detected - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                    if (sensorName ~ /^PWRBS/)
                    { if (sensorReading == 1)
                           {
                              status = status "ALARM|";
                              statusInformation = statusInformation sensorName "  A power supply sensor has detected an error - ";
                           }
                            else
                           {
                              status = status "OK|";
                          }
                  }
                }

                # Non vendor-specific stuff
                else
                {
                    # Try to be clever
                    if (index(tolower(sensorName), "fault") || index(tolower(sensorName), "fail") || tolower(sensorName) ~ /err$/)
                    {
                        if (sensorReading == 1)
                        {
                            status = status "ALARM|";
                            statusInformation = statusInformation sensorName " Asserted - ";
                        }
                        else
                        {
                            status = status "OK|";
                        }
                    }
                    else
                    {
                        status = status sensorName "=" sensorReading "|";
                    }
                }

            }

            # Here come OEM specific sensors, whose value need to be even more
            # specifically interpreted
            else if (substr(sensorReading, 1, 2) == "0x")
            {
                # Very specific stuff
                sensorReading = substr(sensorReading, 3, 4);
                digit1 = substr(sensorReading, 1, 1);
                digit2 = substr(sensorReading, 2, 1);
                digit3 = substr(sensorReading, 3, 1);
                digit4 = substr(sensorReading, 4, 1);

                if (systemType == "Cisco")
                {
                    if (substr(sensorName, 1, 4) == "LED_")
                    {
                        if (digit3 == 1)
                        {
                            color = "Green";
                            onStatus = "OK";
                            offStatus = "OK";
                            blinkingStatus = "OK";

                        }
                        else if (digit3 == 2)
                        {
                            color = "Amber";
                            onStatus = "WARN";
                            offStatus = "OK";
                            blinkingStatus = "WARN";
                        }
                        else if (digit3 == 4)
                        {
                            color = "Blue";
                            onStatus = "OK";
                            offStatus = "OK";
                            blinkingStatus = "OK";
                        }
                        else if (digit3 == 8)
                        {
                            color = "Red";
                            onStatus = "WARN";
                            offStatus = "OK";
                            blinkingStatus = "WARN";
                        }
                        else
                        {
                            color = "";
                            onStatus = "OK";
                            offStatus = "OK";
                            blinkingStatus = "OK";
                        }

                        if (digit4 == 1)
                        {
                            ledStatus = "Off";
                        }
                        else if (digit4 == 2)
                        {
                            ledStatus = "On";
                        }
                        else if (digit4 == 4)
                        {
                            ledStatus = "Blinking";
                        }
                        else if (digit4 == 8)
                        {
                            ledStatus = "Blinking";
                        }
                        else
                        {
                            ledStatus = "UNKNOWN";
                        }
                        print "MSHW;LED;" sensorName ";" sensorName ";" deviceID ";" color ";" onStatus ";" offStatus ";" blinkingStatus ";" ledStatus;
                        continue;
                    }
                    else if (substr(sensorName, 1, 5) == "DDR3_")
                    {
                        if (digit2 == 1)
                        {
                            status = status "OK|";
                        }
                        else
                        {
                            status = status "ALARM|";
                            statusInformation = statusInformation sensorName " Failed - ";
                        }
                    }
                }
                else
                {
                    status = status sensorName "=" sensorReading "|";
                }
            }

            # And now, finally, the normal discrete sensors, with standard values
            # These should be easy to interpret, except when vendors screw up their instrumentation
            # chip, which does happen, unfortunately...
            else
            {
                # Cisco-specific mess
                if (systemType == "Cisco")
                {
                    if (sensorName ~ /^SAS[0-9]+_LINK_STATUS$/)
                    {
                        if (lcaseSensorReading == "transition to off line")
                        {
                            status = status "OK|";
                        }
                        else
                        {
                            status = status "ALARM|";
                            statusInformation = statusInformation "Disconnected - ";
                        }
                        continue;
                    }
                    else if (sensorName == "PSU_REDUNDANCY")
                    {
                        # Skip this one entirely, because it creates a "fake" power supply
                        next;
                    }
                    else if (sensorName == "BIST_FAIL")
                    {
                        # Skip this sensor (but keep the device).  Remove name from Sensor List and continue to next sensor.
                        gsubregex = sensorName ", "
                        gsub(gsubregex,"",sensorNameList);
                        continue;
                    }
                    else if (sensorName ~ /^HDD_[0-9]+_STATUS$/)
                    {
                        deviceID = substr(sensorName, 1, 6);
                        if (lcaseSensorReading == "state 0 asserted" || lcaseSensorReading == "drive present")
                        {
                            status = status "OK|";
                        }
                        else
                        {
                            status = status "ALARM|";
                            statusInformation = statusInformation "Faulty - ";
                        }
                        continue;
                    }
                }

                # IBM Specific stuff
                else if (systemType == "IBM")
                {
                    if (sensorName ~ /^Cooling Zone/)
                    {
                        # Skip, because it just says that the fans' redundancy is OK
                        next;
                    }
                }



                ################################
                # IPMI standard states
                ################################

                ########### Digital states
                if (lcaseSensorReading == "predictive failure deasserted")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "predictive failure asserted")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Predicted Failure - ";
                }
                else if (lcaseSensorReading == "limit not exceeded")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "limit exceeded")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Limit Exceeded - ";
                }
                else if (lcaseSensorReading == "performance met")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "performance lags")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Performance Lags - ";
                }


                ########## Availability states
                if (lcaseSensorReading == "device removed/device absent" || lcaseSensorReading == "device absent")
                {
                    status = "ALARM|";
                    statusInformation = "Missing reported by " sensorName;
                    break;
                }
                else if (lcaseSensorReading == "device inserted/device present" || lcaseSensorReading == "device present")
                {
                    # Present, well, it doesnt mean much, but at least it s detected
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "device enabled")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "device disabled")
                {
                    status = status "OK|";
                    statusInformation = statusInformation "Disabled - ";
                }
                else if (lcaseSensorReading == "transition to running")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "transition to in test")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": In Test - ";
                }
                else if (lcaseSensorReading == "transition to power off")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Power Off - ";
                }
                else if (lcaseSensorReading == "transition to on line")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Online - ";
                }
                else if (lcaseSensorReading == "transition to off line")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Offline - ";
                }
                else if (lcaseSensorReading == "transition to off duty")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Off Duty - ";
                }
                else if (lcaseSensorReading == "transition to degraded")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Degraded - ";
                }
                else if (lcaseSensorReading == "transition to power save")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Power Save - ";
                }
                else if (lcaseSensorReading == "install error")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Install Error - ";
                }


                ########## Power states
                if (lcaseSensorReading == "d0 power state" || lcaseSensorReading == "d1 power state" || lcaseSensorReading == "d2 power state" || lcaseSensorReading == "d3 power state")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }

                ########## Redundancy states
                if (lcaseSensorReading == "fully redundant")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "redundancy lost" || lcaseSensorReading == "redundancy degraded" || lcaseSensorReading == "redundancy degraded from fully redundant" || lcaseSensorReading == "redundancy degraded from non-redundant" || lcaseSensorReading == "non-redundant: sufficient from redundant" || lcaseSensorReading == "non-redundant: sufficient from insufficient" || lcaseSensorReading == "non-redundant: insufficient resources" || lcaseSensorReading == "non-redundant:sufficient resources from redundant redundancy has been lost but unit is functioning with minimum resources needed for normal operation" || lcaseSensorReading == "non-redundant:sufficient resources from insufficient resources unit has regained minimum resources needed for normal operation" || lcaseSensorReading == "non-redundant:insufficient resources unit is non-redundant and has insufficient resources to maintain normal operation" || lcaseSensorReading == "redundancy degraded from fully redundant unit has lost some redundant resource(s) but is still in a redundant state" || lcaseSensorReading == "redundancy degraded from non-redundant unit has regained some resource(s) and is redundant but not fully redundant")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }


                ######### Physical security
                if (lcaseSensorReading == "general chassis intrusion" || lcaseSensorReading == "drive bay intrusion" || lcaseSensorReading == "i/o card area intrusion" || lcaseSensorReading == "processor area intrusion" || lcaseSensorReading == "system unplugged from lan" || lcaseSensorReading == "unauthorized dock" || lcaseSensorReading == "fan area intrusion")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }


                ########## Platform security
                if (lcaseSensorReading == "front panel lockout violation attempted" || lcaseSensorReading == "pre-boot password violation - user password" || lcaseSensorReading == "pre-boot password violation - setup password" || lcaseSensorReading == "pre-boot password violation - network boot password" || lcaseSensorReading == "other pre-boot password violation" || lcaseSensorReading == "out-of-band access password violation")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }


                ######### Processor states
                if (lcaseSensorReading == "ierr" || lcaseSensorReading == "thermal trip" || lcaseSensorReading == "frb1/bist failure" || lcaseSensorReading == "frb2/hang in post failure" || lcaseSensorReading == "frb3/processor startup/init failure" || lcaseSensorReading == "frb3/processor startup/initialization failure" || lcaseSensorReading == "configuration error" || lcaseSensorReading == "sm bios uncorrectable cpu-complex error" || lcaseSensorReading == "sm bios 'uncorrectable cpu-complex error'")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }
                else if (lcaseSensorReading == "presence detected" || lcaseSensorReading == "processor presence detected")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "throttled" || lcaseSensorReading == "processor automatically throttled")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Throttled - ";
                }
                else if (lcaseSensorReading == "disabled" || lcaseSensorReading == "terminator presence detected" || lcaseSensorReading == "terminator presence detected" || lcaseSensorReading == "processor disabled")
                {
                    # Skip a disabled processor, or a terminator
                    next;
                }


                ########### Power supply states
                if (lcaseSensorReading == "presence detected")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "power supply failure detected" || lcaseSensorReading == "failure detected")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Failed - ";
                }
                else if (lcaseSensorReading == "predictive failure" || lcaseSensorReading == "predictive failure")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Predicted Failure - ";
                }
                else if (lcaseSensorReading == "power supply input lost (ac/dc)" || lcaseSensorReading == "power supply ac lost")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": AC Input Lost - ";
                }
                else if (lcaseSensorReading == "power supply input lost or out-of-range" || lcaseSensorReading == "ac lost or out-of-range")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": AC Input Lost or Out-of-Range - ";
                }
                else if (lcaseSensorReading == "power supply input out-of-range, but present" || lcaseSensorReading == "ac out-of-range, but present")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": AC Input Out-of-Range - ";
                }
                else if (lcaseSensorReading == "configuration error" || substr(lcaseSensorReading, 1, 12) == "config error")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Configuration Error - ";
                }


                ######### Power unit states
                if (lcaseSensorReading == "power off/down" || lcaseSensorReading == "power cycle" || lcaseSensorReading == "240va power down" || lcaseSensorReading == "interlock power down" || lcaseSensorReading == "ac lost" || lcaseSensorReading == "soft-power control failure")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }
                else if (lcaseSensorReading == "failure detected")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Failed - ";
                }
                else if (lcaseSensorReading == "predictive failure")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Predicted Failure - ";
                }


                ########## Memory states
                if (lcaseSensorReading == "correctable ecc" || lcaseSensorReading == "correctable ecc/other correctable memory error")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Corrected Errors - ";
                }
                else if (lcaseSensorReading == "uncorrectable ecc" || lcaseSensorReading == "uncorrectable ecc/other uncorrectable memory error")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Uncorrectable Errors - ";
                }
                else if (lcaseSensorReading == "parity")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "memory scrub failed")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Memory Scrub Failed - ";
                }
                else if (lcaseSensorReading == "memory device disabled")
                {
                    # Skip this memory module
                    next;
                }
                else if (lcaseSensorReading == "correctable ecc logging limit reached" || lcaseSensorReading == "correctable ecc/other correctable memory error logging limit reached")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Too Many Errors - ";
                }
                else if (lcaseSensorReading == "presence detected" || lcaseSensorReading == "presence detected")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "configuration error" || lcaseSensorReading == "configuration error")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Configuration Error - ";
                }
                else if (lcaseSensorReading == "spare")
                {
                    status = status "OK|";
                    statusInformation = statusInformation "Spare - ";
                }
                else if (lcaseSensorReading == "throttled")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Throttled - ";
                }


                ########## Disk states
                if (lcaseSensorReading == "drive present")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "drive fault")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Faulty - ";
                }
                else if (lcaseSensorReading == "predictive failure")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Predicted Failure - ";
                }
                else if (lcaseSensorReading == "hot spare" || lcaseSensorReading == "in critical array" || lcaseSensorReading == "in failed array")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }
                else if (lcaseSensorReading == "parity check in progress" || lcaseSensorReading == "rebuild in progress")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }
                else if (lcaseSensorReading == "rebuild aborted")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Rebuild Aborted - ";
                }

                ########### Cable interconnect states
                if (lcaseSensorReading == "connected")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "config error")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Configuration Error - ";
                }

                ########### Boot error states
                if (lcaseSensorReading == "no bootable media" || lcaseSensorReading == "non-bootable disk in drive" || lcaseSensorReading == "pxe server not found" || lcaseSensorReading == "invalid boot sector" || lcaseSensorReading == "timeout waiting for selection")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": " lcaseSensorReading " - ";
                }

                ########## Slot/connector states
                if (lcaseSensorReading == "fault status")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Faulty - ";
                }
                else if (lcaseSensorReading == "identify status" || lcaseSensorReading == "device installed" || lcaseSensorReading == "ready for device installation" || lcaseSensorReading == "ready for device removal" || lcaseSensorReading == "slot power is off" || lcaseSensorReading == "device removal request" || lcaseSensorReading == "interlock" || lcaseSensorReading == "slot is disabled" || lcaseSensorReading == "spare device")
                {
                    status = status "OK|";
                }


                ########## Presence states
                if (lcaseSensorReading == "present" || lcaseSensorReading == "entity present")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "absent" || lcaseSensorReading == "disabled" || lcaseSensorReading == "entity absent" || lcaseSensorReading == "entity disabled")
                {
                    # Skip
                    next;
                }


                ########## LAN states
                if (lcaseSensorReading == "heartbeat lost")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Heatbeat Lost - ";
                }
                else if (lcaseSensorReading == "heartbeat")
                {
                    status = status "OK|";
                }


                ########## Battery states
                if (lcaseSensorReading == "low" || lcaseSensorReading == "battery low")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Low - ";
                }
                else if (lcaseSensorReading == "failed" || lcaseSensorReading == "battery failed")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Failed - ";
                }
                else if (lcaseSensorReading == "presence detected" || lcaseSensorReading == "battery presence detected")
                {
                    status = status "OK|";
                }


                ########### Threshold states
                if (lcaseSensorReading == "lower non-critical going low")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Lower Non-critical going low - ";
                }
                else if (lcaseSensorReading == "lower non-critical going high")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "lower critical going low")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Lower Critical going low - ";
                }
                else if (lcaseSensorReading == "lower critical going high")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Lower Critical going high - ";
                }
                else if (lcaseSensorReading == "lower non-recoverable going low")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Lower Non-recoverable going low - ";
                }
                else if (lcaseSensorReading == "lower non-recoverable going high")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Lower Non-recoverable going high - ";
                }
                else if (lcaseSensorReading == "upper non-critical going low")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "upper non-critical going high")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Upper Non-critical going high - ";
                }
                else if (lcaseSensorReading == "upper critical going low")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Upper Critical going low - ";
                }
                else if (lcaseSensorReading == "upper critical going high")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Upper Critical going high - ";
                }
                else if (lcaseSensorReading == "upper non-recoverable going low")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Upper Non-recoverable going low - ";
                }
                else if (lcaseSensorReading == "upper non-recoverable going high")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Upper Non-recoverable going high - ";
                }


                ########### Usage States
                if (lcaseSensorReading == "transition to idle")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Idle - ";
                }
                else if (lcaseSensorReading == "transition to active")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Active - ";
                }
                else if (lcaseSensorReading == "transition to busy")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Busy - ";
                }


                ########## Severity States
                if (lcaseSensorReading == "transition to ok")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "transition to non-critical from ok" || lcaseSensorReading == "transition to non-critical from ok")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Non-critical - ";
                }
                else if (lcaseSensorReading == "transition to critical from less severe")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Critical - ";
                }
                else if (lcaseSensorReading == "transition to non-recoverable from less severe")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Non-recoverable - ";
                }
                else if (lcaseSensorReading == "transition to non-critical from more severe" || lcaseSensorReading == "transition to non-critical from more severe")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Non-critical - ";
                }
                else if (lcaseSensorReading == "transition to critical from non-recoverable")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Critical - ";
                }
                else if (lcaseSensorReading == "transition to non-recoverable")
                {
                    status = status "ALARM|";
                    statusInformation = statusInformation sensorName ": Non-recoverable - ";
                }
                else if (lcaseSensorReading == "monitor")
                {
                    status = status "WARN|";
                    statusInformation = statusInformation sensorName ": Monitor - ";
                }
                else if (lcaseSensorReading == "informational")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Informational - ";
                }

                ######### System ACPI Power State
                if (lcaseSensorReading == "s0/g0: working" || lcaseSensorReading == "s0/g0 working" || lcaseSensorReading == "legacy on state")
                {
                    status = status "OK|";
                }
                else if (lcaseSensorReading == "s1: sleeping with system hw & processor context maintained" || lcaseSensorReading == "s1 sleeping with system h/w and processor context maintained" || lcaseSensorReading == "s2: sleeping, processor context lost" || lcaseSensorReading == "s2 sleeping,processor context lost" || lcaseSensorReading == "s3: sleeping, processor & hw context lost, memory retained" || lcaseSensorReading == "s3 sleeping,processor and h/w context lost, memory maintained" || lcaseSensorReading == "s4: non-volatile sleep/suspend-to-disk" || lcaseSensorReading == "s4 non-volatile sleep/suspend to disk" || lcaseSensorReading == "sleeping in s1/s2/s3 state" || lcaseSensorReading == "sleeping in an s1,s2 or s3 states" || lcaseSensorReading == "g1: sleeping" || lcaseSensorReading == "g1 sleeping")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": Sleeping - ";
                    machineStatus = "Sleeping";
                }
                else if (lcaseSensorReading == "s5/g2: soft-off" || lcaseSensorReading == "s5/g2 soft-off" || lcaseSensorReading == "s4/s5: soft-off" || lcaseSensorReading == "s4/s5 soft-off" || lcaseSensorReading == "g3: mechanical off" || lcaseSensorReading == "g3/mechanical off" || lcaseSensorReading == "s5: entered by override" || lcaseSensorReading == "s5 entered by override" || lcaseSensorReading == "legacy off state")
                {
                    status = status "OK|";
                    statusInformation = statusInformation sensorName ": OFF - ";
                    machineStatus = "OFF";
                }

                ########### Other unknown states
                else if (status_atStart == status)
                {
                    status = status sensorName "=" sensorReading "|"
                }


            }

            #print "MSHW;" sensorName ";" sensorReading;
        }

        # Last phase of processing
        # Make sure we at least got something, otherwise it means we are not able to intepret anything anyway
        if (status == "")
        {
            next;
        }

        # Last question before we go, is this a system board, or BIOS, or stuff like that?
        # In which case, we''re going to attach that to the main enclosure
        if (tolower(deviceType) == "bios" || tolower(deviceType) == "system board")
        {
            systemStatus = systemStatus status;
            systemStatusInformation = systemStatusInformation statusInformation;
            systemSensorNameList = systemSensorNameList sensorNameList;
            next;
        }

        # Remove trailing comma at the end of sensorNameList
        if (length(sensorNameList) > 2)
        {
            sensorNameList = substr(sensorNameList, 1, length(sensorNameList) - 2);
        }

        # Good!
        print "MSHW;" deviceType ";" deviceID ";" entityID ";" vendor ";" model ";" serialNumber ";" status ";" statusInformation ";Monitored by sensors: " sensorNameList;
    }
    END {
        # At the very end, provide information about the system, including (if possible), power consumption, etc.

        # By the way, if we got no systemPowerConsumption but we know that the machine is sleeping of OFF, provide a low value instead
        # of nothing. Because if we provide no value, the KM (and PM) will try to evaluate the power consumption based on the devices
        # that we have discovered. Unfortunately, this will not take into account the fact that the machine may be not running, and
        # thus calculate a value that is meaningless
        if (systemPowerConsumption == "")
        {
            if (machineStatus == "Sleeping")
            {
                # If sleeping, assume 10 Watts for the system, plus another 10 Watts for the management card
                # which is still running (because able to tell us that the main system is sleeping)
                systemPowerConsumption = 20;
            }
            else if (machineStatus == "OFF")
            {
                # If OFF, assume 0 Watts for the main system, plus another 10 Watts for the management card
                # (again, the management card must be present and running, since it told us the system was OFF)
                systemPowerConsumption = 10;
            }

            # If the machine is ON, leave the powerConsumption empty (as it was before we arrived in this place)
            # so that Hardware Sentry will evaluate the power consumption by himself
        }

        # Remove trailing comma at the end of systemSensorNameList
        if (length(systemSensorNameList) > 2)
        {
            systemSensorNameList = substr(systemSensorNameList, 1, length(systemSensorNameList) - 2);
        }

        # Print the enclosure stuff
        print "MSHW;Enclosure;" systemVendor ";" systemModel ";" systemSerialNumber ";" systemStatus ";" systemStatusInformation ";" systemPowerConsumption ";Monitored by sensors: " systemSensorNameList;
    }
