---
translations:
  SensorStatusTranslationTable:
    "0": failed
    "1": ok
    default: UNKNOWN
  LinkStatusTranslationTable:
    "0": ok
    "1": degraded
    "2": degraded
    default: degraded
    "3": degraded
    "4": degraded
    "5": degraded
  DuplexStatusTranslationTable:
    "0": ""
    "1": half
    "2": full
    default: ""
connector:
  displayName: F5 BigIP Switch
  platforms: F5 BigIP
  reliesOn: F5 SNMP Agent (bigipSystem)
  version: 1.0
  information: This connector discovers ports and the environment for F5 BigIP Switches (F5-BIGIP-SYSTEM-MIB)
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Network
    supersedes:
    - MIB2
    - GenericSwitchEnclosure
    criteria:
      # DETECTION
      # The system should
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.3375.2.1.3.5.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = \tsysGeneral SNMP table\nModel,SerialNumber
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.3
          selectColumns: "1,3"
      mapping:
        # InstanceTable = Source(1)
        # Model,SerialNumber
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: F5-BigIP
          vendor: F5
          model: $column(1)
          serial_number: $column(2)
          type: Switch
          name: "sprintf(\"%s (%s %s - %s)\", \"F5-BigIP\", \"F5\", $column(1), \"Switch\")"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = sysCpu
          # Name;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.1.2.1
          selectColumns: "4,2"
          computes:
            # Keep Only CPUs with a valid temperature.
            # Name;Temperature;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[1-9]"
            # Add the standard F5 CPU threshold of 75
            # Name;Temperature;WarnThreshold;
          - type: rightConcat
            column: 2
            value: ;75
        source(2):
          # Source(2) = sysCpu
          # Name;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.3.2.1
          selectColumns: "1,2"
          computes:
            # Keep Only Chassis with a valid temperature.
            # Name;Temperature;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[1-9]"
            # Add the standard F5 Chassis threshold of 50
            # Name;Temperature;WarnThreshold;
          - type: rightConcat
            column: 2
            value: ;50
        source(3):
          # Union CPU and Chassis
          # Name;Temperature;WarnThreshold;
          type: tableUnion
          tables:
          - $monitors.temperature.discovery.sources.source(1)$
          - $monitors.temperature.discovery.sources.source(2)$
      mapping:
        # InstanceTable = Source(3)
        # Name;Temperature;WarnThreshold;
        source: $monitors.temperature.discovery.sources.source(3)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          name: $column(1)
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(3)
    collect:
      _comment: Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = sysCpu
          # Name;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.1.2.1
          selectColumns: "4,2"
        source(2):
          # Source(2) = sysCpu
          # Name;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.3.2.1
          selectColumns: "1,2"
        source(3):
          # Union CPU and Chassis
          # Name;Temperature;
          type: tableUnion
          tables:
          - $monitors.temperature.collect.sources.source(1)$
          - $monitors.temperature.collect.sources.source(2)$
      mapping:
        # ValueTable = Source(3)
        # Name;Temperature;
        source: $monitors.temperature.collect.sources.source(3)$
        deviceId: $column(1)
        metrics:
          hw.temperature: $column(2)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = sysCpu
          # Name;FanSpeed;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.1.2.1
          selectColumns: "4,3"
          computes:
            # Keep Only CPUs with a valid Fan.
            # Name;Fan;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[0-9]"
            # Add the standard F5 Fan threshold of 3000
            # Name;Fan;;WarnThreshold;
          - type: rightConcat
            column: 2
            value: ;;3000
        source(2):
          # Source(2) = sysFan
          # Name;Speed;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.1.2.1
          selectColumns: "1,3,2"
          computes:
            # Keep only "Present" Fans
            # Name;Speed;Status;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "0,1"
            # Add a blank warning threshold
            # Name;Speed;Status;WarnThreshold;
          - type: rightConcat
            column: 3
            value: ;
        source(3):
          # Union CPU and Chassis
          # Name;Speed;Status;WarnThreshold;
          type: tableUnion
          tables:
          - $monitors.fan.discovery.sources.source(1)$
          - $monitors.fan.discovery.sources.source(2)$
      mapping:
        # InstanceTable = Source(3)
        # Only CPU fans will have numeric thresholds
        # Name;Speed;Status;WarnThreshold;
        source: $monitors.fan.discovery.sources.source(3)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          name: $column(1)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $column(4)
    collect:
      _comment: Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = sysCpu
          # Name;FanSpeed;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.1.2.1
          selectColumns: "4,3"
          computes:
            # Add a Blank Status
            # Name;FanSpeed;;
          - type: rightConcat
            column: 2
            value: ;
        source(2):
          # Source(2) = sysFan
          # Name;FanSpeed;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.1.2.1
          selectColumns: "1,3,2"
          computes:
            # Translate the status into a PATROLStatus
            # Name;FanSpeed;Status;
          - type: translate
            column: 3
            translationTable: SensorStatusTranslationTable
        source(3):
          # Union CPU and Chassis
          # Name;Speed;Status;
          type: tableUnion
          tables:
          - $monitors.fan.collect.sources.source(1)$
          - $monitors.fan.collect.sources.source(2)$
      mapping:
        # ValueTable = Source(3)
        # Name;Speed;Status;
        source: $monitors.fan.collect.sources.source(3)$
        deviceId: $column(1)
        metrics:
          hw.fan.speed: $column(2)
          hw.status{hw.type="fan"}: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = sysChassisPowerSupply
          # Name;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.2.2.1
          selectColumns: "1,2"
          computes:
            # Keep only "Present" PowerSupplys
            # Name;Status;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "0,1"
      mapping:
        # InstanceTable = Source(1)
        # Name;Status;
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          name: "sprintf(\"%s, $column(1))"
    collect:
      _comment: Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = sysChassisPowerSupply
          # Name;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.3.2.2.2.1
          selectColumns: "1,2"
          computes:
            # Translate the status into a PATROLStatus
            # Name;PatrolStatus;
          - type: translate
            column: 2
            translationTable: SensorStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        # Name;Speed;Status;
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = sysInterface SNMP Table
          # PortID;ActiveSpeed,MACAddress
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.2.4.1.2.1
          selectColumns: "1,4,6"
      mapping:
        # InstanceTable = Source(1)
        # PortID;ActiveSpeed,MACAddress
        source: $monitors.network.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          physical_address: $column(3)
          physical_address_type: MAC
          hw.parent.type: enclosure
          name: $column(1)
    collect:
      _comment: Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = sysInterface SNMP Table
          # PortID;ActiveSpeed,ActiveDuplex,LinkStatus
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.2.4.1.2.1
          selectColumns: "1,4,5,17"
          computes:
            # Translate Duplex
            # PortID;ActiveSpeed,ActiveDuplex,LinkStatus
          - type: translate
            column: 3
            translationTable: DuplexStatusTranslationTable
            # Translate Link Status
            # PortID;ActiveSpeed,ActiveDuplex,LinkStatus
          - type: translate
            column: 4
            translationTable: LinkStatusTranslationTable
        source(2):
          # Source(2) = sysInterfaceStatTable SNMP Table
          # All metrics are 64 bit, so will only work with SNMP v2/3
          # PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsIn;ErrorsOut;
          type: snmpTable
          oid: 1.3.6.1.4.1.3375.2.1.2.4.4.3.1
          selectColumns: "1,2,3,4,5,8,9"
          computes:
            # Add the two errors together
            # PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
          - type: add
            column: 6
            value: Column(7)
        source(3):
          # Join the port information with the stats
          # PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
          type: tableJoin
          leftTable: $monitors.network.collect.sources.source(1)$
          rightTable: $monitors.network.collect.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;;
      mapping:
        # ValueTable = Source(1)
        #   1         2        #    3        # 4         5       6         7       8        #  9        #   10      11
        # PortID;ActiveSpeed,ActiveDuplex,LinkStatus;PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
        source: $monitors.network.collect.sources.source(3)$
        deviceId: $column(1)
        metrics:
          hw.network.up: legacyLinkStatus($column(4))
          hw.network.bandwidth.limit: megaBit2Bit($column(2))
          hw.network.full_duplex: legacyFullDuplex($column(3))
          hw.errors{hw.type="network"}: $column(10)
          hw.network.packets{direction="transmit"}: $column(8)
          hw.network.packets{direction="receive"}: $column(6)
          hw.network.io{direction="transmit"}: $column(9)
          hw.network.io{direction="receive"}: $column(7)
