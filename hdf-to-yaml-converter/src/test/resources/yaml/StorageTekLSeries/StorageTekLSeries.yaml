---
connector:
  displayName: StorageTek LSeries Tape Library
  platforms: StorageTek LSeries
  reliesOn: StorageTek LSeries SNMP Agent
  version: 1.1
  information: This connector provides basic hardware monitoring of the StorageTek LSeries tape libraries through their built-in SNMP agent. Needs to run remotely.
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.1211.1.12.4.2.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name and manufacturer of the tape library
          # Vendor;Vendor
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.3.16
          selectColumns: "1,2"
          computes:
          # Add "LSeries" to the model name
          - type: leftConcat
            column: 2
            value: LSeries ;
        source(2):
          # Get the serial number the tape library
          type: snmpGet
          oid: 1.3.6.1.4.1.1211.1.12.3.4.0
        source(3):
          # Get the IP address of the library
          type: snmpGet
          oid: 1.3.6.1.4.1.1211.1.12.3.13.1.0
          computes:
          # Add IP Address title
          - type: leftConcat
            column: 1
            value: "IP Address: "
        source(4):
          # Get the Ethernet address of the library
          type: snmpGet
          oid: 1.3.6.1.4.1.1211.1.12.3.13.3.0
          computes:
          # Add Ethernet Address title
          - type: leftConcat
            column: 1
            value: "Ethernet Address: "
            # Start the process of concatenating our information sources together
            # IPAddress;EthernetAddress
          - type: leftConcat
            column: 1
            value: "${source::monitors.enclosure.discovery.sources.source(3)}"
          # SerialNumber;IPAddress;EthernetAddress
          - type: leftConcat
            column: 1
            value: "${source::monitors.enclosure.discovery.sources.source(2)}"
          # Vendor;Model;SerialNumber;IPAddress;EthernetAddress
          - type: leftConcat
            column: 1
            value: "${source::monitors.enclosure.discovery.sources.source(1)}"
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(4)}"
        attributes:
          id: STKLSeries
          vendor: $1
          model: $2
          serial_number: $3
          type: Storage
          info: "${awk::join(\" \", $4, $5)}"
          name: "${awk::sprintf(\"Storage: (%s %s)\", $1, $2)}"
    collect:
      # Collect
      type: monoInstance
      sources:
        source(1):
          # Retrieve the lserLibState and lserLibStatusEnum OIDs (as it was a SNMP Table)
          # lserLibStatusEnum;statusInformation
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.3
          selectColumns: "8,7"
          computes:
            # Translate the lserLibStatusEnum into a PATROL status
            # PATROLStatus;statusInformation
          - type: translate
            column: 1
            translationTable: "${translation::LibraryStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="enclosure"}: $1
        legacyTextParameters:
          StatusInformation: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = lserHdwTempSensorTable
          # ID;temperatureName;warnThreshold;alarmThreshold
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.10.2.1
          selectColumns: "ID,2,5,6"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: "1.3.6.1.4.1.1211.1.12.10.2.1.3.${temperature::id}"
      mapping:
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        metrics:
          hw.temperature: $1
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = lserHdwFanTable SNMP table
          # ID;fanName
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.10.4.1
          selectColumns: "ID,2"
      mapping:
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect-type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = lserHdwFanTable SNMP table
          # ID;fanStatus
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.10.4.1
          selectColumns: "ID,3"
          computes:
            # duplicate the status column
            # ID;fanStatus;fanStatus
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL Status
            # ID;PATROLStatus;fanStatus
          - type: translate
            column: 2
            translationTable: "${translation::FanStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;PATROLStatus;statusInformation
          - type: translate
            column: 3
            translationTable: "${translation::FanStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = the lserHdwSupplrTable SNMP table
          # DeviceID;psName;psInstalled
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.10.6.1
          selectColumns: "ID,2,3"
          computes:
            # Keep only actually installed power supplies
            # DeviceID;psName;psInstalled
          - type: keepOnlyMatchingLines
            column: 3
            valueList: 2
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          power_supply_type: $2
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type = Mono-Instance (one collect for each instance)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the lserHdwSupplrTable SNMP table
          # DeviceID;psStatus
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.10.6.1
          selectColumns: "ID,4"
          computes:
            # Duplicate this psStatus column
            # DeviceID;psStatus;psStatus
          - type: duplicateColumn
            column: 2
          # Now translate the 1st psStatus into a PATROL Status
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
          # Translate the 2nd psStatus into a more readable string
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # CAP
          # Source(1) = the lserCapTable
          # ID;Name;Name
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.5.2.1
          selectColumns: "ID,30,30"
          computes:
            # Add the device type: "Cartridge Access Port", as a 4th column
            # ID;Name;Name;"Cartright Access Port"
          - type: rightConcat
            column: 3
            value: ;Cartridge Access Port
            # Now add the "CAP" mention to the ID, to help us distinguish drives from CAPs, during the collect
            # CAP_ID;Name;Name;"Cartridge Access Port"
          - type: leftConcat
            column: 1
            value: CAP
          # Activate Status parameter, deactivate UsageCount parameter
          - type: rightConcat
            column: 4
            value: ;1;;
        source(2):
          # Cleaning cartridge
          # ID;Label;Type;LocationElementID
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.3.17.5.1
          selectColumns: "ID,2,3,4"
          computes:
            # Start the process of concatenating Element ID to Label and Type and do it nicely
            # ID; - Label;Type;LocationElementID
          - type: leftConcat
            column: 2
            value: ' - '
          # ID;Type - Label;Type;LocationElementID
          - type: leftConcat
            column: 2
            value: $3
          # ID; - Type - Label;Type;LocationElementID
          - type: leftConcat
            column: 2
            value: ' - '
          # ID;LocationElementID - Type - Label;Type;LocationElementID
          - type: leftConcat
            column: 2
            value: $4
            # Now add the device type: "Cleaning Cartridge", as a 4th column
            # ID;LocationElementID (Type - Label);Type;LocationElementID;Cleaning Cartridge
          - type: rightConcat
            column: 3
            value: ;Cleaning Cartridge
            # Now add the "CleaningCartridge" mention to the ID, to help us distinguish CAPs from Cleaning Cartridges, during the collect
            # CLeaningCartridge_ID;LocationElementID (Type - Label);Type;LocationElementID;Cleaning Cartridge
          - type: leftConcat
            column: 1
            value: CleaningCartridge
            # Deactivate Status parameter, activate UsageCount parameter
            # CleaningCartridge_ID;LocationElementID (Type - Label);Type;LocationElementID;;1;Cleaning Cartridge
          - type: rightConcat
            column: 4
            value: ;;1
        source(3):
          # Union of the CAP and Cleaning Cartridge table
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(1)}"
          - "${source::monitors.other_device.discovery.sources.source(2)}"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(3)}"
        attributes:
          id: $1
          additional_label: $2
          device_type: $4
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: "${awk::sprintf(\"%s: %s (%s)\", $4, $1, $2)}"
        conditionalCollection:
          hw.status{hw.type="other_device"}: $5
          hw.other_device.uses: $6
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(2) = the lserCapTable
          # ID;lserCapStatusEnum;lserCapState
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.5.2.1
          selectColumns: "ID,5,4"
          computes:
            # Translate lserCapStatusEnum into a PATROL Status
            # ID;PATROLStatus;lserCapState
          - type: translate
            column: 2
            translationTable: "${translation::CapStatusTranslationTable}"
            # Now add the "CAP" mention to the ID, to help us distinguish CAPs from CleaningCartrdiges
            # CAP_ID;PATROLStatus;lserCapState
          - type: leftConcat
            column: 1
            value: CAP
        source(2):
          # Cleaning cartridge
          # ID;UsageCount
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.3.17.5.1
          selectColumns: "ID,6"
          computes:
          # Now add the \"CleaningCartridge\" mention to the ID, to help us distinguish CAPs from Cleaning Cartridges, during the collect
          - type: leftConcat
            column: 1
            value: CleaningCartridge
            # Add blank columns between ID and UsageCount for UsageCount to be in the right column
            # ID;;;UsageCount
          - type: rightConcat
            column: 1
            value: ;;
        source(3):
          # Union of the CAP and Cleaning Cartridge table
          # CAP_ID;PATROLStatus;lserCapState
          # CleaningCartridge_ID;;;UsageCount
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(3)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
          hw.other_device.uses: $4
        legacyTextParameters:
          StatusInformation: $3
  robotics:
    discovery:
      sources:
        source(1):
          # Source(1) = lserDriveTable
          # ID;SerialNumber;PartNumberFirmWare version
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.6.2.1
          selectColumns: "ID,4,5,6"
          computes:
          # Add Part number string to the part number
          - type: leftConcat
            column: 3
            value: "Part Number: "
          # Add firmware version string to the firmware version
          - type: leftConcat
            column: 4
            value: "Firmware Version: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.robotics.discovery.sources.source(1)}"
        attributes:
          id: $1
          serial_number: $2
          info: "${awk::join(\" \", $3, $4)}"
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: $1
    collect:
      # Collect
      # Collect-type = mono-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # ID;StatusInformation;StatusEnum;GoodEmptyMotionCount;FailedEmptyMotionCount;GoodPartMotion;FailedPartMotion;GoodFullMotionCount;FailedFullMotionCount
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.6.2.1
          selectColumns: "ID,2,3,14,15,16,17,18,19"
          computes:
            # Translate the statusEnum into a PATROL status. Same possible values as the library status
            # ID;StatusInformation;PATROLStatus;GoodEmptyMotionCount;FailedEmptyMotionCount;GoodPartMotion;FailedPartMotion;GoodFullMotionCount;FailedFullMotionCount
          - type: translate
            column: 3
            translationTable: "${translation::LibraryStatusTranslationTable}"
          # Add all motions (good and failed ones) together in column 4
          - type: add
            column: 4
            value: $5
          - type: add
            column: 4
            value: $6
          - type: add
            column: 4
            value: $7
          - type: add
            column: 4
            value: $8
          - type: add
            column: 4
            value: $9
          # Add failed motions (only!) to column 5
          - type: add
            column: 5
            value: $7
          - type: add
            column: 5
            value: $9
      mapping:
        # In the end, we have:
        # ID;StatusInformation;StatusEnum;TotalMoves;ErrorCount (i.e. total failed moves);various move counts that we don't need
        # ValueTable = Source(1)
        source: "${source::monitors.robotics.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="robotics"}: $2
          hw.robotics.moves: $4
          hw.errors{hw.type="robotics"}: $5
        legacyTextParameters:
          StatusInformation: $3
  tape_drive:
    discovery:
      sources:
        source(1):
          # Source(1) = lserDriveTable
          # ID;ElementID;Row;Column;Type;Vendor;SerialNumber
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.4.2.1
          selectColumns: "ID,2,3,4,5,6,7"
          computes:
          - type: leftConcat
            column: 2
            value: "Element ID: "
          - type: leftConcat
            column: 3
            value: "Physical Row No: "
          - type: leftConcat
            column: 4
            value: "Physical Column No: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.tape_drive.discovery.sources.source(1)}"
        attributes:
          id: $1
          model: $5
          vendor: $6
          serial_number: $7
          info: "${awk::join(\" \", $2, $3, $4)}"
          hw.parent.type: enclosure
          hw.parent.id: STKLSeries
          name: "${awk::sprintf(\"%s (%s %s)\", $1, $6, $5)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = lserDriveTable
          # ID;lserDriveStatusEnum;lserDriveState;MountCount
          type: snmpTable
          oid: 1.3.6.1.4.1.1211.1.12.4.2.1
          selectColumns: "ID,11,10,25"
          computes:
            # Translate lserDriveStatusEnum into a PATROLStatus
            # ID;PATROLStatus;lserDriveState;MountCount
          - type: translate
            column: 2
            translationTable: "${translation::TapeDriveStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.tape_drive.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="tape_drive"}: $2
          hw.tape_drive.operations{type="mount"}: $4
        legacyTextParameters:
          StatusInformation: $3
translations:
  TapeDriveStatusTranslationTable:
    "2": ok
    "3": failed
    "4": degraded
    Default: ok
  CapStatusTranslationTable:
    "2": ok
    "3": failed
    "4": degraded
    Default: ok
  LibraryStatusTranslationTable:
    "2": ok
    "3": failed
    "4": degraded
    Default: UNKNOWN
  FanStatusTranslationTable:
    "1": failed
    "2": ok
    Default: UNKNOWN
  PowerSupplyStatusTranslationTable:
    "1": failed
    "2": ok
    Default: UNKNOWN
  FanStatusInformationTranslationTable:
    "1": Failed
    "2": ""
    Default: Unknown Status
  PowerSupplyStatusInformationTranslationTable:
    "1": Failed
    "2": ""
    Default: Unknown Status
