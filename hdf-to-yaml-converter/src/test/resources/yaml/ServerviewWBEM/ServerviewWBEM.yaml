---
extends:
- ../CIMProcessorFamily-header/CIMProcessorFamily-header
connector:
  displayName: Fujitsu-Siemens Serverview (WBEM)
  platforms: Fujitsu-Siemens PRIMERGY
  reliesOn: Fujitsu-Siemens Serverview WBEM Agent
  version: 1.2
  information: This connector provides hardware monitoring through the Fujitsu-Siemens Serverview WBEM Agent (ESX) which supports almost all Fujitsu-Siemens PRIMERGY servers.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Linux
    - OOB
    supersedes:
    - IpmiTool
    - VMwareESX4i
    - VMwareESXi
    - VMwareESXiDisksIPMI
    - VMwareESXiDisksStorage
    criteria:
    # OS must be Linux or ESX
    - type: deviceType
      keep:
      - Linux
      - OOB
    # The HP_ComputerSystemChassis WBEM class must be instanciated
    - type: wbem
      query: SELECT Caption FROM SVS_PGYComputerSystem
      namespace: root/SVS
      errorMessage: The Fujitsu Agent seems to not be not accessible or not working properly. Please check connectivity installation of the Fujitsu Agent.
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = the IBMPSG_ComputerSystemDetails WBEM class
          type: wbem
          query: "SELECT Manufacturer,Model,SerialNumber FROM SVS_PGYChassis"
          namespace: root/SVS
      mapping:
        # InstanceTable = Source(1)
        #  Manufacturer,Model,SerialNumber
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: FujitsuServer
          __display_id: FujitsuServer
          vendor: $1
          model: $2
          serial_number: $3
          type: Computer
          name: "${awk::sprintf(\"Computer: %s (%s %s)\", \"FujitsuServer\", $1, $2)}"
  cpu:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source 1 = HP_Processor Class
          type: wbem
          query: "SELECT CurrentClockSpeed,DeviceID,Family,Description FROM SVS_PGYProcessor"
          namespace: root/SVS
          computes:
            # Copy Family number to translate vendor as well
            # CurrentClockSpeed,DeviceID,Family,Family,Description
          - type: duplicateColumn
            column: 3
            # Translate the Family number into a vendor
            # CurrentClockSpeed,DeviceID,Vendor,Family,Description
          - type: translate
            column: 3
            translationTable: "${translation::cpuVendorTranslationTable}"
            # Translate the Family number into a model name
            # CurrentClockSpeed,DeviceID,Vendor,Model,Description
          - type: translate
            column: 4
            translationTable: "${translation::cpuFamilyTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # CurrentClockSpeed,DeviceID,Vendor,Model,Description
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          model: $4
          vendor: $3
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $2, $3, $4, megaHertz2HumanFormat($1))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($1)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WBEM class
          # CurrentClockSpeed,DeviceID,OperationalStatus
          type: wbem
          query: "SELECT CurrentClockSpeed,DeviceID,OperationalStatus FROM SVS_PGYProcessor"
          namespace: root/SVS
          computes:
            # Duplicate the "OperationalStatusArray" column
            # CurrentClockSpeed,DeviceID,OperationalStatus,OperationalStatus
          - type: duplicateColumn
            column: 3
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # CurrentClockSpeed,DeviceID,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # CurrentClockSpeed,DeviceID,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # CurrentClockSpeed,DeviceID,PATROLStatus,StatusInformation
          - type: convert
            column: 3
            conversion: array2SimpleStatus
      mapping:
        # Value Table
        # CurrentClockSpeed,DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.cpu.speed: megaHertz2Hertz($1)
          hw.status{hw.type="cpu"}: $3
        legacyTextParameters:
          StatusInformation: $4
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) SVS_PGYPhysicalMemory
          type: wbem
          query: "SELECT Capacity,MemoryType,ElementName,SerialNumber,PartNumber,Manufacturer FROM SVS_PGYPhysicalMemory"
          namespace: root/SVS
          computes:
            # Convert size to MB
            # Capacity,MemoryType,ElementName,SerialNumber,PartNumber,Manufacturer
          - type: divide
            column: 1
            value: 1024
            # Translate memory type
            # Capacity,MemoryType,ElementName,SerialNumber,PartNumber,Manufacturer
          - type: translate
            column: 2
            translationTable: "${translation::memoryTypeTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # Capacity,MemoryType,ElementName,SerialNumber,PartNumber,Manufacturer
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $3
          serial_number: $4
          vendor: $6
          model: $5
          type: $2
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: "${awk::sprintf(\"%s (%s - %s - %s MB)\", $3, $6, $2, $1)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($1)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WBEM class
          # DeviceID,OperationalStatus
          type: wbem
          query: "SELECT ElementName,OperationalStatus FROM SVS_PGYPhysicalMemory"
          namespace: root/SVS
          computes:
            # Duplicate the "OperationalStatusArray" column
            # DeviceID,OperationalStatus,OperationalStatus
          - type: duplicateColumn
            column: 2
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # DeviceID,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 2
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # DeviceID,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # DeviceID,PATROLStatus,StatusInformation
          - type: convert
            column: 2
            conversion: array2SimpleStatus
      mapping:
        # Value Table
        # CurrentClockSpeed,DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.memory.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = the SVS_PGYFan WBEM class
          # Caption,DeviceID
          type: wbem
          query: "SELECT Caption,DeviceID FROM SVS_PGYFan"
          namespace: root/SVS
          computes:
          # Caption,DeviceID
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $2
            # Now get rid of any remaining MSHWs
            # Caption,DeviceID
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: $1
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WBEM class
          # Caption,OperationalStatus
          type: wbem
          query: "SELECT Caption,OperationalStatus,DeviceID FROM SVS_PGYFan"
          namespace: root/SVS
          computes:
            # Duplicate the "OperationalStatusArray" column
            # Caption,OperationalStatus,OperationalStatus,DeviceID
          - type: duplicateColumn
            column: 2
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # Caption,PATROLStatusArray,OperationalStatus,DeviceID
          - type: arrayTranslate
            column: 2
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # Caption,PATROLStatusArray,StatusInformation,DeviceID
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: convert
            column: 2
            conversion: array2SimpleStatus
          # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $4
            # Now get rid of any remaining MSHWs
            # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # Value Table
        # DeviceID,PATROLStatus,StatusInformation,DeviceID
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = the SVS_PGYFan WBEM class
          type: wbem
          query: "SELECT Caption,DeviceID FROM SVS_PGYPowerSupply"
          namespace: root/SVS
          computes:
          # Caption,DeviceID
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $2
            # Now get rid of any remaining MSHWs
            # Caption,DeviceID
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: $1
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WBEM class
          # DeviceID,OperationalStatus
          type: wbem
          query: "SELECT Caption,OperationalStatus,DeviceID FROM SVS_PGYPowerSupply"
          namespace: root/SVS
          computes:
            # Duplicate the "OperationalStatusArray" column
            # Caption,OperationalStatus,OperationalStatus,DeviceID
          - type: duplicateColumn
            column: 2
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # Caption,PATROLStatusArray,OperationalStatus,DeviceID
          - type: arrayTranslate
            column: 2
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # Caption,PATROLStatusArray,StatusInformation,DeviceID
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: convert
            column: 2
            conversion: array2SimpleStatus
          # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $4
            # Now get rid of any remaining MSHWs
            # Caption,PATROLStatus,StatusInformation,DeviceID
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # Value Table
        # CurrentClockSpeed,DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # DeviceID, Type
          type: wbem
          query: "SELECT Caption,DeviceID,UpperThresholdCritical FROM SVS_PGYTemperatureSensor"
          namespace: root/SVS
          computes:
          # Caption,DeviceID,UpperThresholdCritical
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $2
            # Now get rid of any remaining MSHWs
            # Caption,DeviceID,UpperThresholdCritical
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: $1
        metrics:
          hw.temperature.limit{limit_type="high.critical"}: $3
    collect:
      # Like all WBEM collects, this one is \"MultiInstance\"
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the SVS_PGYTemperatureSensor WBEM class
          type: wbem
          query: "SELECT CurrentReading,Caption,DeviceID FROM SVS_PGYTemperatureSensor"
          namespace: root/SVS
          computes:
          # CurrentReading,Caption,DeviceID
          - type: leftConcat
            column: 2
            value: MSHW
          - type: rightConcat
            column: 2
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 2
            existingValue: MSHWMSHW
            newValue: $3
            # Now get rid of any remaining MSHWs
            # CurrentReading,Caption,DeviceID
          - type: replace
            column: 2
            existingValue: MSHW
            newValue: ""
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.temperature: $1
  voltage:
    discovery:
      sources:
        source(1):
          # DeviceID, Type
          type: wbem
          query: "SELECT Caption,DeviceID FROM SVS_PGYVoltageSensor"
          namespace: root/SVS
          computes:
          # Caption,DeviceID
          - type: leftConcat
            column: 1
            value: MSHW
          - type: rightConcat
            column: 1
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 1
            existingValue: MSHWMSHW
            newValue: $2
            # Now get rid of any remaining MSHWs
            # Caption,DeviceID
          - type: replace
            column: 1
            existingValue: MSHW
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: FujitsuServer
          name: $1
    collect:
      # Like all WBEM collects, this one is \"MultiInstance\"
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the HP_NumericSensor WBEM class
          type: wbem
          query: "SELECT CurrentReading,Caption,OperationalStatus,DeviceID FROM SVS_PGYVoltageSensor"
          namespace: root/SVS
          computes:
            # Duplicate the "OperationalStatusArray" column
            # CurrentReading,Caption,OperationalStatus,OperationalStatus,DeviceID
          - type: duplicateColumn
            column: 3
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # CurrentReading,Caption,PATROLStatusArray,OperationalStatus,DeviceID
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # CurrentReading,Caption,PATROLStatusArray,StatusInformation,DeviceID
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # CurrentReading,Caption,PATROLStatus,StatusInformation,DeviceID
          - type: convert
            column: 3
            conversion: array2SimpleStatus
          # CurrentReading,Caption,PATROLStatus,StatusInformation,DeviceID
          - type: leftConcat
            column: 2
            value: MSHW
          - type: rightConcat
            column: 2
            value: MSHW
          # Replace \"MSHWMSHW\", i.e. a blank column with the DeviceID value.
          - type: replace
            column: 2
            existingValue: MSHWMSHW
            newValue: $5
            # Now get rid of any remaining MSHWs
            # CurrentReading,Caption,PATROLStatus,StatusInformation,DeviceID
          - type: replace
            column: 2
            existingValue: MSHW
            newValue: ""
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.voltage: $1
          hw.status{hw.type="voltage"}: $3
        legacyTextParameters:
          StatusInformation: $4
translations:
  DMTFOperationStatusTranslationTable:
    "11": degraded
    "12": failed
    "13": failed
    "14": failed
    "15": ok
    "16": degraded
    "17": ok
    "18": ok
    Default: UNKNOWN
    "2": ok
    "3": degraded
    "4": degraded
    "5": degraded
    "6": failed
    "7": failed
    "8": degraded
    "9": degraded
    "10": failed
  memoryTypeTranslationTable:
    "22": BRAM
    "23": FB-DIMM
    "24": DDR3
    "25": FBD2
    "10": ROM
    "11": Flash
    "12": EEPROM
    "13": FEPROM
    "14": EPROM
    "15": CDRAM
    "16": 3DRAM
    "17": SDRAM
    "18": SGRAM
    "19": RDRAM
    Default: ""
    "0": Unknown Memory Type
    "1": Unknown Memory Type
    "2": DRAM
    "3": Synchronous DRAM
    "4": Cache DRAM
    "5": EDO
    "6": EDRAM
    "7": VRAM
    "8": SRAM
    "9": RAM
    "20": DDR
    "21": DDR-2
  DMTFOperationStatusInformationTranslationTable:
    "11": In Service
    "12": No Contact
    "13": Lost Communication
    "14": Aborted
    "15": Dormant
    "16": Supporting Entity in Error
    "17": Completed
    "18": Power Mode
    Default: ""
    "2": ""
    "3": Degraded
    "4": Stressed
    "5": Predicted Failure
    "6": Error
    "7": Non-Recoverable Error
    "8": Starting
    "9": Stopping
    "10": Stopped
