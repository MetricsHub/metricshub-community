BEGIN { activate = 0 ; poolEnum = 0; id = 0}
$1 ~ /^OK$/ && $2 ~ /=/ && $3 ~ /Ok/ {exit}
NF > 1 && NF != 3 && activate == 1 && $2 !~ /Drives:/ { poolEnum = poolEnum + 1
  ID[poolEnum] = $1
  Health[poolEnum] = $2
  AdditionalInformation[poolEnum] = $3 $4 $5
  # make sure that the pool name is not divided into two lines
  if($1 ~ /-$/) {key=$1; getline; $id = key $1;} else $id=$1;
  ID[poolEnum] = $id
  }

$1 ~ /^[-]+$/ && $2 ~ /^[-]+$/ && $3 ~ /^[-]+$/ && $4 ~ /^[-]+$/ && $5 ~ /^[-]+$/ && $6 ~ /^[-]+$/ && $7 ~ /^[-]+$/ { activate = 1}

END {
  for (pool in ID) {
# Translate the status in the script as it's a mess
    status = ""
    statusInformation = ""
    if ( Health[pool]~ /OK/ ) { status = status "OK|" ; statusInformation = statusInformation ""}
    if ( Health[pool]~ /U/ ) { status = status "TooFewNodes|" ; statusInformation = statusInformation "Too Few Nodes for this Pool"}
    if ( Health[pool]~ /M/ ) { status = status "MissingDrives|" ; statusInformation = statusInformation "This Pool is Missing Drives"}
    if ( Health[pool]~ /D/ ) { status = status "Down|" ; statusInformation = statusInformation "Some Nodes or Drives for this Pool are Down"}
    if ( Health[pool]~ /S/ ) { status = status "SmartFailed|" ; statusInformation = statusInformation "Some Nodes or Drives for this Pool are SmartFailed"}
    if ( Health[pool]~ /R/ ) { status = status "Repair|" ; statusInformation = statusInformation "Some Nodes or Drives for this Pool need Repair"}
    # It can be difficult to differentiate a two column top level line from a line with leftovers from the previous line.
    # We with thus check that some form of status was collected and that no numbers are in the status (items that flow over are likely to contain numbers)
    if ( status != "" && Health[pool] !~ /[0-9]/ ) { print "MSHW;" ID[pool] ";" status  ";" AdditionalInformation[pool] ";" statusInformation ";"}
    }
  }