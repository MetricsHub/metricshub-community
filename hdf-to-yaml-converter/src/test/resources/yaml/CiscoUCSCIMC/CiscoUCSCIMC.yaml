---
connector:
  displayName: Cisco UCS C-Series CIMC (SNMP)
  platforms: Cisco UCS
  reliesOn: Cisco CIMC
  information: This connector provides hardware monitoring for the Cisco C-Series Servers with CIMC cards via SNMP
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
      # DETECTION
      # Does a get_next to see if there that there is come CPU information
      # We are sure to have a cisco
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.9.9.719.1.41.9
    # Now make sure it's a C series
    - type: snmpGet
      oid: 1.3.6.1.2.1.1.1.0
      expectedResult: Cisco Integrated Management Controller
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Enclosure (Old Systems)
          # Vendor/Model in one field, no spaces.
          # Model;
          type: snmpGet
          oid: 1.3.6.1.2.1.1.1.0
          computes:
            # Get rid of CIMC in the model
            # Model;
          - type: replace
            column: 1
            existingValue: "Cisco Integrated Management Controller(CIMC) ["
            newValue: ""
            # Get rid of Cisco IMC in the model
            # Model;
          - type: replace
            column: 1
            existingValue: "Cisco Integrated Management Controller(Cisco IMC) ["
            newValue: ""
            # Add a Joiner
            # MSHW;Model;
          - type: leftConcat
            column: 1
            value: MSHW;
            # Exclude the second enclosure created in case the output of the getnext is on two lines
            # MSHW;Model
          - type: excludeMatchingLines
            column: 2
            regExp: "^]"
        source(2):
          # Source(2) = cucsComputeRackUnitEntry
          # DN;Model;Serial;OperState;Vendor;EnclosurePresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.9.35.1
          selectColumns: "2,32,47,42,51,45"
          computes:
          # Remove lines where cucsComputeRackUnitPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 6
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;Serial;OperState;Vendor;EnclosurePresence
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Add a Joiner
            # MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence
          - type: leftConcat
            column: 1
            value: MSHW;
        source(3):
          # Join Old and New
          # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(1)$
          rightTable: $monitors.enclosure.discovery.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
          computes:
            # Use the Old model if New model not present
            # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence
          - type: leftConcat
            column: 5
            value: MSHW
          - type: rightConcat
            column: 5
            value: MSHW
          - type: replace
            column: 5
            existingValue: MSHWMSHW
            newValue: Column(2)
          - type: replace
            column: 5
            existingValue: MSHW
            newValue: ""
        source(4):
          # Source(4) = cucsComputeMbPowerStatsEntry
          # DN;Powerconsupmtion
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.9.14.1
          selectColumns: "2,4"
          computes:
            # Remove SYS/
            # DN;powerconsumption
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Remove /board/power-stats
            # DN;powerconsumption
          - type: replace
            column: 1
            existingValue: /board/power-stats
            newValue: ""
        source(5):
          # Now join Enclosure.discovery(3) and (4)
          # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence;DN;powerconsumption
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(3)$
          rightTable: $monitors.enclosure.discovery.sources.source(4)$
          leftKeyColumn: 4
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # The InstanceTable
        # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence;DN;powerconsumption
        source: $monitors.enclosure.discovery.sources.source(5)$
        attributes:
          id: CiscoUCS-Server
          model: $column(5)
          serial_number: $column(6)
          vendor: Cisco
          name: "sprintf(\"Enclosure: (%s %s)\", \"Cisco\", $column(5))"
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsEquipmentEnclosureEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.9.35.1
          selectColumns: "2,42"
          computes:
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: enclosureStatusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: enclosureStatusInformationTranslationTable
            # Remove /SYS
            # DN;PATROLStatus;StatusInformation;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
        source(2):
          # Join the Discovery to the Collect
          # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence;DN;PATROLStatus;OperState;
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(3)$
          rightTable: $monitors.enclosure.collect.sources.source(1)$
          leftKeyColumn: 4
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
        source(3):
          # Source(3) = cucsComputeMbPowerStatsEntry
          # DN;Powerconsupmtion
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.9.14.1
          selectColumns: "2,4"
          computes:
            # Remove SYS/
            # DN;powerconsumption
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Remove /board/power-stats
            # DN;powerconsumption
          - type: replace
            column: 1
            existingValue: /board/power-stats
            newValue: ""
        source(4):
          # Now join Enclosure.Collect(3) and (2)
          # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence;DN;PATROLStatus;OperState;DN;powerconsumption
          type: tableJoin
          leftTable: $monitors.enclosure.collect.sources.source(2)$
          rightTable: $monitors.enclosure.collect.sources.source(3)$
          leftKeyColumn: 4
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # ValueTable = Source(1)
        # MSHW;Model;MSHW;DN;Model;Serial;OperState;Vendor;EnclosurePresence;DN;PATROLStatus;OperState;DN;powerconsumption
        source: $monitors.enclosure.collect.sources.source(4)$
        deviceId: CiscoUCS-Server
        metrics:
          hw.status{hw.type="enclosure"}: $column(11)
          hw.enclosure.power: $column(14)
          hw.enclosure.energy: fakeCounter($column(14))
        legacyTextParameters:
          StatusInformation: $column(12)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsEquipmentFanEntry
          # DN;FanPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.15.12.1
          selectColumns: "2,13"
          computes:
          # Remove lines where cucsEquipmentFanPresence = empty string
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
          # Remove lines where cucsEquipmentFanPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 2
            valueList: "1,11"
            # Remove SYS/
            # DN
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          hw.parent.type: enclosure
          name: $column(1)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsEquipmentFanEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.15.12.1
          selectColumns: "2,9"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLStatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsEquipmentPowerSupplyEntry
          # DN;Model;Serial;Revision;PsuPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.15.56.1
          selectColumns: "2,6,13,12,11"
          computes:
          # Remove lines where cucsEquipmentPresence = empty string
          - type: keepOnlyMatchingLines
            column: 5
            regExp: .
          # Remove lines where cucsEquipmentPsuPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 5
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;Serial;Revision;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Add Identifiers
            # DN;Model;Serial;Revision;
          - type: leftConcat
            column: 2
            value: "Model Number: "
          - type: leftConcat
            column: 3
            value: "Serial Number: "
          - type: leftConcat
            column: 4
            value: "Revision: "
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          info: "join(\" \", $column(2), $column(3), $column(4))"
          hw.parent.type: enclosure
          name: $column(1)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsEquipmentPowerSupplyEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.15.56.1
          selectColumns: "2,7"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLStatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsEquipmentPhysicalDiskEntry
          # DN;SerialNumber;Size;Vendor;DiskPresence;Model
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.4.1
          selectColumns: "2,12,13,14,10,7"
          computes:
          # Remove lines where cucsStorageLocalDiskPresence = empty string
          - type: keepOnlyMatchingLines
            column: 5
            regExp: .
          - type: excludeMatchingLines
            column: 5
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;Size;Vendor;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Convert the size into bytes
            # DN;Model;Size;Vendor;
          - type: multiply
            column: 3
            value: 1048576
      mapping:
        # InstanceTable = Source(1)
        # DN;SerialNumber;Size;Vendor;DiskPresence;Model
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          serial_number: $column(2)
          vendor: $column(4)
          model: $column(6)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(4), bytes2HumanFormatBase10($column(3)))"
        metrics:
          hw.physical_disk.size: $column(3)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsEquipmentPhysicalDiskEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.4.1
          selectColumns: "2,9"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLStatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsProcessorUnitTable
          # DN;Model;Speed;Vendor;CPUPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.41.9.1
          selectColumns: "2,8,17,21,13"
          computes:
          # Remove lines where Device Presence = empty string
          - type: keepOnlyMatchingLines
            column: 5
            regExp: .
          # Remove lines where cucsProcessorUnitPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 5
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;Speed;Vendor;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.cpu.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          vendor: $column(4)
          model: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s - %s)\", $column(1), $column(4), $column(2), megaHertz2HumanFormat($column(3)))"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($column(3))
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsProcessorUnitTable
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.41.9.1
          selectColumns: "2,9"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.cpu.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="cpu"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsMemoryUnitEntry
          # DN;Location;Presence;CapacityMB;Serial;Speed;Type
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.30.11.1
          selectColumns: "2,11,17,6,19,21,23"
          computes:
          # Remove lines where cucsStorageLocalDiskPresence = empty string
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
            # Exclude  "Missing" memory modules
            # DN;Location;Presence;CapacityMB;Serial;Speed;Type
          - type: excludeMatchingLines
            column: 3
            valueList: "1,11"
            # Remove SYS/
            # DN;Location;Presence;CapacityMB;Serial;Speed;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Add Identifiers
            # DN;Location;Presence;CapacityMB;Serial;Speed;
          - type: leftConcat
            column: 2
            value: "Location: "
          - type: leftConcat
            column: 6
            value: "Speed: "
            # Translate the Type
            # DeviceID;PATROLStatus;
          - type: translate
            column: 7
            translationTable: memorytypeTranslationTable
      mapping:
        # InstanceTable = Source(1)
        # DN;Location;Presence;Capacity;Serial;Speed;Type
        source: $monitors.memory.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          serial_number: $column(5)
          type: $column(7)
          info: "join(\" \", $column(2), $column(6))"
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s MB)\", $column(1), $column(7), $column(4))"
        metrics:
          hw.memory.limit: mebiByte2Byte($column(4))
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsMemoryUnitEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.30.11.1
          selectColumns: "2,13"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.memory.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="memory"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsStorageRaidBatteryEntry
          # DN;Model;Vendor;RaidBatteryPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.11.1
          selectColumns: "2,7,14,10"
          computes:
          # Remove lines where cucsStorageRaidBatteryPresence = empty string
          - type: keepOnlyMatchingLines
            column: 4
            regExp: .
          # Remove lines where cucsStorageRaidBatteryPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 4
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;Vendor;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # DN;Model;Vendor;
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          vendor: $column(3)
          model: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s %s)\", $column(1), $column(3), $column(2))"
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsProcessorUnitTable
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.11.1
          selectColumns: "2,9"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.battery.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="battery"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsProcessorUnitTable
          # DN;Model;SerialNumber;Vendor;Revision;DiskControllerPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.1.1
          selectColumns: "2,5,14,18,13,12"
          computes:
          # Remove lines where DevicePresence = empty string
          - type: keepOnlyMatchingLines
            column: 6
            regExp: .
          # Remove lines where cucsStorageControllerPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 6
            valueList: "1,11"
            # Remove SYS/
            # DN;Model;SerialNumber;Vendor;Revision;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # DN;Model;SerialNumber;Vendor;Revision;
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          vendor: $column(4)
          model: $column(2)
          serial_number: $column(3)
          firmware_version: $column(5)
          hw.parent.type: enclosure
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(1), $column(4), $column(2))"
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsProcessorUnitTable
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.1.1
          selectColumns: "2,6"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.disk_controller.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="disk_controller"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = cucsEquipmentOtherDeviceEntry
          # DN;FlexFlashControllerPresence;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.35.1
          selectColumns: "2,17"
          computes:
          # Remove lines where Device Presence = empty string
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
          # Remove lines where cucsStorageControllerPresence = 1(Empty) and 11 (Missing)
          - type: excludeMatchingLines
            column: 2
            valueList: "1,11"
            # Remove SYS/
            # DN
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.other_device.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          device_type: FlexFlash
          hw.parent.type: enclosure
          name: "sprintf(\"%s: %s\", \"FlexFlash\", $column(1))"
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = cucsEquipmentOtherDeviceEntry
          # DN;OperState;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.719.1.45.35.1
          selectColumns: "2,10"
          computes:
          # Do not collect for removed devices
          - type: excludeMatchingLines
            column: 2
            valueList: 6
            # Remove SYS/
            # DN;OperState;
          - type: replace
            column: 1
            existingValue: sys/
            newValue: ""
            # Duplicate the StatusCode column
            # DN;OperState;OperState;
          - type: duplicateColumn
            column: 2
            # Translate 1st StatusCode into PATROLSTatus
            # DN;PATROLStatus;OperState;
          - type: translate
            column: 2
            translationTable: statusTranslationTable
            # Translate second STatusCode into a more readable string
            # DN;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: statusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.other_device.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="other_device"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = Ambient temperature
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.4.1
          computes:
            # now right concat ID and display name
            # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
          - type: leftConcat
            column: 1
            value: 4;Ambient;40;45;
        source(2):
          # Source(2) = Front temperature
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.8.1
          computes:
            # now right concat ID and display name
            # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
          - type: leftConcat
            column: 1
            value: 8;Front;40;45;
        source(3):
          # Source(3) = IOH1 temperature
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.13.1
          computes:
            # now right concat ID and display name
            # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
          - type: leftConcat
            column: 1
            value: 13;IOH1;80;85;
        source(4):
          # Source(4) = IOH2 temperature
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.17.1
          computes:
            # now right concat ID and display name
            # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
          - type: leftConcat
            column: 1
            value: 17;IOH2;80;85;
        source(5):
          # Source(5) = Rear temperature
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.21.1
          computes:
            # now right concat ID and display name
            # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
          - type: leftConcat
            column: 1
            value: 21;Rear;60;70;
        source(6):
          # Union of all the table
          # ID;DisplayID;temp
          type: tableUnion
          tables:
          - $monitors.temperature.discovery.sources.source(1)$
          - $monitors.temperature.discovery.sources.source(2)$
          - $monitors.temperature.discovery.sources.source(3)$
          - $monitors.temperature.discovery.sources.source(4)$
          - $monitors.temperature.discovery.sources.source(5)$
          computes:
          - type: excludeMatchingLines
            column: 5
            valueList: 0
      mapping:
        # InstanceTable = Source(6)
        # ID;DisplayID;WarningThreshold;AlarmThreshold;temp
        source: $monitors.temperature.discovery.sources.source(6)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(3)
          hw.temperature.limit{limit_type="high.critical"}: $column(4)
    collect:
      # Collect type = mono-instance
      type: monoInstance
      sources:
        source(1):
          # Get the temperature value
          # temp;
          type: snmpGet
          oid: 1.3.6.1.4.1.9.9.719.1.9.44.1.$temperature.id$.1
      mapping:
        source: $monitors.temperature.collect.sources.source(1)$
        metrics:
          hw.temperature: $column(1)
translations:
  memorytypeTranslationTable:
    "11": FEPROM
    "12": EPROM
    "13": CDRAM
    "24": DDR3
    "14": N3 DRAM
    "25": FBD2
    "15": SDRAM
    "26": DDR4
    "16": SGRAM
    "17": RDRAM
    "18": DDR
    "19": DDR2
    "0": Undiscovered
    "1": Other
    "2": Unknown
    "3": DRAM
    "4": EDRAM
    "5": VRAM
    "6": SRAM
    "7": RAM
    "8": ROM
    "9": FLASH
    "20": ddr2FbDimm
    "10": EEPROM
  statusInformationTranslationTable:
    "51": Fabric Conn Problem
    "52": Fabric Unsupported Conn
    "10": Accessibility Problem
    "11": Identity Unestablishable
    "12": Bios Post Timeout
    "13": Disabled
    "14": Malformed FRU
    Default: Unknown Status
    "0": Unknown
    "1": Operable
    "100": Not Supported
    "2": Inoperable
    "101": Discovery
    "3": Degraded
    "102": Discovery Failed
    "4": Powered Off
    "103": Identify
    "5": Power Problem
    "104": Post Failure
    "6": Removed
    "105": Upgrade Problem
    "7": Voltage Problem
    "106": Peer Comm Problem
    "8": Thermal Problem
    "107": Auto Upgrade
    "9": Performance Problem
    "81": Config
    "108": Link Activate Blocked
    "82": Equipment Problem
    "83": Decommissioning
    "84": Chassis Limit Exceeded
  enclosureStatusInformationTranslationTable:
    "29": Compute Mismatch
    "210": Pending Reboot
    "211": Pending Reassociation
    "212": SVNIC Not Present
    "50": Inaccessible
    "30": Compute Failed
    "31": Degraded
    "10": ok
    "32": Discovery Failed
    "11": Discovery
    "33": Config Failure
    "12": Config
    "34": Unconfig Failed
    "13": Unconfig
    "35": Test Failed
    "14": PowerOff
    "36": Maintenance Failed
    "15": Restart
    Default: Unknown Status
    "0": Indeterminate
    "1": Unassociated
    "101": Decommissioning
    "201": BIOS Restore
    "202": CMOS Reset
    "203": Diagnostics
    "204": Diagnostics Failed
    "60": Thermal Problem
    "61": Power Problem
    "40": Removed
    "62": Voltage Problem
    "41": Disabled
    "63": Inoperable
    "20": Maintenance
    "21": Test
  statusTranslationTable:
    "51": degraded
    "52": degraded
    "10": degraded
    "11": degraded
    "12": failed
    "13": degraded
    "14": degraded
    Default: Unknown Status
    "0": UNKNOWN
    "1": ok
    "100": degraded
    "2": failed
    "101": degraded
    "3": degraded
    "102": failed
    "4": failed
    "103": ok
    "5": degraded
    "104": failed
    "6": failed
    "105": degraded
    "7": degraded
    "106": degraded
    "8": degraded
    "107": degraded
    "9": degraded
    "81": degraded
    "108": degraded
    "82": degraded
    "83": degraded
    "84": degraded
  enclosureStatusTranslationTable:
    "29": degraded
    "210": ok
    "211": degraded
    "212": degraded
    "50": failed
    "30": degraded
    "31": degraded
    "10": ok
    "32": degraded
    "11": ok
    "33": failed
    "12": ok
    "34": failed
    "13": ok
    "35": failed
    "14": ok
    "36": ok
    "15": ok
    Default: Unknown Status
    "0": UNKNOWN
    "1": degraded
    "101": ok
    "201": ok
    "202": ok
    "203": ok
    "204": failed
    "60": degraded
    "61": degraded
    "40": ok
    "62": degraded
    "41": ok
    "63": failed
    "20": ok
    "21": ok
