---
connector:
  displayName: Pure Storage FA Series (SSH)
  platforms: Pure Storage
  reliesOn: Pure Storage Management Card
  version: 1.0
  information: "This connector discovers the environmental, physical disks, management network cards and fiber ports on Pure Storage FA Series arrays."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # Test the  command
    - type: osCommand
      commandLine: puredrive list
      expectedResult: BAY
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the list of Hardware Components
          type: osCommand
          commandLine: purehw list
          computes:
            # Run this through awk EF2
            # All         MSHW_Type;ID;Status;Status;CurrentReading;
            # OtherDevice/Enc MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: awk
            script: "${file::embeddedFile-2}"
            separators: ;
            keep: ^MSHW
        source(2):
          # Make a copy of Table 1 so that a clean copy can be used by other discoveries
          # MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Enclosure$
        source(3):
          # as this command will be used for otherdevices and physical disks we run it during the enclosure discovery
          type: osCommand
          commandLine: puredrive list
          computes:
            # Run this through awk EF1
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW
      mapping:
        # Instances
        # MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $8
          vendor: Pure Storage
          model: $2
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $8, \"Pure Storage\", $2)}"
    collect:
      # MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Get the list of Hardware Components
          type: osCommand
          commandLine: purehw list
          computes:
            # Run this through awk EF2
            # All         MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
            # OtherDevice/Enc MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: awk
            script: "${file::embeddedFile-2}"
            separators: ;
            keep: ^MSHW
        source(2):
          # Make a copy of Table 1 so that a clean copy can be used by other collects
          # MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Enclosure$
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;DeviceType;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;DeviceType;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 5
            translationTable: "${translation::statusInformationTranslationTable}"
        source(3):
          # we run the command for other devices and physical disks collect
          type: osCommand
          commandLine: puredrive list
          computes:
            # Run this through awk EF1
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW
            # Now translate  into OK/Warning/Alarm
            # MSHW;ID;Type;PatrolStatus;Status;Capacity;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::driveTranslationTable}"
            # Translate Status Information
            # MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
          - type: translate
            column: 5
            translationTable: "${translation::driveInformationTranslationTable}"
      mapping:
        # Value Table
        # MSHW_Type;DeviceType;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="enclosure"}: $4
        legacyTextParameters:
          StatusInformation: $5
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Temperature$
      mapping:
        # InstanceTable = Source(1)
        # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $7
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $7
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Temperature$
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.temperature: $5
          hw.status{hw.type="temperature"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Fan$
      mapping:
        # InstanceTable = Source(1)
        # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $7
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $7
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_Fan$
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="fan"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_PSU$
      mapping:
        # InstanceTable = Source(1)
        # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $7
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $7
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_PSU$
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::statusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="power_supply"}: $3
        legacyTextParameters:
          StatusInformation: $4
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_NetworkCard
      mapping:
        # InstanceTable = Source(1)
        # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.network.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $7
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $7
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;LinkStatus
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_NetworkCard
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;LinkStatus
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
          - type: translate
            column: 4
            translationTable: "${translation::statusInformationTranslationTable}"
            # Translate Speed into Link
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
          - type: translate
            column: 8
            translationTable: "${translation::linkTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
        source: "${source::monitors.network.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $3
          hw.network.up: legacyLinkStatus($8)
          hw.network.bandwidth.limit: megaBit2Bit($5)
        legacyTextParameters:
          StatusInformation: $4
  physical_disk:
    discovery:
      sources:
        source(1):
          # Get the list of Disk Components
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
            # Convert the size into bytes
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: multiply
            column: 6
            value: 1073741824
            # Remove Nvram
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: excludeMatchingLines
            column: 3
            valueList: NVRAM
            # Remove unused slots
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: excludeMatchingLines
            column: 4
            valueList: unused
      mapping:
        # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $8
          hw.parent.type: enclosure
          hw.parent.id: $7
          name: "${awk::sprintf(\"%s (%s)\", $8, bytes2HumanFormatBase10($6))}"
        metrics:
          hw.physical_disk.size: $6
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Get the list of Disk Components
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(3)}"
      mapping:
        # ValueTable = Source(1)
        # MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $4
        legacyTextParameters:
          StatusInformation: $5
  other_device:
    discovery:
      sources:
        source(1):
          # discover NVRAMs
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
            # keeponly nvram
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: NVRAM
            # keeponly nvram
            # MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
          - type: excludeMatchingLines
            column: 4
            valueList: unused
        source(2):
          # copy enclosure table to keep only otherdevice
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only OtherDevice
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_OtherDevice
            # standardize both sources
            # MSHW_Type;ID;IOM;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: rightConcat
            column: 2
            value: ;IOM
        source(3):
          # tableunion of otherdevice.disco(1) and 2
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(1)}"
          - "${source::monitors.other_device.discovery.sources.source(2)}"
      mapping:
        # value table = source(3)
        # MSHW_Type;ID;Type;Status;Status;CurrentReading;Enclosure;DisplayID;
        source: "${source::monitors.other_device.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $8
          device_type: $3
          hw.parent.type: enclosure
          hw.parent.id: $7
          name: "${awk::sprintf(\"%s: %s\", $3, $8)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Keep only components of basetype "system"
            # MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_OtherDevice
            # Now translate  into OK/Warning/Alarm
            # MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 3
            translationTable: "${translation::statusTranslationTable}"
            # Translate Status Information
            # MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
          - type: translate
            column: 4
            translationTable: "${translation::statusInformationTranslationTable}"
            # standardize both sources
            # MSHW_Type;ID;IOM;Status;Status;CurrentReading;Enclosure;DisplayID;
          - type: rightConcat
            column: 2
            value: ;IOM
        source(2):
          # / Get the list of Disk Components
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(3)}"
        source(3):
          # tableunion of otherdevice.collect(1) and 2
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
      mapping:
        # ValueTable = Source(3)
        # MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
        source: "${source::monitors.other_device.collect.sources.source(3)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="other_device"}: $4
        legacyTextParameters:
          StatusInformation: $5
translations:
  statusInformationTranslationTable:
    failed: Failed
    ok: ""
    degraded: Degraded
    not_installed: Missing
  statusTranslationTable:
    failed: failed
    ok: ok
    degraded: degraded
    Default: failed
    not_installed: failed
  linkTranslationTable:
    "0": degraded
    Default: ok
  driveTranslationTable:
    healthy: ok
    missing: failed
    failed: failed
    Default: failed
    reachable: degraded
    foreign: degraded
  driveInformationTranslationTable:
    healthy: healthy
    missing: 'Missing - '
    failed: 'Failed - '
    reachable: 'Reachable but not initialized - '
    foreign: 'Drive is foreign to the array - '
