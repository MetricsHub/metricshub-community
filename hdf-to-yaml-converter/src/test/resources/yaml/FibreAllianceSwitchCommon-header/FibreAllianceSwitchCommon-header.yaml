---
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = \tconnUnitTable SNMP table\nDeviceID;UnitType;Model;SerialNumber;Vendor;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.6.1
          selectColumns: "1,3,7,8,31"
          computes:
            # Keep only units of type 4 (switch)
            # DeviceID;UnitType;Model;SerialNumber;Vendor;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "4,14"
            # Keep only the first word in the Vendor name (avoiding Corporation, Inc. and other messy legal stuff)
            # DeviceID;UnitType;Model;SerialNumber;Vendor;
          - type: extract
            column: 5
            subColumn: 1
            subSeparators: ' '
            # Exclude Switches that have no Model
            # DeviceID;UnitType;Model;SerialNumber;Vendor;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: $5
          model: $3
          serial_number: $4
          type: Switch
          name: "${awk::sprintf(\"Switch: (%s %s)\", $5, $3)}"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # SensorID;ComputerID;SensorName;SensorCharacteristic;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.8.1
          selectColumns: "ID,1,3,8"
          computes:
            # Keep only temperature sensors
            # SensorID;ComputerID;SensorName;SensorType;
          - type: keepOnlyMatchingLines
            column: 4
            valueList: 3
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $1, $3)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # SensorID;Status;Message;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.8.1
          selectColumns: "ID,4,6"
          computes:
            # Translate the first column status into a PATROLStatus
            # SensorID;PATROLStatus;Message
          - type: translate
            column: 2
            translationTable: "${translation::SensorStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="temperature"}: $2
        legacyTextParameters:
          StatusInformation: $3
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = connUnitPortTable SNMP Table
          # PortID;ComputerID;PortTypeCode;HWStatus;WWN;SerialNumber;Vendor;SpeedKB;TransmitterType;PhysicalIndex;
          type: snmpTable
          oid: 1.3.6.1.3.94.1.10.1
          selectColumns: "ID,1,3,23,10,12,14,15,8,18"
          computes:
            # Exclude ports that have "no media" (no GBIC)
            # PortID;ComputerID;PortTypeCode;HWStatus;WWN;SerialNumber;Vendor;SpeedKB;TransmitterType;PhysicalIndex;
          - type: excludeMatchingLines
            column: 4
            valueList: 7
            # Exclude ports that are not real FC ports (copper, etc.)
            # PortID;ComputerID;PortTypeCode;HWStatus;WWN;SerialNumber;Vendor;SpeedKB;TransmitterType;PhysicalIndex;
          - type: excludeMatchingLines
            column: 9
            valueList: "1,2,3,6,7"
            # Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
            # PortID;ComputerID;PortTypeCode;HWStatus;WWN;SerialNumber;Vendor;SpeedKB;TransmitterType;PhysicalIndex;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11"
            # Translate the PortTypeCode to a readable string
            # PortID;ComputerID;PortType;HWStatus;WWN;SerialNumber;Vendor;SpeedMbps;TransmitterType;PhysicalIndex;
          - type: translate
            column: 3
            translationTable: "${translation::PortTypeTranslationTable}"
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # PortID;ComputerID;PortType;HWStatus;WWN;SerialNumber;Vendor;SpeedMbps;TransmitterType;PhysicalIndex;
          - type: replace
            column: 5
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
            # Remove the spaces from the WWN
            # PortID;ComputerID;PortType;HWStatus;WWN;SerialNumber;Vendor;SpeedMbps;TransmitterType;PhysicalIndex;
          - type: replace
            column: 5
            existingValue: ' '
            newValue: ""
        source(2):
          # Source(2) = connUnitSnsTable SNMP Table
          # RemoteWWN;PortWWN;
          type: snmpTable
          oid: 1.3.6.1.3.94.5.2.1.1
          selectColumns: "4,12"
          computes:
            # Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
            # RemoteWWN;PortWWN;
          - type: replace
            column: 1
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' 00 00 00 00 00 00 00 00'
            newValue: ""
            # Remove the spaces from the WWN
            # RemoteWWN;PortWWN;
          - type: replace
            column: 1
            existingValue: ' '
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
        source(3):
          # Source(3) = Table joint of Source(1) and Source(2)
          # PortID;ComputerID;PortType;HWStatus;WWN;SerialNumber;Vendor;SpeedMbps;TransmitterType;PhysicalIndex;RemoteWWN;PortWWN;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(1)}"
          rightTable: "${source::monitors.network.discovery.sources.source(2)}"
          leftKeyColumn: 5
          rightKeyColumn: 2
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.network.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $10
          vendor: $7
          bandwidth: $8
          physical_address: $5
          physical_address_type: WWN
          serial_number: $6
          device_type: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s)\", $10, $3, $7)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = connUnitPortTable SNMP Table
          # PortID;PortIndex;SpeedKB;Status
          type: snmpTable
          oid: 1.3.6.1.3.94.1.10.1
          selectColumns: "ID,2,15,23"
          computes:
            # Duplicate Status twice
            # PortID;PortIndex;SpeedKB;Status;Status;Status
          - type: duplicateColumn
            column: 4
          - type: duplicateColumn
            column: 5
            # Translate the first column status into a PATROLStatus
            # PortID;PortIndex;SpeedKB;Status;Status;Status
          - type: translate
            column: 4
            translationTable: "${translation::PortStatusTranslationTable}"
            # Translate the second column status into a more readable string
            # PortID;PortIndex;SpeedKB;Status;StatusInformation;Status
          - type: translate
            column: 5
            translationTable: "${translation::PortStatusInformationTranslationTable}"
            # Translate the third column status into a LinkStatus value
            # PortID;PortIndex;SpeedKB;Status;StatusInformation;LinkStatus
          - type: translate
            column: 6
            translationTable: "${translation::PortLinkStatusInformationTranslationTable}"
            # Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
            # PortID;PortIndex;SpeedKB;Status;StatusInformation;LinkStatus;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(2):
          # Source(2) = connUnitPortStatTable SNMP Table
          # PortIndex;ErrorCountHex;TransmitTotalHex;ReceiveTotalHex;TransmitttedBytesHex;ReceivedBytesHex;
          type: snmpTable
          oid: 1.3.6.1.3.94.4.5.1
          selectColumns: "2,3,4,5,6,7"
          computes:
            # Convert all these values from hex to dec
            # PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: convert
            column: 2
            conversion: hex2Dec
          - type: convert
            column: 3
            conversion: hex2Dec
          - type: convert
            column: 4
            conversion: hex2Dec
          - type: convert
            column: 5
            conversion: hex2Dec
          - type: convert
            column: 6
            conversion: hex2Dec
        source(3):
          # Now collect stats from MIB2 - Hopefully one will have statistics
          # Source(3) = ifMIBObjects SNMP Table
          # PortID;ReceivedBytes64;ReceivedUnicastPackets64;ifHCInMulticastPkts64;ifHCInBroadcastPkts64;TransmittedBytes64;TransmittedPackets64;ifHCOutMulticastPkts;ifHCOutBroadcastPkts;
          type: snmpTable
          oid: 1.3.6.1.2.1.31.1.1.1
          selectColumns: "ID,6,7,8,9,10,11,12,13"
          computes:
            # Add MulticastPkts and BroadcastPkts to UnicastPackets
            # PortID;ReceivedBytes64;ReceivedUnicastPackets64;ifHCInMulticastPkts64;ifHCInBroadcastPkts64;TransmittedBytes64;TransmittedPackets64;ifHCOutMulticastPkts;ifHCOutBroadcastPkts;
          - type: add
            column: 3
            value: $4
          - type: add
            column: 3
            value: $5
          - type: add
            column: 7
            value: $8
          - type: add
            column: 7
            value: $9
            # Keep only useful columns
            # PortID;ReceivedBytes64;ReceivedUnicastPackets64;ifHCInMulticastPkts64;ifHCInBroadcastPkts64;TransmittedBytes64;TransmittedPackets64;ifHCOutMulticastPkts;ifHCOutBroadcastPkts;
            # PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: keepColumns
            columnNumbers: "1,7,3,6,2"
        source(4):
          # Source(4) = ifTable SNMP Table (32 Bit MIB2 Counters)
          # PortIndex;Speed;ReceivedErrors;TransmittedErrors;Status;LinkStatus;
          type: snmpTable
          oid: 1.3.6.1.2.1.2.2.1
          selectColumns: "ID,5,14,20,7,8"
          computes:
            # Add the TransmisttedErrors to the ReceivedErrors
            # PortIndex;Speed;Errorcount;TransmittedErrors;Status;LinkStatus;
          - type: add
            column: 3
            value: $4
            # Convert Speed to MBPS
            # PortIndex;SpeedMbps;Errorcount;TransmittedErrors;Status;LinkStatus;
          - type: divide
            column: 2
            value: 1000000
            # Get rid of Transmitted errors
            # PortIndex;SpeedMbps;Errorcount;Status;LinkStatus;
          - type: keepColumns
            columnNumbers: "1,2,3,5,6"
            # Duplicate the Status
            # PortIndex;SpeedMbps;Errorcount;Status;Status;LinkStatus;
          - type: duplicateColumn
            column: 4
            # Translate the first column status into a PATROLStatus
            # PortIndex;SpeedMbps;Errorcount;Patrol;Status;LinkStatus;
          - type: translate
            column: 4
            translationTable: "${translation::MIB2PortStatusTranslationTable}"
            # Translate the second column status into a more readable string
            # PortIndex;SpeedMbps;Errorcount;Patrol;StatusInformation;LinkStatus;
          - type: translate
            column: 5
            translationTable: "${translation::MIB2PortStatusInformationTranslationTable}"
            # Translate the third column status into a LinkStatus value
            # PortIndex;SpeedMbps;Errorcount;Patrol;StatusInformation;LinkStatus;
          - type: translate
            column: 6
            translationTable: "${translation::MIB2PortLinkStatusInformationTranslationTable}"
        source(5):
          # Join the two MIB2 tables
          # PortIndex;SpeedMbps;ErrorCount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(4)}"
          rightTable: "${source::monitors.network.collect.sources.source(3)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;;
        source(6):
          # Source(6) = Table joint between Source(1) and Source(2)
          # PortID;PortIndex;SpeedMbps;Status;StatusInformation;LinkStatus;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(2)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
          computes:
            # Duplicate column speed
            # PortID;PortIndex;SpeedMbps;SpeedMbps;Status;StatusInformation;LinkStatus;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: duplicateColumn
            column: 3
            # Replacethe speed by error count;
            # 1         2       3          4        5            6            7            8        9           10            #    11           12            #   13
            # PortID;PortIndex;SpeedMbps;errorcount;Status;StatusInformation;LinkStatus;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: replace
            column: 4
            newValue: $9
            # remove errorcount from column 9 and portId from column 1
            #     2       3          4        5            6            7            8            # 9            #   10           11            #   12
            # PortIndex;SpeedMbps;errorcount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: keepColumns
            columnNumbers: "2,3,4,5,6,7,8,10,11,12,13"
        source(7):
          # Union Fibre Alliance and MIB2
          # PortIndex;SpeedMbps;errorcount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(5)}"
          - "${source::monitors.network.collect.sources.source(6)}"
          computes:
            # Keep only rows with statistics
            # PortIndex;SpeedMbps;errorcount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          - type: keepOnlyMatchingLines
            column: 5
            regExp: .
        source(8):
          # Now link Source 1 with the unioned statistics table (7)
          # The first Status, StatusInformation and LinkStatus should not be used.
          # PortID;PortIndex;SpeedKB;Status;StatusInformation;LinkStatus;PortIndex;SpeedMbps;errorcount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(7)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;;;
      mapping:
        # ValueTable = Source(8)
        #   1        2        3      4         5        #       6        # 7         8        #   9      10       11        #         12        13        #      14         15        #       16        #   17
        # PortID;PortIndex;SpeedKB;Status;StatusInformation;LinkStatus;PortIndex;SpeedMbps;ErrorCount;Status;StatusInformation;LinkStatus;PortIndex;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
        source: "${source::monitors.network.collect.sources.source(8)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="network"}: $10
          hw.network.up: legacyLinkStatus($12)
          hw.network.bandwidth.limit: megaBit2Bit($8)
          hw.network.full_duplex: legacyFullDuplex("full")
          hw.errors{hw.type="network"}: $9
          hw.network.packets{direction="transmit"}: $14
          hw.network.packets{direction="receive"}: $15
          hw.network.io{direction="transmit"}: $16
          hw.network.io{direction="receive"}: $17
        legacyTextParameters:
          StatusInformation: $11
translations:
  MIB2PortStatusTranslationTable:
    "1": ok
    "2": ok
    "3": degraded
    "5": ok
    "6": failed
    "7": failed
    Default: UNKNOWN
  PortLinkStatusInformationTranslationTable:
    "1": degraded
    "7": degraded
    "8": degraded
    Default: ok
  PortStatusInformationTranslationTable:
    "2": Failed
    "3": "FCAL bypass, Loop only"
    "4": Connected
    "5": External Loopback
    "6": Transmitter Fault
    "7": No Media
    "8": Link Down
    Default: Unknown Status
  MIB2PortStatusInformationTranslationTable:
    "1": Up
    "2": Down
    "3": Testing
    "5": Dormant
    "6": Component Not Present
    "7": Lower Layer Down
    Default: Unknown Status
  SensorStatusTranslationTable:
    "3": ok
    "4": degraded
    "5": failed
    Default: UNKNOWN
  PortTypeTranslationTable:
    "11": SCSI Port
    "22": IP Storage Port
    "15": Ethernet Port
    "17": AC Port
    "18": DC Port
    "19": SSA Port
    Default: FC Port
    "4": FC Port Hub
    "5": FC Port N
    "6": FC Port NL (Public Loop)
    "7": FC Port FL
    "8": FC Port F
    "9": FC Port E
    "20": WDM Port
    "10": FC Port G
    "21": IB Port
  MIB2PortLinkStatusInformationTranslationTable:
    "1": ok
    "2": degraded
    Default: degraded
  PortStatusTranslationTable:
    "2": failed
    "3": degraded
    "4": ok
    "5": ok
    "6": failed
    "7": failed
    "8": ok
    Default: UNKNOWN
