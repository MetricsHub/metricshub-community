---
extends:
- ../MIB2-header/MIB2-header
connector:
  displayName: Cisco Entity Sensor (SNMP)
  platforms: Cisco
  reliesOn: Cisco SNMP Agent (ciscoMgmt)
  version: 1.0
  information: "This connector discovers the enclosure Cisco Ethernet switches as well as the various environment sensors (temperatures, fans, power supplies, etc.). It relies on the SNMP protocol."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Network
    supersedes:
    - GenericSwitchEnclosure
    - MIB2
    criteria:
      # Detection Criteria 1
      # Must have A Cisco Enviroment Monitor Present
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.9.9.91.1.1.1.1
      # Detection Criteria 1
      # Must have A Cisco Entity Sensor Present
    - type: snmpGetNext
      oid: 1.3.6.1.2.1.47.1.1.1.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Entities
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          type: snmpTable
          oid: 1.3.6.1.2.1.47.1.1.1.1
          selectColumns: "ID,4,5,7,11,12,13"
          computes:
          # Remove Container Class as they are redundant.
          - type: excludeMatchingLines
            column: 3
            valueList: 5
        source(2):
          # Save Enclosure.Discovery.Source(1) for further computes
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
          # Keep only Chassis class for Enclosure.
          - type: keepOnlyMatchingLines
            column: 3
            regExp: 3
        source(3):
          # Sensor Table
          # ID;Type;Value;Status;Entity;
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.91.1.1.1.1
          selectColumns: "ID,1,2,4,5,8"
      mapping:
        # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
        # InstanceTable = Source(2)
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: Chassis
          __display_id: $4
          serial_number: $5
          vendor: $6
          model: $7
          type: Chassis
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $4, $6, $7)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Sensor
          # ID;Type;Units;Value;Status;Parent
          type: snmpTable
          oid: 1.3.6.1.4.1.9.9.91.1.1.1.1
          selectColumns: "ID,1,2,4,5,8"
        source(2):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          # ID;Type;Unit;Value;Status;Status;
          - type: duplicateColumn
            column: 5
          # ID;Type;Unit;Value;PatrolStatus;Status;
          - type: translate
            column: 5
            translationTable: "${translation::SensorStatusTranslationTable}"
          # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
          - type: translate
            column: 6
            translationTable: "${translation::SensorStatusInformationTranslationTable}"
        source(3):
          # Entities
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          type: snmpTable
          oid: 1.3.6.1.2.1.47.1.1.1.1
          selectColumns: "ID,4,5,7,11,12,13"
        source(4):
          # LEFT  ID;Type;Units;Value;Status;Parent
          # RIGHT ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          # Result
          # SensorID;Type;Unit;Value;Status;Entity(parent);ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.collect.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(3)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
          computes:
          # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
          - type: awk
            script: "${file::embeddedFile-1}"
          # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
          - type: translate
            column: 9
            translationTable: "${translation::SensorStatusTranslationTable}"
          # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
          - type: translate
            column: 10
            translationTable: "${translation::SensorStatusInformationTranslationTable}"
          # Watts for if we find total watt capacity
          - type: multiply
            column: 8
            value: $7
        source(5):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-2}"
      mapping:
        # Chassis;PowerConsumption
        source: "${source::monitors.enclosure.collect.sources.source(5)}"
        attributes:
          id: $1
        metrics:
          hw.enclosure.power: $2
          hw.enclosure.energy: fakeCounter($2)
  power_supply:
    discovery:
      sources:
        source(1):
          # LEFT   ID;Type;Unit;Value;Status;Parent; (sensor)
          # RIGHT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity)
          # Result
          # SensorID;Type;Unit;Value;Status;Entity(parent);ID;Parent;Type;Name;SerialNumber;Vendor;Model;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(3)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
          computes:
          # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
          - type: awk
            script: "${file::embeddedFile-1}"
          # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: 6
      mapping:
        # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $3
          info: "${awk::join(\" \", $4, $5, $6)}"
          hw.parent.type: enclosure
          hw.parent.id: Chassis
          name: $3
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      mapping:
        # PowerSupply Status is a rollup of all sensors associated to it.
        # ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
        source: "${source::monitors.enclosure.collect.sources.source(4)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $9
        legacyTextParameters:
          StatusInformation: $10
  temperature:
    discovery:
      sources:
        source(1):
          # LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
          # RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
          # Result
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(3)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
          # Keep only celsius sensors
          - type: keepOnlyMatchingLines
            column: 9
            valueList: 8
      mapping:
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: Chassis
          name: $4
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      mapping:
        # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $4
          hw.status{hw.type="temperature"}: $5
        legacyTextParameters:
          StatusInformation: $6
  voltage:
    discovery:
      sources:
        source(1):
          # LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
          # RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
          # Result
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(3)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
          # Keep only DC sensors
          - type: keepOnlyMatchingLines
            column: 9
            valueList: 4
      mapping:
        # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          sensor_location: DC
          hw.parent.type: enclosure
          hw.parent.id: Chassis
          name: "${awk::sprintf(\"%s (%s)\", $4, \"DC\")}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          - type: translate
            column: 3
            translationTable: "${translation::SensorValueMultiplierTable}"
          # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
          - type: multiply
            column: 4
            value: $3
      mapping:
        # ID;Type;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.voltage: $4
          hw.status{hw.type="voltage"}: $5
        legacyTextParameters:
          StatusInformation: $6
  fan:
    discovery:
      sources:
        source(1):
          # LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
          # RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
          # Result
          # ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(3)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
          # Keep only RPM sensors
          - type: keepOnlyMatchingLines
            column: 9
            valueList: 10
      mapping:
        # ID;Parent;Type;Name;SerialNumber;Vendor;Model;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: Chassis
          name: $4
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
      mapping:
        # ID;Type;Unit;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.fan.speed: $4
          hw.status{hw.type="fan"}: $5
        legacyTextParameters:
          StatusInformation: $6
  network:
    discovery:
      mapping:
        # add network card discovery present in mib2.hdf and not in mib2.hhdf
        # PortID;Description;TypeCode;MacAddress;AdminStatus;ID;Name;Alias;
        source: "${source::monitors.network.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $7
          physical_address: $4
          physical_address_type: MAC
          device_type: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $7, $3)}"
translations:
  SensorStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": failed
    "4": failed
    "5": failed
    "6": failed
    Default: UNKNOWN
  SensorStatusInformationTranslationTable:
    "1": ""
    "2": Warning
    "3": Critical
    "4": Shutdown
    "5": No Longer Present
    "6": Not Functioning
    Default: Unknown Status
  SensorValueMultiplierTable:
    "9": 1000
    Default: 1
