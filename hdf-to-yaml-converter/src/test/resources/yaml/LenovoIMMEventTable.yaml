---
embedded:
  EmbeddedFile(1): "function power(x, n) {\n\tr = 1;\n\t#Convert n to integer because if it's a negative value, java considere it as a string (I think :-) )\n\tn=n*1\n\tif (n > 0) { for (i = 0; i < n; i++) { r = r * x; } }\n\tif (n < 0) { for (i = 0; i > n; i--) { r = r / x; } }\n\treturn r;\n}\n\nfunction hex2dec(hex) {\n\tdigits=split(hex,hexArray,\"\") ;\n\tdecimal=0\n\tfor (n=1;n<=digits;n++) {\n\t  place = digits - n\n\t  multiplier = power(16,place)\n\t  gsub(/[Aa]/,10,hexArray[n])\n\t  gsub(/[Bb]/,11,hexArray[n])\n\t  gsub(/[Cc]/,12,hexArray[n])\n\t  gsub(/[Dd]/,13,hexArray[n])\n\t  gsub(/[Ee]/,14,hexArray[n])\n\t  gsub(/[Ff]/,15,hexArray[n])\n\t  decimal=decimal + hexArray[n] * multiplier\n\t  }\n\treturn decimal\n    }\n\nfunction previousXDays(year,month,day,numberOfDays) {\n\tfor (n=1;n<=numberOfDays;n++) {\n\t\tdatesList[n] = month \"/\" day \"/\" year\n\t\tdatesList[n\"a\"] = \"0\" month \"/\" day \"/\" year\n\t\tdatesList[n\"b\"] = month \"/0\" day \"/\" year\n\t\tdatesList[n\"c\"] = \"0\" month \"/0\" day \"/\" year\n    if (day == 1) {\n\t\t\tif (month == 1) { day = 31 ; month = 12 ; year = year - 1}\n\t\t\tif (month == 2) { day = 31 ; month = month - 1}\n\t\t\tif (month == 3) { day = 28 ; month = month - 1 ; datesList[\"0\"] = month \"/29/\" year}\n\t\t\tif (month == 4) { day = 31 ; month = month - 1}\n\t\t\tif (month == 5) { day = 30 ; month = month - 1}\n\t\t\tif (month == 6) { day = 31 ; month = month - 1}\n\t\t\tif (month == 7) { day = 30 ; month = month - 1}\n\t\t\tif (month == 8) { day = 31 ; month = month - 1}\n\t\t\tif (month == 9) { day = 31 ; month = month - 1}\n\t\t\tif (month == 10) { day = 30 ; month = month - 1}\n\t\t\tif (month == 11) { day = 31 ; month = month - 1}\n      if (month == 12) { day = 30 ; month = month - 1}\n\t\t\t}\n\t\telse {\n\t\t\tday = day - 1\n\t\t\t}\n\n\t\t}\n\t}\n\nfunction cancelEvent(searchText) {\n\tsearchTextLower = tolower(searchText)\n\tfor (id in faultArray) {\n\t\tfaultTextLower = tolower(faultArray[id])\n\t\tif ( faultTextLower ~ searchTextLower ) { faultArray[id] = \"\" }\n\t\t}\n\t}\n\n\nBEGIN {FS=\"[;]\";faultFound=\"0\"}\n$1 == \"CurrentDate\" {\n  split($2,dateArray,\" \")\n  year = dateArray[1] dateArray[2]\n\tyear = hex2dec(year)\n\tmonth = hex2dec(dateArray[3])\n\tday = hex2dec(dateArray[4])\n  # The last number in this function sets the number of days before unknown events are discarded\n\tpreviousXDays(year,month,day,30) ;\n\t}\n$1 ~ /^[0-9]*$/ {\n  # Check if this is a fault\n  severity = $3\n\teventDescription = $2\n\teventDate = $4\n\tif ( severity ~ /[01]/ && eventDescription !~ /Numeric sensor/ )  {\n\t# Scan the array to see if the fault is already there\n    newFault = \"1\"\n\t\tfor (id in faultArray) {\n\t\t\tif ( faultArray[id] ==  eventDescription ) { newFault = \"0\" }\n\t\t\t}\n\t\tif ( newFault == \"1\")\t { faultArray[$1] = eventDescription ; faultFound = \"1\" ; faultTimeStamp[$1] = eventDate ; faultSeverity[$1] = severity }\n\t\t}\n   # Known Messages (in Pairs of Fault/Fix, no as efficient, but easier to maintain)\n\tif ( faultFound == \"1\") {\n\t\t# Drive Failures\n\t\tif ( eventDescription ~ /Failure Predicted on drive/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Failure no longer Predicted on drive/ ) {\n\t\t\t\tsplit(eventDescription,eventDescriptionArray,\" \")\n\t\t\t\tsearchText = \"Failure Predicted on drive \" eventDescriptionArray[7] \" \" eventDescriptionArray[8]\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /The Drive.*has been disabled due to a detected fault/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /The Drive.*has been enabled/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText) ;\n\t\t\t\tsearchText = searchText \"has been disabled\"\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /The Drive.*has been removed from unit/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /The Drive.*has been added/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText) ;\n\t\t\t\tsearchText = searchText \"has been removed\"\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\t# Power / Fan\n\t\tif ( eventDescription ~ /Redundancy Lost for / ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Redundancy .* has been restored/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText) ; gsub(/Redundancy /,\"Redundancy Lost for \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Redundancy .* has deasserted/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" has asserted\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Non-redundant.Insufficient Resources for.*has asserted/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Non-redundant:Insufficient Resources for.*has deasserted/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText) ;\n\t\t\t\tsearchText = searchText ;\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /has a Configuration Mismatch/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /has Recovered from a Configuration Mismatch/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" has a Configuration Mismatch\",searchText) ;\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /has Failed/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /has returned to OK status/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" has Failed\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /has lost input/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /has returned to a Normal Input State/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" has lost input\",searchText) ;\n\t\t\t\tsearchText = searchText ;\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\t# CPUs\n\t\tif ( eventDescription ~ /.*has Failed with IERR/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /.*has Recovered from IERR/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText)\n\t\t\t\tsearchText = searchText \"has Failed with IERR\";\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /is operating in a Degraded State/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /is no longer operating in a Degraded State/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/is no longer operating in a Degraded State/,\"is operating in a Degraded State\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\n\t\t# Memory\n\t\tif ( eventDescription ~ /Disabled on Subsystem/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Enabled on Subsystem/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/Enabled on Subsystem/,\"Disabled on Subsystem\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Uncorrectable error detected for/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Uncorrectable error recovery detected for/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ on .*/,\" on\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Scrub Failure for/ && eventDescription !~ /recovered/  ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Scrub Failure for.*recovered/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ on .*/,\" on\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Configuration [Ee]rror for/ && eventDescription !~ /deasserted/  ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Configuration [Ee]rror for.*deasserted/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ on .*/,\" on\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /on Subsystem.*Throttled/ && eventDescription !~ /is no longer/  ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /on Subsystem.*is no longer Throttled/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/is no longer Throttled.*/,\"\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /An Over-Temperature Condition has been detected on the/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /An Over-Temperature Condition has been removed on the/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/removed/,\"detected\",searchText) ; gsub(/ on Subsystem.*/,\"\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\t# Logical Disk\n\t\tif ( eventDescription ~ /Array.*is in critical condition/ ) { eventDate = \"NA\"}\n\t\tif ( eventDescription ~ /Critical Array.*has.*deasserted/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/Critical Array /,\"Array \",searchText) ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\tsearchText = eventDescription ; gsub(/Critical Array /,\"Array in system \",searchText) ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n    if ( eventDescription ~ /Array.*has failed/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Array in system.*has been restored/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/Array in system /,\"\",searchText) ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tsearchText = \"Array \" searchText ;\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n    if ( eventDescription ~ /has been disabled due to a detected fault/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /has been enabled/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/disabled due to a detected.*/,\"enabled\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\n\t\t# slot\n    if ( eventDescription ~ /Fault in slot/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Fault condition removed on slot/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/Fault condition removed on slot/,\"Fault in slot\",searchText) ;\n\t\t\t\tsearchText = \"Array \" searchText ;\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n    if ( eventDescription ~ /A PCI PERR has occurred on system/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /A PCI PERR recovery has occurred on system/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has occurred on system/,\"recovery has occurred on system\",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n    if ( eventDescription ~ /A Fatal Bus Error has occurred on bus/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /A PCI PERR recovery has occurred on system/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has recovered from a Fatal Bus Error/,\"\",searchText)\n\t\t\t\tgsub(/Bus /,\"A Fatal Bus Error has occurred on bus \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\n\n# Batteries\n# Sensor Planar VBAT has detected low battery voltage\n\n\t\t# Generic Sensor Event\n\t\tif ( eventDescription ~ /Device.*has been removed from unit / ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Device.*has been added/ ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/has.*/,\"\",searchText) ;\n\t\t\t\tsearchText = searchText \"has been removed\"\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has indicated limit exceeded/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has indicated limit no longer exceeded/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ limit.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n    if ( eventDescription ~ /Sensor.*has asserted/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned to critical from a less severe state/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition from less severe state to critical/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned from a less severe state to critical/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition to critical from less severe state/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned to non-recoverable from a less severe state/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition from less severe state to non-recoverable/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned from a less severe state to non-recoverable/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition to non-recoverable from less severe state/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned from normal to non-critical state/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition from normal to non-critical state/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has transitioned to non-critical state from normal/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has deasserted the transition to non-critical state from normal/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\tif ( eventDescription ~ /Sensor.*has indicated a degraded state/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has indicated an off-line state/ ) { eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Sensor.*has indicated a on-line state/  ) {\n\t\t\t\tsearchText = eventDescription ; gsub(/ has.*/,\" \",searchText)\n\t\t\t\tcancelEvent(searchText)\n\t\t\t\t}\n\t\t# Unwanted Events (ignore)\n \t\tif ( eventDescription ~ /BOFM/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /DRIVER HEALTH/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /[Pp]ower [Cc]ap/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Software/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /POST Error/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /firmware mismatch/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /firmware error/ && ( eventDescription ~ /[Kk]eyboard/ || eventDescription ~ /[Vv]ideo/ )) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /[Mm]anagement [Cc]ontroller/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /[Ww]atchdog/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Certificate Authority/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /.*has been Power Cycled/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /.*has been turned off/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /.*has been turned on/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /^Sensor.*temperature/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /^Sensor.*voltage/ )  { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Remote access attempt failed/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /DHCP/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /Management Controller Test Alert Generated/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\tif ( eventDescription ~ /^Security/ ) { faultArray[$1] = \"\" ; eventDate = \"NA\" }\n\t\t# If Event Not Known (TimeStamp != N/A) and severity = 0 / 1, then delete events that are too old (length set in Date Function)\n\t\tif ( severity ~ /[01]/ && eventDate !~ \"NA\" ) {\n\t\t\t\teventTooOld = \"1\"\n\n\t\t\t\tfor ( n in datesList ) {\n\t\t\t\t\tif ( eventDate == datesList[n] ) { eventTooOld = \"0\"}\n\t\t\t\t\t}\n\t\t\t\tif ( eventTooOld == \"1\") { faultArray[$1] = \"\" }\n\t\t\t\telse { if ( faultArray[$1] ~ /.../ ) {faultArray[$1] = faultArray[$1] \" (Event not in automatic acknowledgement list)\"}}\n\t\t\t\t}\n\t\t}\n\t}\nEND {\n  status = \"OK\"\n\tstatusInformation = \"Events here might be duplicates, check if any other events are present for this system.  \"\n\tfor (id in faultArray) {\n\t\tif ( faultArray[id] ~ /.../ ) {\n\t\t\tif ( faultSeverity[id] == \"0\" ) { faultType = \" Warning: \"}\n\t\t\tif ( faultSeverity[id] == \"1\" ) { faultType = \" Error: \"}\n\t\t\tstatusInformation = statusInformation faultTimeStamp[id] faultType faultArray[id] \" - \"\n\t\t\tif ( faultSeverity[id] == \"0\" ) { status = \"ALARM\" }\n\t\t\tif ( faultSeverity[id] == \"1\" && status != \"ALARM\") { status = \"WARN\" }\n\t\t\t}\n\t\t}\n\tprint \"MSHW;EventLog;\" status \";\" statusInformation \";\"\n\t}"
connector:
  displayName: "Lenovo IMM Event Monitoring (SNMP)"
  platforms: "Lenovo"
  reliesOn: "Lenovo IMM's SNMP Service"
  version: "1.0"
  information: "This connector provides hardware monitoring through Lenovo's IMM management card.  It supplements the active monitoring of the Lenovo IMM connector by parsing the Event Log.  This allows older IBM xSeries systems to be fully monitored via their IMM."
  detection:
    connectionTypes:
    - "remote"
    appliesTo:
    - "OOB"
    criteria:
      # Detection
      # Check that the log table is available
    - type: "snmpGetNext"
      oid: "1.3.6.1.4.1.2.3.51.3.2.1.1.1"
monitors:
  other_device:
    discovery:
      sources:
        source(1):
          # Get the current time
          type: "snmpGet"
          oid: "1.3.6.1.2.1.25.1.2.0"
          computes:
            # Add an Identifier
          - type: "leftConcat"
            column: 1
            value: "CurrentDate;"
        source(2):
          # This is used for Event Monitoring
          # EventID;EventString;EventSeverity;EventDate;
          type: "snmpTable"
          oid: "1.3.6.1.4.1.2.3.51.3.2.1.1.1"
          selectColumns: "1,2,3,4"
          computes:
            # Replace \\\" with \"
          - type: "replace"
            column: 2
            existingValue: "\\\""
            newValue: "\""
        source(3):
          # Union 1 and 2
          type: "tableUnion"
          tables:
          - "$monitors.other_device.discovery.sources.source(1)$"
          - "$monitors.other_device.discovery.sources.source(2)$"
          computes:
            # Process the log file through an awk script
            # MSHW;ID;Status;StatusInformation;
          - type: "awk"
            script: "EmbeddedFile(1)"
            keep: "^MSHW;"
            separators: ";"
      mapping:
        # The Instance Table
        source: "$monitors.other_device.discovery.sources.source(3)$"
        attributes:
          id: "$column(2)"
          __display_id: "EventLog (Hourly Collect)"
          hw.parent.type: "enclosure"
          name: "EventLog (Hourly Collect)"
    collect:
      sources:
        source(1):
          # Copy the Discovery
          type: "copy"
          from: "$monitors.other_device.discovery.sources.source(3)$"
      mapping:
        # ValueTable = Source(1)
        # MSHW;ID;Status;StatusInformation;
        source: "$monitors.other_device.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.status{hw.type="other_device"}: "$column(3)"
        legacyTextParameters:
          StatusInformation: "$column(4)"
