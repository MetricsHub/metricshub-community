---
connector:
  information: "It monitors the Enclosure and Physical Disks as well as the various environment sensors (fans, power supplies, Memory, Directors and Network cards)"
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          url: /vplex/engines/*
          resultContent: body
          forceSerialization: true
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # Enclosure
            # MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
            # 1   ,2            #  ,3        , 4           ,5        , 6            #   ,7           ,  8       ,  9 , 10            #  , 11            , 12          ,13            #   ,14
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
      mapping:
        # Enclosure
        # MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
        # 1   ,2        #      ,3        , 4        #  ,5        , 6        #       ,7        #  ,  8       ,  9 , 10        #      , 11        #   , 12        # ,13        #       ,14
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $9
          __display_id: $9
          vendor: EMC
          model: $4
          serial_number: $12
          type: Storage
          name: "${awk::sprintf(\"Storage: %s (%s %s)\", $9, \"EMC\", $4)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Get the Enclosure Status
          # ChassisID;State;
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
            # 1   ,2            #  ,3        , 4           ,5        , 6            #   ,7           ,  8       ,  9 , 10            #  , 11            , 12          ,13            #   ,14
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
          - type: duplicateColumn
            column: 10
          - type: translate
            column: 10
            translationTable: "${translation::EnclosureTranslateTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;Value;
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: $9
        metrics:
          hw.status{hw.type="enclosure"}: $10
        legacyTextParameters:
          StatusInformation: $11
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/fans/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # MSHW, NAME , STATUS, SPEED_THRESHOLD,parenttoCS
            #  1 ,   2,    3,      4,            #    5
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
      mapping:
        # The discovery table
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          __display_id: $2
          id: $2
          hw.parent.type: enclosure
          hw.parent.id: $5
          name: $2
        conditionalCollection:
          hw.status{hw.type="fan"}: $3
    collect:
      # FANS
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/fans/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # MSHW, NAME , STATUS, SPEED_THRESHOLD, ParentID
            #  1  ,     2,      3,            #  4,    5
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
          - type: duplicateColumn
            column: 3
          - type: translate
            column: 4
            translationTable: "${translation::FansTranslateTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="fan"}: $4
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/*power*/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
            #  1   , 2         , 3    ,4    ,5            #    , 6          , 7            # , 8           , 9            #             #  , 10
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
          - type: leftConcat
            column: 6
            value: "Part Number: "
          - type: leftConcat
            column: 8
            value: "Serial Number: "
      mapping:
        # The discovery table
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          __display_id: $3
          id: $3
          info: "${awk::join(\" \", $6, $8)}"
          hw.parent.type: enclosure
          hw.parent.id: $10
          name: $3
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/*power*/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
            #  1   , 2         , 3    ,4    ,5            #    , 6          , 7            # , 8           , 9            #             #  , 10
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            # Duplicate Column
            # MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
            #  1   , 2         , 3    ,4    ,5            #    , 6          , 7            # , 8           , 9            #             #  , 10
          - type: duplicateColumn
            column: 5
            # MSHW, Marker-LED, Name, OnDC, operational-status,operationalstatus, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
            #  1   , 2         , 3    ,4    ,5            #   , 6            #  , 7          , 8            # , 9            , 10            #             # , 11
          - type: translate
            column: 5
            translationTable: "${translation::PowerSupplyTranslationTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="power_supply"}: $5
        legacyTextParameters:
          StatusInformation: $6
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/directors/*/
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # MSHW, health-state, name, serial-number,sp-id,parent
            #  1   , 2          , 3   ,4             ,5    , 6
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
          # 'AdditionalInformation adding Serial Number:'
          - type: leftConcat
            column: 4
            value: "Serial Number: "
      mapping:
        # The discovery table
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          __display_id: $3
          id: $3
          info: $4
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $3
    collect:
      # OtherDevice
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/engines/*/directors/*/
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # MSHW, health-state, name, serial-number,sp-id,parent
            #  1   , 2          , 3   ,4             ,5    , 6
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
          - type: duplicateColumn
            column: 2
            # MSHW, health-state,health-state, name, serial-number,sp-id,parent
            #  1   , 2          , 3          ,4    ,5             , 6   , 7
          - type: translate
            column: 2
            translationTable: "${translation::OtherStatusTranslationTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $4
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/dimms/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # MSHW, name, operationnal-status, part-number, serial-number, parent
            #  1   , 2         , 3             ,4          ,5            ,  6
          - type: awk
            script: "${file::embeddedFile-5}"
            keep: ^MSHW;
            separators: ;
      mapping:
        # The discovery table
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          __display_id: $2
          id: $2
          serial_number: $5
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $2
    collect:
      # Memory
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/dimms/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # Memory DIM
            # MSHW; NAME, Operational-status; Part-number, serial-number , parent
            # 1   ,    2,         3          , 4         , 5             , 6
          - type: awk
            script: "${file::embeddedFile-5}"
            keep: ^MSHW;
            separators: ;
            # MSHW; NAME, Operational-status, Operational-status, Part-number   , serial-number , parent
            # 1   ,    2,         3          , 4            #   , 5             , 6             ,   7
          - type: duplicateColumn
            column: 3
          - type: translate
            column: 3
            translationTable: "${translation::MemoryTranslationTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="memory"}: $3
        legacyTextParameters:
          StatusInformation: $4
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = NetworkCard Table
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/ports/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # MSHW, address,enabled,name,operational-status,linkstatus,port-wwn,role,parent
            #  1  ,  2     , 3     ,4   ,5            #    ,6         ,7        ,  8, 9
          - type: awk
            script: "${file::embeddedFile-6}"
            keep: ^MSHW;
            separators: ;
          # keep only enabled fc's
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "true"
          - type: leftConcat
            column: 8
            value: "Role: "
      mapping:
        # The discovery table
        # Network
        source: "${source::monitors.network.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $4
          physical_address_type: WWN
          physical_address: $7
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
    collect:
      # Memory
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/ports/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
          - type: awk
            script: "${file::embeddedFile-6}"
            keep: ^MSHW;
            separators: ;
            # MSHW, address,enabled,name,operational-status,operational-status,linkstatus,port-wwn,role,parent
            #  1  ,  2     , 3     ,4   ,5            #    ,6            #    ,7         ,  8     , 9  ,10
          - type: duplicateColumn
            column: 5
          - type: translate
            column: 5
            translationTable: "${translation::NetworkCardTranslationTable}"
          # Translate the Link Status
          - type: translate
            column: 7
            translationTable: "${translation::LinkTranslationTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.network.collect.sources.source(1)}"
        deviceId: $4
        metrics:
          hw.status{hw.type="network"}: $5
          hw.network.up: legacyLinkStatus($7)
        legacyTextParameters:
          StatusInformation: $6
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) =  Table
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/internal-disks/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value;../parent
            separator: ;
            # Awk Parsing
            # Physical Disk
            # MSHW, name, operational-status, part-number, serial-number, parentid
            # 1    ,  2 ,       3            ,  4         ,   5         ,    6
          - type: awk
            script: "${file::embeddedFile-7}"
            keep: ^MSHW;
            separators: ;
      mapping:
        # The discovery table
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          __display_id: $2
          id: $2
          serial_number: $5
          hw.parent.type: enclosure
          hw.parent.id: $6
          name: $2
    collect:
      # PhysicalDisk
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          forceSerialization: true
          method: GET
          url: /vplex/*/*/directors/*/hardware/internal-disks/*
          resultContent: body
          computes:
          # JSON Status
          - type: json2csv
            entryKey: response/context/attributes
            properties: /name;/value
            separator: ;
            # Awk Parsing
            # Physical Disk
            # MSHW, name, operational-status, part-number, serial-number, parentid
            # 1    ,  2 ,       3            ,  4         ,   5         ,    6
          - type: awk
            script: "${file::embeddedFile-7}"
            keep: ^MSHW;
            separators: ;
          - type: duplicateColumn
            column: 3
            # Now translate Status
            # Value,StatusInfo,Status
          - type: translate
            column: 3
            translationTable: "${translation::PhysicalDiskTranslationTable}"
      mapping:
        # The Collect table
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
translations:
  PhysicalDiskTranslationTable:
    offline: failed
    online: ok
    Default: UNKNOWN
  PowerSupplyTranslationTable:
    offline: failed
    online: ok
    Default: UNKNOWN
  LinkTranslationTable:
    no-link: degraded
    up: ok
    down: degraded
    Default: degraded
  NetworkCardTranslationTable:
    stopped: ok
    ok: ok
    error: failed
    Default: UNKNOWN
  OtherStatusTranslationTable:
    ko: failed
    ok: ok
    Default: UNKNOWN
  FansTranslateTable:
    offline: failed
    online: ok
    Default: UNKNOWN
  EnclosureTranslateTable:
    offline: failed
    online: ok
    Default: UNKNOWN
  MemoryTranslationTable:
    Offline: failed
    Online: ok
    Default: UNKNOWN
