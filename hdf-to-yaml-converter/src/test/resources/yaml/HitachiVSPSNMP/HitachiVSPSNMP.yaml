---
connector:
  displayName: Hitachi HDS USP/VSP (SNMP)
  platforms: "Hitachi USP,Hitachi VSP"
  reliesOn: Hitachi SNMP Agent
  version: 1.0
  information: "This connector discovers the overall (global) status of Hitachi USP/VSP's Processors, CSW, Cache, SM, Power Supplies, Batteries, Fans, Physical Disks and Environment."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    supersedes:
    - SMISDiskArray
    - HitachiDiskArray
    criteria:
    # Check that there are VSP OIDs
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.116.5.11.4.1.1.6.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # RaidList Table
          # SerialNumber;NickName;MainVersion;ProductName
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.5
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;NickName;MainVersion;ProductName
          - type: leftConcat
            column: 1
            value: RaidList;
        source(2):
          # DKCHW Table
          # SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.6
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
          - type: leftConcat
            column: 1
            value: DKCHW;
        source(3):
          # DKUH Table
          # SerialNumber;PS;Fan;Environment;Drive;
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.7
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;PS;Fan;Environment;Drive;
          - type: leftConcat
            column: 1
            value: DKUH;
        source(4):
          # Union all the discovery tables
          # Table;SerialNumber;....
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(1)}"
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
            # Take this screwed up table and analyze it
            # MSHW_....
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW
            separators: ;
        source(5):
          # Take a copy of Enclosure Discovery 4
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep only Enclosures
            # Class;SerialNumber;DeviceID;Firmware;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_ENC
            # Translate ProductName into ModelName
            # Class;SerialNumber;DeviceID;Firmware;DisplayID;
          - type: translate
            column: 5
            translationTable: "${translation::modelTranslationTable}"
      mapping:
        # Instance Table
        # Class;SerialNumber;DeviceID;Firmware;DisplayID;
        source: "${source::monitors.enclosure.discovery.sources.source(5)}"
        attributes:
          id: $2
          __display_id: $3
          vendor: Hitachi
          model: $5
          serial_number: $2
          bios_version: $4
          type: Storage
          name: "${awk::sprintf(\"Storage: %s (%s %s)\", $3, \"Hitachi\", $5)}"
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # RaidList Table
          # SerialNumber;NickName;MainVersion;ProductName
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.5
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;NickName;MainVersion;ProductName
          - type: leftConcat
            column: 1
            value: RaidList;
        source(2):
          # DKCHW Table
          # SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.6
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
          - type: leftConcat
            column: 1
            value: DKCHW;
        source(3):
          # DKUH Table
          # SerialNumber;PS;Fan;Environment;Drive;
          type: snmpTable
          oid: 1.3.6.1.4.1.116.5.11.4.1.1.7
          selectColumns: 1
          computes:
            # Add Identifier
            # Table;SerialNumber;PS;Fan;Environment;Drive;
          - type: leftConcat
            column: 1
            value: DKUH;
        source(4):
          # Union all the.Collect.tables
          # Table;SerialNumber;....
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.collect.sources.source(1)}"
          - "${source::monitors.enclosure.collect.sources.source(2)}"
          - "${source::monitors.enclosure.collect.sources.source(3)}"
          computes:
            # Take this screwed up table and analyze it
            # DeviceClass;AttachedTo;DeviceID;DisplayID;Status;  (Except Enclosures, see later)
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW
            separators: ;
            # Duplicate status
            # DeviceClass;AttachedTo;DeviceID;DisplayID;Status;Status;
          - type: duplicateColumn
            column: 5
            # Translate Status into PATROLStatus (This will fail on enclosure, but it doesn't matter).
            # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;Status;
          - type: translate
            column: 5
            translationTable: "${translation::statusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
          - type: translate
            column: 6
            translationTable: "${translation::statusInformationTranslationTable}"
        source(5):
          # Take a copy of Enclosure Discovery 4
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Keep only Enclosures
            # Class;SerialNumber;DeviceID;Firmware;DisplayID;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_ENC
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        deviceId: $1
  temperature:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only Temperatures
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_Temperature
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          sensor_location: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="temperature"}: $5
        legacyTextParameters:
          StatusInformation: $6
  cpu:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only CPUs
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_CPU
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          model: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="cpu"}: $5
        legacyTextParameters:
          StatusInformation: $6
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only Batterys
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_Battery
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          type: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="battery"}: $5
        legacyTextParameters:
          StatusInformation: $6
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only Memorys
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_Memory
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          type: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="memory"}: $5
        legacyTextParameters:
          StatusInformation: $6
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only PhysicalDisks
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_PhysicalDisk
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          info: "Type: Global"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="physical_disk"}: $5
        legacyTextParameters:
          StatusInformation: $6
  power_supply:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only PowerSupplys
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_PSU
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          power_supply_type: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="power_supply"}: $5
        legacyTextParameters:
          StatusInformation: $6
  fan:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only Fans
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_Fan
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          sensor_location: Global
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, \"Global\")}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="fan"}: $5
        legacyTextParameters:
          StatusInformation: $6
  other_device:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Keep Only OtherDevices
            # Class;AttachedToID;DeviceID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_Other
      mapping:
        # InstanceTable
        # Class;AttachedToID;DeviceID;DisplayID;Status;
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          __display_id: $4
          id: $3
          device_type: Internal Bus
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s: %s\", \"Internal Bus\", $4)}"
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
      mapping:
        # ValueTable = Source(1)
        # DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="other_device"}: $5
        legacyTextParameters:
          StatusInformation: $6
translations:
  statusInformationTranslationTable:
    "1": ""
    "2": Acute
    "3": Serious
    "4": Moderate
    "5": Service
    Default: Unknown Status
  statusTranslationTable:
    "1": ok
    "2": failed
    "3": failed
    "4": degraded
    "5": degraded
    Default: UNKNOWN
  modelTranslationTable:
    RAID600: USP_V
    RAID700: VSP
    RAID400: Lightning 9900
    RAID500: USP
    RAID450: Lightning 9900V
