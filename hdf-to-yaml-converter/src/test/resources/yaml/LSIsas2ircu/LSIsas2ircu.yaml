---
connector:
  displayName: LSI sas2ircu Managed Raid Controllers
  platforms: Any system with LSI sas2ircu
  reliesOn: Sas2Ircu (LSI) managed RAID card
  information: Gives physical disk and array status.
  version: 1.1
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Linux
    supersedes:
    - Director52ServeRAIDLinux
    - SmartMonLinux
    - LSIUtilUNIX
    criteria:
    # Check the utility exists
    - type: osCommand
      commandLine: "%{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu"
      expectedResult: "SAS2IRCU: No command specified"
      errorMessage: sas2ircu not installed on this server.
    # Check there are appropriate controllers installed
    - type: osCommand
      commandLine: "%{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu LIST"
      expectedResult: "^[0-9].*SAS.*:.*:.*:"
      errorMessage: No sas2ircu managed controllers found / insufficient rights.
    # We should find disks attached to one controller
    - type: osCommand
      commandLine: "/bin/sh ${file::embeddedFile-1}"
      expectedResult: Device is a
      errorMessage: No sas2ircu managed physical disks found.
sudoCommands:
- /opt/lsi/bin/sas2ircu
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = Output of sas2ircu script
          type: osCommand
          commandLine: "/bin/sh ${file::embeddedFile-1}"
          computes:
          # Reformat Source(1) output via EmbeddedFile(2)
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW
            separators: ;
        source(2):
          # Make a copy of DiskController Source 1 so that it can be used by other discoveries
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Keep only Controllers
            # MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_CTRL
          - type: leftConcat
            column: 6
            value: "Location: "
      mapping:
        # The InstanceTable
        # MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
        source: "${source::monitors.disk_controller.discovery.sources.source(2)}"
        attributes:
          id: $2
          controller_number: $2
          model: $3
          firmware_version: $5
          info: $6
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $2, $3)}"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Output of sas2ircu script
          type: osCommand
          commandLine: "/bin/sh ${file::embeddedFile-1}"
          computes:
          # Reformat Source(1) output via EmbeddedFile(2)
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW
            separators: ;
        source(2):
          # Make a copy of DiskController Source 1 so that it can be used by other discoveries
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Keep only Controllers
            # MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_CTRL
      mapping:
        # ValueTable = Source(1)
        # MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
        source: "${source::monitors.disk_controller.collect.sources.source(2)}"
        deviceId: $2
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = Discovery Instance Table
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Keep only PhysicalDisks
            # MSHW_PD;EnclosureSlot;State;SizeMB;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_PD
            # Translate size into bytes
            # MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
          - type: multiply
            column: 4
            value: 1048576
            # Translate the Drive Type
            # MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
          - type: translate
            column: 9
            translationTable: "${translation::PhysicalDiskTypeTranslationTable}"
          - type: leftConcat
            column: 9
            value: "Type: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          model: $6
          id: $2
          __display_id: $2
          serial_number: $8
          vendor: $5
          firmware_version: $7
          info: $9
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $10)"
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $5, bytes2HumanFormatBase10($4))}"
        metrics:
          hw.physical_disk.size: $4
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Collect Instance Table
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Keep only PhysicalDisks
            # MSHW_PD;EnclosureSlot;State;SizeMB;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_PD
            # Keep only ID and State
            # EnclosureSlot;State;
          - type: keepColumns
            columnNumbers: "2,3"
            # Duplicate the state column
            # EnclosureSlot;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first state column into a PATROLStatus
            # EnclosureSlot;PATROLStatus;state
          - type: translate
            column: 2
            translationTable: "${translation::PhysicalDiskStatusTranslationTable}"
            # Translate the second state column into a more readable string
            # EnclosureSlot;PATROLStatus;statusInformation
          - type: translate
            column: 3
            translationTable: "${translation::PhysicalDiskStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = Discovery Instance Table
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          computes:
            # Keep only LogicalDisks
            # MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_LD
            # Translate size into bytes
            # MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeB;ControllerID;
          - type: multiply
            column: 7
            value: 1048576
          - type: leftConcat
            column: 5
            value: "WWID: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          raid_level: $6
          id: $3
          __display_id: $2
          info: $5
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $8)"
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $6, bytes2HumanFormatBase2($7))}"
        metrics:
          hw.logical_disk.limit: $7
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Collect Instance Table
          type: copy
          from: "${source::monitors.disk_controller.collect.sources.source(1)}"
          computes:
            # Keep only LogicalDisks
            # MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: MSHW_LD
            # Keep only ID and State
            # VolumeID;State;
          - type: keepColumns
            columnNumbers: "3,4"
            # Duplicate the state column
            # VolumeID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first state column into a PATROLStatus
            # VolumeID;PATROLStatus;state
          - type: translate
            column: 2
            translationTable: "${translation::LogicalDiskStatusTranslationTable}"
            # Translate the second state column into a more readable string
            # VolumeID;PATROLStatus;statusInformation
          - type: translate
            column: 3
            translationTable: "${translation::LogicalDiskStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  PhysicalDiskTypeTranslationTable:
    SAS_HDD: SAS hard-disk drive
    SAS_SSD: SAS solid-state drive
    SATA_HDD: SATA hard-disk drive
    Default: Hard Disk Drive
    SATA_SSD: SATA solid-state drive
  PhysicalDiskStatusInformationTranslationTable:
    DGD: Degraded
    OPT: Optimal
    HSP: Hot Spare
    OSY: Out of Sync
    MIS: Missing
    AVL: Available
    SBY: Standby
    ONL: Online
    Default: Unknown Status
    RBLD: Rebuilding
    FLD: Failed
  LogicalDiskStatusInformationTranslationTable:
    DGD: Degraded
    INIT: Initializing
    MIS: Missing
    ONL: Online
    OKY: ok
    Default: Unknown Status
    FLD: Failed
  LogicalDiskStatusTranslationTable:
    DGD: failed
    INIT: degraded
    MIS: failed
    ONL: ok
    OKY: ok
    Default: UNKNOWN
    FLD: failed
  PhysicalDiskStatusTranslationTable:
    DGD: failed
    OPT: ok
    HSP: ok
    OSY: failed
    MIS: failed
    AVL: ok
    SBY: degraded
    ONL: ok
    Default: UNKNOWN
    RBLD: degraded
    FLD: failed
