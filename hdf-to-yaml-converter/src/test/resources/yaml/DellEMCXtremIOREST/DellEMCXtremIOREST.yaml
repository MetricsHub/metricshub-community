---
connector:
  displayName: Dell XtremIO - REST
  platforms: X1
  version: 1.0
  information: "This connector provides hardware monitoring for Dell EMC XtremIO Storage Array for X1 and X2 Cluster types. It monitors the Enclosure, Controllers, Logical and Physical Disks as well as the various environment sensors (Temperature, Fans, Power Supplies, Memory, Batteries and Network cards)."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # Hardware Sentry v10.3.00+
    - type: productRequirements
      kmVersion: 10.3.00
    # Check for expected response from target system
    - type: http
      method: GET
      url: /api/json/v2/types/clusters
      header: "${file::embeddedFile-1}"
      resultContent: body
      expectedResult: '"clusters"'
      errorMessage: Invalid credentials / not an XtremIO
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /api/json/v2/types/clusters?full=1
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;Name;SerialNumber;SoftwareVersion
          - type: json2csv
            entryKey: clusters
            properties: /name;/sys-psnt-serial-number;
            separator: ;
        source(2):
          # This table is here to ensure it is available to all other classes
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/storage-controllers?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;sys-name;node-name;name;bios-fw-version;hw-model;serial-number;fan-health-state;temperature-health-state;dimm-health-state
          - type: json2csv
            entryKey: storage-controllers
            properties: /sys-name;/node-name;/name;/bios-fw-version;/hw-model;/serial-number;/fan-health-state;/temperature-health-state;/dimm-health-state;
      mapping:
        # Enclosure Instance Table
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          model: X-Brick Cluster
          serial_number: $3
          vendor: EMC
          type: enclosure
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $2, \"EMC\", \"X-Brick Cluster\")}"
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          url: /api/json/v2/types/clusters?full=1
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;name;sys-psnt-serial-number;sys-health-state;sys-health-state
          - type: json2csv
            entryKey: clusters
            properties: /name;/sys-psnt-serial-number;/sys-health-state;/sys-health-state;
            separator: ;
          # JSON;name;sys-psnt-serial-number;PatrolStatus;sys-health-state
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
        source(2):
          # This table is here to ensure it is available to all other classes
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/storage-controllers?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;node-name;fru-lifecycle-state;fru-lifecycle-state;fan-health-state;temperature-health-state;dimm-health-state
          - type: json2csv
            entryKey: storage-controllers
            properties: /node-name;/fru-lifecycle-state;/fru-lifecycle-state;/fan-health-state;/temperature-health-state;/dimm-health-state;
      mapping:
        # Enclosure Value Table
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="enclosure"}: $4
        legacyTextParameters:
          StatusInformation: $5
  disk_controller:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
      mapping:
        # DiskController Instance Table
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          firmware_version: $5
          model: $6
          serial_number: $7
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $4, $6)}"
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          # JSON;guid;PatrolStatus;fru-lifecycle-state;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # DiskController Value Table
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="disk_controller"}: $3
        legacyTextParameters:
          StatusInformation: $4
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          # JSON;sys-name;node-name;name;bios-fw-version;hw-model;serial-number;fan-health-state;temperature-health-state;dimm-health-state;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
          # node-name;dimm-health-state;
          - type: keepColumns
            columnNumbers: "3,10"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name;node-name;dimm-health-state;
          - type: duplicateColumn
            column: 1
          # node-name;node-name-Memory;dimm-health-state;
          - type: rightConcat
            column: 2
            value: -Memory
      mapping:
        # Memory Instance Table
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          hw.parent.type: disk_controller
          hw.parent.id: $1
          name: $2
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          # JSON;node-name;fru-lifecycle-state;fru-lifecycle-state;fan-health-state;temperature-health-state;dimm-health-state
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          # node-name;dimm-health-state
          - type: keepColumns
            columnNumbers: "2,7"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name-Memory;dimm-health-state;
          - type: rightConcat
            column: 1
            value: -Memory
          # node-name-Memory;dimm-health-state;dimm-health-state;
          - type: duplicateColumn
            column: 2
          # node-name-Memory;PatrolStatus;dimm-health-state;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # Memory Value Table
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Discovery
          # JSON;sys-name;node-name;name;bios-fw-version;hw-model;serial-number;fan-health-state;temperature-health-state;dimm-health-state;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
          # node-name;fan-health-state;
          - type: keepColumns
            columnNumbers: "3,8"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name;node-name;fan-health-state;
          - type: duplicateColumn
            column: 1
          # node-name;node-name-Fan;fan-health-state;
          - type: rightConcat
            column: 2
            value: -Fan
      mapping:
        # Fan Instance Table
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          hw.parent.type: disk_controller
          hw.parent.id: $1
          name: $2
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          # JSON;node-name;fru-lifecycle-state;fru-lifecycle-state;fan-health-state;temperature-health-state;dimm-health-state
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          # node-name;fan-health-state;
          - type: keepColumns
            columnNumbers: "2,5"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name-Fan;fan-health-state;
          - type: rightConcat
            column: 1
            value: -Fan
          # node-name-Fan;fan-health-state;fan-health-state;
          - type: duplicateColumn
            column: 2
          # node-name-Fan;PatrolStatus;fan-health-state;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # Fan Value Table
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # JSON;sys-name;node-name;name;bios-fw-version;hw-model;serial-number;fan-health-state;temperature-health-state;dimm-health-state;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(2)}"
          computes:
          # node-name;temperature-health-state;
          - type: keepColumns
            columnNumbers: "3,9"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name;node-name;temperature-health-state;
          - type: duplicateColumn
            column: 1
          # node-name;node-name-Temperature;temperature-health-state;
          - type: rightConcat
            column: 2
            value: -Temperature
      mapping:
        # Temperature Instance Table
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          hw.parent.type: disk_controller
          hw.parent.id: $1
          name: $2
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          # JSON;node-name;fru-lifecycle-state;fru-lifecycle-state;fan-health-state;temperature-health-state;dimm-health-state
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          # node-name;temperature-health-state;
          - type: keepColumns
            columnNumbers: "2,6"
          - type: excludeMatchingLines
            column: 2
            valueList: "unknown,null"
          # node-name-Temperature;temperature-health-state;
          - type: rightConcat
            column: 1
            value: -Temperature
          # node-name-Temperature;temperature-health-state;temperature-health-state;
          - type: duplicateColumn
            column: 2
          # node-name-Temperature;PatrolStatus;temperature-health-state;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # Temperature Value Table
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="temperature"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/local-disks?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;index;node-name;name;fw-version;model-name;model-name;serial-number;local-disk-type;
          - type: json2csv
            entryKey: local-disks
            properties: /index;/node-name;/name;/fw-version;/model-name;/model-name;/serial-number;/local-disk-type;
          # Extract Vendor value from model-name
          - type: extract
            column: 7
            subColumn: 1
            subSeparators: ' '
          # Remove Vendor value from model-name
          - type: replace
            column: 6
            existingValue: $7
            newValue: ""
          # Add DiskController for AttachedToDeviceType
          - type: rightConcat
            column: 9
            value: ;DiskController
        source(2):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/ssds?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;sys-name;index;fw-version;model-name;model-name;serial-number;ssd-size;
          - type: json2csv
            entryKey: ssds
            properties: /guid;/sys-name;/index;/fw-version;/model-name;/model-name;/serial-number;/ssd-size;
            # Extract Vendor value from model-name
            # JSON;guid;sys-name;index;fw-version;model-name;Vendor;serial-number;ssd-size;
          - type: extract
            column: 7
            subColumn: 1
            subSeparators: ' '
            # Remove Vendor value from model-name
            # JSON;guid;sys-name;index;fw-version;Model;Vendor;serial-number;ssd-size;
          - type: replace
            column: 6
            existingValue: $7
            newValue: ""
            # Add Disk type and Enclosure for AttachedToDeviceType
            # JSON;guid;sys-name;index;fw-version;Model;Vendor;serial-number;SSD;Enclosure;ssd-size;
          - type: rightConcat
            column: 8
            value: ;SSD;Enclosure
          # JSON;guid;sys-name;SSD-index;fw-version;Model;Vendor;serial-number;SSD;Enclosure;ssd-size;
          - type: leftConcat
            column: 4
            value: SSD-
          # JSON;guid;sys-name;SSD-index;fw-version;Model;Vendor;serial-number;SSD;Enclosure;ssd-size(bytes);
          - type: multiply
            column: 11
            value: 1024
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.physical_disk.discovery.sources.source(1)}"
          - "${source::monitors.physical_disk.discovery.sources.source(2)}"
      mapping:
        # PhysicalDisk Instance Table
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $4
          firmware_version: $5
          model: $6
          vendor: $7
          serial_number: $8
          info: $9
          hw.parent.type: $10
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s - %s)\", $4, $7, bytes2HumanFormatBase10($11))}"
        metrics:
          hw.physical_disk.size: $11
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/local-disks?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;index;fru-lifecycle-state;fru-lifecycle-state
          - type: json2csv
            entryKey: local-disks
            properties: /index;/fru-lifecycle-state;/fru-lifecycle-state;
        source(2):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/ssds?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;fru-lifecycle-state;fru-lifecycle-state
          - type: json2csv
            entryKey: ssds
            properties: /guid;/fru-lifecycle-state;/fru-lifecycle-state;
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.physical_disk.collect.sources.source(1)}"
          - "${source::monitors.physical_disk.collect.sources.source(2)}"
          computes:
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # PhysicalDisk Value Table
        source: "${source::monitors.physical_disk.collect.sources.source(3)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
  logical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/volumes?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;sys-name;guid;name;vol-size;vol-type
          - type: json2csv
            entryKey: /volumes
            properties: /sys-name;/guid;/name;/vol-size;/vol-type;
          # JSON;sys-name;guid;name;Size;vol-type
          - type: multiply
            column: 5
            value: 1024
      mapping:
        # LogicalDisk Instance Table
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          type: $6
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, bytes2HumanFormatBase2($5))}"
        metrics:
          hw.logical_disk.limit: $5
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/volumes?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;obj-severity;obj-severity
          - type: json2csv
            entryKey: /volumes
            properties: /guid;/obj-severity;/obj-severity;
          # JSON;guid;PatrolStatus;obj-severity
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # LogicalDisk Value Table
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="logical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/storage-controller-psus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;node-name;guid;name;model-name;serial-number
          - type: json2csv
            entryKey: storage-controller-psus
            properties: /node-name;/guid;/name;/model-name;/serial-number;
          # JSON;node-name;guid;name;model-name;serial-number;DiskController;
          - type: rightConcat
            column: 6
            value: ;DiskController;
        source(2):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/dae-psus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;sys-name;guid;name;model-name;serial-number
          - type: json2csv
            entryKey: dae-psus
            properties: /sys-name;/guid;/name;/model-name;/serial-number;
          # JSON;sys-name;guid;name;model-name;serial-number;Enclosure;
          - type: rightConcat
            column: 6
            value: ;Enclosure;
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.power_supply.discovery.sources.source(1)}"
          - "${source::monitors.power_supply.discovery.sources.source(1)}"
      mapping:
        # PowerSupply Instance Table
        source: "${source::monitors.power_supply.discovery.sources.source(3)}"
        attributes:
          id: $3
          __display_id: $4
          power_supply_type: $6
          hw.parent.type: $7
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s W)\", $4, $6, $5)}"
        metrics:
          hw.power_supply.limit: $5
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/storage-controller-psus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;fru-lifecycle-state;fru-lifecycle-state
          - type: json2csv
            entryKey: storage-controller-psus
            properties: /guid;/fru-lifecycle-state;/fru-lifecycle-state;
        source(2):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/dae-psus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;fru-lifecycle-state;fru-lifecycle-state
          - type: json2csv
            entryKey: dae-psus
            properties: /guid;/fru-lifecycle-state;/fru-lifecycle-state;
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.power_supply.collect.sources.source(1)}"
          - "${source::monitors.power_supply.collect.sources.source(2)}"
          computes:
          # JSON;guid;PatrolStatus;fru-lifecycle-state
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # PowerSupply Value Table
        source: "${source::monitors.power_supply.collect.sources.source(3)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="power_supply"}: $3
        legacyTextParameters:
          StatusInformation: $4
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/bbus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;sys-name;guid;name;model-name;serial-number;fw-version;brick-name
          - type: json2csv
            entryKey: bbus
            properties: /sys-name;/guid;/name;/model-name;/serial-number;/fw-version;/brick-name;
          - type: leftConcat
            column: 7
            value: "FirmwareVersion: "
          - type: leftConcat
            column: 6
            value: "SerialNumber: "
      mapping:
        # Battery Instance Table
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          model: $5
          info: "${awk::join(\" \", $6, $7)}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $5)}"
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/bbus?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;fru-lifecycle-state;fru-lifecycle-state;ups-battery-charge-in-percent
          - type: json2csv
            entryKey: bbus
            properties: /guid;/fru-lifecycle-state;/fru-lifecycle-state;/ups-battery-charge-in-percent;
          # JSON;guid;PatrolStatus;fru-lifecycle-state;ups-battery-charge-in-percent
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # Battery Value Table
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="battery"}: $3
          hw.battery.charge: percent2Ratio($5)
        legacyTextParameters:
          StatusInformation: $4
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/targets?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;node-name;guid;name;fw-version;port-address;port-state;port-type
          - type: json2csv
            entryKey: targets
            properties: /node-name;/guid;/name;/fw-version;/port-address;/port-state;/port-type;
          # JSON;node-name;guid;name;fw-version;port-address;LinkSpeedDeactivation;port-type
          - type: translate
            column: 7
            translationTable: "${translation::LinkSpeedDeactivationTranslationTable}"
          - type: leftConcat
            column: 5
            value: "FirmwareVersion: "
      mapping:
        # NetworkCard Instance Table
        source: "${source::monitors.network.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          physical_address: $6
          device_type: $8
          physical_address_type: $9
          info: $5
          hw.parent.type: disk_controller
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $8)}"
        conditionalCollection:
          hw.network.bandwidth.limit: $7
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "${file::embeddedFile-1}"
          url: /api/json/v2/types/targets?full=1
          resultContent: body
          computes:
            # Convert JSON to CSV
            # JSON;guid;port-state;obj-severity;port-speed
          - type: json2csv
            entryKey: targets
            properties: /guid;/port-state;/obj-severity;/port-speed;
          # JSON;guid;LinkStatus;obj-severity;port-speed
          - type: translate
            column: 3
            translationTable: "${translation::LinkStatusTranslationTable}"
          # JSON;guid;LinkStatus;PatrolStatus;port-speed
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          # JSON;guid;LinkStatus;PatrolStatus;LinkSpeed
          - type: translate
            column: 5
            translationTable: "${translation::LinkSpeedTranslationTable}"
      mapping:
        # NetworkCard Value Table
        source: "${source::monitors.network.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $4
          hw.network.up: legacyLinkStatus($3)
          hw.network.bandwidth.limit: megaBit2Bit($5)
translations:
  LinkSpeedTranslationTable:
    "100MFC": 100
    "10MFC": 10
    not_in_use: 0
    "10mb": 10
    "1GFC": 1000
    "12GFC": 12000
    "12gb": 12000
    "1gb": 1000
    "10GFC": 10000
    inconsistent: 0
    "10gb": 10000
    Default: 0
    unknown: 0
    "100mb": 100
    "8GFC": 8000
  LinkStatusTranslationTable:
    up: ok
    down: degraded
    Default: UNKNOWN
  StatusTranslationTable:
    minor: degraded
    critical: failed
    level_1_clear: ok
    system_disabled: failed
    partial_fault: degraded
    down: failed
    enabled: ok
    unknown: UNKNOWN
    disconnected: failed
    major: failed
    level_3_warning: degraded
    level_5_major: failed
    user_disabled: degraded
    up: ok
    uninitialized: failed
    clear: ok
    "false": ok
    active: ok
    initializing: degraded
    failed: failed
    degraded: failed
    Default: UNKNOWN
    level_4_minor: failed
    connected: ok
    healthy: ok
    level_6_critical: failed
    "true": failed
    information: ok
    level_2_unknown: UNKNOWN
  LinkSpeedDeactivationTranslationTable:
    up: "True"
    down: ""
    unknown: ""
