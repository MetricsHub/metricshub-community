---
connector:
  displayName: IBM Netfinity Manager 5.20.x - Normal
  platforms: IBM Netfinity
  reliesOn: IBM Netfinity Manager 5.20.x
  version: 1.0
  information: This connector provides environment monitoring through the IBM Netfinity Manager Services SNMP sub-agent which supports almost all old IBM servers (Netfinity) under Windows.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    criteria:
    # Check that there is something below the snmp OID: ...ibm(2).ibmProd(6).netFinity(71).DmiMibs(200).NetFinityServicesMIB(2).dmtfGroups(1).tNetfinityMonitorAttributes(3).eNetfinityMonitorAttributes(1)
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.2.6.71.200.2.1.3.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name
          type: snmpGet
          oid: 1.3.6.1.4.1.2.6.71.200.1.1.1.1.2.1
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: 1
          vendor: IBM
          model: $1
          type: Computer
          name: "${awk::sprintf(\"Computer: (%s %s)\", \"IBM\", $1)}"
  temperature:
    discovery:
      sources:
        source(1):
          # Temperature discovery
          # Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
          # ID;TemperatureLocation;Unit
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.3.1
          selectColumns: "ID,2,6"
          computes:
          # Keep only lines whose unit is "Celsius
          - type: keepOnlyMatchingLines
            column: 3
            regExp: Celsius
          # Remove the " Temperature (C)" statement from the temperature location
          - type: replace
            column: 2
            existingValue: ' Temperature (C)'
            newValue: ""
          # Remove the " Temperature" statement from the temperature location
          - type: replace
            column: 2
            existingValue: temperature
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: 65
          hw.temperature.limit{limit_type="high.critical"}: 70
    collect:
      # Collect type is: Multi-Instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
          # ID;TextualValue
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.3.1
          selectColumns: "ID,5"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
          # ID;VoltageType;Unit
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.3.1
          selectColumns: "ID,2,6"
          computes:
          # Keep only lines whose unit is "Celsius
          - type: keepOnlyMatchingLines
            column: 3
            regExp: Volts
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type is: Multi-Instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
          # ID;TextualValue
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.3.1
          selectColumns: "ID,5"
          computes:
            # Convert the Volt values into milliVolts (mV)
            # ID;mVValue
          - type: multiply
            column: 2
            value: 1000
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $2
