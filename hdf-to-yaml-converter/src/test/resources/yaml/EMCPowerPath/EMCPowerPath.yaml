---
connector:
  displayName: EMC PowerPath (powermt)
  platforms: Any system with EMC PowerPath
  reliesOn: EMC powermt utility
  version: 1.0
  information: This connector provides the monitoring of HBA cards on all Linux systems through the multipath utility.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    - Linux
    - Solaris
    - HP
    - RS6000
    criteria:
    # Test the multipath command
    - type: osCommand
      commandLine: "%{SUDO:powermt} powermt version"
      expectedResult: EMC powermt for PowerPath
      errorMessage: EMC Powerpath not installed or not in path of Patrol User.
    # Test the multipath command
    - type: osCommand
      commandLine: "%{SUDO:powermt} powermt check_registration"
      expectedResult: Key
      errorMessage: No license key for EMC Powerpath.
sudoCommands:
- powermt
monitors:
  lun:
    discovery:
      sources:
        source(1):
          # Get the list of Ports from powermt display dev=all
          type: osCommand
          commandLine: "%{SUDO:powermt} powermt display dev=all"
          computes:
            # AWK it
            # MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            # Add some text to each additional information
            # MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
          - type: leftConcat
            column: 5
            value: "WWN: "
          - type: leftConcat
            column: 7
            value: "Policy: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
        source: "${source::monitors.lun.discovery.sources.source(1)}"
        attributes:
          id: $4
          __display_id: $2
          array_name: $3
          info: "${awk::join(\" \", $5, $7)}"
          hw.parent.type: enclosure
          name: $3
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Get the list of Ports from powermt display dev=all
          type: osCommand
          commandLine: "%{SUDO:powermt} powermt display dev=all"
          computes:
            # AWK it
            # logicalDeviceID;state;alivePathCount;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "4,6,8"
            # Duplicate State
            # logicalDeviceID;state;state;alivePathCount;
          - type: duplicateColumn
            column: 2
            # The LUNStatusTranslationTable --> PatrolStatus
            # logicalDeviceID;PatrolStatus;state;alivePathCount;
          - type: translate
            column: 2
            translationTable: "${translation::LUNStatusTranslationTable}"
            # The LUNStatusTranslationTable --> PatrolStatus
            # logicalDeviceID;PatrolStatus;StatusInformation;alivePathCount;
          - type: translate
            column: 3
            translationTable: "${translation::LUNStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # logicalDeviceID;PatrolStatus;StatusInformation;alivePathCount;
        source: "${source::monitors.lun.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.lun.paths: $4
          hw.status{hw.type="lun"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  LUNStatusTranslationTable:
    alive: ok
    unlic: degraded
    dead: failed
    Default: UNKNOWN
  LUNStatusInformationTranslationTable:
    alive: ""
    unlic: One or more paths are unlicensed
    dead: Dead
    Default: UNKNOWN
