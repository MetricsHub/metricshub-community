---
sudoCommands:
- ethtool
connector:
  detection:
    criteria:
    # DETECTION
    - type: deviceType
      keep:
      - Linux
    - type: osCommand
      commandLine: GLOBAL_COMMAND_LINE
      expectedResult: LOOPBACK
monitors:
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source(1) = output of the command ipconfig or ip
          type: osCommand
          commandLine: GLOBAL_COMMAND_LINE
          computes:
            # Process the output of one of the two commands (ifconfig or ip) through an AWK script
            # DeviceID;MacAddress;IPAddress;
          - type: awk
            script: $embedded.EmbeddedFile(1)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.network.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          physical_address: $column(2)
          physical_address_type: MAC
          logical_address: $column(3)
          logical_address_type: IP
          hw.parent.type: enclosure
          name: $column(1)
    collect:
      # Collect
      # Collect type is: mono-collect
      type: monoInstance
      sources:
        source(1):
          # Source(1) = output of the ipconfig or ip command for this interface
          type: osCommand
          commandLine: COLLECT_COMMAND_LINE
          computes:
            # Process the output of one of the two commands (ifconfig or ip) to retrieve statistics about the network interface
            # DeviceID;ReceivedPackets;TransmittedPackets;Errors;ReceivedBytes;TransmittedBytes;
          - type: awk
            script: $embedded.EmbeddedFile(2)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(2):
          # Source(2) = output of ethtool
          type: osCommand
          commandLine: "%{SUDO:ethtool}/usr/sbin/ethtool %NetworkCard.Collect.DeviceID%"
          computes:
            # Process the output of ethtool through an AWK script
            # DeviceID;LinkStatus;LinkSpeed;DuplexMode;
          - type: awk
            script: $embedded.EmbeddedFile(3)$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
        source(3):
          # Source(3) = table joint of Source(1) and Source(2)
          # DeviceID;ReceivedPackets;TransmittedPackets;Errors;ReceivedBytes;TransmittedBytes;DeviceID;LinkStatus;LinkSpeed;DuplexMode;
          type: tableJoin
          leftTable: $monitors.network.collect.sources.source(1)$
          rightTable: $monitors.network.collect.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;
      mapping:
        # And here is the ValueTable
        source: $monitors.network.collect.sources.source(3)$
        metrics:
          hw.network.packets{direction="receive"}: $column(2)
          hw.network.packets{direction="transmit"}: $column(3)
          hw.errors{hw.type="network"}: $column(4)
          hw.network.io{direction="receive"}: $column(5)
          hw.network.io{direction="transmit"}: $column(6)
          hw.network.up: legacyLinkStatus($column(8))
          hw.network.bandwidth.limit: megaBit2Bit($column(9))
          hw.network.full_duplex: legacyFullDuplex($column(10))
embedded:
  EmbeddedFile(3): |-
    BEGIN {
        linkSpeed = "";
        duplexMode = "";
        linkStatus = "";
        deviceID = "";
    }
    /^Settings for / {
        deviceID = $3;
        gsub(":", "", deviceID);
    }
    /^[ \t]+Speed: / {
        linkSpeed = $2;
        gsub("Mb/s", "", linkSpeed);
    }
    /^[ \t]+Duplex: / {
        if ($2 == "Full")
        {
            duplexMode = "Full";
        }
        else
        {
            duplexMode = "Half";
        }
    }
    /^[ \t]+Link detected: / {
        if ($3 == "yes")
        {
            linkStatus = "OK";
        }
        else if ($3 == "no")
        {
            linkStatus = "WARN";
        }
        else
        {
            linkStatus = "";
        }
    }
    END {
        if (deviceID != "")
        {
            print "MSHW;" deviceID ";" linkStatus ";" linkSpeed ";" duplexMode ";"
        }
    }
