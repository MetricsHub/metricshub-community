---
connector:
  displayName: Huawei OceanStor (REST)
  platforms: Huawei OceanStor
  reliesOn: Huawei DeviceManager REST API
  version: 1.0
  information: "This connector discovers environmental sensors, Fans, Controllers, Power Supplies, Battery Backup Units, CPUs, LUNs, Physical Disks and NetworkCards for Huawei OceanStor storage devices. It relies on OceanStor V3 and above."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # Try and get a token
    - type: http
      method: GET
      url: /
      header: Accept:*/*
      errorMessage: Not an OceanStor V3 system or above.
      resultContent: body
      expectedResult: <html ng-app="com.huawei.ism.ibase">
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.enclosure.discovery.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.enclosure.discovery.sources.source(2)$
          - $monitors.enclosure.discovery.sources.source(4)$
        source(6):
          # System
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/system/
          header: $monitors.enclosure.discovery.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/NAME;/PRODUCTMODE;/patchVersion;
          - type: translate
            column: 4
            translationTable: EnclosureProductModeTranslationTable
        source(7):
          # Logical Disk
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/lun
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(8):
          # physical_disk
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/disk
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(9):
          # FC PORT
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/fc_port
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(10):
          # SAS PORT
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/sas_port
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(11):
          # ETH PORT
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/eth_port
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(12):
          # disk_controller
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/controller
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(13):
          # fan
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/fan
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(14):
          # power
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/power
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(15):
          # backup_power
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/backup_power
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(16):
          # cpu
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/cpu
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(17):
          # enclosure
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/enclosure
          header: $monitors.enclosure.discovery.sources.source(5)$
          resultContent: body
        source(18):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.enclosure.discovery.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.enclosure.discovery.sources.source(5)$
        source(19):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(17)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../Column(2);/MODEL;/SERIALNUM;
        source(20):
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(6)$
          rightTable: $monitors.enclosure.discovery.sources.source(19)$
          leftKeyColumn: 2
          rightKeyColumn: 2
          defaultRightLine: ;;;
      mapping:
        source: $monitors.enclosure.discovery.sources.source(20)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          model: $column(4)
          bios_version: $column(5)
          serial_number: $column(9)
          vendor: Huawei
          type: Storage
          name: "sprintf(\"Storage: %s (%s %s)\", $column(3), \"Huawei\", $column(4))"
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.enclosure.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.enclosure.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.enclosure.collect.sources.source(2)$
          - $monitors.enclosure.collect.sources.source(4)$
        source(6):
          # Query System
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.enclosure.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/system/
          header: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.enclosure.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.enclosure.collect.sources.source(5)$
      mapping:
        source: $monitors.enclosure.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="enclosure"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  cpu:
    discovery:
      sources:
        source(1):
          # HTTP: /cpu
          type: copy
          from: $monitors.enclosure.discovery.sources.source(16)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;/WORKFREQUENCY;
          - type: leftConcat
            column: 4
            value: "CPU: "
      mapping:
        source: $monitors.cpu.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%mhhf.s)\", $column(4), $column(5))"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($column(5))
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.cpu.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.cpu.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.cpu.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.cpu.collect.sources.source(2)$
          - $monitors.cpu.collect.sources.source(4)$
        source(6):
          # Query System
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.cpu.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/cpu
          header: $monitors.cpu.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/CURRENTFREQUENCY;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.cpu.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.cpu.collect.sources.source(5)$
      mapping:
        source: $monitors.cpu.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="cpu"}: $column(3)
          hw.cpu.speed: megaHertz2Hertz($column(5))
        legacyTextParameters:
          StatusInformation: $column(4)
  temperature:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(16)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;/CORETEMP;
          - type: rightConcat
            column: 5
            value: ;CPU Core
        source(2):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(8)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;/TEMPERATURE;
          - type: rightConcat
            column: 5
            value: ;Disk
        source(3):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(17)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);../../Column(2);../../Column(2);/TEMPERATURE;
          # TemperatureType:AttachedToDeviceType
          - type: rightConcat
            column: 5
            value: ;Enclosure
        source(4):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(14)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;/TEMPERATURE;
          # TemperatureType:AttachedToDeviceType
          - type: rightConcat
            column: 5
            value: ;Controller
        source(5):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(12)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;/TEMPERATURE;
          # TemperatureType:AttachedToDeviceType
          - type: rightConcat
            column: 5
            value: ;PSU
        source(6):
          type: tableUnion
          tables:
          - $monitors.temperature.discovery.sources.source(1)$
          - $monitors.temperature.discovery.sources.source(2)$
          - $monitors.temperature.discovery.sources.source(3)$
          - $monitors.temperature.discovery.sources.source(4)$
          - $monitors.temperature.discovery.sources.source(5)$
          computes:
          - type: leftConcat
            column: 4
            value: "TEMPERATURE: "
          - type: leftConcat
            column: 3
            value: 'TEMP:'
          - type: replace
            column: 5
            existingValue: 0
            newValue: ""
          - type: replace
            column: 5
            existingValue: -1
            newValue: ""
      mapping:
        source: $monitors.temperature.discovery.sources.source(6)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          sensor_location: $column(6)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s)\", $column(4), $column(6))"
    collect:
      type: multiInstance
      sources:
        source(1):
          # cpu
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.temperature.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.temperature.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.temperature.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.temperature.collect.sources.source(2)$
          - $monitors.temperature.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/cpu
          header: $monitors.temperature.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/CORETEMP;
        source(7):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/disk
          header: $monitors.temperature.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/TEMPERATURE;
        source(8):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/enclosure
          header: $monitors.temperature.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/HEALTHSTATUS;/HEALTHSTATUS;/TEMPERATURE;
        source(9):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/power
          header: $monitors.temperature.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/TEMPERATURE;
        source(10):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/controller
          header: $monitors.temperature.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/TEMPERATURE;
        source(11):
          type: tableUnion
          tables:
          - $monitors.temperature.collect.sources.source(6)$
          - $monitors.temperature.collect.sources.source(7)$
          - $monitors.temperature.collect.sources.source(8)$
          - $monitors.temperature.collect.sources.source(9)$
          - $monitors.temperature.collect.sources.source(10)$
          computes:
          - type: leftConcat
            column: 2
            value: 'TEMP:'
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
          - type: replace
            column: 5
            existingValue: 0
            newValue: ""
          - type: replace
            column: 5
            existingValue: -1
            newValue: ""
        source(12):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.temperature.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.temperature.collect.sources.source(5)$
      mapping:
        source: $monitors.temperature.collect.sources.source(11)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="temperature"}: $column(3)
          hw.temperature: $column(5)
        legacyTextParameters:
          StatusInformation: $column(4)
  voltage:
    discovery:
      sources:
        source(1):
          # cpu
          type: copy
          from: $monitors.enclosure.discovery.sources.source(16)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;
          - type: rightConcat
            column: 4
            value: ;CPU
        source(2):
          # controller
          type: copy
          from: $monitors.enclosure.discovery.sources.source(12)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/ID;
          - type: rightConcat
            column: 4
            value: ;Controller
        source(3):
          type: tableUnion
          tables:
          - $monitors.voltage.discovery.sources.source(1)$
          - $monitors.voltage.discovery.sources.source(2)$
          computes:
          - type: leftConcat
            column: 4
            value: "Voltage: "
          - type: leftConcat
            column: 3
            value: 'VOLT:'
      mapping:
        source: $monitors.voltage.discovery.sources.source(3)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          sensor_location: $column(5)
          hw.parent.type: $column(6)
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s)\", $column(4), $column(5))"
    collect:
      type: multiInstance
      sources:
        source(1):
          # cpu
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.voltage.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.voltage.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.voltage.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.voltage.collect.sources.source(2)$
          - $monitors.voltage.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.voltage.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/cpu
          header: $monitors.voltage.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/VOLTS;
          - type: divide
            column: 5
            value: 10
        source(7):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.voltage.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/controller
          header: $monitors.voltage.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/VOLTAGE;
        source(8):
          type: tableUnion
          tables:
          - $monitors.voltage.collect.sources.source(6)$
          - $monitors.voltage.collect.sources.source(7)$
          computes:
          - type: leftConcat
            column: 2
            value: 'VOLT:'
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
          - type: multiply
            column: 5
            value: 1000
        source(9):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.voltage.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.voltage.collect.sources.source(5)$
      mapping:
        source: $monitors.voltage.collect.sources.source(8)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="voltage"}: $column(3)
          hw.voltage: $column(5)
        legacyTextParameters:
          StatusInformation: $column(4)
  disk_controller:
    discovery:
      sources:
        source(1):
          # HTTP: /controller
          type: copy
          from: $monitors.enclosure.discovery.sources.source(12)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/NAME;/SOFTVER;
      mapping:
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          firmware_version: $column(5)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"Disk Controller: %s\", $column(4))"
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.disk_controller.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.disk_controller.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.disk_controller.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.disk_controller.collect.sources.source(2)$
          - $monitors.disk_controller.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.disk_controller.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/controller
          header: $monitors.disk_controller.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.disk_controller.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.disk_controller.collect.sources.source(5)$
      mapping:
        source: $monitors.disk_controller.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="disk_controller"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  power_supply:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(14)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /../../Column(2);/ID;/LOCATION;
      mapping:
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(4)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.power_supply.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.power_supply.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.power_supply.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.power_supply.collect.sources.source(2)$
          - $monitors.power_supply.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.power_supply.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/power
          header: $monitors.power_supply.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.power_supply.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.power_supply.collect.sources.source(5)$
      mapping:
        source: $monitors.power_supply.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="power_supply"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  battery:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(15)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /../../Column(2);/ID;/LOCATION;
          - type: leftConcat
            column: 4
            value: "BBU: "
      mapping:
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(4)
          __display_id: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(4)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.battery.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.battery.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.battery.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.battery.collect.sources.source(2)$
          - $monitors.battery.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.battery.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/backup_power
          header: $monitors.battery.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /LOCATION;/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
          - type: leftConcat
            column: 2
            value: "BBU: "
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.battery.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.battery.collect.sources.source(5)$
      mapping:
        source: $monitors.battery.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="battery"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  fan:
    discovery:
      sources:
        source(1):
          # HTTP: /fan
          type: copy
          from: $monitors.enclosure.discovery.sources.source(13)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /PARENTTYPE;../../Column(2);/ID;/LOCATION;
          - type: translate
            column: 2
            translationTable: TypeTranslationTable
          - type: leftConcat
            column: 5
            value: "Fan: "
      mapping:
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(4)
          __display_id: $column(5)
          hw.parent.type: $column(2)
          hw.parent.id: $column(3)
          name: $column(5)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.fan.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.fan.collect.sources.source(2)$
          - $monitors.fan.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.fan.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/fan
          header: $monitors.fan.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.fan.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.fan.collect.sources.source(5)$
      mapping:
        source: $monitors.fan.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="fan"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  physical_disk:
    discovery:
      sources:
        source(1):
          # HTTP: /disk
          type: copy
          from: $monitors.enclosure.discovery.sources.source(8)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;DISKTYPE;/MODEL;/FIRMWAREVER;/MANUFACTURER;/SERIALNUMBER;/LOCATION;/SECTORS;/SECTORSIZE;
          - type: translate
            column: 4
            translationTable: PhysicalDiskTypeTranslationTable
          # Get disk size (sectors * sector size)
          - type: multiply
            column: 10
            value: Column(11)
      mapping:
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          __display_id: $column(9)
          model: $column(5)
          firmware_version: $column(6)
          vendor: $column(7)
          serial_number: $column(8)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s - %by10hf.s)\", $column(9), $column(7), $column(10))"
        metrics:
          hw.physical_disk.size: $column(10)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.physical_disk.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.physical_disk.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.physical_disk.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.physical_disk.collect.sources.source(2)$
          - $monitors.physical_disk.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.physical_disk.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/disk
          header: $monitors.physical_disk.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/ABRASIONRATE;;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
          - type: replace
            column: 6
            existingValue: ""
            newValue: 100
          - type: subtract
            column: 6
            value: Column(5)
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.physical_disk.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.physical_disk.collect.sources.source(5)$
      mapping:
        source: $monitors.physical_disk.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(3)
          hw.physical_disk.endurance_utilization{state="remaining"}: percent2Ratio($column(6))
        legacyTextParameters:
          StatusInformation: $column(4)
  logical_disk:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: ../../Column(2);/ID;/NAME;/PARENTID;/SECTORSIZE;/CAPACITY;/WORKINGCONTROLLER;/ALLOCTYPE;
          # Get disk size (sectors * capacity)
          - type: multiply
            column: 6
            value: Column(7)
          - type: translate
            column: 9
            translationTable: LogicalDiskTypeTranslationTable
      mapping:
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          type: Volume
          hw.parent.type: disk_controller
          hw.parent.id: $column(8)
          name: "sprintf(\"%s (%by2hf.s)\", $column(4), $column(6))"
        metrics:
          hw.logical_disk.limit: $column(6)
    collect:
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.logical_disk.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.logical_disk.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.logical_disk.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.logical_disk.collect.sources.source(2)$
          - $monitors.logical_disk.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.logical_disk.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/lun
          header: $monitors.logical_disk.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /data
            properties: ID;/HEALTHSTATUS;/HEALTHSTATUS;
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
        source(7):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.logical_disk.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.logical_disk.collect.sources.source(5)$
      mapping:
        source: $monitors.logical_disk.collect.sources.source(6)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  network:
    discovery:
      sources:
        source(1):
          # FC Port
          type: copy
          from: $monitors.enclosure.discovery.sources.source(9)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /PARENTID;/ID;/LOCATION;/WWN;/TYPE;/PARENTTYPE;
          - type: rightConcat
            column: 7
            value: ;FC Port
        source(2):
          # SAS Port
          type: copy
          from: $monitors.enclosure.discovery.sources.source(10)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /PARENTID;/ID;/LOCATION;/WWN;/TYPE;/PARENTTYPE;
          - type: rightConcat
            column: 7
            value: ;SAS Port
        source(3):
          # ETH Port
          type: copy
          from: $monitors.enclosure.discovery.sources.source(11)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /PARENTID;/ID;/LOCATION;/MACADDRESS;/TYPE;/PARENTTYPE;
          - type: rightConcat
            column: 7
            value: ;Ethernet Port
        source(4):
          # UNION
          type: tableUnion
          tables:
          - $monitors.network.discovery.sources.source(1)$
          - $monitors.network.discovery.sources.source(2)$
          - $monitors.network.discovery.sources.source(3)$
          computes:
          - type: translate
            column: 6
            translationTable: TypeTranslationTable
          - type: replace
            column: 2
            existingValue: .0
            newValue: ""
          - type: translate
            column: 7
            translationTable: TypeTranslationTable
      mapping:
        source: $monitors.network.discovery.sources.source(4)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          logical_address: $column(5)
          logical_address_type: $column(8)
          device_type: $column(6)
          hw.parent.type: $column(7)
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s)\", $column(4), $column(6))"
    collect:
      type: multiInstance
      sources:
        source(1):
          type: http
          method: POST
          url: deviceManager/rest/xxxxx/sessions
          header: Accept:application/json
          body: "{\"password\":\"%{PASSWORD}\",\"username\":\"%{USERNAME}\",\"scope\": 0}"
          resultContent: all
        source(2):
          # Get Cookies
          type: copy
          from: $monitors.network.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
        source(3):
          # Get body
          type: copy
          from: $monitors.network.collect.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
          - type: json2csv
            entryKey: /data
            properties: /deviceid;/iBaseToken;
          # append key to header value <key>:<value> ibaseToken:<token>
          - type: leftConcat
            column: 3
            value: 'iBaseToken:'
          # Stops sending invalid commands if session did not authenticate.
          - type: excludeMatchingLines
            column: 3
            regExp: ^iBaseToken:$
        source(4):
          # Keep iBaseToken as source 3
          type: copy
          from: $monitors.network.collect.sources.source(3)$
          computes:
          - type: keepColumns
            columnNumbers: 3
          - type: awk
            script: $file("embeddedFile-3")$
        source(5):
          # union iBaseToken, cookies and Acccept headers
          type: tableUnion
          tables:
          - Accept:Application/Json
          - $monitors.network.collect.sources.source(2)$
          - $monitors.network.collect.sources.source(4)$
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.network.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/fc_port
          header: $monitors.network.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/RUNNINGSTATUS;/RUNSPEED;
        source(7):
          # SAS Port
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.network.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/sas_port
          header: $monitors.network.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/RUNNINGSTATUS;/RUNSPEED;
        source(8):
          # ETH Port
          type: http
          method: GET
          executeForEachEntryOf:
            source: $monitors.network.collect.sources.source(3)$
            concatMethod: json_array_extended
          url: /deviceManager/rest/$entry.column(2)$/eth_port
          header: $monitors.network.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /Entry/Value/data
            properties: /ID;/HEALTHSTATUS;/HEALTHSTATUS;/RUNNINGSTATUS;/SPEED;
        source(9):
          type: tableUnion
          tables:
          - $monitors.network.collect.sources.source(6)$
          - $monitors.network.collect.sources.source(7)$
          - $monitors.network.collect.sources.source(8)$
          computes:
          - type: translate
            column: 3
            translationTable: HealthStatusTranslationTable
          - type: translate
            column: 4
            translationTable: HealthStatusInformationTranslationTable
          - type: translate
            column: 5
            translationTable: LinkStatusTranslationTable
          - type: replace
            column: 6
            existingValue: -1
            newValue: 0
        source(10):
          # End Session
          type: http
          method: DELETE
          executeForEachEntryOf:
            source: $monitors.network.collect.sources.source(3)$
          url: /deviceManager/rest/$entry.column(2)$/sessions
          header: $monitors.network.collect.sources.source(5)$
      mapping:
        source: $monitors.network.collect.sources.source(9)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="network"}: $column(3)
          hw.network.up: legacyLinkStatus($column(5))
          hw.network.bandwidth.limit: megaBit2Bit($column(6))
        legacyTextParameters:
          StatusInformation: $column(4)
translations:
  PhysicalDiskTypeTranslationTable:
    "11": NL_SAS_SED
    "12": SLC_SSD_SED
    "13": MLC_SSD_SED
    "0": FC
    "1": SAS
    "2": SATA
    "3": SSD
    "4": NL_SAS
    "5": SLC_SSD
    "6": MLC_SSD
    "7": FC_SED
    "8": SAS_SED
    "9": SATA_SED
    "10": SSD_SED
  EnclosureProductModeTranslationTable:
    "68": 5500 V3
    "70": 5300 V3
    "71": 2800 V3
    "61": 6800 V3
    "72": 18500 V3
    "62": 6900 V3
    "73": 18800 V3
    "63": 5600 V3
    "64": 5800 V3
  HealthStatusInformationTranslationTable:
    "0": Unknown
    "11": no input
    "1": Normal
    "12": low battery
    "2": Faulty
    "3": Failing
    "9": inconsistent
  HealthStatusTranslationTable:
    "0": UNKNOWN
    "11": degraded
    "1": ok
    "12": degraded
    "2": failed
    "3": degraded
    "9": degraded
  TypeTranslationTable:
    "211": Fan
    "212": Fibre Channel
    "213": Ethernet
    "214": SAS
    "206": Enclosure
    "207": DiskController
    "209": DiskController" // Interface Modules
  LinkStatusTranslationTable:
    "0": degraded
    "11": degraded
    "1": ok
    "2": ok
    "53": degraded
    "10": ok
  LogicalDiskTypeTranslationTable:
    "0": Thick LUN
    "1": Thin LUN
    "2": Snapshot
