---
connector:
  displayName: Synology Diskstation
  platforms: Synology DiskStation
  reliesOn: Synology DiskStation SNMP Agent
  information: This connector monitors the physical components of Synology DiskStation units. It relies on the SNMP Agent of Synology DiskStation Manager (DSM).
  version: 1.0
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
      # DETECTION
      # Does a get_next to see if there that the Chassis OID is populated.
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.6574.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = eqlMemberChassisTable SNMP table
          # ID;ModelName,serialNumber,Version
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.1.5
          selectColumns: "ID,1,2,3"
      mapping:
        # InstanceTable = Source(1)
        # ID;ModelName,serialNumber,Version,upgradeAvailable
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: Synology
          model: $2
          serial_number: $3
          type: Storage
          name: "${awk::sprintf(\"Storage: (%s %s)\", \"Synology\", $2)}"
    collect:
      # Collect type = multi-instance
      type: monoInstance
      sources:
        source(1):
          # Get the Enclosure Status
          # Status;
          type: snmpGet
          oid: "1.3.6.1.4.1.6574.1.1.${attribute::id}"
          computes:
            # Duplicate the State
            # Status;StatusInfo;
          - type: duplicateColumn
            column: 1
            # Translate the first state to a Patrol Status
            # Status;StatusInfo;
          - type: translate
            column: 1
            translationTable: "${translation::systemStatusTranslationTable}"
            # Translate the second state to a Status Information
            # Status;StatusInfo;
          - type: translate
            column: 2
            translationTable: "${translation::systemStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;Value;
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="enclosure"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.4.1.0
          computes:
          # add the ID and the display name
          - type: leftConcat
            column: 1
            value: System;System;
        source(2):
          # Source(2) cpuFanStatus
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.4.2.0
          computes:
          # add the ID and the display name
          - type: leftConcat
            column: 1
            value: CPU;CPU;
        source(3):
          # table union of source(1) and (2)
          type: tableUnion
          tables:
          - "${source::monitors.fan.discovery.sources.source(1)}"
          - "${source::monitors.fan.discovery.sources.source(2)}"
      mapping:
        # The discovery table
        # // ;ID;Displayname;status
        source: "${source::monitors.fan.discovery.sources.source(3)}"
        attributes:
          __display_id: $2
          id: $1
          hw.parent.type: enclosure
          name: $2
        conditionalCollection:
          hw.status{hw.type="fan"}: $3
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # collect for systemFAN
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.4.1.0
          computes:
            # add the ID
            # ID;status
          - type: leftConcat
            column: 1
            value: System;
        source(2):
          # collect for cpuFanStatus
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.4.2.0
          computes:
          # ID;status
          - type: leftConcat
            column: 1
            value: CPU;
        source(3):
          # tableunion of source(1) and (2)
          type: tableUnion
          tables:
          - "${source::monitors.fan.collect.sources.source(1)}"
          - "${source::monitors.fan.collect.sources.source(2)}"
          computes:
          # ID;status;statusinfo
          - type: duplicateColumn
            column: 2
          # ID;status;statusinfo
          - type: translate
            column: 2
            translationTable: "${translation::systemStatusTranslationTable}"
          # ID;status;statusinfo
          - type: translate
            column: 3
            translationTable: "${translation::systemStatusInformationTranslationTable}"
      mapping:
        # The Collect table
        # ID;status;statusinfo
        source: "${source::monitors.fan.collect.sources.source(3)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = Power Supply
          # Value 1/2
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.3.0
          computes:
          - type: leftConcat
            column: 1
            value: PsGlobal;Global;
      mapping:
        # The discovery table
        # // ID;Displayname;status
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          __display_id: $2
          id: $1
          hw.parent.type: enclosure
          name: $2
        conditionalCollection:
          hw.status{hw.type="power_supply"}: $3
    collect:
      # Collect type: MonoInstance
      type: monoInstance
      sources:
        source(1):
          # Source(1) =
          # Value
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.3.0
          computes:
            # add the ID
            # ID;Status
          - type: leftConcat
            column: 1
            value: PsGlobal;
            # Duplicate Status
            # ID;Status;StatusInfo
          - type: duplicateColumn
            column: 2
            # Now translate Status
            # ID;Status;StatusInfo
          - type: translate
            column: 2
            translationTable: "${translation::systemStatusTranslationTable}"
            # Now translate Statusinfo
            # ID;Status;StatusInfo
          - type: translate
            column: 3
            translationTable: "${translation::systemStatusInformationTranslationTable}"
      mapping:
        # The value table
        # StatusInfo,Status,Value
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = PhysicalDisk
          # DiskID,DiskModel,Disktype
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.2.1.1
          selectColumns: "2,3,4"
          computes:
          - type: leftConcat
            column: 3
            value: "Disk Type: "
      mapping:
        # The discovery table
        # DiskID,DiskModel,Disktype,
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          model: $2
          info: $3
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) =
          # DiskID,DiskStatus
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.2.1.1
          selectColumns: "2,5"
          computes:
            # Duplicate Status
            # ID;Status;Status
          - type: duplicateColumn
            column: 2
            # Now translate Status
            # ID;PATROLStatus;Status;ErrorCount;
          - type: translate
            column: 2
            translationTable: "${translation::diskStatusTranslationTable}"
            # Now translate Status Information
            # ID;Status;StatusInformation;ErrorCount;
          - type: translate
            column: 3
            translationTable: "${translation::diskStatusInformationTranslationTable}"
      mapping:
        # The value table
        # ID;Status;StatusInformation
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = LogicalDisk
          # ID;Name
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.3.1.1
          selectColumns: "ID,2"
      mapping:
        # The discovery table
        # ID;Name;
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) =
          # ID;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.3.1.1
          selectColumns: "ID,3"
          computes:
            # Duplicate Status
            # ID;Status;Status
          - type: duplicateColumn
            column: 2
            # Now translate Status
            # ID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::logicalDiskStatusTranslationTable}"
            # Now translate Status Information
            # ID;Status;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::logicalDiskStatusInformationTranslationTable}"
      mapping:
        # The value table
        # ID;Status;StatusInformation;
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # systemFanStatus
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.5.4.0
          computes:
          # add the ID and the display name
          - type: leftConcat
            column: 1
            value: Bios;Bios;
      mapping:
        # The discovery table
        # ID;Displayname;status
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          __display_id: $2
          id: $1
          hw.parent.type: enclosure
          name: $2
        conditionalCollection:
          hw.status{hw.type="other_device"}: $3
    collect:
      # Collect type: MonoInstance
      type: monoInstance
      sources:
        source(1):
          # Source(1) =
          # Value
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.5.4.0
          computes:
            # add the ID
            # ID;Status
          - type: leftConcat
            column: 1
            value: Bios;
            # Duplicate Status
            # ID;Status;StatusInfo
          - type: duplicateColumn
            column: 2
            # Now translate Status
            # ID;Status;StatusInfo
          - type: translate
            column: 2
            translationTable: "${translation::BiosStatusTranslationTable}"
            # Now translate Statusinfo
            # ID;Status;StatusInfo
          - type: translate
            column: 3
            translationTable: "${translation::BiosStatusInformationTranslationTable}"
      mapping:
        # The value table
        # StatusInfo,Status,Value
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = General System MIB (hard coded)
          # DeviceID;Location;WarningThreshold;AlarmThreshold;
          type: static
          value: CPU;CPU;80;90;
        source(2):
          # Source(2) = PhysicalDisk (which contains temperature info)
          # DeviceID;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.2.1.1
          selectColumns: "2,6"
          computes:
            # Filter out empty values
            # DeviceID;Temperature;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[0-9]"
            # Keep only the DeviceID
            # DeviceID;
          - type: keepColumns
            columnNumbers: 1
            # Duplicate DeviceID so it's seen as Location
            # DeviceID;Location;
          - type: duplicateColumn
            column: 1
            # Add a hardcoded alarm threshold for disk temperature sensors
            # DeviceID;Location;WarningThreshold;AlarmThreshold;
          - type: rightConcat
            column: 2
            value: ;41;50
        source(3):
          # Source(3) = union of Source(1) and Source(2)
          # DeviceID;Location;WarningThreshold;AlarmThreshold;
          type: tableUnion
          tables:
          - "${source::monitors.temperature.discovery.sources.source(1)}"
          - "${source::monitors.temperature.discovery.sources.source(2)}"
      mapping:
        # InstanceTable
        source: "${source::monitors.temperature.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = 1.3.6.1.4.1.6574.1.2.0
          # Temperature;
          type: snmpGet
          oid: 1.3.6.1.4.1.6574.1.2.0
          computes:
            # Add "CPU" as the ID of this sensor
            # DeviceID;Temperature;
          - type: leftConcat
            column: 1
            value: CPU;
        source(2):
          # Source(2) = Disk MIB
          # DeviceID;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.6574.2.1.1
          selectColumns: "2,6"
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          type: tableUnion
          tables:
          - "${source::monitors.temperature.collect.sources.source(1)}"
          - "${source::monitors.temperature.collect.sources.source(2)}"
      mapping:
        # ValueTable = Source(3)
        # DeviceID;Temperature;
        source: "${source::monitors.temperature.collect.sources.source(3)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
translations:
  systemStatusTranslationTable:
    "1": ok
    "2": failed
    Default: UNKNOWN
  logicalDiskStatusTranslationTable:
    "11": failed
    "12": failed
    Default: UNKNOWN
    "1": ok
    "2": degraded
    "3": degraded
    "4": degraded
    "5": degraded
    "6": ok
    "7": degraded
    "8": degraded
    "9": degraded
    "10": degraded
  systemStatusInformationTranslationTable:
    "1": ok
    "2": failed
    Default: Unknown Status
  logicalDiskStatusInformationTranslationTable:
    "11": Degraded
    "12": Crashed
    Default: Unknown Status
    "1": Normal
    "2": Repairing
    "3": Migrating
    "4": Expanding
    "5": Deleting
    "6": Creating
    "7": RAID Syncing
    "8": RAID Parity Checking
    "9": RAID Assembling
    "10": Cancelling
  BiosStatusTranslationTable:
    "1": degraded
    Default: ok
  diskStatusInformationTranslationTable:
    "1": Normal
    "2": Initialized
    "3": Not Initialized
    "4": System Partition Failed
    "5": Crashed
    Default: Unknown Status
  diskStatusTranslationTable:
    "1": ok
    "2": ok
    "3": ok
    "4": failed
    "5": failed
    Default: UNKNOWN
  BiosStatusInformationTranslationTable:
    "1": Requires Upgrade
