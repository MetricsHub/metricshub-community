---
connector:
  displayName: SNIA Compliant Tape Libraries (SNMP)
  platforms: "IBM 3584,IBM TS3000 Tape Libraries"
  reliesOn: SNIA Compliant SNMP Agent (SNIA-SML-MIB)
  version: 1.2
  information: This connector connects to the SNMP Agent of IBM 3584 tape libraries (also known as IBM TotalStorage 3xxx).
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
      # DETECTION
      # Does a get_next to see if there that the model OID is populated.
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.14851.3.1.2
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = \tchassisGroup SNMP table\nVendor;Model;SerialNumber;Firmware Revision
          type: snmpTable
          oid: 1.3.6.1.4.1.14851.3.1.4
          selectColumns: "1,2,3"
          computes:
            # Change Internatinal Business Machines to IBM
            # Vendor;Model;SerialNumber;Firmware Revision
          - type: replace
            column: 1
            existingValue: International Business Machines
            newValue: IBM
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: SNIA Library
          vendor: $column(1)
          model: $column(2)
          serial_number: $column(3)
          type: Storage
          name: "sprintf(\"Storage: (%s %s)\", $column(1), $column(2))"
    collect:
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.4.1.14851.3.1.10.2.0
          computes:
            # Duplicate status, because we will translate it two times
            # Status;Status;
          - type: duplicateColumn
            column: 1
            # Translate Status into PATROLStatus
            # PATROLStatus;Status;
          - type: translate
            column: 1
            translationTable: StatusTranslationTable
            # Translate second Status into more readable string
            # PATROLStatus;StatusInformation;
          - type: translate
            column: 2
            translationTable: StatusInformationTranslationTable
      mapping:
        source: $monitors.enclosure.collect.sources.source(1)$
        deviceId: SNIA Library
        metrics:
          hw.status{hw.type="enclosure"}: $column(1)
        legacyTextParameters:
          StatusInformation: $column(2)
  tape_drive:
    discovery:
      sources:
        source(1):
          # Source(1) = \tphysicalPackageTable SNMP table\nUsing .5 as the ID as this corresponds to the ID in the status table (mediaAccessDeviceTable) for this device\nMedia Access Device Table ID;Manufacturer;Model;Serial Number;
          type: snmpTable
          oid: 1.3.6.1.4.1.14851.3.1.8.2.1
          selectColumns: "5,2,3,4"
          computes:
            # Change Internatinal Business Machines to IBM
            # Media Access Device Table ID;Manufacturer;Model;Serial Number;
          - type: replace
            column: 2
            existingValue: International Business Machines
            newValue: IBM
      mapping:
        # Media Access Device Table ID;Manufacturer;Model;Serial Number;
        source: $monitors.tape_drive.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          vendor: $column(2)
          model: $column(3)
          serial_number: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: SNIA Library
          name: "sprintf(\"%s (%s %s)\", $column(1), $column(2), $column(3))"
    collect:
      type: multiInstance
      sources:
        source(1):
          # Collect Tape Drive Status\nSource(1) = \tmediaAccessDeviceTable SNMP table\nID;CleaningStatus;MountCount;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.14851.3.1.6.2.1
          selectColumns: "ID,6,7,11"
          computes:
            # Duplicate status, because we will translate it two times
            # ID;CleaningStatus;MountCount;Status;Status
          - type: duplicateColumn
            column: 4
            # Translate Status into PATROLStatus
            # ID;CleaningStatus;MountCount;PatrolStatus;Status;
          - type: translate
            column: 4
            translationTable: StatusTranslationTable
            # Translate second Status into more readable string
            # ID;CleaningStatus;MountCount;PatrolStatus;StatusInformation;
          - type: translate
            column: 5
            translationTable: StatusInformationTranslationTable
            # Translate Status into PATROLStatus
            # ID;PatrolCleaningStatus;MountCount;PatrolStatus;StatusInformation;
          - type: translate
            column: 2
            translationTable: CleaningStatusTranslationTable
      mapping:
        # Value Table
        # ID;PatrolCleaningStatus;MountCount;PatrolStatus;StatusInformation;
        source: $monitors.tape_drive.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="tape_drive"}: $column(4)
          hw.status{hw.type="tape_drive", state="needs_cleaning"}: legacyNeedsCleaning($column(2))
        legacyTextParameters:
          StatusInformation: $column(5)
  robotics:
    discovery:
      sources:
        source(1):
          # Now going to discover Changer (Robotics) informaiton\nSource(2) = \tchangerDeviceTable SNMP table\nName (ID)
          type: snmpTable
          oid: 1.3.6.1.4.1.14851.3.1.11.2.1
          selectColumns: 4
      mapping:
        # Instance table
        source: $monitors.robotics.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          robotics_type: Cassette Robot
          hw.parent.type: enclosure
          hw.parent.id: SNIA Library
          name: "sprintf(\"%s (%s)\", $column(1), \"Cassette Robot\")"
    collect:
      type: multiInstance
      sources:
        source(1):
          # Collect Robotics Status\nSource(2) = \tchangerDeviceTable SNMP table\nID;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.14851.3.1.11.2.1
          selectColumns: "4,9"
          computes:
            # Duplicate status, because we will translate it two times
            # ID;Status;Status
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # ID;PatrolStatus;Status;
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
            # Translate second Status into more readable string
            # ID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: StatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PatrolStatus;StatusInformation;
        source: $monitors.robotics.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="robotics"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  CleaningStatusTranslationTable:
    "1": 1
    "2": 0
    default: UNKNOWN
  StatusInformationTranslationTable:
    "11": In Service
    "12": No Contact
    "13": Lost Communication
    "14": Aborted
    "15": Dormant
    "16": Supporting Entity In Error
    "17": Completed
    "18": Power Mode
    "19": dMTFReserved
    "0": unknown
    "1": Other (Unknown)
    "2": ""
    default: UNKNOWN
    "3": Degraded
    "4": Stressed
    "5": Predicted Failure
    "6": Error
    "7": Non-Recoverable Error
    "8": Starting
    "9": Stopping
    "32768": Unspecified Vendor Specific Status
    "10": Stopped
  StatusTranslationTable:
    "11": degraded
    "12": failed
    "13": failed
    "14": failed
    "15": degraded
    "16": degraded
    "17": ok
    "18": ok
    "19": UNKNOWN
    "0": UNKNOWN
    "1": failed
    "2": ok
    default: UNKNOWN
    "3": degraded
    "4": degraded
    "5": degraded
    "6": failed
    "7": failed
    "8": degraded
    "9": degraded
    "32768": UNKNOWN
    "10": failed
