---
connector:
  displayName: Quantum DXi (SSH)
  platforms: Quantum DXi
  reliesOn: Commands on the Quantum DXi controller
  version: 1.0
  information: "This connector discovers the enclosure, fans, memory, voltages and temperatures of the DXi appliance."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # host should respond to telnet the way described below
    - type: osCommand
      commandLine: syscli --getstatus syscomponent --systemboard
      expectedResult: System Component
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1)
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(1)}"
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
          - "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
        source(6):
          # Make a copy of the discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
          # Add \"Location: \" to AdditionalInformation
          - type: leftConcat
            column: 8
            value: "Location: "
        source(7):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "Enclosure"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: enclosure
          # Add \"Configuration: \" to AdditionalInformation1
          - type: leftConcat
            column: 9
            value: "Configuration: "
      mapping:
        # Instance Table
        # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
        source: "${source::monitors.enclosure.discovery.sources.source(7)}"
        attributes:
          id: $4
          __display_id: $4
          type: Storage
          model: $8
          bios_version: $10
          info: $9
          name: "${awk::sprintf(\"Storage: %s (%s)\", $4, $8)}"
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(1)}"
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
          - "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
        source(6):
          # Make a copy of the discovery
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(5)}"
          computes:
            # Keep only "Enclosure"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: enclosure
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Model;Configuration;SystemVersion;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.enclosure.collect.sources.source(6)}"
        attributes:
          id: $4
        metrics:
          hw.status{hw.type="enclosure"}: $6
        legacyTextParameters:
          StatusInformation: $7
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "Temperature"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "Temperature,Thermal"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
        conditionalCollection:
          hw.temperature: $5
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.temperature.collect.sources.source(1)}"
          - "${source::monitors.temperature.collect.sources.source(2)}"
          - "${source::monitors.temperature.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "Temperature"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "Temperature,Thermal"
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="temperature"}: $6
          hw.temperature: $5
        legacyTextParameters:
          StatusInformation: $7
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "Voltage"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: voltage
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
        conditionalCollection:
          hw.voltage: $5
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.voltage.collect.sources.source(1)}"
          - "${source::monitors.voltage.collect.sources.source(2)}"
          - "${source::monitors.voltage.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "Voltage"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: voltage
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
            # Multiply Voltage by 1000 to get mV
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: multiply
            column: 5
            value: 1000
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="voltage"}: $6
          hw.voltage: $5
        legacyTextParameters:
          StatusInformation: $7
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "DIMM"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: DIMM
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.memory.collect.sources.source(1)}"
          - "${source::monitors.memory.collect.sources.source(2)}"
          - "${source::monitors.memory.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "DIMM"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: DIMM
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.memory.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="memory"}: $6
        legacyTextParameters:
          StatusInformation: $7
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "Fan"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: fan
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
        conditionalCollection:
          hw.fan.speed: $5
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.fan.collect.sources.source(1)}"
          - "${source::monitors.fan.collect.sources.source(2)}"
          - "${source::monitors.fan.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "Fan"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: fan
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="fan"}: $6
          hw.fan.speed: $5
        legacyTextParameters:
          StatusInformation: $7
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "PowerSupply"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Power
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.power_supply.collect.sources.source(1)}"
          - "${source::monitors.power_supply.collect.sources.source(2)}"
          - "${source::monitors.power_supply.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "PowerSupply"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Power
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="power_supply"}: $6
        legacyTextParameters:
          StatusInformation: $7
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "Battery"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Batteries
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.battery.collect.sources.source(1)}"
          - "${source::monitors.battery.collect.sources.source(2)}"
          - "${source::monitors.battery.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "Battery"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Batteries
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.battery.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="battery"}: $6
        legacyTextParameters:
          StatusInformation: $7
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "DiskController"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Controllers
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: "${awk::sprintf(\"Disk Controller: %s\", $4)}"
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.disk_controller.collect.sources.source(1)}"
          - "${source::monitors.disk_controller.collect.sources.source(2)}"
          - "${source::monitors.disk_controller.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "DiskController"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Controllers
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.disk_controller.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="disk_controller"}: $6
        legacyTextParameters:
          StatusInformation: $7
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "PhysicalDisk"
            # MSHW;ID;Type;Name;Size;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Drives
            # Translate size into bytes
            # MSHW;ID;Type;Name;Size;Status;StatusInformation;Location;AttachedTo;
          - type: multiply
            column: 5
            value: 1000000000
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: "${awk::sprintf(\"%s (%s)\", $4, bytes2HumanFormatBase10($5))}"
        metrics:
          hw.physical_disk.size: $5
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: |
            for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\w\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.physical_disk.collect.sources.source(1)}"
          - "${source::monitors.physical_disk.collect.sources.source(2)}"
          - "${source::monitors.physical_disk.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "PhysicalDisk"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Drives
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $6
        legacyTextParameters:
          StatusInformation: $7
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "LogicalDisk"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Volumes
            # Translate size into bytes
            # MSHW;ID;Type;Name;Size;Status;StatusInformation;Location;AttachedTo;
          - type: multiply
            column: 5
            value: 1073741824
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: "${awk::sprintf(\"%s (%s)\", $4, bytes2HumanFormatBase2($5))}"
        metrics:
          hw.logical_disk.limit: $5
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.logical_disk.collect.sources.source(1)}"
          - "${source::monitors.logical_disk.collect.sources.source(2)}"
          - "${source::monitors.logical_disk.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "LogicalDisk"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Volumes
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="logical_disk"}: $6
        legacyTextParameters:
          StatusInformation: $7
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Keep only "OtherDevice"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "IPMI,FCC"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $4
          info: $8
          hw.parent.type: enclosure
          hw.parent.id: $9
          name: $4
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: syscli --getstatus storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus systemboard
        source(3):
          type: osCommand
          commandLine: "for array in `syscli --getstatus storagearray | grep -oP '(?<=Name = )[\\w\\d]+'`; do echo MSHW_START $array;syscli --getstatus storagearraydetails --name $array ; echo MSHW_END $array; done"
        source(4):
          type: osCommand
          commandLine: syscli --getstatus hostbusadapter
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
          - "${source::monitors.other_device.collect.sources.source(4)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Model;Configuration;SystemVersion;
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            # Keep only "OtherDevice"
            # MSHW;ID;Type;Name;Value;Status;StatusInformation;Location;AttachedTo;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "IPMI,FCC"
            # Translate Status into PATROLStatus
            # MSHW;ID;Type;Name;Value;PatrolStatus;StatusInformation;Location;AttachedTo;
          - type: translate
            column: 6
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(5)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="other_device"}: $6
        legacyTextParameters:
          StatusInformation: $7
  network:
    discovery:
      sources:
        source(1):
          # Source(1)
          type: osCommand
          commandLine: syscli --getstatus commoncomponent --storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus networkport
        source(3):
          type: osCommand
          commandLine: syscli --show netcfg
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(1)}"
          - "${source::monitors.network.collect.sources.source(2)}"
          - "${source::monitors.network.collect.sources.source(3)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;deviceID;Speed;LinkStatus;receivePackets;transmitPackets;Errors;receiveBytes;transmitBytes;Address;AddressType;AttachedTo;
          - type: awk
            script: "${file::embeddedFile-2}"
            separators: ;
            keep: ^MSHW;
      mapping:
        # InstanceTable = Source(1)
        # MSHW;deviceID;Speed;LinkStatus;receivePackets;transmitPackets;Errors;receiveBytes;transmitBytes;Address;AddressType;AttachedTo;
        source: "${source::monitors.network.discovery.sources.source(4)}"
        attributes:
          id: $2
          __display_id: $2
          physical_address: $10
          physical_address_type: $11
          hw.parent.type: enclosure
          hw.parent.id: $12
          name: $2
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1)
          type: osCommand
          commandLine: syscli --getstatus commoncomponent --storagearray
        source(2):
          type: osCommand
          commandLine: syscli --getstatus networkport
        source(3):
          type: osCommand
          commandLine: syscli --show netcfg
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(1)}"
          - "${source::monitors.network.collect.sources.source(2)}"
          - "${source::monitors.network.collect.sources.source(3)}"
          computes:
            # Run the Command Outputs through an AWK Script
            # MSHW;deviceID;Speed;LinkStatus;receivePackets;transmitPackets;Errors;receiveBytes;transmitBytes;Address;AddressType;AttachedTo;
          - type: awk
            script: "${file::embeddedFile-2}"
            separators: ;
            keep: ^MSHW;
            # Translate the Link Status
            # MSHW;deviceID;Speed;LinkStatus;receivePackets;transmitPackets;Errors;receiveBytes;transmitBytes;Address;AddressType;AttachedTo;
          - type: translate
            column: 4
            translationTable: "${translation::LinkTranslationTable}"
      mapping:
        # And here is the ValueTable
        source: "${source::monitors.network.collect.sources.source(4)}"
        attributes:
          id: $2
        metrics:
          hw.network.packets{direction="receive"}: $5
          hw.network.packets{direction="transmit"}: $6
          hw.errors{hw.type="network"}: $7
          hw.network.io{direction="receive"}: $8
          hw.network.io{direction="transmit"}: $9
          hw.network.up: legacyLinkStatus($4)
          hw.network.bandwidth.limit: megaBit2Bit($3)
translations:
  LinkTranslationTable:
    Down: degraded
    Up: ok
    Default: UNKNOWN
  StatusTranslationTable:
    Down: degraded
    Warning: degraded
    Attention: degraded
    Rebuilding: degraded
    Normal: ok
    Default: failed
    Global: ok
    Ready: ok
    NA: UNKNOWN
    Unknown: UNKNOWN
    Running: ok
    Unassigned: ok
    Up: ok
    Online: ok
    Failure: failed
    Initializing: degraded
