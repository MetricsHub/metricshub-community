---
translations:
  PSUStatusInformationTranslationTable:
    default: UNKNOWN
    mshw_101: Comm Error - AC Error
    mshw_010: DC Error
    mshw_001: AC Error
    mshw_100: Comm Error - AC Error - DC Error
    mshw_111: Comm Error
    mshw_000: AC Error - DC Error
    mshw_011: ""
    mshw_110: Comm Error - DC Error
  sizeTranslationTable:
    gib: 1073741824
    default: 1
    mb: 1000000
    mib: 1048576
    gb: 1000000000
    tib: 1099511627776
    tb: 1000000000000
  PSUStatusTranslationTable:
    default: UNKNOWN
    mshw_101: failed
    mshw_010: failed
    mshw_001: failed
    mshw_100: failed
    mshw_111: degraded
    mshw_000: failed
    mshw_011: ok
    mshw_110: failed
  linkTranslationTable:
    offline: degraded
    default: ""
    no light: degraded
    online: ok
    disabled: degraded
    none: UNKNOWN
  StatusTranslationTable:
    excluded: degraded
    "0": ok
    offline: failed
    "1": failed
    default: failed
    online: ok
    active: ok
    degraded: degraded
connector:
  displayName: IBM FlashSystem 900
  platforms: IBM FlashSystem
  reliesOn: IBM FlashSystem 900 SNMP Agent
  version: 1.0
  information: "This connector discovers the enclosure(s) and the disks of IBM FlashSystem 900s as well as the various environment sensors (temperatures, fans, power supplies). It relies on the SNMP protocol."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    - _comment: Verify that there is an IBM FlashSystem
      type: snmpGetNext
      oid: 1.3.6.1.4.1.2.6.255.1.1.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = systemType
          # Version
          type: snmpGet
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.2.0
        source(2):
          # Source(2) = version
          # Model
          type: snmpGet
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.1.0
          computes:
            # Combine the two tables
            # Model;Version;
          - type: rightConcat
            column: 1
            value: $monitors.enclosure.discovery.sources.source(1)$
          - type: leftConcat
            column: 2
            value: "FirmwareVersion: "
      mapping:
        # Instance Table
        # Model;Version;
        source: $monitors.enclosure.discovery.sources.source(2)$
        attributes:
          id: IBM FlashSystem
          model: $column(1)
          type: Storage
          info: $column(2)
          name: "sprintf(\"%s (%s - %s)\", \"IBM FlashSystem\", $column(1), \"Storage\")"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = PhysicalDisk Table
          # ID;Role;Size;Slot;ArrayID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.51.1
          selectColumns: "2,4,5,6,7"
          computes:
            # Duplicate the Size
            # ID;Role;Size;Size;Slot;ArrayID;
          - type: duplicateColumn
            column: 3
            # Extract the Size (number)
            # ID;Role;Size;Size;Slot;ArrayID;
          - type: extract
            column: 3
            subColumn: 1
            subSeparators: ' '
            # Extract the Size (number)
            # ID;Role;Size;SizeUnits;Slot;ArrayID;
          - type: extract
            column: 4
            subColumn: 2
            subSeparators: ' '
            # Translate the units to a multiplier
            # ID;Role;Size;SizeMultiplier;Slot;ArrayID;
          - type: translate
            column: 4
            translationTable: sizeTranslationTable
            # Multiply the Size by the Multiplier
            # ID;Role;Size;SizeMultiplier;Slot;ArrayID;
          - type: multiply
            column: 3
            value: Column(4)
            # Add identifier to Array
            # ID;Role;Size;SizeMultiplier;Slot;DisplayID;
          - type: leftConcat
            column: 6
            value: "Array: "
          - type: rightConcat
            column: 6
            value: " Slot: "
          - type: rightConcat
            column: 6
            value: Column(5)
          - type: leftConcat
            column: 2
            value: "Role: "
      mapping:
        # InstanceTable = Source(1)
        # ID;Role;Size;SizeMultiplier;Slot;ArrayID;
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(6)
          info: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(6), $column(3))"
        metrics:
          hw.physical_disk.size: $column(3)
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = PhysicalDisk Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.51.1
          selectColumns: "2,3"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = LogicalDisk Table
          # ID;Size;RaidLevel;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.52.1
          selectColumns: "2,4,7"
          computes:
            # Duplicate the Size
            # ID;Size;Size;RaidLevel;
          - type: duplicateColumn
            column: 2
            # Extract the Size (number)
            # ID;Size;Size;RaidLevel;
          - type: extract
            column: 2
            subColumn: 1
            subSeparators: ' '
            # Extract the Size (number)
            # ID;Size;SizeUnits;RaidLevel;
          - type: extract
            column: 3
            subColumn: 2
            subSeparators: ' '
            # Translate the units to a multiplier
            # ID;Size;SizeUnits;RaidLevel;
          - type: translate
            column: 3
            translationTable: sizeTranslationTable
            # Multiply the Size by the Multiplier
            # ID;Size;SizeMultiplier;RaidLevel;
          - type: multiply
            column: 2
            value: Column(3)
      mapping:
        # InstanceTable = Source(1)
        # ID;Size;SizeMultiplier;RaidLevel;
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          hw.logical_disk.limit: $column(2)
          raid_level: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(4), $column(2))"
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = LogicalDisk Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.52.1
          selectColumns: "2,3"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = Blade Table
          # ID;DisplayID;Model;Relation;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.54.1
          selectColumns: "6,2,4,7"
          computes:
          - type: leftConcat
            column: 4
            value: "RAID: "
      mapping:
        # InstanceTable = Source(1)
        # ID;Size;SizeMultiplier;RaidLevel;
        source: $monitors.blade.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          model: $column(3)
          info: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(2), $column(3))"
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Blade Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.1.54.1
          selectColumns: "6,8"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: $monitors.blade.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="blade"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = FC Port Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.1.1
          selectColumns: "2,7"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;WWN
        source(2):
          # Source(2) = iB Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.2.1
          selectColumns: "2,7"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;GUID
        source(3):
          # Source(3) = iScsi Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.3.1
          selectColumns: "2,7"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;MAC
        source(4):
          # Source(4) = FCoE Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.4.1
          selectColumns: "2,7"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;WWN
        source(5):
          # Union the two discovery
          # ID;PortID;PortIDType;
          type: tableUnion
          tables:
          - $monitors.network.discovery.sources.source(1)$
          - $monitors.network.discovery.sources.source(2)$
          - $monitors.network.discovery.sources.source(3)$
          - $monitors.network.discovery.sources.source(4)$
      mapping:
        # InstanceTable = Source(1)
        # ID;PortID;PortIDType;
        source: $monitors.network.discovery.sources.source(5)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          physical_address: $column(2)
          physical_address_type: $column(3)
          hw.parent.type: enclosure
          name: $column(1)
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = FC Port Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.1.1
          selectColumns: "2,5,9"
        source(2):
          # Source(2) = iB Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.2.1
          selectColumns: "2,5,9"
        source(3):
          # Source(3) = iScsi Port Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.3.1
          selectColumns: "2,5,6"
        source(4):
          # Source(4) = FCoE Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.2.4.1
          selectColumns: "2,5,9"
        source(5):
          # Union the two Collect
          # ID;LinkStatus;Speed;
          type: tableUnion
          tables:
          - $monitors.network.collect.sources.source(1)$
          - $monitors.network.collect.sources.source(2)$
          - $monitors.network.collect.sources.source(3)$
          - $monitors.network.collect.sources.source(4)$
          computes:
            # Replace the GB units with 000
            # ID;LinkStatus;Speed;
          - type: replace
            column: 3
            existingValue: Gb
            newValue: '000'
            # Replace the Mb units with ""
            # ID;LinkStatus;Speed;
          - type: replace
            column: 3
            existingValue: Mb
            newValue: ""
            # Translate the link status
            # ID;LinkStatus;Speed;
          - type: translate
            column: 2
            translationTable: linkTranslationTable
      mapping:
        # ValueTable = Source(3)
        # ID;LinkStatus;Speed;
        source: $monitors.network.collect.sources.source(5)$
        deviceId: $column(1)
        metrics:
          hw.network.up: legacyLinkStatus($column(2))
          hw.network.bandwidth.limit: megaBit2Bit($column(3))
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = PowerSupply Table
          # ID;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.5.10.1
          selectColumns: 2
      mapping:
        # InstanceTable = Source(1)
        # ID;
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          hw.parent.type: enclosure
          name: "sprintf(\"%s, $column(1))"
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = PowerSupply Table
          # ID;CommErr;ACGood;DCGood;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.5.10.1
          selectColumns: "2,3,4,5"
          computes:
            # Add a String to the left of the CommError to prevent the column being identified as a number
            # ID;CommErr;ACGood;DCGood;
          - type: leftConcat
            column: 2
            value: MSHW_
            # Combine all the status values into a single column
            # ID;CombinedStatus;ACGood;DCGood;
          - type: rightConcat
            column: 2
            value: Column(3)
          - type: rightConcat
            column: 2
            value: Column(4)
            # Duplicate the Status column
            # ID;CombinedStatus;CombinedStatus;ACGood;DCGood;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;CombinedStatus;ACGood;DCGood;
          - type: translate
            column: 2
            translationTable: PSUStatusTranslationTable
            # Translate the second status column into a StatusInformation
            # ID;PatrolStatus;StatusInformation;ACGood;DCGood;
          - type: translate
            column: 3
            translationTable: PSUStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # ID;FanPercent;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.6.10.1
          selectColumns: "2,6,7,8,9"
        source(2):
          _comment: Source(2) = Copy of Source(1)
          type: copy
          from: $monitors.fan.discovery.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,2"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan0;
        source(3):
          _comment: Source(3) = Copy of Source(1)
          type: copy
          from: $monitors.fan.discovery.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,3"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan1;
        source(4):
          _comment: Source(4) = Copy of Source(1)
          type: copy
          from: $monitors.fan.discovery.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,4"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan2;
        source(5):
          _comment: Source(5) = Copy of Source(1)
          type: copy
          from: $monitors.fan.discovery.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,5"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan3;
        source(6):
          # Source(6) = Union of Source(2) to Source(5)
          # ID;FanSpeed;FanPercent;
          type: tableUnion
          tables:
          - $monitors.fan.discovery.sources.source(2)$
          - $monitors.fan.discovery.sources.source(3)$
          - $monitors.fan.discovery.sources.source(4)$
          - $monitors.fan.discovery.sources.source(5)$
          computes:
            # Keep only fans with a valid percentage
            # ID;FanSpeed;FanPercent;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: "[0-9]$"
        source(7):
          # Source(7) = PowerSupply Table
          # ID;FanSpeed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.5.10.1
          selectColumns: "2,6"
          computes:
            # Keep only fans with a valid speed
            # ID;FanSpeed;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[0-9]$"
          - _comment: Add a blank column
            type: rightConcat
            column: 2
            value: ;
        source(8):
          # Source(8) = Union of Source(6) and Source(7)
          # ID;FanSpeed;FanPercent;
          type: tableUnion
          tables:
          - $monitors.fan.discovery.sources.source(6)$
          - $monitors.fan.discovery.sources.source(7)$
      mapping:
        # InstanceTable = Source(1)
        # ID;FanSpeed;FanPercent;
        source: $monitors.fan.discovery.sources.source(8)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          hw.parent.type: enclosure
          name: $column(1)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: 10
          hw.fan.speed_ratio.limit{limit_type="low.degraded"}: percent2Ratio("10")
    collect:
      _comment: Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Fan Table
          # ID;Fan0;Fan1;Fan2;Fan3;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.6.10.1
          selectColumns: "2,6,7,8,9"
        source(2):
          _comment: Source(2) = Copy of Source(1)
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,2"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan0;
        source(3):
          _comment: Source(3) = Copy of Source(1)
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,3"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan1;
        source(4):
          _comment: Source(4) = Copy of Source(1)
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,4"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan2;
        source(5):
          _comment: Source(5) = Copy of Source(1)
          type: copy
          from: $monitors.fan.collect.sources.source(1)$
          computes:
          - _comment: Keep only one set of Fans
            type: keepColumns
            columnNumbers: "1,5"
          - _comment: Add an identifier to the FanID and a blank column
            type: rightConcat
            column: 1
            value: :fan3;
        source(6):
          # Source(6) = Union of Source(2) to Source(5)
          # ID;FanSpeed;FanPercent;
          type: tableUnion
          tables:
          - $monitors.fan.collect.sources.source(2)$
          - $monitors.fan.collect.sources.source(3)$
          - $monitors.fan.collect.sources.source(4)$
          - $monitors.fan.collect.sources.source(5)$
          computes:
            # Keep only fans with a valid percentage
            # ID;FanSpeed;FanPercent;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: "[0-9]$"
        source(7):
          # Source(7) = PowerSupply Table
          # ID;FanSpeed;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.255.1.1.5.10.1
          selectColumns: "2,6"
          computes:
            # Keep only fans with a valid speed
            # ID;FanSpeed;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[0-9]$"
          - _comment: Add a blank column
            type: rightConcat
            column: 2
            value: ;
        source(8):
          # Source(8) = Union of Source(6) and Source(7)
          # ID;FanSpeed;FanPercent;
          type: tableUnion
          tables:
          - $monitors.fan.collect.sources.source(6)$
          - $monitors.fan.collect.sources.source(7)$
      mapping:
        # ValueTable = Source(1)
        # ID;FanSpeed;FanPercent;
        source: $monitors.fan.collect.sources.source(8)$
        deviceId: $column(1)
        metrics:
          hw.fan.speed_ratio: percent2Ratio($column(3))
          hw.fan.speed: $column(2)
