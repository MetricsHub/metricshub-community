---
embedded:
  EmbeddedFile(1): |-
    ($0 ~ "^rmt/[0-9]") {
        tapeID = $1
        vendor = ""
        product = ""
        model = ""
        productmodel = ""
        serial = ""
    }

    ($0 ~ /Vendor: /) {
        index1 = index($0, "Vendor: " ) + length("Vendor: ")
        vendor = substr($0, index1, length-index1)
        index1 = index(vendor, ":")
        if (index1 > 0)
        {
            vendor = substr(vendor, 1, index1-1)
            n = split(vendor, a, " ")
            vendor = ""
            for (i=1 ; i<n ; i++)
            {
                vendor = vendor a[i]
                if (i < n-1)
                    vendor = vendor " "
            }
        }
    }

    ($0 ~ /Model: /) {
        index1 = index($0, "Model: " ) + length("Model: ")
        model = substr($0, index1, length-index1)
        index1 = index(model, ":")
        if (index1 > 0)
        {
            model = substr(model, 1, index1-1)
            n = split(model, a, " ")
            model = ""
            for (i=1 ; i<n ; i++)
            {
                model = model a[i]
                if (i < n-1)
                    model = model " "
            }
        }
    }

    ($0 ~ /Product: /) {
        index1 = index($0, "Product: " ) + length("Product: ")
        product = substr($0, index1, length-index1)
        index1 = index(product, ":")
        if (index1 > 0)
        {
            product = substr(product, 1, index1-1)
            n = split(product, a, " ")
            product = ""
            for (i=1 ; i<n ; i++)
            {
                product = product a[i]
                if (i < n-1)
                    product = product " "
            }
        }
    }

    ($0 ~ /Serial No: /) {
        index1 = index($0, "Serial No: " ) + length("Serial No: ")
        serial = substr($0, index1, length-index1)
        index1 = index(serial, ":")
        if (index1 > 0)
        {
            serial = substr(serial, 1, index1-1)
            n = split(serial, a, " ")
            serial = ""
            for (i=1 ; i<n ; i++)
            {
                serial = serial a[i]
                if (i < n-1)
                    serial = serial " "
            }
        }
    }

    ($0 ~ /Serial No:/) {
        if (product != "" && model != "")
        {
            productmodel = product " " model
        }
        else
        {
            productmodel = product model
        }

        if (tapeID != "")
        {
            print "MSHW;" tapeID ";" vendor ";" productmodel ";" serial
        }

        disk = ""
        vendor = ""
        product = ""
        model = ""
        productmodel = ""
        serial = ""
    }
  EmbeddedFile(2): |-
    ($0 ~ "^rmt/[0-9]") {
        tapeID = $1
        softerror = 0
        harderror = 0
        transporterror = 0
        totalerror = 0
    }

    ($2 == "Soft" && $3 == "Errors:") {
        softerror = $4
    }

    ($5 == "Hard" && $6 == "Errors:") {
        harderror = $7
    }

    ($8 == "Transport" && $9 == "Errors:") {
        transporterror = $10
    }

    ($0 ~ /Serial No:/) {
        totalerror = transporterror + harderror

        if (tapeID != "")
        {
            print "MSHW;" tapeID ";" totalerror
        }

        tapeID = ""
        softerror = 0
        harderror = 0
        transporterror = 0
        totalerror = 0
    }
connector:
  displayName: Oracle/Sun Solaris - Tape Drives
  platforms: Oracle/Sun
  reliesOn: "Sun Solaris system commands (iostat, dd)"
  information: Gives physical disk information (status and error count) on Sun Solaris systems through the iostat -En utility. Supports only official Sun disks.
  version: 1.0
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Solaris
    criteria:
    - type: deviceType
      keep:
      - SunOS
      - Solaris
    - type: osCommand
      commandLine: /usr/bin/iostat -En
      expectedResult: "^rmt/.*Soft [Ee]rrors.*Hard [Ee]rrors.*Transport [Ee]rrors"
monitors:
  tape_drive:
    discovery:
      sources:
        source(1):
          # Source(2) = output of iostat
          type: osCommand
          commandLine: iostat -En
          computes:
            # Reformat iostat's output through awk (see EmbeddedFile(1))
            # DeviceID;Vendor;Model;SerialNumber
          - type: awk
            script: EmbeddedFile(1)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.tape_drive.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          model: $column(3)
          serial_number: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(1), $column(3))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of iostat
          type: osCommand
          commandLine: /usr/bin/iostat -En
          computes:
            # Source(1) = output of iostat reformatted by awk (see EmbeddedFile(2))
            # DeviceID;ErrorCount;
          - type: awk
            script: EmbeddedFile(2)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # ValueTable = Source(1)
        source: $monitors.tape_drive.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.errors{hw.type="tape_drive"}: $column(2)
