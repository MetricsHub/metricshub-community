---
connector:
  displayName: EMC Isilon - Node (SNMP)
  platforms: EMC Isilon
  reliesOn: EMC Isilon SNMP Agent
  version: 1.0
  information: This connector discovers the status of an EMC Isilon Storage Node.  It relies on the SNMP service of the EMC Isilon Node.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    supersedes:
    - EMCIsilon
    - EMCIsilon8
    criteria:
    # Verify that the EMC Isilon NOde SNMP agent responds to our requests
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.12124.2
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get Chassis list
          # ChassisNumber;SerialNumber;Model;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.51.1
          selectColumns: "ID,3,4"
          computes:
            # LeftConcat an identifier to link to Chassis
            # MSHW;ChassisNumber;SerialNumber;Model;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          # Get the NodeName
          # NodeName;
          type: snmpGet
          oid: 1.3.6.1.4.1.12124.2.1.1.0
          computes:
            # LeftConcat an identifier to link to Chassis
            # MSHW;NodeName;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(3):
          # Join the Chassis to Node information
          # MSHW;ChassisNumber;SerialNumber;Model;MSHW;NodeName;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # Instance Table
        # Note, it's still not clear if multichassis per node is possible, we're going to assume not for now
        # MSHW;ChassisNumber;SerialNumber;Model;MSHW;NodeName;
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $6
          vendor: EMC
          model: $4
          type: Storage
          serial_number: $3
          name: "${awk::sprintf(\"Storage: %s (%s %s)\", $6, \"EMC\", $4)}"
    collect:
      # Collect type is mono-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Get the NodeHealth
          # NodeHealth;
          type: snmpGet
          oid: 1.3.6.1.4.1.12124.2.1.2.0
          computes:
            # LeftConcat an identifier to link to Chassis
            # MSHW;NodeHealth;
          - type: leftConcat
            column: 1
            value: MSHW;
            # Translate the NodeHealth
            # Translate Status into PATROLStatus
            # MSHW;PatrolStatus;
          - type: translate
            column: 2
            translationTable: "${translation::enclosureStatusTranslationTable}"
        source(2):
          # Attach the NodeHealth to all node chassis instances
          # We don't deal with multichassis for the moment (if this even exists)
          # MSHW;ChassisNumber;SerialNumber;Model;MSHW;PatrolStatus;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(1)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # ValueTable = Source(1)
        # MSHW;ChassisNumber;SerialNumber;Model;MSHW;PatrolStatus;
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="enclosure"}: $6
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the diskEntry snmp table
          # ID;ChassisNumber;Model;SerialNumber;FirmwareVersion;Size;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.52.1
          selectColumns: "ID,3,6,7,8,9"
          computes:
            # Duplicate the ID
            # ID;ID;ChassisNumber;Model;SerialNumber;FirmwareVersion;Size;
          - type: duplicateColumn
            column: 1
            # LeftConcat Bay to the Display ID
            # ID;DisplayID;ChassisNumber;Model;SerialNumber;FirmwareVersion;Size;
          - type: leftConcat
            column: 2
            value: 'Bay '
      mapping:
        # The instance table = Source(1)
        # Chassis number seems to be incorrect, so we're going to have to wait until we see a multichassis node debug (if such a system exists)
        # ID;DisplayID;ChassisNumber;Model;SerialNumber;FirmwareVersion;Size;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          model: $4
          serial_number: $5
          firmware_version: $6
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, bytes2HumanFormatBase10($7))}"
        metrics:
          hw.physical_disk.size: $7
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the diskEntry snmp table
          # ID;status;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.52.1
          selectColumns: "ID,5"
          computes:
            # Duplicate the status column
            # ID;status;status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL status
            # ID;PATROLstatus;status;
          - type: translate
            column: 2
            translationTable: "${translation::PhysicalDiskStatusTranslationTable}"
      mapping:
        # The ValueTable = source(1)
        # ID;PATROLstatus;status;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = the fanEntry snmp table
          # ID;Name;Description;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.53.1
          selectColumns: "ID,2,3,4"
          computes:
            # Duplicate the Description column
            # ID;Name;Description;Description;Speed;
          - type: duplicateColumn
            column: 3
            # Extract everything from before a : in the description
            # ID;Name;Description;Description[1];Speed;
          - type: extract
            column: 4
            subColumn: 1
            subSeparators: ':'
          # Add : to the Description[1]
          - type: rightConcat
            column: 4
            value: ':'
            # Remote the first part of the description from the actual Description if there's a :
            # ID;Name;Description;Description[1];Speed;
          - type: replace
            column: 3
            existingValue: $4
            newValue: ""
            # Translate second name column to Warning and Alarm Thresholds
            # ID;WarnThreshold;Alarmthreshold;Description;Description[1];Speed;
          - type: translate
            column: 2
            translationTable: "${translation::FanThresholdTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # ID;WarnThreshold;Alarmthreshold;Description;Description[1];Speed;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          name: $4
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $2
          hw.fan.speed.limit{limit_type="low.critical"}: $3
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the fanEntry snmp table
          # ID;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.53.1
          selectColumns: "ID,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.fan.speed: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = the TemperatureEntry snmp table
          # ID;Name;Description;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.54.1
          selectColumns: "ID,2,3,4"
          computes:
            # Duplicate the Description column
            # ID;Name;Description;Description;Temperature;
          - type: duplicateColumn
            column: 3
            # Extract everything from before a : in the description
            # ID;Name;Description;Description[1];Temperature;
          - type: extract
            column: 4
            subColumn: 1
            subSeparators: ':'
          # Add : to the Description[1]
          - type: rightConcat
            column: 4
            value: ':'
            # Remote the first part of the description from the actual Description if there's a :
            # ID;Name;Description;Description[1];Temperature;
          - type: replace
            column: 3
            existingValue: $4
            newValue: ""
            # Translate second name column to Warning and Alarm Thresholds
            # ID;WarnThreshold;Alarmthreshold;Description;Description[1];Temperature;
          - type: translate
            column: 2
            translationTable: "${translation::TemperatureThresholdTranslationTable}"
            # Remote Temp from DisplayID
            # ID;WarnThreshold;Alarmthreshold;Description;Description[1];Temperature;
          - type: replace
            column: 4
            existingValue: Temp
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # ID;WarnThreshold;Alarmthreshold;Description;Description[1];Temperature;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          name: $4
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $2
          hw.temperature.limit{limit_type="high.critical"}: $3
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the TemperatureEntry snmp table
          # ID;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.54.1
          selectColumns: "ID,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = the VoltageEntry snmp table
          # ID;Name;Description;Voltage;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.55.1
          selectColumns: "ID,2,3,4"
          computes:
            # Duplicate the Description column
            # ID;Name;Description;Description;Voltage;
          - type: duplicateColumn
            column: 3
            # Extract everything from before a : in the description
            # ID;Name;Description;Description[1];Voltage;
          - type: extract
            column: 4
            subColumn: 1
            subSeparators: ':'
          # Add : to the Description[1]
          - type: rightConcat
            column: 4
            value: ':'
            # Remote the first part of the description from the actual Description if there's a :
            # ID;Name;Description;Description[1];Voltage;
          - type: replace
            column: 3
            existingValue: $4
            newValue: ""
            # Translate second name column to Warning and Alarm Thresholds
            # ID;LowerThreshold;UpperThreshold;Description;Description[1];Voltage;
          - type: translate
            column: 2
            translationTable: "${translation::VoltageThresholdTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # ID;LowerThreshold;UpperThreshold;Description;Description[1];Voltage;
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          name: $4
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $2
          hw.voltage.limit{limit_type="high.degraded"}: $3
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the VoltageEntry snmp table
          # ID;Voltage;
          type: snmpTable
          oid: 1.3.6.1.4.1.12124.2.55.1
          selectColumns: "ID,4"
          computes:
          # Convert to mV
          - type: multiply
            column: 2
            value: 1000
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.voltage: $2
translations:
  VoltageThresholdTranslationTable:
    V3.3_CMD: 3030;3560
    VCC_1V8: 1660;1940
    V1.8: 1660;1940
    V3.3: 3030;3560
    V5.0: 4600;5400
    BB +1.1V STBY: 1060;1150
    BB +1.8V AUX: 1730;1870
    BB 1.5V P2DDR CD: 1410;1590
    "1.8vSFC": 1710;1890
    VCC_1V0: 920;1080
    BB +12.0V: 2490;
    VCC_5V0: 4600;5400
    VCC_3V3: 3030;3560
    BB +3.3V: 3070;3510
    V5.0_NVRAM: 4600;5400
    BB +3.3V AUX: 3070;3510
    V5.0_STBY: 4600;5400
    vacps2: ;
    vacps1: ;
    "5vFPF": 4600;5400
    BB +3.0V VBAT: 2490;
    BB +1.2V P1vcc: 570;1440
    VCC_5V0_SB: 4600;5400
    "3.3vSB": 3170;3440
    nv2Vcur: 2490;
    "1.0vSFC": 950;1050
    BB 1.5V P1DDR CD: 1410;1590
    V12.0_MB1: 11020;12960
    "1.5v": 1440;1560
    PS OUT VOLT 2: 11400;12800
    "3.3v": 3070;3510
    PS OUT VOLT 1: 11400;12800
    V12.0: 11020;12960
    V12.0_MB0: 11020;12960
    PS IN VOLT 1: ;
    PS IN VOLT 2: ;
    "12vSFC": 11020;12960
    BB +5.0V: 4630;5350
    "3.3vSFC": 3030;3560
    nv1Vcur: 2490;
    V1.0: 920;1080
    BB +1.2V VCCP1: 570;1440
    V5.0_FP_X: 4600;5400
    V12.0_FAN3: 11020;12960
    V12.0_FAN1: 11020;12960
    V12.0_FAN2: 11020;12960
    BB 1.5V P2DDR AB: 1410;1590
    vDimmCPU0: 1170;1620
    V3.3_STBY: 3030;3560
    VCC_5V0_CBL: 4600;5400
    vCore0: 510;1590
    "5v": 4600;5400
    BB +3.0V Vbat: 2490;
    BB 1.5V P1DDR AB: 1410;1590
    VCC_12V0: 11020;12960
    V12.0_BB_A: 11020;12960
    "5vSB": 4670;5330
    BB -12.0V: -13230;-10640
    Default: ;
    "5vSFC": 4600;5400
    BB +1.35 P2LV CD: 570;1440
    vdcps2: 11400;12800
    vdcps1: 11400;12800
    "12v": 11020;12960
    BB +1.35 P1LV AB: 570;1440
    BB +5.0V STBY: 4630;5350
    BB +1.2V P2vcc: 570;1440
  TemperatureThresholdTranslationTable:
    tutCPU1: ;73
    SSB Temp: ;95
    LSI CORE TEMP: ;73
    tutCPU0: ;73
    PS TEMP 2: ;95
    PS TEMP 1: ;95
    P1 DTS Therm Mgn: 0;10
    TEMP SENSOR 2: ;50
    tSystem: ;62
    tSFC1: ;50
    TEMP SENSOR 1: ;50
    tSFC2: ;50
    BB EDGE Temp: ;65
    P2 Therm Margin: 0;10
    BB BMC Temp: ;100
    P1 Therm Margin: 0;10
    BB MEM VR Temp: ;115
    BB P2 VR Temp: ;115
    tps1: ;98
    Default: ;
    DIMM Thrm Mrgn 1: 0;5
    P2 DTS Therm Mgn: 0;10
    DIMM Thrm Mrgn 3: 0;5
    BB P1 VR Temp: ;115
    DIMM Thrm Mrgn 2: 0;5
    DIMM Thrm Mrgn 4: 0;5
    tFP: ;38
  FanThresholdTranslationTable:
    FAN TAC SENSOR 4: 6300;
    FAN TAC SENSOR 3: 6300;
    FAN TAC SENSOR 2: 6300;
    PS FAN SPEED 1: ;0
    FAN TAC SENSOR 1: 6300;
    PS FAN SPEED 2: ;0
    Default: ;0
    PS FAN SPEED 3: ;0
    PS FAN SPEED 4: ;0
    fisi3: 6300;
    fisi4: 6300;
    fisi1: 6300;
    fisi2: 6300;
    fps11: ;0
    fps22: ;0
    fps21: ;0
    fps12: ;0
  PhysicalDiskStatusTranslationTable:
    NEW: degraded
    WRONG_TYPE: degraded
    SED_ERROR: failed
    L3: ok
    JOURNAL: ok
    SMARTFAIL: degraded
    HEALTHY: ok
    BOOT_DRIVE: ok
    PREPARING: degraded
    STALLED: ok
    Default: failed
    NOT: failed
    UNENCRYPTED: failed
    ERASE: degraded
    RESTRIPE: degraded
    SUSPENDED: degraded
    INSECURE: failed
    USED: degraded
    REPLACE: failed
  enclosureStatusTranslationTable:
    "0": ok
    "1": degraded
    "2": failed
    "3": UNKNOWN
    Default: UNKNOWN
