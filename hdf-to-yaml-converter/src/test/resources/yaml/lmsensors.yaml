---
embedded:
  EmbeddedFile(1): |-
    BEGIN {
            FS=":" ; Manufacturer="" ; Type=""
    }
    {
    if ( $1 ~  /Manufacturer/ )  { Manufacturer = $2; }
    if  ($1 ~ /Product Name/ ) { Type = $2 }
    if ($1 ~ /Serial Number/ ) {SN = $2 ;  print ("MSHW;"Manufacturer";"Type";"SN";" ); }
    }
  EmbeddedFile(3): |-
    BEGIN {
            Name="" ; Type="" ; Sensor=""; Value="";Max="";Critical=""; TEMP=0
    }
    {
    if(NF == 1 && $0 !~ /:/)  {Name = $1}
    if(NF == 1 && $0 ~ /:/ && TEMP == 1 ) {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical =""; TEMP =0 }
    if(NF == 1 && $0 ~ /:/ && TEMP == 0) {Type = $0; gsub(/:/,"",Type)}
    if(NF == 2 && $2 ~ /:/ && TEMP == 1) {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical = ""; TEMP=0}
    if(NF == 2 && $2 ~ /:/ && TEMP == 0) {Type = $0; gsub(/:/,"",Type); gsub(" ","",Type)}
    if(NF == 2 && $1 ~ /temp/) { Sensor = $1 ; gsub(/:/,"",Sensor) ;
            if ($1 ~ /temp[0-9]_input:/ || $1 ~ /temp[0-9][0-9]_input:/) { Value = $2; TEMP=1 }
            if ($1 ~ /temp[0-9]_max:/ || $1 ~ /temp[0-9][0-9]_max:/) { Max = $2; if (Max <=0) {Max=""}}
            if ($1 ~ /temp[0-9]_crit:/ || $1 ~ /temp[0-9][0-9]_crit:/&& length($1) == 11 ) { Critical = $2 ; if (Critical <=0) {Critical = ""};
                    if ( Max == Value && Value == Critical) { Max = ""; Critical = ""}
                    if ( Max == Critical && Max > 0) { Max = Max - Critical/10 }
                    if ( Max == 0 && Critical > 0 ) { Max = Critical - Critical/10 }
                    print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical ="" ; TEMP=0}
         }
    if(NF == 1 && TEMP ==1 && $0 !~ /temp/)  {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical =""; TEMP=0}
    if(NF == 0 && TEMP ==1 && $0 !~ /temp/)  {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical =""; TEMP=0}
    if(NF >= 3 && TEMP ==1 && $0 !~ /temp/)  {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical =""; TEMP=0}
    if(NF >= 3 && $0 !~ /temp/)  {Type = $0; gsub(/:/,"",Type)}
    }
    END { if (TEMP == 1) {print ("MSHW;"Name"-"Type";"Type";"Value";"Max";"Critical";"); Value = ""; Max = ""; Critical =""; TEMP=0} }
  EmbeddedFile(2): |-
    BEGIN {
            FS=":" ; Vendor="" ; Version =""; Date=""
    }
    {
    if ( $1 ~  /Vendor/ ) { Vendor = $2; }
    if  ($1 ~ /Version/ ) { Version = $2 ; }
    if  ($1 ~ /Release Date/ ) { Date = $2 ; print("MSHW;""Vendor:"Vendor " Version:" Version " Date:" Date) }
    }
  EmbeddedFile(5): |-
    BEGIN {

             DName="" ;  FName="" ; Value=""; Min=""; Max=""; Alarm=""
    }
    {
    if(NF == 1 && $1 !~ /:/)  {DName = $1}
    if(NF == 1 && $1 ~ /fan/ && $1 ~ /:/)  {FName = $1 ; gsub(/:/,"",FName)}
    if(NF == 2) {
            if ($1 ~ /fan[0-9]_input/) { Value = $2 ; if (Value <= 0) {Value=""}}
            if ($1 ~ /fan[0-9]_min/ ) { Min = $2 ; if (Min <= 0) {Min=""}}
            if ($1 ~ /fan[0-9]_max/ ) { Max = $2 ; if (Max <= 0) {Max=""}}
            if ($1 ~ /fan[0-9]_alarm/) { Alarm = $2 ; if (Alarm <= 0) {Alarm =""}}
            if ($1 ~ /fan[0-9]_pulses/  ) {
                    print ("MSHW;"DName"-"FName";"Value";"Min";"Max";"Alarm";")}
         }
    }
  EmbeddedFile(4): |-
    BEGIN {
            FS=" " ; Name="" ; Type="" ; Unit=""; Value=""; Lower=""; Upper=""
    }
    {
    if(NF == 1 && $0 !~ /:/) {Name = $1}

    if ($3 ~ /V/ ) {Value= $2 ; Unit= $3 ; if (Unit == "V") { Value=Value*1000}
             Lower=$6; gsub(/\+/,"",Lower); if (Lower == 0) {Lower=""};
             Upper=$10; gsub(/\+/,"",Upper); if (Upper == 0) {Upper=""} else {Upper = Upper*1000};
             {Type = $1; gsub(/:/,"",Type)};
              print ("MSHW;"Name"-"Type";"Type";" Value ";"Lower";"Upper";")}
    }
connector:
  displayName: lm_sensors
  platforms: Any system
  reliesOn: lm_sensors
  information: "Provides the monitoring environment sensors on Linux, through the sensors command."
  version: 1.1
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Linux
    criteria:
    - type: deviceType
      keep:
      - Linux
    - type: osCommand
      commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -h"
      expectedResult: "Usage: sensors "
      errorMessage: lm_sensors is not installed on this server.
sudoCommands:
- /usr/sbin/dmidecode
- /usr/bin/sensors
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          _comment: Discovery Enclosure
          type: osCommand
          commandLine: "%{SUDO:/usr/sbin/dmidecode} /usr/sbin/dmidecode -t system"
          computes:
          - _comment: '"MSHW;"Manufacturer";"Type";"SN";"'
            type: awk
            script: EmbeddedFile(1)
            keep: ^MSHW;
            separators: ;
        source(2):
          type: osCommand
          commandLine: "%{SUDO:/usr/sbin/dmidecode} /usr/sbin/dmidecode -t bios"
          computes:
          - _comment: '"MSHW;"Bios Info"'
            type: awk
            script: EmbeddedFile(2)
            keep: ^MSHW;
            separators: ;
        source(3):
          _comment: '"MSHW;"Manufacturer";"Type";"SN";"'
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(1)$
          rightTable: $monitors.enclosure.discovery.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # Enclosure Instance Table
        # "MSHW;"Name";"Type";"SN";""MSHW;"Bios Info"
        source: $monitors.enclosure.discovery.sources.source(3)$
        attributes:
          id: Computer
          __display_id: $column(3)
          vendor: $column(2)
          type: Computer
          serial_number: $column(4)
          bios_version: $column(6)
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(2), \"Computer\")"
  temperature:
    discovery:
      sources:
        source(1):
          _comment: Discovery Temperature
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -u -A"
          computes:
          - type: awk
            script: EmbeddedFile(3)
            keep: ^MSHW;
            separators: ;
      mapping:
        # Temperature Instance Table
        # "MSHW;"Name";"Type";"Value";"Max";"Critical";"
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(2)
          hw.parent.type: enclosure
          hw.parent.id: Computer
          name: $column(2)
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(5)
          hw.temperature.limit{limit_type="high.critical"}: $column(6)
    collect:
      _comment: Collection Type
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -u -A"
          computes:
          - type: awk
            script: EmbeddedFile(3)
            keep: ^MSHW;
            separators: ;
      mapping:
        # Temperature Value Table
        # "MSHW;"Name";"Type";"Value";"Max";"Critical";"
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.temperature: $column(4)
  voltage:
    discovery:
      sources:
        source(1):
          _comment: Discovery Voltage
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -A"
          computes:
          - type: awk
            script: EmbeddedFile(4)
            keep: ^MSHW;
            separators: ;
      mapping:
        # Voltage Instance Table
        # "MSHW;"Name";"Type";"Value";Lower";"Upper";"
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(2)
          voltage_type: Planar
          hw.parent.type: enclosure
          hw.parent.id: Computer
          name: "sprintf(\"%s (%s)\", $column(2), \"Planar\")"
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $column(5)
          hw.voltage.limit{limit_type="high.degraded"}: $column(6)
    collect:
      _comment: Collection Type
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -A"
          computes:
          - type: awk
            script: EmbeddedFile(4)
            keep: ^MSHW;
            separators: ;
      mapping:
        # Voltage Value Table
        # "MSHW;"Name";"Type";"Value";
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.voltage: $column(4)
  fan:
    discovery:
      sources:
        source(1):
          _comment: Discovery FAN
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -u -A"
          computes:
          - type: awk
            script: EmbeddedFile(5)
            keep: ^MSHW;
            separators: ;
      mapping:
        # FAN Instance Table
        # ""MSHW;"DName"-"FName";"Value";"Min";"Max";"Alarm";"
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(2)
          hw.parent.type: enclosure
          hw.parent.id: Computer
          name: $column(2)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $column(5)
          hw.fan.speed.limit{limit_type="low.critical"}: $column(6)
    collect:
      _comment: Collection Type
      type: multiInstance
      sources:
        source(1):
          type: osCommand
          commandLine: "%{SUDO:/usr/bin/sensors} /usr/bin/sensors -u -A"
          computes:
          - type: awk
            script: EmbeddedFile(5)
            keep: ^MSHW;
            separators: ;
      mapping:
        # Voltage Value Table
        # "MSHW;"Name";"Type";"Value";
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.fan.speed: $column(3)
