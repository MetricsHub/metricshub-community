---
connector:
  displayName: Hitachi HNAS (SNMP)
  platforms: Hitachi HNAS
  reliesOn: Hitachi HNAS SNMP Agent
  version: 1.0
  information: "This connector discovers the status of Hitachi HNAS Processors, CSW, Cache, SM, Power Supplies, Batteries, Fans, Physical Disks and Environment."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    criteria:
    # Check that there are BlueArc OIDs
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.11096.6.1.1.1.2
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # PhysicalNodeTable
          # NodeID;Name;IPAddress;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.5.9.1
          selectColumns: "1,2,3"
        source(2):
          # SerialNumbers Table
          # Type;Node;SerialNumber;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.6.1.1
          selectColumns: "1,3,4"
          computes:
            # Keep Only Type=1 (Chassis)
            # Type;NodeID;SerialNumber;
          - type: keepOnlyMatchingLines
            column: 1
            valueList: 1
        source(3):
          # Source(3) = TableJoint of 1 & 2
          # NodeID;Name;IPAddress;Type;Node;SerialNumber;
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(1)$
          rightTable: $monitors.enclosure.discovery.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 2
          defaultRightLine: ;;;
          computes:
          - type: leftConcat
            column: 3
            value: "IP Address: "
      mapping:
        # Instance Table
        # NodeID;Name;IPAddress;Type;Node;SerialNumber;
        source: $monitors.enclosure.discovery.sources.source(3)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          vendor: Hitachi
          model: HNAS
          serial_number: $column(6)
          type: Storage
          info: $column(3)
          name: "sprintf(\"Storage: %s (%s %s)\", $column(2), \"Hitachi\", \"HNAS\")"
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # NodeID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.5.9.1
          selectColumns: "1,4"
          computes:
            # Duplicate status
            # NodeID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # NodeID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: nodeStatusTranslationTable
            # Translate second Status into more readable string
            # NodeID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: nodeStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.enclosure.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="enclosure"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  temperature:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  Temperature Table
          # ID;PNodeID;DisplayID;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.9.1
          selectColumns: "ID,1,2"
      mapping:
        # InstanceTable = Source(1)
        # ID;PNodeID;
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(3)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;Status;Reading;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.9.1
          selectColumns: "ID,3,4"
          computes:
            # Duplicate status
            # ID;Status;Status;Reading;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;Reading;
          - type: translate
            column: 2
            translationTable: temperatureStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;Reading;
          - type: translate
            column: 3
            translationTable: temperatureStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PATROLStatus;StatusInformation;Reading;
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="temperature"}: $column(2)
          hw.temperature: $column(4)
        legacyTextParameters:
          StatusInformation: $column(3)
  fan:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  Fan. Table
          # ID;PNodeID;DisplayID;FittedStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.11.1
          selectColumns: "ID,1,2,3"
          computes:
            # Keep only Fans that are "Fitted"
            # ID;PNodeID;DisplayID;FittedStatus;
          - type: keepOnlyMatchingLines
            column: 4
            valueList: "1,2"
      mapping:
        # InstanceTable = Source(1)
        # ID;PNodeID;DisplayID;FittedStatus;
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(3)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;FittedStatus;SpeedStatus;Reading;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.11.1
          selectColumns: "ID,3,4,5"
          computes:
            # Duplicate status
            # ID;FittedStatus;SpeedStatus;Reading;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;SpeedStatus;Reading;
          - type: translate
            column: 2
            translationTable: fanFittedStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;SpeedStatus;Reading;
          - type: translate
            column: 3
            translationTable: fanFittedStatusInformationTranslationTable
            # Duplicate status
            # ID;PATROLStatus;StatusInformation;SpeedStatus;SpeedStatus;Reading;
          - type: duplicateColumn
            column: 4
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;StatusInformation;PatrolStatus;SpeedStatus;Reading;
          - type: translate
            column: 4
            translationTable: fanSpeedStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;PatrolStatus;StatusInformation;Reading;
          - type: translate
            column: 5
            translationTable: fanSpeedStatusInformationTranslationTable
            # Concat the Status together
            # ID;CombinedPATROLStatus;StatusInformation;PatrolStatus;StatusInformation;Reading;
          - type: rightConcat
            column: 2
            value: '|'
          - type: rightConcat
            column: 2
            value: Column(4)
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # ID;CombinedPATROLStatus;StatusInformation;PatrolStatus;StatusInformation;Reading;
          - type: convert
            column: 2
            conversion: array2SimpleStatus
            # Concat the Status Information
            # ID;CombinedPATROLStatus;CombinedStatusInformation;PatrolStatus;StatusInformation;Reading;
          - type: rightConcat
            column: 3
            value: Column(5)
      mapping:
        # Value Table
        # ID;CombinedPATROLStatus;CombinedStatusInformation;PatrolStatus;StatusInformation;Reading;
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
          hw.fan.speed: $column(6)
        legacyTextParameters:
          StatusInformation: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  PowerSupply. Table
          # ID;PNodeID;DisplayID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.13.1
          selectColumns: "ID,1,2,3"
          computes:
            # Keep only Fans that are "Fitted"
            # ID;PNodeID;DisplayID;Status;
          - type: keepOnlyMatchingLines
            column: 4
            valueList: "1,2"
      mapping:
        # InstanceTable = Source(1)
        # ID;PNodeID;DisplayID
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(3)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.13.1
          selectColumns: "ID,3"
          computes:
            # Duplicate status
            # ID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: powerSupplyStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: powerSupplyStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PATROLStatus;StatusInformation;
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  battery:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  Battery. Table
          # ID;PNodeID;DisplayID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.13.1
          selectColumns: "ID,1,2,3"
          computes:
            # Exclude Battery that are not "Fitted" or we are told to ignore
            # ID;PNodeID;DisplayID;Status;
          - type: excludeMatchingLines
            column: 2
            valueList: "3,11"
      mapping:
        # InstanceTable = Source(1)
        # ID;PNodeID;DisplayID
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(3)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.13.1
          selectColumns: "ID,3"
          computes:
            # Duplicate status
            # ID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: batteryStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: batteryStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PATROLStatus;StatusInformation;
        source: $monitors.battery.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="battery"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  PhysicalDisk. Table
          # ID;PNodeID;DisplayID;Type;Size;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.15.1
          selectColumns: "ID,1,2,3,6"
          computes:
          # Translate the Type
          - type: translate
            column: 4
            translationTable: physicalDiskTranslationTable
          # Multiply the Size by 4096
          - type: multiply
            column: 5
            value: 4096
      mapping:
        # InstanceTable = Source(1)
        # ID;PNodeID;DisplayID
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          vendor: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s - %by10hf.s)\", $column(3), $column(4), $column(5))"
        metrics:
          hw.physical_disk.size: $column(5)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.2.1.15.1
          selectColumns: "ID,4"
          computes:
            # Duplicate status
            # ID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: physicalDiskStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: physicalDiskStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PATROLStatus;StatusInformation;
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = fcStatisticsEntry
          # ID;Enabled;Node;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.3.6.25.1
          selectColumns: "ID,3,1"
          computes:
            # Exclude ports are disabled
            # ID;Enabled;Node;
          - type: excludeMatchingLines
            column: 2
            valueList: 2
      mapping:
        # InstanceTable = Source(1)
        # ID;Enabled;Node;
        source: $monitors.network.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: $column(3)
          name: $column(1)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = fcStatisticsEntry
          # ID;Status;LinkSpeed;ReceivedBytes;TransmittedBytes;SignalError;BadRXError;SyncError;LinkFailError;RXEOFErrors;DiscardedFrameError;BadCRC;ProtocolErrors;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.3.6.25.1
          selectColumns: "ID,4,5,11,12,13,14,15,16,17,18,19,20"
          computes:
            # Add all the errors together
            # ID;Status;LinkSpeed;ReceivedBytes;TransmittedBytes;TotalErrors;BadRXError;SyncError;LinkFailError;RXEOFErrors;DiscardedFrameError;BadCRC;ProtocolErrors;
            #  1     2      3           4            # 5           6            # 7           8        9            # 10        11            #   12          13
          - type: add
            column: 6
            value: Column(7)
          - type: add
            column: 6
            value: Column(8)
          - type: add
            column: 6
            value: Column(9)
          - type: add
            column: 6
            value: Column(10)
          - type: add
            column: 6
            value: Column(11)
          - type: add
            column: 6
            value: Column(12)
          - type: add
            column: 6
            value: Column(13)
            # Multiply speed to get MBPS
            # ID;Status;LinkSpeed;ReceivedBytes;TransmittedBytes;TotalErrors;BadRXError;SyncError;LinkFailError;RXEOFErrors;DiscardedFrameError;BadCRC;ProtocolErrors;
            #  1     2      3           4            # 5           6            # 7           8        9            # 10        11            #   12          13
          - type: multiply
            column: 3
            value: 1000
            # Translate Link Status
            # ID;LinkStatus;LinkSpeed;ReceivedBytes;TransmittedBytes;TotalErrors;BadRXError;SyncError;LinkFailError;RXEOFErrors;DiscardedFrameError;BadCRC;ProtocolErrors;
          - type: translate
            column: 2
            translationTable: GenericLinkStatusTranslationTable
      mapping:
        # Instance Table
        # ID;Status;LinkSpeed;ReceivedBytes;TransmittedBytes;TotalErrors;BadRXError;SyncError;LinkFailError;RXEOFErrors;DiscardedFrameError;BadCRC;ProtocolErrors;
        #  1     2      3        #  4        #     5        #  6        #     7        #  8        9        #     10        11        #       12        # 13
        source: $monitors.network.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.network.up: legacyLinkStatus($column(2))
          hw.network.bandwidth.limit: megaBit2Bit($column(3))
          hw.errors{hw.type="network"}: $column(6)
          hw.network.packets{direction="transmit"}: $column(5)
          hw.network.packets{direction="receive"}: $column(4)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source (1) = Get the  LogicalDisk. Table
          # ID;WWN;LUN;Status;Capacity;RaidLevel;CacheMode;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.3.4.2.1
          selectColumns: "ID,2,3,4,5,6,7"
          computes:
          # Translate the RaidLevel
          - type: translate
            column: 6
            translationTable: raidLevelTranslationTable
          # Translate the CacheMode
          - type: translate
            column: 7
            translationTable: cacheLevelTranslationTable
            # Exclude Logical Disks that are "Not Present"
            # ID;WWN;LUN;Status;Capacity;RaidLevel;CacheMode;
          - type: excludeMatchingLines
            column: 4
            valueList: 4
            # Add some descriptors
            # ID;WWN;LUN;Status;Capacity;RaidLevel;CacheMode;
          - type: leftConcat
            column: 2
            value: "WWN: "
          - type: leftConcat
            column: 3
            value: "LUN: "
          - type: leftConcat
            column: 7
            value: "Cache Mode: "
      mapping:
        # InstanceTable = Source(1)
        # ID;WWN;LUN;Status;Capacity;RaidLevel;CacheMode;
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          raid_level: $column(6)
          info: "join($column(2), $column(3), $column(7), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: 1
          name: "sprintf(\"%s (%s - %by2hf.s)\", $column(1), $column(6), $column(5))"
        metrics:
          hw.logical_disk.limit: $column(5)
    collect:
      # Collect type is multi-instance (execute once)
      type: multiInstance
      sources:
        source(1):
          # PServer Table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.11096.6.1.1.1.3.4.2.1
          selectColumns: "ID,4"
          computes:
            # Duplicate status
            # ID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus.
            # ID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: logicalDiskStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: logicalDiskStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;PATROLStatus;StatusInformation;
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  fanFittedStatusInformationTranslationTable:
    "1": ""
    "2": "Fitted correctly, but ID is wrong. "
    "3": 'Fan is Missing. '
    Default: 'Unknown Fitted Status '
  batteryStatusInformationTranslationTable:
    "11": Battery status changed to ignore
    "1": ""
    "2": Fault
    "3": Missing
    "4": Initializing
    "5": Charging - Normal
    "6": Discharging
    "7": Self Testing
    "8": Not Responding
    "9": Low
    Default: Unknown Status
    "10": Very Low
  physicalDiskTranslationTable:
    "1": ""
    "2": Volume
    "3": Swap
    Default: ""
  fanFittedStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": failed
    Default: UNKNOWN
  logicalDiskStatusTranslationTable:
    "1": ok
    "2": failed
    "3": failed
    "4": failed
    "5": degraded
    "6": failed
    "7": degraded
    "8": degraded
    "9": UNKNOWN
    Default: UNKNOWN
  physicalDiskStatusTranslationTable:
    "1": UNKNOWN
    "2": degraded
    "3": degraded
    "4": failed
    "5": failed
    "6": ok
    Default: UNKNOWN
  fanSpeedStatusInformationTranslationTable:
    "1": ""
    "2": 'Speed at Warning Level. '
    "3": 'Speed at Severe Level. '
    Default: 'Unknown Speed Status '
  temperatureStatusInformationTranslationTable:
    "1": ""
    "2": Outside of expected range but not severe.
    "3": Severely outside expected range.
    "4": Sensor unit has failed.  Temperature value is invalid.
    "5": Warning Condition
    "6": Unknown
    Default: Unknown Status
  cacheLevelTranslationTable:
    "1": "Cache Mode: Write Through"
    "2": "Cache Mode: Write Back"
    "3": ""
  batteryStatusTranslationTable:
    "11": degraded
    "1": ok
    "2": failed
    "3": failed
    "4": ok
    "5": ok
    "6": ok
    "7": ok
    "8": failed
    "9": degraded
    Default: UNKNOWN
    "10": failed
  logicalDiskStatusInformationTranslationTable:
    "1": Online
    "2": Corrupt
    "3": Failed
    "4": Not Present
    "5": Disconnected
    "6": Offline
    "7": Initializing
    "8": Formatting
    "9": Unknown
    Default: Unknown Status
  physicalDiskStatusInformationTranslationTable:
    "1": Unknown
    "2": Degraded
    "3": Rebuilding
    "4": Failed
    "5": Invalid
    "6": Good
    Default: Unknown Status
  nodeStatusInformationTranslationTable:
    "2": Up
    "3": Not Up
    "4": On Line
    "5": Dead
    "6": Dormant
    Default: Unknown Status
  GenericLinkStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": degraded
  fanSpeedStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": failed
    Default: UNKNOWN
  nodeStatusTranslationTable:
    "2": ok
    "3": failed
    "4": ok
    "5": failed
    "6": degraded
    Default: UNKNOWN
  powerSupplyStatusInformationTranslationTable:
    "1": ""
    "2": Failed.
    "3": Missing.
    Default: Unknown Status
  temperatureStatusTranslationTable:
    "1": ok
    "2": ok
    "3": failed
    "4": ok
    "5": failed
    "6": UNKNOWN
    Default: UNKNOWN
  raidLevelTranslationTable:
    "1": Raid 0
    "2": Raid 1
    "3": Raid 3
    "4": Raid 5
    "5": Raid 10
    "6": JBOD
    "7": RAID 30
    "8": Raid 50
    Default: ""
  powerSupplyStatusTranslationTable:
    "1": ok
    "2": failed
    "3": failed
    Default: UNKNOWN
