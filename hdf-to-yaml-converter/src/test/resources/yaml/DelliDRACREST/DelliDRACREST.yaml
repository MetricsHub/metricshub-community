---
connector:
  displayName: Dell iDRAC9 (REST)
  platforms: iDRAC9 REST
  version: 1.0
  information: "This connector provides hardware monitoring through Dell's iDRAC Management Card for Dell servers with iDRAC9 or later. It monitors the Enclosure and Physical Disks as well as the various environment sensors (CPUs, temperatures, fans, power supplies, Memory, Disk Controllers, batteries and Network cards)."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    # Hardware Sentry v10.2.00+
    - type: productRequirements
      kmVersion: 10.2.00
    - type: http
      method: GET
      url: /redfish/v1
      header: "${file::embeddedFile-1}"
      expectedResult: Integrated Dell Remote Access Controller
      errorMessage: Invalid credentials / not an iDRAC
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /redfish/v1/Systems
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2
          header: "${file::embeddedFile-1}"
          resultContent: body
        source(4):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/SKU;/Model;/SerialNumber;/Manufacturer;
            separator: ;
        source(5):
          type: http
          method: GET
          url: redfish/v1/Chassis
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(6):
          type: http
          method: GET
          url: $2
          header: "${file::embeddedFile-1}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(5)}"
            concatMethod: json_array_extended
          resultContent: body
        source(7):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Links/PoweredBy
            properties: ../../../Column(2);/@odata.id;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
      mapping:
        # Enclosure Instance Table
        # JsonID;<System>;SKU;Model;SerialNumber;Manufacturer
        source: "${source::monitors.enclosure.discovery.sources.source(4)}"
        attributes:
          id: $2
          __display_id: $3
          model: $4
          serial_number: $3
          vendor: $6
          type: Server
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $3, $6, $4)}"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(7)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Name;/Status/Health;/Status/Health;/PowerOutputWatts;
            separator: ;
        source(3):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-2}"
        source(4):
          type: tableJoin
          leftTable: "${source::monitors.enclosure.collect.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(3)}"
          leftKeyColumn: 2
          rightKeyColumn: 2
          defaultRightLine: ;;;;;;
      mapping:
        # Enclosure Value Table
        # JsonID;<System>;PatrolStatus;StatusInformation
        source: "${source::monitors.enclosure.collect.sources.source(4)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="enclosure"}: $3
          hw.enclosure.power: $7
          hw.enclosure.energy: fakeCounter($7)
        legacyTextParameters:
          StatusInformation: $4
  cpu:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2/Processors
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.cpu.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);Id;Manufacturer;Model;Name;MaxSpeedMHz;
            separator: ;
      mapping:
        # CPU Instance Table
        # JsonID;<System>;Id;Manufacturer;Model;Name;CurrentClockSpeedMhz;
        source: "${source::monitors.cpu.discovery.sources.source(2)}"
        attributes:
          id: $6
          vendor: $4
          model: $5
          __display_id: $6
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $6, $4, $5, megaHertz2HumanFormat($7))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($7)
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.cpu.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: /Name;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # CPU collect value table
        # JsonId;Id;PatrolStatus;StatusInformation;
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="cpu"}: $3
        legacyTextParameters:
          StatusInformation: $4
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2/Memory
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.memory.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Name;/SerialNumber;/PartNumber;/Manufacturer;/VolatileSizeMiB;
            separator: ;
      mapping:
        # Memory Instance Table
        # JsonId;<System>;Name;SerialNumber;PartNumber;Manufacturer;VolatileSizeMiB;
        source: "${source::monitors.memory.discovery.sources.source(2)}"
        attributes:
          id: $4
          __display_id: $3
          serial_number: $4
          model: $5
          vendor: $6
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $3, $6, $7)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($7)
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.memory.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: /SerialNumber;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Memory Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="memory"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Links/CooledBy
            properties: ../../../Column(2);/@odata.id;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.fan.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/FanName;
            separator: ;
      mapping:
        # Fan Instance Table
        # JsonID;<System>;FanName;
        source: "${source::monitors.fan.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $3
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.fan.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: /FanName;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Fan Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="fan"}: $3
        legacyTextParameters:
          StatusInformation: $4
  disk_controller:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(6)}"
          computes:
          - type: json2csv
            entryKey: Entry/Value/Links/Storage
            properties: "../../../Column(2);/@odata.id;../ComputerSystems[0]/@odata.id;"
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/StorageControllers
            properties: ../../Column(4);/MemberId;/Name;/Model;/Manufacturer;/Status/State;../Drives@odata.count;../Oem/Dell/DellController/ControllerFirmwareVersion;
            separator: ;
          # Keep only Controllers marked as Enabled
          - type: keepOnlyMatchingLines
            column: 7
            regExp: Enabled
          # Exclude diskControllers with no drives
          - type: excludeMatchingLines
            column: 8
            regExp: 0
      mapping:
        # DiskController Instance Table
        # JsonId;<System>;MemberId;Name;Model;Manufacturer;State;
        source: "${source::monitors.disk_controller.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $4
          model: $5
          vendor: $6
          firmware_version: $9
          controller_number: $2
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"Disk Controller: %s (%s %s)\", $4, $6, $5)}"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: Entry/Value/StorageControllers
            properties: /MemberId;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # DiskController Value Table
        # JsonID;<System>;PatrolStatus;StatusInformation;
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="disk_controller"}: $3
        legacyTextParameters:
          StatusInformation: $4
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(6)}"
          computes:
          - type: json2csv
            entryKey: Entry/Value/Links/Storage
            properties: "../../../Column(2);/@odata.id;../ComputerSystems[0]/@odata.id;"
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Drives
            properties: ../Id;/@odata.id;../../Column(4);../Status/Health;
            separator: ;
          - type: excludeMatchingLines
            column: 5
            regExp: "null"
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
        source(3):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(4);../Column(2);/Manufacturer;/Model;/SerialNumber;/Name;/CapacityBytes;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
      mapping:
        # PhysicalDisk Instance Table
        # JsonId;<System>;Manufacturer;Model;SerialNumber;Name;CapacityBytes;
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $6
          vendor: $4
          model: $5
          serial_number: $6
          __display_id: $7
          hw.parent.type: disk_controller
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s - %s)\", $7, $4, bytes2HumanFormatBase10($8))}"
        metrics:
          hw.physical_disk.size: $8
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: /SerialNumber;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # PhysicalDisk Value Table
        # JsonID;Name;PatrolStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(7)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/
            properties: ../../Column(2);/Name;/SerialNumber;/PowerCapacityWatts;/InputRanges/InputType;
            separator: ;
          - type: leftConcat
            column: 4
            value: "SerialNumber: "
      mapping:
        # PowerSupply Instance Table
        # JsonID;<System>;Name;SerialNumber;PowerCapacityWatts;InputType;"
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $3
          power_supply_type: $6
          info: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s W)\", $3, $6, $5)}"
        metrics:
          hw.power_supply.limit: $5
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(2)}"
          computes:
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Power Supply Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="power_supply"}: $4
        legacyTextParameters:
          StatusInformation: $5
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(3)}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Links/Oem/Dell/DellSensorCollection
            properties: ../../../../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.battery.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/ElementName;Id
            separator: ;
          # Keep only Batteries
          - type: keepOnlyMatchingLines
            column: 3
            regExp: battery
      mapping:
        # Battery Instance Table
        # JSONid;<System>;ElementName;Id;
        source: "${source::monitors.battery.discovery.sources.source(2)}"
        attributes:
          id: $4
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $3
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.battery.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: Entry/Value/Members
            properties: /ElementName;/Id;/HealthState;/CurrentState;
            separator: ;
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Battery Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $3
        metrics:
          hw.status{hw.type="battery"}: $4
        legacyTextParameters:
          StatusInformation: $5
  temperature:
    discovery:
      sources:
        source(1):
          # Discovery
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(6)}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value/
            properties: "/@odata.id;/Links/ComputerSystems[0]/@odata.id;"
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.temperature.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $2/Thermal
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Temperatures
            properties: ../../Column(3);/MemberId;/Name;/PhysicalContext;
            separator: ;
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
      mapping:
        # Temperature Instance Table
        # JsonID;<System>;MemberId;Name;UpperThresholdCritical;
        source: "${source::monitors.temperature.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $4
          sensor_location: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $4, $5)}"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.temperature.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $2/Thermal
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Temperatures
            properties: /MemberId;/Status/Health;/Status/Health;/ReadingCelsius;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Temperature Value Table
        # JsonID;PatrolStatus;StatusInformation;ReadingCelsius;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="temperature"}: $3
          hw.temperature: $5
        legacyTextParameters:
          StatusInformation: $4
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(4)}"
            concatMethod: json_array_extended
          url: $2/NetworkAdapters
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          # JsonID;<System>;NetworkDeviceFunctions;Manufacturer;Model;PartNumber;SerialNumber;
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/NetworkDeviceFunctions/@odata.id;/Manufacturer;/Model;/PartNumber;/SerialNumber;
        source(3):
          # NetworkDeviceFunctions
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          # JsonID;<System>;NetworkDeviceFunction;Manufacturer;Model;PartNumber;SerialNumber;
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;../../Column(4);../../Column(5);../../Column(6);../../Column(7);
            separator: ;
        source(4):
          # NetworkDeviceFunctions
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(3)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          # jsonid;<system>;PhysicalPortAssignment/@odata.id;NetDevFuncType;MACAddress;PermanentWWPN;Manufacturer;Model;PartNumber;SerialNumber;
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/PhysicalPortAssignment/@odata.id;/NetDevFuncType;/Ethernet/PermanentMACAddress;/FibreChannel/PermanentWWPN;../Column(4);../Column(5);../Column(7);
            separator: ;
        source(5):
          # PhysicalPortAssignment
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(4)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
            # PhysicalPortAssignment
            # JsonId;<System>;Id;Manufacturer;Model;SerialNumber;LinkSpeed;NetDevFuncType;MACAddress;WWPN;
          - type: json2csv
            entryKey: /Entry/Value
            properties: "../Column(2);/Id;../Column(7);../Column(8);../Column(9);/SupportedLinkCapabilities[0]/LinkSpeedMbps;../Column(4);../Column(5);../Column(6);"
            separator: ;
          # If Column 8 is Ethernet, replace column 9 with MACAddress
          - type: replace
            column: 8
            existingValue: Ethernet
            newValue: Ethernet;%Column(9)%
          # If Column 8 is FiberChannelOverEthernet, replace column 9 with WWPN
          - type: replace
            column: 8
            existingValue: FibreChannelOverEthernet
            newValue: FiberChannelOverEthernet;%Column(10)%
          - type: translate
            column: 7
            translationTable: "${translation::LinkSpeedDeactivationTranslationTable}"
        source(6):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(3)}"
            concatMethod: json_array_extended
          url: $2/EthernetInterfaces
          resultContent: body
          header: "${file::embeddedFile-1}"
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(7):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(6)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Id;/null;/null;/null;/Status/State;/PermanentMACAddress;
            separator: ;
          - type: translate
            column: 7
            translationTable: "${translation::EthernetInterfacesLinkSpeedDeactivationTable}"
          - type: leftConcat
            column: 8
            value: MAC;
        source(8):
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(5)}"
          - "${source::monitors.network.discovery.sources.source(7)}"
      mapping:
        # NetworkCard Instance Table
        # JsondId;<System>;Id;Manufacturer;Model;SerialNumber;LinkSpeed;Ethernet/FC;MACAddress/WWPN;
        source: "${source::monitors.network.discovery.sources.source(8)}"
        attributes:
          id: $3
          __display_id: $3
          vendor: $4
          model: $5
          serial_number: $6
          physical_address_type: $8
          physical_address: $9
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s)\", $3, $4, $5)}"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(4)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          # PhysicalPortAssignment
          - type: json2csv
            entryKey: /Entry/Value
            properties: "/Id;/LinkStatus;/LinkStatus;/LinkStatus;/SupportedLinkCapabilities[0]/LinkSpeedMbps;"
            separator: ;
        source(2):
          type: http
          method: GET
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(6)}"
            concatMethod: json_array_extended
          url: $3
          header: "${file::embeddedFile-1}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: /Id;/Status/State;/Status/State;/Status/State;/SpeedMbps;
            separator: ;
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(1)}"
          - "${source::monitors.network.collect.sources.source(2)}"
          computes:
          - type: translate
            column: 3
            translationTable: "${translation::NetworkCardStatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::LinkStatusTranslationTable}"
      mapping:
        # NetworkCard Value Table
        # JSON/ID/NetworkCardStatus/LinkStatus/StatusInformation;Speed;
        source: "${source::monitors.network.collect.sources.source(3)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $3
          hw.network.up: legacyLinkStatus($4)
          hw.network.bandwidth.limit: megaBit2Bit($6)
        legacyTextParameters:
          StatusInformation: $5
translations:
  EthernetInterfacesLinkSpeedDeactivationTable:
    StandbyOffline: ""
    Default: "True"
  LinkStatusTranslationTable:
    StandbyOffline: degraded
    Enabled: ok
    none: degraded
    up: ok
    failed: failed
    down: degraded
    Default: degraded
  StatusInformationTranslationTable:
    Warning: The device has warning state.
    optimal: The device is running normal.
    "null": The device is not reporting a status.
    needsAttn: The device needs attention.
    maintenanceCharging: The device is performing routine maintenance.
    Critical: The device is in critical state.
    OK: The device is running normal.
    Good: The device is running normal.
    Default: The device is in a critical state
  StatusTranslationTable:
    Warning: degraded
    optimal: ok
    "null": degraded
    needsAttn: degraded
    maintenanceCharging: ok
    Critical: failed
    OK: ok
    Default: failed
  LinkSpeedDeactivationTranslationTable:
    "0": ""
    Default: "True"
  NetworkCardStatusTranslationTable:
    StandbyOffline: ok
    Enabled: ok
    none: ok
    up: ok
    failed: failed
    down: ok
    Default: failed
