---
extends:
- CpuFamilyTranslationTable-header
translations:
  VoltageTypeTranslationTable:
    "22": Remote +18 V
    "23": Remote +1.8 V
    default: ""
    "10": Bus
    "11": +1.25 V
    "12": +1.5 V
    "13": +18 V
    "14": +1.8 V
    "15": Remote +12 V
    "16": Remote -12 V
    "17": Remote +5 V
    "18": Remote +3.3 V
    "19": Remote +2.5 V
    "0": ""
    "1": +2.5a V
    "2": +2.5b V
    "3": +3.3 V
    "4": +5 V
    "5": +12 V
    "6": -12 V
    "7": -5 V
    "8": VIO
    "9": Vcore
    "20": Remote +1.25 V
    "21": Remote +1.5 V
  cpuStatusInformationTranslationTable:
    "1": ""
    "2": Disabled by User
    default: Unknown Status
    "3": Disabled by BIOS (POST Error)
    "4": Idle
    "7": Other status
    ok: ""
  PowerSupplyStatusTranslationTable:
    stopped: ok
    error: failed
    degraded: degraded
    default: UNKNOWN
    stressed: degraded
    nonrecover: failed
    stopping: degraded
    service: degraded
    no contact: degraded
    lost comm: degraded
    ok: ok
    starting: degraded
    pred fail: degraded
  MemoryBitTranslationTable:
    "13,1": Non-volatile
    "12,1": Cache DRAM
    "10,1": EDO
    "11,1": DRAM
    "1,1": Reserved
    "2,1": Other type
    "3,1": Unknown type
    "4,1": Fast-paged
    "5,1": Static column
    "6,1": Pseudo-static
    "7,1": Rambus
    "8,1": Synchronous
    "9,1": CMOS
  ModelTranslationTable:
    "8651": Netfinity 7000
    "8652": Netfinity 4000R
    "8655": Netfinity 3500 M10
    "8656": xSeries 340
    "8653": Netfinity 4000R
    "8654": xSeries 130/135/330
    "8649": xSeries 225
    "8847": xSeries 343
    "8646": xSeries 220
    "8647": xSeries 225
    "8662": Netfinity 5500 M20
    "8861": xSeries 365
    "8660": Netfinity 5500
    "8661": Netfinity 5500 M10
    "8666": Netfinity 7100
    "8664": xSeries 240
    "8862": xSeries 365
    "8665": xSeries 250
    "8659": Netfinity 5000
    "8657": Netfinity 3500 M20
    "8855": xSeries 455
    "8658": xSeries 150/230
    "8673": xSeries 305
    "8476": Netfinity 3000
    "8674": xSeries 330
    "8671": xSeries 235
    "8672": xSeries 130/135/300
    "8870": xSeries 445
    "8479": xSeries 200
    "8678": BladeCenter HS20
    "8832": BladeCenter HS20
    "8477": Netfinity 1000
    "8675": xSeries 330
    "8478": xSeries 200
    "8676": xSeries 335
    "1880": xSeries 346
    "8670": xSeries 345
    "8668": xSeries 232
    "8669": xSeries 342
    "8827": xSeries 343
    "8685": xSeries 255
    "8682": xSeries 350
    "8683": xSeries 380
    "8688": xSeries 450
    "8842": BladeCenter JS20
    "8645": xSeries 220
    "8686": xSeries 360
    "8840": xSeries 346
    "8687": xSeries 440
    "8841": xSeries 236
    "8482": xSeries 206
    "8680": Netfinity 7000 M10
    "8681": xSeries 370
    "8480": xSeries 205
    "8481": xSeries 200
    "8836": xSeries 306
    "8834": xSeries 382
    "8839": BladeCenter HS40
    "8837": xSeries 336
  TemperatureTypeTranslationTable:
    "1": Motherboard
    "2": CPU
    default: ""
    "3": Power Supply
    "4": DASD
  FanTypeTranslationTable:
    "1": System
    "2": Power-Supply
    default: ""
    "3": CPU
  memoryStatusTranslationTable:
    "false": ok
    "true": failed
  LogicalDiskStatusTranslationTable:
    "0": ok
    "2": failed
    default: UNKNOWN
    "3": ok
    "36": degraded
    "4": degraded
    "5": ok
    "6": ok
    "20": degraded
  PhysicalDiskStatusTranslationTable:
    "0": ok
    "1": ok
    "133": ok
    "254": ok
    default: UNKNOWN
    "4": degraded
    "5": ok
    "137": ok
    "139": degraded
    "8": failed
    "129": ok
  PowerSupplyStatusInformationTranslationTable:
    stopped: Stopped
    error: Error
    degraded: Degraded
    default: Unknown Status
    stressed: Stressed
    nonrecover: Non Recover
    stopping: Stopping
    service: Service
    no contact: No Contact
    lost comm: Lost Communication
    ok: ""
    starting: Starting
    pred fail: Predicted Failure
  PhysicalDiskStatusInformationTranslationTable:
    "0": Empty
    "1": Standby
    "133": Hot Spare
    "254": Reserved
    default: Unknown Status
    "4": Defunct Hot Spare
    "5": Standby Hot Spare
    "137": Online
    "139": Rebuild
    "8": Defunct
    "129": Ready
  LogicalDiskStatusInformationTranslationTable:
    "0": Free
    "2": Offline
    default: Unknown Status
    "3": ""
    "36": Critical System
    "4": Critical
    "5": Migration
    "6": System
    "20": Critical Migration
  cpuStatusTranslationTable:
    "1": ok
    "2": ok
    default: UNKNOWN
    "3": failed
    "4": ok
    "7": ok
    ok: ok
  enclosureIntrusionStatusTranslationTable:
    "0": ok
    "1": ok
    "2": failed
connector:
  displayName: IBM Director Agent 4.x - Linux
  platforms: IBM xSeries
  reliesOn: IBM Director Agent 4.x
  version: 1.1
  information: This connector provides hardware monitoring through the IBM Director Agent version 4.x which supports some (not all) xSeries servers.
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Linux
    criteria:
    # OS must be Windows
    - type: deviceType
      keep:
      - Linux
    # The WBEM layer (cimserver) must be running
    - type: process
      commandLine: cimserver
    # The cimcli utility must be present
    - type: osCommand
      commandLine: ls /opt/IBM/director/CIMOM/bin/cimcli
      expectedResult: ^/opt/IBM/director/CIMOM/bin/cimcli$
    # Verify that the root/ibmsd WBEM namespace actually exists
    - type: wbem
      namespace: root
      query: SELECT Name FROM __NAMESPACE
      expectedResult: ^ibmsd;$
    # The IBMPSG_ComputerSystemDetails WBEM class must be instantiated
    - type: wbem
      namespace: root/ibmsd
      query: SELECT Name FROM IBMPSG_ComputerSystemDetails
      errorMessage: The IBM Director Agent seems to not be working properly. Please reinstall the IBM Director Agent.
sudoCommands:
- /opt/IBM/director/CIMOM/bin/cimcli
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = the IBMPSG_ComputerSystemDetails WBEM class
          type: wbem
          namespace: root/ibmsd
          query: "SELECT Vendor, Model, SerialNumber FROM IBMPSG_ComputerSystemDetails"
          computes:
          # Extract the first 4 chars of the Model field (which is actually a number)
          - type: substring
            column: 2
            start: 1
            length: 4
          # Translate the model number into a more readable string
          - type: translate
            column: 2
            translationTable: ModelTranslationTable
      mapping:
        # InstanceTable = Source(1)
        # Note: InstanceTable must contain only one line!
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: DIR4
          vendor: $column(1)
          model: $column(2)
          serial_number: $column(3)
          type: Computer
          name: "sprintf(\"%s (%s %s - %s)\", \"DIR4\", $column(1), $column(2), \"Computer\")"
    collect:
      type: monoInstance
      sources:
        source(1):
          # Source(1) = The IBMPSG_SystemEnclosure WBEM class
          type: wbem
          query: "SELECT IntrusionStatus,Tag FROM IBMPSG_SystemEnclosure"
          namespace: root/ibmsd
          computes:
          - type: keepOnlyMatchingLines
            column: 2
            regExp: 0$
          - type: translate
            column: 1
            translationTable: enclosureIntrusionStatusTranslationTable
      mapping:
        source: $monitors.enclosure.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="enclosure", state="open"}: legacyIntrusionStatus($column(1))
  cpu:
    discovery:
      sources:
        source(1):
          # CurrentClockSpeed,DeviceID,Manufacturer,Family
          type: wbem
          query: "SELECT CurrentClockSpeed,DeviceID,Family,Manufacturer FROM IBMPSG_Processor"
          namespace: root/ibmsd
          computes:
          # Translate the Family number into a model name
          - type: translate
            column: 3
            translationTable: cpuFamilyTranslationTable
          # Replace GenuineIntel by Intel and AuthenticAMD by AMD
          - type: replace
            column: 4
            existingValue: GenuineIntel
            newValue: Intel
          - type: replace
            column: 4
            existingValue: AuthenticAMD
            newValue: AMD
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.cpu.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          vendor: $column(4)
          model: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"%s (%s - %s - %mhhf.s)\", $column(2), $column(4), $column(3), $column(1))"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($column(1))
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = The IBMPSG_Processor WBEM class
          type: wbem
          query: "SELECT DeviceID,CPUStatus FROM IBMPSG_Processor"
          namespace: root/ibmsd
          computes:
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: cpuStatusTranslationTable
          - type: translate
            column: 3
            translationTable: cpuStatusInformationTranslationTable
      mapping:
        source: $monitors.cpu.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="cpu"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  memory:
    discovery:
      sources:
        source(1):
          # Discovery
          type: wbem
          query: "SELECT Capacity,BankLabel,SerialNumber,Tag,TypeDetail FROM IBMPSG_PhysicalMemory"
          namespace: root/ibmsd
          computes:
          # Convert size to MB
          - type: divide
            column: 1
            value: 1048576
          # Translate memory type
          - type: perBitTranslation
            column: 5
            bitList: "1,2,3,4,5,6,7,8,9,10,11,12,13"
            translationTable: MemoryBitTranslationTable
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.memory.discovery.sources.source(1)$
        attributes:
          id: $column(4)
          vendor: $column(2)
          serial_number: $column(3)
          type: $column(5)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"%s (%s - %s - %s)\", $column(4), $column(2), $column(5), $column(1))"
        metrics:
          hw.memory.limit: mebiByte2Byte($column(1))
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = The IBMPSG_Processor WBEM class
          type: wbem
          query: "SELECT HasError,Tag FROM IBMPSG_PhysicalMemory"
          namespace: root/ibmsd
          computes:
          - type: translate
            column: 1
            translationTable: memoryStatusTranslationTable
      mapping:
        source: $monitors.memory.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="memory"}: $column(1)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = the IBMPSG_Fan WBEM class
          type: wbem
          query: "SELECT DeviceID, FanType, UpperThresholdCritical FROM IBMPSG_Tachometer"
          namespace: root/ibmsd
          computes:
          - type: translate
            column: 2
            translationTable: FanTypeTranslationTable
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: $column(1)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $column(3)
          hw.fan.speed.limit{limit_type="low.critical"}: 0
    collect:
      # The collect (as all WBEM-based collects) is "MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = The IBMPSG_Tachometer WBEM class
          type: wbem
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_Tachometer"
          namespace: root/ibmsd
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.fan.speed: $column(1)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = The IBMPSG_TemperatureSensor WBEM class
          type: wbem
          query: "SELECT DeviceID, LowerThresholdCritical, LowerThresholdNonCritical, TempLocation FROM IBMPSG_TemperatureSensor"
          namespace: root/ibmsd
          computes:
          - type: translate
            column: 4
            translationTable: TemperatureTypeTranslationTable
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          temperature_type: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"%s (%s)\", $column(1), $column(4))"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(3)
          hw.temperature.limit{limit_type="high.critical"}: $column(2)
    collect:
      # Like all WBEM collects, this one is \"MultiInstance\"
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the IBMPSG_TemperatureSensor WBEM class
          type: wbem
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_TemperatureSensor"
          namespace: root/ibmsd
      mapping:
        # ValueTable = Source(1)
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.temperature: $column(1)
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = all the instances of the IBMPSG_VoltageSensor class
          type: wbem
          query: "SELECT DeviceID,LowerThresholdNonCritical,UpperThresholdNonCritical,VoltageType FROM IBMPSG_VoltageSensor"
          namespace: root/ibmsd
          computes:
          # Translate the voltage type into a more readable string
          - type: translate
            column: 4
            translationTable: VoltageTypeTranslationTable
      mapping:
        # Here is the instance table = source(1)
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          voltage_type: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"%s (%s)\", $column(1), $column(4))"
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $column(3)
          hw.voltage.limit{limit_type="low.critical"}: $column(2)
    collect:
      # It's a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the IBMPSG_VoltageSensor class
          type: wbem
          query: "SELECT CurrentReading,DeviceID FROM IBMPSG_VoltageSensor"
          namespace: root/ibmsd
      mapping:
        # ValueTable = Source(1)
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.voltage: $column(1)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = The IBMPSG_PowerSupply table
          type: wbem
          query: SELECT DeviceID FROM IBMPSG_PowerSupply
          namespace: root/ibmsd
      mapping:
        # 'The instance table:'
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"%s, $column(1))"
    collect:
      # Collect type : multi instance (one source for several instances)
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the simple IBMPSG_PowerSupply table/class
          # DeviceID;WBEMStatus
          type: wbem
          query: "SELECT DeviceID,Status FROM IBMPSG_PowerSupply"
          namespace: root/ibmsd
          computes:
            # Duplicate the status column
            # DeviceID;WBEMStatus;WBEMStatus
          - type: duplicateColumn
            column: 2
            # Translate the first WBEM status column into a PATROL status
            # DeviceID;PatrolStatus;WBEMStatus
          - type: translate
            column: 2
            translationTable: PowerSupplyStatusTranslationTable
            # Translate the second WBEM status column into a PATROL status
            # DeviceID;PatrolStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: PowerSupplyStatusInformationTranslationTable
      mapping:
        # The ValueTable = Source(1)
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  disk_controller:
    discovery:
      sources:
        source(1):
          # Based on the IBMPSG_RAIDController WBEM class
          # This class includes all RAID controllers  and the more specific IBM ServerRAID controllers
          # The ControllerID property will be used to identify the controller in the PhysicalDisk and
          # LogicalDisk discoveries
          type: wbem
          query: "SELECT BIOSVersion, ControllerID, DeviceID, DriverVersion, FirmwareVersion, Manufacturer, Model FROM IBMPSG_RAIDController"
          namespace: root/ibmsd
      mapping:
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          vendor: $column(6)
          model: $column(7)
          id: $column(3)
          bios_version: $column(1)
          driver_version: $column(4)
          controller_number: $column(2)
          hw.parent.type: enclosure
          hw.parent.id: DIR4
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(2), $column(6), $column(7))"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = IBMPSG_RAIDDiskDrive table
          type: wbem
          query: "SELECT ControllerID,DeviceID,DiskDriveID FROM IBMPSG_RAIDDiskDrive"
          namespace: root/ibmsd
          computes:
          # Replace :DiskDriveID: by :DeviceID: in the IBMPSG_RAIDDiskDrive table
          - type: replace
            column: 2
            existingValue: ':DeviceID:'
            newValue: ':DiskDriveID:'
        source(2):
          # Source(2) = IBMPSG_PhysicalDiskDrive table
          type: wbem
          query: "SELECT Capacity,Manufacturer,Model,SerialNumber,Tag FROM IBMPSG_PhysicalDiskDrive"
          namespace: root/ibmsd
          computes:
            # Replace :DiskDriveID: by :DeviceID: in the IBMPSG_PhysicalDiskDrive table
            # (yes, normally it is already done, but in fact, we cannot trust the IBM Director
            # development team... ;-)
          - type: replace
            column: 5
            existingValue: ':DeviceID:'
            newValue: ':DiskDriveID:'
        source(3):
          # Source(3) = The jointure
          type: tableJoin
          leftTable: $monitors.physical_disk.discovery.sources.source(1)$
          rightTable: $monitors.physical_disk.discovery.sources.source(2)$
          leftKeyColumn: 2
          rightKeyColumn: 5
      mapping:
        # Finally here is the instance table...
        # InstanceTable = ControllerID,DeviceID,DiskDriveID,Capacity,Manufacturer,Model,SerialNumber,Tag
        source: $monitors.physical_disk.discovery.sources.source(3)$
        attributes:
          id: $column(2)
          vendor: $column(5)
          model: $column(6)
          serial_number: $column(7)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(6), $column(4))"
        metrics:
          hw.physical_disk.size: $column(4)
    collect:
      # The physical disk collect is a "MultiInstance" collect
      # Only ONE WBEM query will be done in order to get the information for all physical disks
      # Less WBEM queries gives faster results
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the only source = the IBMPSG_RAIDDiskDrive table
          type: wbem
          query: "SELECT DeviceID,State FROM IBMPSG_RAIDDiskDrive"
          namespace: root/ibmsd
          computes:
          # We must duplicate the "State" column
          - type: duplicateColumn
            column: 2
          # Then we translate the IBMPSG status code into OK/WARN/ALARM (for the Status parameter)
          - type: translate
            column: 2
            translationTable: PhysicalDiskStatusTranslationTable
          # And finally, we translate the IBMPSG status code into a more readable status string
          - type: translate
            column: 3
            translationTable: PhysicalDiskStatusInformationTranslationTable
      mapping:
        # Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = the only source = the IBMPSG_RAIDLogicalDrive table
          type: wbem
          query: "SELECT ControllerID,DataSpace,DeviceID,RAIDLevel FROM IBMPSG_RAIDLogicalDrive"
          namespace: root/ibmsd
          computes:
          # Convert the DataSpace column (MB) in bytes
          - type: multiply
            column: 2
            value: 1048576
      mapping:
        # Here is the instance table
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          hw.logical_disk.limit: $column(2)
          raid_level: $column(4)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(4), $column(2))"
    collect:
      # It's a "MultiInstance" collect
      # One WBEM query will be executed in order to get the info for all the logical drives
      # Much faster!
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the only source = the IBMPSG_RAIDLogicalDrive table
          type: wbem
          query: "SELECT DeviceID,State FROM IBMPSG_RAIDLogicalDrive"
          namespace: root/ibmsd
          computes:
          # Duplicate the State column (because it'll be translated two times)
          - type: duplicateColumn
            column: 2
          # Translate the IBMPSG State column (the first one) into OK/WARN/ALARM
          - type: translate
            column: 2
            translationTable: LogicalDiskStatusTranslationTable
          # Translate the IBMPSG State column (the second one) into a more readable status information string
          - type: translate
            column: 3
            translationTable: LogicalDiskStatusInformationTranslationTable
      mapping:
        # Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
