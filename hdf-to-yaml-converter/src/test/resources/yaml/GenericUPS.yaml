---
connector:
  displayName: Generic UPS
  platforms: Any UPS which supports UPS-MIB (RFC1628)
  version: 1.0
  information: This connector provides hardware monitoring of MIB-2 Standard UPS through an SNMP interface.
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    - type: snmpGetNext
      oid: 1.3.6.1.2.1.33
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.1
          selectColumns: "1,2,3,5"
      mapping:
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: $column(4)
          vendor: $column(1)
          model: $column(2)
          type: UPS
          info: $column(3)
          name: "sprintf(\"%s (%s %s - %s)\", $column(4), $column(1), $column(2), \"UPS\")"
    collect:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.6.1.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.4.4.1
          selectColumns: 4
          computes:
          - type: awk
            script: EmbeddedFile(1)
        source(3):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.3.3.1
          selectColumns: 5
          computes:
          - type: awk
            script: EmbeddedFile(1)
          - type: subtract
            column: 1
            value: $monitors.enclosure.collect.sources.source(2)$
          - type: leftConcat
            column: 1
            value: MSHW;
        source(4):
          type: tableJoin
          leftTable: $monitors.enclosure.collect.sources.source(1)$
          rightTable: $monitors.enclosure.collect.sources.source(3)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;
          computes:
          - type: translate
            column: 2
            translationTable: enclosureStatusTranslationTable
        source(5):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.6.2.1
          selectColumns: 2
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;
        source(6):
          type: tableJoin
          leftTable: $monitors.enclosure.collect.sources.source(4)$
          rightTable: $monitors.enclosure.collect.sources.source(5)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;
      mapping:
        source: $monitors.enclosure.collect.sources.source(6)$
        metrics:
          hw.status{hw.type="enclosure"}: $column(2)
          hw.enclosure.power: $column(4)
          hw.enclosure.energy: fakeCounter($column(4))
        legacyTextParameters:
          StatusInformation: $column(6)
  battery:
    discovery:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.1.0
      mapping:
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: UPS Battery
          __display_id: UPS Battery
          type: UPS
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", \"UPS Battery\", \"UPS\")"
    collect:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.1.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.4.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;
        source(3):
          type: tableJoin
          leftTable: $monitors.battery.collect.sources.source(1)$
          rightTable: $monitors.battery.collect.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;
          computes:
          - type: duplicateColumn
            column: 2
          - type: translate
            column: 2
            translationTable: BatteryStatusTranslationTable
          - type: translate
            column: 3
            translationTable: BatteryStatusInformationTranslationTable
        source(4):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.3.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;
        source(5):
          type: tableJoin
          leftTable: $monitors.battery.collect.sources.source(3)$
          rightTable: $monitors.battery.collect.sources.source(4)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;
      mapping:
        source: $monitors.battery.collect.sources.source(5)$
        deviceId: UPS Battery
        metrics:
          hw.status{hw.type="battery"}: $column(2)
          hw.battery.charge: percent2Ratio($column(5))
          hw.battery.time_left: $column(7)
        legacyTextParameters:
          StatusInformation: $column(3)
  voltage:
    discovery:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.9.1.0
          computes:
          - type: multiply
            column: 1
            value: 1000
        source(2):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.3.3.1
          selectColumns: ID
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Input '
          - type: rightConcat
            column: 2
            value: ;$monitors.voltage.discovery.sources.source(1)$
            # Create Thresholds
            # MSHW;ID;UPSConfigInputVoltage;UpperThreshold;LowerThreshold;
          - type: awk
            script: EmbeddedFile(2)
        source(3):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.9.3.0
          computes:
          - type: multiply
            column: 1
            value: 1000
        source(4):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.4.4.1
          selectColumns: ID
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Output '
          - type: rightConcat
            column: 2
            value: ;$monitors.voltage.discovery.sources.source(3)$
            # Create Thresholds
            # MSHW;ID;UPSConfigOutputVoltage;UpperThreshold;LowerThreshold;
          - type: awk
            script: EmbeddedFile(2)
        source(5):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.5.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;Battery Voltage;
        source(6):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.5.3.1
          selectColumns: ID
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Bypass '
        source(7):
          type: tableUnion
          tables:
          - $monitors.voltage.discovery.sources.source(2)$
          - $monitors.voltage.discovery.sources.source(4)$
          - $monitors.voltage.discovery.sources.source(5)$
          - $monitors.voltage.discovery.sources.source(6)$
      mapping:
        # InstanceTable = Source(7)
        # MSHW;ID;Voltage;UpperThreshold;LowerThreshold;
        source: $monitors.voltage.discovery.sources.source(7)$
        attributes:
          id: $column(2)
          __display_id: $column(2)
          voltage_type: UPS
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(2), \"UPS\")"
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $column(4)
          hw.voltage.limit{limit_type="low.critical"}: $column(5)
    collect:
      # Voltage Collect
      type: multiInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.5.0
          computes:
          - type: leftConcat
            column: 1
            value: MSHW;Battery Voltage;
            # UPSBatteryVoltage is in 0.1v, so multiply by 100 to get mv (1000 mv = 1 v)
            # MSHW;ID;UPSBatteryVoltage;
          - type: multiply
            column: 3
            value: 100
        source(2):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.3.3.1
          selectColumns: "ID,3"
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Input '
          - type: multiply
            column: 3
            value: 1000
        source(3):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.4.4.1
          selectColumns: "ID,3"
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Output '
          - type: multiply
            column: 3
            value: 1000
        source(4):
          type: snmpTable
          oid: 1.3.6.1.2.1.33.1.5.3.1
          selectColumns: "ID,2"
          computes:
          - type: leftConcat
            column: 1
            value: 'MSHW;Bypass '
            # upsBypassVoltage is in Volts, so multiply by 1000 to get mv.
            # MSHW;ID;UPSBypassVoltage;
          - type: multiply
            column: 3
            value: 1000
        source(5):
          type: tableUnion
          tables:
          - $monitors.voltage.collect.sources.source(1)$
          - $monitors.voltage.collect.sources.source(2)$
          - $monitors.voltage.collect.sources.source(3)$
          - $monitors.voltage.collect.sources.source(4)$
      mapping:
        # ValueTable = Source(5)
        # MSHW;ID;Voltage;
        source: $monitors.voltage.collect.sources.source(5)$
        deviceId: $column(2)
        metrics:
          hw.voltage: $column(3)
  temperature:
    discovery:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.7.0
      mapping:
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: UPS Battery Temperature
          __display_id: UPS Battery Temperature
          temperature_type: battery
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", \"UPS Battery Temperature\", \"battery\")"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: 35
          hw.temperature.limit{limit_type="high.critical"}: 45
    collect:
      # Temperature Collect
      type: multiInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.2.1.33.1.2.7.0
      mapping:
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: UPS Battery Temperature
        metrics:
          hw.temperature: $column(1)
embedded:
  EmbeddedFile(1): |
    BEGIN { FS = ";"; sum=0}

    {sum+=$1;}

    END {print sum;}
  EmbeddedFile(2): |
    BEGIN { FS = ";"; upper=0; lower=0}

    {upper=$3/100*110}

    {lower=$3/100*90}

    {print $1";"$2";"$3";"upper";"lower";"}

    END
translations:
  BatteryStatusInformationTranslationTable:
    "1": Unknown
    "2": Battery Normal
    "3": Battery Low
    "4": Battery Depleted
  BatteryStatusTranslationTable:
    "1": WARNING
    "2": ok
    "3": WARNING
    "4": failed
  enclosureStatusTranslationTable:
    "0": ok
    default: failed
