---
connector:
  displayName: Cisco MDS9000 Series (SSH)
  platforms: Cisco SAN
  reliesOn: Commands on the Cisco Bay Controller
  version: 2.0
  information: "This connector discovers the enclosure and fiber-channel ports of SAN switches as well as the various environment sensors (temperatures, fans, power supplies, etc.)."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    supersedes:
    - SMISSwitch
    - FibreAllianceSwitch
    criteria:
    # host should respond to telnet the way described below
    - type: osCommand
      commandLine: show version
      expectedResult: Cisco
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: osCommand
          commandLine: show hardware
          computes:
          - type: awk
            script: "${file::embeddedFile-2}"
            separators: ;
            keep: ^MSHW;
            selectColumns: 2
        source(2):
          type: osCommand
          commandLine: show module
        source(3):
          type: osCommand
          commandLine: show environment
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: MDS9000Bay
          vendor: Cisco
          type: Switch
          model: $1
          serial_number: $2
          name: "${awk::sprintf(\"Switch: (%s %s)\", \"Cisco\", $1)}"
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: show environment
        source(2):
          # Source(2) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: MSHW;
            separators: ;
            selectColumns: 2
      mapping:
        # ValueTable = Source(2)
        # PowerConsumption
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        attributes:
          id: MDS9000Bay
        metrics:
          hw.enclosure.power: $1
          hw.enclosure.energy: fakeCounter($1)
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(3)
        source: "${source::monitors.blade.discovery.sources.source(1)}"
        attributes:
          id: $1
          blade_name: $2
          model: $3
          hw.parent.type: enclosure
          hw.parent.id: MDS9000Bay
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $2, $3)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5"
            # Duplicate the status column
            # PowerSupplyID; status ; status ;
          - type: duplicateColumn
            column: 2
            # Now translate status into OK/Warning/Alarm
            # status
          - type: translate
            column: 2
            translationTable: "${translation::ModuleStatusTranslationTable}"
          - type: translate
            column: 3
            translationTable: "${translation::ModuleStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.blade.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="blade"}: $2
        legacyTextParameters:
          StatusInformation: $3
  network:
    discovery:
      sources:
        source(1):
          type: osCommand
          commandLine: show interface
          computes:
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5,6,7,17"
            # Exclude SPFs that are not present
            # attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ;
          - type: excludeMatchingLines
            column: 4
            regExp: (SFP not present)
            # Exclude SPFs that are not inserted
            # attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ;
          - type: excludeMatchingLines
            column: 4
            regExp: (SFP not inserted)
        source(2):
          type: osCommand
          commandLine: "show interface detail-counters | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'"
          computes:
            # Now, extract the NICs ZeroBufferCreditCount
            #  port;ZeroBufferCreditCount;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
        source(3):
          # Take into account the new Command \"show interface counters detailed | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'\\n\"
          type: osCommand
          commandLine: "show interface counters detailed | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'"
          computes:
            # Now, extract the NICs ZeroBufferCreditCount
            #  port;ZeroBufferCreditCount;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(2)}"
          - "${source::monitors.network.discovery.sources.source(3)}"
        source(5):
          # Table Joint the main Discovery to the ZeroBufferCreditCount
          # attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ; port ; ZeroBufferCreditCount ;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(1)}"
          rightTable: "${source::monitors.network.discovery.sources.source(4)}"
          leftKeyColumn: 3
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.network.discovery.sources.source(5)}"
        attributes:
          id: $3
          physical_address: $5
          physical_address_type: WWN
          device_type: $6
          hw.parent.type: $1
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $3, $6)}"
        conditionalCollection:
          hw.errors{hw.type="network", hw.error.type="zero_buffer_credit"}: $9
    collect:
      # Collect type = multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: show interface
          computes:
            # Now, extract the NICs thanks to a smart AWK script
            #  RETURNS MSHW ; attachToType ; module ; port ; statusInformation ; wwn ; portDesc portMode ; speed ; linkStatus ; duplexMode ; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;
            #  SELECTS port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "4,5,8,9,10,11,12,13,14,15,16"
          - type: translate
            column: 4
            translationTable: "${translation::linkStatusTranslationTable}"
          - type: translate
            column: 11
            translationTable: "${translation::networkStatusTranslationTable}"
        source(2):
          type: osCommand
          commandLine: "show interface detail-counters | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'"
          computes:
            # Now, extract the NICs ZeroBufferCreditCount
            #  port;ZeroBufferCreditCount;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
        source(3):
          # Take into account the new Command \"show interface counters detailed | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'\\n\"
          type: osCommand
          commandLine: "show interface counters detailed | grep '\\(fc[0-9]\\)\\|\\(waits due to lack of transmit credits\\)'"
          computes:
            # Now, extract the NICs ZeroBufferCreditCount
            #  port;ZeroBufferCreditCount;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(2)}"
          - "${source::monitors.network.collect.sources.source(3)}"
        source(5):
          # Table Joint the main Discovery to the ZeroBufferCreditCount
          # port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ; port ; ZeroBufferCreditCount ;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(4)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # ValueTable = Source(1)
        # port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;
        source: "${source::monitors.network.collect.sources.source(5)}"
        attributes:
          id: $1
        legacyTextParameters:
          StatusInformation: $2
        metrics:
          hw.network.up: legacyLinkStatus($4)
          hw.errors{hw.type="network"}: $10
          hw.network.packets{direction="transmit"}: $6
          hw.network.packets{direction="receive"}: $7
          hw.network.io{direction="transmit"}: $8
          hw.network.io{direction="receive"}: $9
          hw.network.bandwidth.limit: megaBit2Bit($3)
          hw.network.full_duplex: legacyFullDuplex($5)
          hw.status{hw.type="network"}: $11
          hw.errors{hw.type="network", hw.error.type="zero_buffer_credit"}: $13
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-5}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $2
          device_type: $1
          hw.parent.type: enclosure
          hw.parent.id: MDS9000Bay
          name: "${awk::sprintf(\"%s: %s\", $1, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-5}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "3,4,5"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: "${translation::OtherDeviceStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            #  RETURNS MSHW;module;module/sensor;status;status;temp;tempWarn;tempAlarm;attachToType;
            #  SELECTS      module;module/sensor;            #      tempWarn;tempAlarm;attachToType;
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,7,8,9"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          hw.parent.type: $5
          hw.parent.id: $1
          name: $2
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "3,4,5,6"
            # Now translate status into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: "${translation::TemperatureStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="temperature"}: $2
          hw.temperature: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            #  RETURNS MSHW;fanID;status;status;
            #  SELECTS fanID;status
          - type: awk
            script: "${file::embeddedFile-6}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
          # Exclude Power Supplies that are not present
          - type: excludeMatchingLines
            column: 2
            regExp: absent
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          hw.parent.id: MDS9000Bay
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-6}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Now translate status into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: "${translation::FanStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            #  RETURNS  MSHW;powerSupply;status;status;
            #  SELECTS  powerSupply;status;
          - type: awk
            script: "${file::embeddedFile-8}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
          # Exclude Power Supplies that are not present
          - type: excludeMatchingLines
            column: 2
            regExp: absent
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          hw.parent.id: MDS9000Bay
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
          - type: awk
            script: "${file::embeddedFile-8}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Now translate status into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  ModuleStatusTranslationTable:
    upgrading: ok
    standby: ok
    powered-down: degraded
    testing: degraded
    power-denied: failed
    active: ok
    err-pwd-dn: failed
    initializing: degraded
    pwr-denied: failed
    Default: UNKNOWN
    powered-up: degraded
    failure: failed
    pwr-cycled: degraded
    poweredup: degraded
    ok: ok
    HA-standby: ok
  TemperatureStatusTranslationTable:
    failure: failed
    ok: ok
    Default: UNKNOWN
  FanStatusTranslationTable:
    failure: failed
    absent: failed
    ok: ok
    Default: UNKNOWN
  linkStatusTranslationTable:
    trunking: ok
    missing: degraded
    up: ok
    down: degraded
    Default: UNKNOWN
  ModuleStatusInformationTranslationTable:
    upgrading: ok
    standby: Standby
    powered-down: User Requested Power Down
    testing: Booting - Diagnostics
    power-denied: Power Issues
    active: Not Configured
    err-pwd-dn: Powered Down due to Fault
    initializing: Initializing
    pwr-denied: Power Issues
    Default: UNKNOWN
    powered-up: Powered up - Waiting to Initialize
    failure: Failure
    pwr-cycled: Module Reloaded
    poweredup: Booting
    ok: ""
    HA-standby: HA Standby
  PowerSupplyStatusTranslationTable:
    fail/shutdown: failed
    absent: failed
    ok: ok
    Default: UNKNOWN
  OtherDeviceStatusTranslationTable:
    failure: failed
    ok: ok
    Default: UNKNOWN
  networkStatusTranslationTable:
    suspendedduetoincompatiblemode: failed
    isolationduetoescfailure: failed
    down (Out of Service): ok
    isolationduetoelpfailure: failed
    isolationduetoothersideeportisolated: failed
    isolationduetovsanmismatch: failed
    outofservice: ok
    down: ok
    offline: degraded
    portchanneladministrativelydown: ok
    inactive: ok
    errordisabled: failed
    trunking: ok
    up: ok
    linkfailureornotconnected: ok
    isolationduetodomainidassignmentfailure: failed
    isolationduetoinvalidfabricreconfiguration: failed
    suspendedduetoincompatibleremoteswitchwwn: failed
    reconfigurefabricinprogress: ok
    initializing: ok
    administrativelydown: ok
    isolationduetodomainoverlap: failed
    suspendedduetoincompatiblespeed: failed
    Default: UNKNOWN
    down (Administratively down): ok
    nonparticipating: degraded
    isolationduetodomainmanagerdisabled: failed
    sfpnotpresent: MISSING
    isolationduetozonemergefailure: failed
    hardwarefailure: failed
