---
connector:
  displayName: Brocade SAN Switch SMI Agent
  platforms: Brocade SAN
  reliesOn: Brocade SMI Agent
  version: 1.0
  information: "This connector discovers the enclosures and fiber-channel ports of SAN switches as well as the various environment sensors (temperatures, fans, power supplies, etc.). It relies on the Brocade SMI Agent Proxy and can monitor multiple switches."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    supersedes:
    - FibreAllianceSwitch
    - BrocadeSwitch
    - SMISSwitch
    criteria:
    # There must be a Brocade_Switch
    - type: wbem
      namespace: root/brocade1
      query: SELECT Name FROM Brocade_Switch
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get a List of Chassis
          # Source(1) = Brocade_Chassis
          # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          type: wbem
          query: "SELECT Tag,ElementName,Model,SerialNumber,__PATH FROM Brocade_Chassis"
          namespace: root/brocade1
          computes:
            # Remove "NAME=" from the ChassisID as it is sometimes added by the Brocade CIM Agent....
            # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          - type: replace
            column: 1
            existingValue: NAME=
            newValue: ""
        source(2):
          # Smaller Brocade Switches have no chassis, so we're going to get a list of all switches and find those with no chassis and then create a dummy chassis
          # Source(2) = Brocade_Switch
          # Switch__PATH;SwitchID;Hostname;
          type: wbem
          query: "SELECT __PATH,Name,ElementName FROM Brocade_Switch"
          namespace: root/brocade1
        source(3):
          # Source(3) = Brocade_Product
          # Product__PATH;Model;Vendor;SerialNumber;FRUNumber;
          type: wbem
          query: "SELECT __PATH,Name,Vendor,IdentifyingNumber,SKUNumber FROM Brocade_Product"
          namespace: root/brocade1
        source(4):
          # Source(4) = Brocade_ChassisProduct
          # Product__PATH;Chassis__PATH;
          type: wbem
          query: "SELECT GroupComponent,PartComponent FROM Brocade_ChassisProduct"
          namespace: root/brocade1
        source(5):
          # Source(5) = Brocade_SwitchInChassis
          # Chassis__PATH;Switch_PATH;
          type: wbem
          query: "SELECT Antecedent,Dependent FROM Brocade_SwitchInChassis"
          namespace: root/brocade1
        source(6):
          # Source(6) = Table joint between Source(2) and source(5)
          # Switch__PATH;SwitchID;Hostname;Chassis__PATH;Switch_PATH;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(5)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          keyType: Wbem
        source(7):
          # Source(7) = Table joint between Source(3) and source(4)
          # Product__PATH;Model;Vendor;SerialNumber;FRUNumber;Product__PATH;Chassis__PATH;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(3)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(4)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          keyType: Wbem
        source(8):
          # Source(7) = Table joint between Source(5) and source(6)
          # Switch__PATH;SwitchID;Hostname;Chassis__PATH;Switch_PATH;Product__PATH;Model;Vendor;SerialNumber;FRUNumber;Product__PATH;Chassis__PATH;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(6)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(7)}"
          leftKeyColumn: 4
          rightKeyColumn: 7
          keyType: Wbem
          computes:
            # Keep only useful columns
            #      1         2         3          4             5           6           7    8         9          10           11          12
            # Switch__PATH;SwitchID;Hostname;Chassis__PATH;Switch_PATH;Product__PATH;Model;Vendor;SerialNumber;FRUNumber;Product__PATH;Chassis__PATH;
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;
          - type: keepColumns
            columnNumbers: "2,3,7,8,9,10,12"
        source(9):
          # Source(9) = Table joint between Source(7) and source(8)
          # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(8)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 7
          rightKeyColumn: 5
          keyType: Wbem
          defaultRightLine: MS_HW_NOCHASSIS;;;;
          computes:
            # Keep only the switches with no maching chassis.
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          - type: keepOnlyMatchingLines
            column: 8
            valueList: MS_HW_NOCHASSIS
            # Transform the No-Chassis Switch information into a Chassis
            #      1        2     3      4          5           6           7           8         9        10         11      12
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
            # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          - type: keepColumns
            columnNumbers: "1,2,3,5,7"
        source(10):
          # Union the Chassis derived from Switches with the Real Chassis
          # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(1)}"
          - "${source::monitors.enclosure.discovery.sources.source(9)}"
          computes:
          # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;EnclosureType;
          - type: rightConcat
            column: 5
            value: ;Storage
        source(11):
          # Let's make a copy of the results so that we can device a Enclosure ID to Enclosure PATH mapping for later use
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(10)}"
          computes:
            # Trim it down so that we can map component paths to Chassis ID
            # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;EnclosureType;
            # ChassisID;ChassisName;Chassis__PATH;
          - type: keepColumns
            columnNumbers: "1,2,5"
      mapping:
        # InstanceTable = Source(10)
        # ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;EnclosureType;
        source: "${source::monitors.enclosure.discovery.sources.source(10)}"
        attributes:
          id: $1
          __display_id: $2
          model: $3
          serial_number: $4
          vendor: Brocade
          type: $6
          device_hostname: $1
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $2, \"Brocade\", $3)}"
  blade:
    discovery:
      sources:
        source(1):
          # We already have a list of switches that are parts of Chassis (Enclosure 8)
          # So let's attach them to the chassis in (Enclosure 10)
          # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(8)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(10)}"
          leftKeyColumn: 7
          rightKeyColumn: 5
          keyType: Wbem
          computes:
            # Let's trim it down
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;Chassis__PATH;ChassisID;ChassisName;Model;SerialNumber;Chassis__PATH;
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;            # ChassisID;
          - type: keepColumns
            columnNumbers: "1,2,3,4,5,6,8"
          # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;ChassisID;
          - type: rightConcat
            column: 7
            value: ";Type: Switch"
        source(2):
          # Let's create a BladeID,BladePATH to EnclosureID table for later use:
          # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;ChassisID;Switch__PATH;SwitchID;Hostname;
          type: tableJoin
          leftTable: "${source::monitors.blade.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          keyType: Wbem
          computes:
            # Create a table to match the SwitchPath to either the EnclosureID (PM) or Blade ID (KM)
            # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;ChassisID;Switch__PATH;SwitchID;Hostname;
            # SwitchID;Hostname;ChassisID;
          - type: keepColumns
            columnNumbers: "1,2,7"
      mapping:
        # Instance Table
        # SwitchID;Hostname;Model;Vendor;SerialNumber;FRUNumber;ChassisID;
        source: "${source::monitors.blade.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          model: $3
          serial_number: $5
          info: "${awk::join(\" \", $4, $8)}"
          hw.parent.type: enclosure
          hw.parent.id: $7
          name: "${awk::sprintf(\"%s (%s)\", $2, $3)}"
    collect:
      # The Temperature collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Brocade_Blade
          # SystemName,DeviceID,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT Name,OperationalStatus FROM Brocade_Switch"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # SystemName,DeviceID,OperationalStatus
          - type: duplicateColumn
            column: 2
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # SystemName,DeviceID,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 2
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # SystemName,DeviceID,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # SystemName,DeviceID,PATROLStatus,StatusInformation
          - type: convert
            column: 2
            conversion: array2SimpleStatus
      mapping:
        # ValueTable = Source(1)
        # DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.blade.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="blade"}: $2
        legacyTextParameters:
          StatusInformation: $3
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = Brocade_SwitchFCPort
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          type: wbem
          query: "SELECT SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,PortIndex,ElementName FROM Brocade_SwitchFCPort"
          namespace: root/brocade1
          computes:
            # Keep only "internal" ports (no ports that actually are remote ports of servers or disk arrays)
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "14,15,16,17,18"
            # Keep only activated ports
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          - type: excludeMatchingLines
            column: 4
            valueList: 3
            # Exclude Ports that have no Port Number as these are FCoE ports that will be collected in the FCoE section
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
            # Translate PortType into a more readable string
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          - type: translate
            column: 3
            translationTable: "${translation::PortTypeTranslationTable}"
            # Convert Speed from bps to Mbps (divide by 1062500)
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PortName
          - type: divide
            column: 5
            value: 1062500
            # Identify the Permanent and RemoteNode Addresses as WWN
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,AssociatedNodeInfo,DeviceID,PermanentAddressType,RemoteNodeAddressType,PortName
          - type: rightConcat
            column: 8
            value: ;WWN;WWN
            # Process the AssociatedNodeInfo through an Awk Script to extract the remote Node Info
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9,10,11,12"
        source(2):
          # Source(2) = Brocade_ModulePort
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort
          type: wbem
          query: "SELECT PermanentAddress,PortNumber,ElementName,__Path FROM Brocade_SwitchFCPort"
          namespace: root/brocade1
        source(3):
          # PortModule to FCPort association table
          # Brocade_PortModule,Brocade_SwitchFCPort
          type: wbem
          query: "SELECT GroupComponent,PartComponent FROM Brocade_ModulePort"
          namespace: root/brocade1
        source(4):
          # Brocade_ModulePort information
          # ModuleID,Brocade_PortModule
          type: wbem
          query: "SELECT ModuleNumber,__Path FROM Brocade_PortModule"
          namespace: root/brocade1
        source(5):
          # Switch to PortModule association table
          # Brocade_Switch,Brocade_PortModule
          type: wbem
          query: "SELECT GroupComponent,PartComponent FROM Brocade_PortModuleInSwitch"
          namespace: root/brocade1
        source(6):
          # Brocade_Switch information
          # Brocade_Switch,SwitchID,Hostname,
          type: wbem
          query: "SELECT __PATH,Name,ElementName FROM Brocade_Switch"
          namespace: root/brocade1
        source(7):
          # Port Info to Association Table
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_PortModule,Brocade_SwitchFCPort
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(2)}"
          rightTable: "${source::monitors.network.discovery.sources.source(3)}"
          leftKeyColumn: 4
          rightKeyColumn: 2
          keyType: Wbem
        source(8):
          # Port Info to Portmodule
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_PortModule,Brocade_SwitchFCPort,ModuleID,Brocade_PortModule
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(7)}"
          rightTable: "${source::monitors.network.discovery.sources.source(4)}"
          leftKeyColumn: 5
          rightKeyColumn: 2
          keyType: Wbem
        source(9):
          # Port Info to Portmodule to Association Table
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_PortModule,Brocade_SwitchFCPort,ModuleID,Brocade_PortModule,Brocade_Switch,Brocade_PortModule
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(8)}"
          rightTable: "${source::monitors.network.discovery.sources.source(5)}"
          leftKeyColumn: 8
          rightKeyColumn: 2
          keyType: Wbem
        source(10):
          # Port Info to Portmodule to Association Table
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_PortModule,Brocade_SwitchFCPort,ModuleID,Brocade_PortModule,Brocade_Switch,Brocade_PortModule,Brocade_Switch,SwitchID,Hostname
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(9)}"
          rightTable: "${source::monitors.network.discovery.sources.source(6)}"
          leftKeyColumn: 9
          rightKeyColumn: 1
          keyType: Wbem
          computes:
            # Trim it down to useful information
            #       1            # 2             3            #    4            #         5            #  6             7            #   8             9            #    10            11         12       13
            # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_PortModule,Brocade_SwitchFCPort,ModuleID,Brocade_PortModule,Brocade_Switch,Brocade_PortModule,Brocade_Switch,SwitchID,Hostname
            # PermanentAddress,PortNumber,ElementName,            #             #             #             #      ModuleID,            #             #             #             #             SwitchID,Hostname
          - type: keepColumns
            columnNumbers: "1,2,3,7,12,13"
            # Build the Display (PortModuleID_PortNumber ElementName) from Right to Left
            # PermanentAddress,PortNumber,DisplayID,ModuleID,SwitchID,Hostname
          - type: leftConcat
            column: 3
            value: ' '
          - type: leftConcat
            column: 3
            value: $2
          - type: leftConcat
            column: 3
            value: _
          - type: leftConcat
            column: 3
            value: $4
            # Build the DeviceID (SwitchID_PortModuleID_PortNumber) from Left to Right
            # PermanentAddress,DeviceID,DisplayID,ModuleID,SwitchID,Hostname
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $4
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $5
            # Trim it again
            # PermanentAddress,DeviceID,DisplayID,ModuleID,SwitchID,Hostname
            # PermanentAddress,DeviceID,DisplayID,         SwitchID
          - type: keepColumns
            columnNumbers: "1,2,3,5"
            # Remove switch id of -1 from the Device and DisplayID
            # PermanentAddress,DeviceID,DisplayID,SwitchID
          - type: replace
            column: 2
            existingValue: _-1_
            newValue: _
          - type: replace
            column: 3
            existingValue: -1_
            newValue: ""
        source(11):
          # Join the tables
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,PermanentAddress,DeviceID,DisplayID,SwitchID
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(1)}"
          rightTable: "${source::monitors.network.discovery.sources.source(10)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
          defaultRightLine: ;;;MSHW_NOSWITCHFOUND;
          computes:
            # Remove the Second Permananent Address as this will become the EthernetSystemName
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,(EthernetSystemName),DeviceID,DisplayID,SwitchID
          - type: replace
            column: 12
            existingValue: $12
            newValue: ""
        source(12):
          # Source(12) = Brocade_FCOEEthernetPort
          # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID
          type: wbem
          query: "SELECT SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,PortNumber FROM Brocade_FCOEEthernetPort"
          namespace: root/brocade1
          computes:
            # Keep only activated ports
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID
          - type: excludeMatchingLines
            column: 4
            valueList: 3
            # Translate PortType into a more readable string
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID
          - type: translate
            column: 3
            translationTable: "${translation::PortTypeTranslationTable}"
            # Convert Speed from bps to Mbps (divide by 1062500)
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID
          - type: divide
            column: 5
            value: 1062500
            # Remove dots from MAC Address
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID
          - type: replace
            column: 6
            existingValue: .
            newValue: ""
        source(13):
          # Source(3) = Brocade_EthernetSwitch
          # EthernetSwitch__Path,EthernetSystemName
          type: wbem
          query: "SELECT __Path,Name FROM Brocade_EthernetSwitch"
          namespace: root/brocade1
        source(14):
          # Source(4) = Brocade_Switch
          # Switch_PATH;SwitchID;
          type: wbem
          query: "SELECT __Path,Name FROM Brocade_Switch"
          namespace: root/brocade1
        source(15):
          # Source(5) = Brocade_EthernetSwitchInPCS
          # PCS__Path;EthernetSwitch__Path;
          type: wbem
          query: "SELECT Antecedent,Dependent FROM Brocade_EthernetSwitchInPCS"
          namespace: root/brocade1
        source(16):
          # Source(6) = Brocade_SwitchInPCS
          # PCS__Path;Switch_PATH;
          type: wbem
          query: "SELECT Antecedent,Dependent FROM Brocade_SwitchInPCS"
          namespace: root/brocade1
        source(17):
          # Source(7) = Table joint between Source(3) and source(5)
          # EthernetSwitch__Path,EthernetSystemName,PCS__Path,EthernetSwitch__Path
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(13)}"
          rightTable: "${source::monitors.network.discovery.sources.source(15)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          keyType: Wbem
        source(18):
          # Source(8) = Table joint between Source(7) and source(6)
          # EthernetSwitch__Path,EthernetSystemName,PCS__Path,EthernetSwitch__Path,PCS__Path,Switch_PATH
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(17)}"
          rightTable: "${source::monitors.network.discovery.sources.source(16)}"
          leftKeyColumn: 3
          rightKeyColumn: 1
          keyType: Wbem
        source(19):
          # Source(9) = Table joint between Source(8) and source(4)
          # EthernetSwitch__Path,EthernetSystemName,PCS__Path,EthernetSwitch__Path,PCS__Path,Switch_PATH,Switch_PATH,SwitchID
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(18)}"
          rightTable: "${source::monitors.network.discovery.sources.source(14)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
          keyType: Wbem
          computes:
            # Keep only the EthernetSystemName & SystemName
            #         1            #        2            3            #   4            # 5          6           7          8
            # EthernetSwitch__Path,EthernetSystemName,PCS__Path,EthernetSwitch__Path,PCS__Path,Switch_PATH,Switch_PATH,SwitchID
            # EthernetSystemName,SwitchID
          - type: keepColumns
            columnNumbers: "2,8"
        source(20):
          # Source(10) = Table joint between Source(12) and source(19)
          # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID,EthernetSystemName,SwitchID
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(12)}"
          rightTable: "${source::monitors.network.discovery.sources.source(19)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
            # Add TE to FCoE ports to identify them uniquely.
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,DeviceID,EthernetSystemName,SwitchID
          - type: leftConcat
            column: 2
            value: TE
            # Add Columns in Preparation to match the FC Ports Table
            # Add RemoteNodeAddress
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,EthernetSystemName,SwitchID
          - type: rightConcat
            column: 6
            value: ;
            # Add PermanentAddressType,(AssociatedNodeAddressType),(PortName)
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,SwitchID
          - type: rightConcat
            column: 7
            value: ;MAC;;
            # Add two blank columns to construct the DeviceID and DisplayID
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,(DeviceID),(DisplayID),SwitchID
          - type: rightConcat
            column: 12
            value: ;;
            # Copy the Port Number into DeviceID
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,DeviceID,(DisplayID),SwitchID
          - type: replace
            column: 13
            existingValue: $13
            newValue: $2
            # Add an underscore and the switchname to the deviceID
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,DeviceID,(DisplayID),SwitchID
          - type: leftConcat
            column: 13
            value: _
          - type: leftConcat
            column: 13
            value: $15
            # Copy the Port Number into DisplayID
            # EthernetSystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,DeviceID,DisplayID,SwitchID
          - type: replace
            column: 14
            existingValue: $14
            newValue: $2
            # Add an Identifier to the EthernetSystemName
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,(RemoteNodeAddress),DeviceID,PermanentAddressType,(AssociatedNodeAddressType),(PortName),EthernetSystemName,DeviceID,DisplayID,SwitchID
          - type: leftConcat
            column: 12
            value: "Ethernet Switch ID: "
        source(21):
          # FCPort to Swtich association table
          # Brocade_Switch,Brocade_SwitchFCPort
          type: wbem
          query: "SELECT GroupComponent,PartComponent FROM Brocade_PortInSwitch"
          namespace: root/brocade1
        source(22):
          # Make a Port to Switch Table
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_Switch,Brocade_SwitchFCPort
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(2)}"
          rightTable: "${source::monitors.network.discovery.sources.source(21)}"
          leftKeyColumn: 4
          rightKeyColumn: 2
        source(23):
          # Make a Port to Switch Table (2nd association)
          # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_Switch,Brocade_SwitchFCPort,Brocade_Switch,SwitchID,Hostname
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(22)}"
          rightTable: "${source::monitors.network.discovery.sources.source(6)}"
          leftKeyColumn: 5
          rightKeyColumn: 1
          computes:
            # Trim it down to useful information
            #       1            # 2             3            #    4            #      5           6            # 7            #   8        9
            # PermanentAddress,PortNumber,ElementName,Brocade_SwitchFCPort,Brocade_Switch,Brocade_SwitchFCPort,Brocade_Switch,SwitchID,Hostname
            # PermanentAddress,PortNumber,ElementName,            #             #             #             #             #   SwitchID,Hostname
          - type: keepColumns
            columnNumbers: "1,2,3,8,9"
            # Build the DeviceID (SwitchID_PortNumber)
            # PermanentAddress,DeviceID,DisplayID,SwitchID,Hostname
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $5
            # Trim it again
            # PermanentAddress,DeviceID,DisplayID,SwitchID,Hostname
            # PermanentAddress,DeviceID,DisplayID,SwitchID
          - type: keepColumns
            columnNumbers: "1,2,3,4"
        source(24):
          # Make a copy of Source(11) The FC Discovery Table
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          type: copy
          from: "${source::monitors.network.discovery.sources.source(11)}"
          computes:
            # Keep only ports that we did not find a switch
            #       1        2         3          4          5            6             7            #  8         9            #   10            #           11       12            #      13      14         15
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          - type: keepOnlyMatchingLines
            column: 15
            valueList: MSHW_NOSWITCHFOUND
            # Exclude Ports that have a slot as these should have modules
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          - type: excludeMatchingLines
            column: 11
            regExp: slot
            # Remove the default value columns
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName
          - type: keepColumns
            columnNumbers: "1,2,3,4,5,6,7,8,9,10,11"
        source(25):
          # Join the non-module switch port list, and its associated switch table
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,PermanentAddress,DeviceID,DisplayID,SwitchID
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(24)}"
          rightTable: "${source::monitors.network.discovery.sources.source(23)}"
          leftKeyColumn: 6
          rightKeyColumn: 1
        source(26):
          # Make a copy of Source(11) The FC Discovery Table
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          type: copy
          from: "${source::monitors.network.discovery.sources.source(11)}"
          computes:
            # Exclude non-module switch
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          - type: excludeMatchingLines
            column: 15
            valueList: MSHW_NOSWITCHFOUND
        source(27):
          # Union the FC Module, FC non-Module and FCoE discovery tables
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(26)}"
          - "${source::monitors.network.discovery.sources.source(20)}"
          - "${source::monitors.network.discovery.sources.source(25)}"
        source(28):
          # Use the Blade Discovery Table to associate Switch ID to Chassis ID (for attaching to Chassis for the PM)
          # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID,SwitchID,Hostname,ChassisID
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(27)}"
          rightTable: "${source::monitors.blade.discovery.sources.source(2)}"
          leftKeyColumn: 15
          rightKeyColumn: 1
        source(29):
          # ' Trim it down to use in the Collect'
          type: copy
          from: "${source::monitors.network.discovery.sources.source(28)}"
          computes:
            #    1           2         3          4          5             6            # 7            8          9            #       10            #       11           12             13        14      15         16       17       18
            # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID,SwitchID,Hostname,ChassisID
            # PermanentAddress,DeviceID
          - type: keepColumns
            columnNumbers: "6,13"
      mapping:
        # Instance Table
        #    1        #  2         3        # 4        # 5        #    6        #     7        #   8        # 9        #         # 10        #         # 11        #  12        #    13        14      15         16       17       18
        # SystemName,PortNumber,PortType,EnabledState,Speed,PermanentAddress,RemoteNodeAddress,DeviceID,PermanentAddressType,AssociatedNodeAddressType,PortName,EthernetSystemName,DeviceID,DisplayID,SwitchID,SwitchID,Hostname,ChassisID
        source: "${source::monitors.network.discovery.sources.source(28)}"
        attributes:
          id: $13
          physical_address: $6
          physical_address_type: $9
          device_type: $3
          __display_id: $14
          info: $12
          hw.parent.type: blade
          hw.parent.id: $15
          name: "${awk::sprintf(\"%s (%s)\", $14, $3)}"
    collect:
      # The NetworkCard collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Brocade_SwitchFCPort
          #  PermanentAddress,Speed,OperationalStatus,EnabledState,FCPort__Path
          type: wbem
          query: "SELECT PermanentAddress,Speed,OperationalStatus,EnabledState,__Path FROM Brocade_SwitchFCPort"
          namespace: root/brocade1
          computes:
            # Convert Speed from bps to Mbps (divide by 1062500)
            #  PermanentAddress,Speed,OperationalStatus,EnabledState,FCPort__Path
          - type: divide
            column: 2
            value: 1062500
        source(2):
          # Source(2) = Brocade_PortStatsForSwitchFCPort
          # FCPort__Path,SwitchFCPortStats__Path
          type: wbem
          query: "SELECT ManagedElement,Stats FROM Brocade_PortStatsForSwitchFCPort"
          namespace: root/brocade1
        source(3):
          # Source(3) = Brocade_SwitchFCPortStats
          # SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,AddressErrors,Class3FramesDiscarded,CRCErrors,DelimiterErrors,EncodingDisparityErrors,FramesTooLong,PrimitiveSeqProtocolErrCount,RxBadEOFs,TooManyRdys
          type: wbem
          query: "SELECT __Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,AddressErrors,Class3FramesDiscarded,CRCErrors,DelimiterErrors,EncodingDisparityErrors,FramesTooLong,PrimitiveSeqProtocolErrCount,RxBadEOFs,TooManyRdys FROM Brocade_SwitchFCPortStats"
          namespace: root/brocade1
          computes:
            # Add the errorcounts together 7 = 7+8+9+10+11+12+13+14+15
            # SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,AddressErrors,Class3FramesDiscarded,CRCErrors,DelimiterErrors,EncodingDisparityErrors,FramesTooLong,PrimitiveSeqProtocolErrCount,RxBadEOFs,TooManyRdys
            #     1 ;      2      ;    3           ;   4           ;     5            ;    6       ;         7   ;     8            #  ;      9  ;   10          ;    11            #    ;  12         ;  13            #           ;   14    ;   15
          - type: add
            column: 7
            value: $7
          - type: add
            column: 7
            value: $8
          - type: add
            column: 7
            value: $9
          - type: add
            column: 7
            value: $10
          - type: add
            column: 7
            value: $11
          - type: add
            column: 7
            value: $12
          - type: add
            column: 7
            value: $13
          - type: add
            column: 7
            value: $14
          - type: add
            column: 7
            value: $15
            # Remove all the unwanted Network Columns
            # SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: keepColumns
            columnNumbers: "1,2,3,4,5,6,7,8,9,10,20"
        source(4):
          # Source (4)  Joint of 2 and 3
          # FCPort__Path,SwitchFCPortStats__Path,SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(2)}"
          rightTable: "${source::monitors.network.collect.sources.source(3)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          keyType: Wbem
        source(5):
          # Source (5)  Joint of 1 and 4
          #  SystemName,Speed,OperationalStatus,EnabledState,FCPort__Path,FCPort__Path,SwitchFCPortStats__Path,SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(4)}"
          leftKeyColumn: 5
          rightKeyColumn: 1
          keyType: Wbem
          computes:
            # Get rid of unused columns
            #     1            # 2        3            # 4            #  5             6           7            #             # 8            #      9            #   10            # 11            #  12            # 13        14
            #  PermanentAddress,Speed,OperationalStatus,EnabledState,FCPort__Path,FCPort__Path,SwitchFCPortStats__Path,SwitchFCPortStats__Path,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
            #  PermanentAddress,Speed,OperationalStatus,EnabledState,            #             #             #             #             #     BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: keepColumns
            columnNumbers: "1,2,3,4,9,10,11,12,13,14"
        source(6):
          # Source(6) = Brocade_FCOEEthernetPort
          # PermanentAddress,Speed,OperationalStatus,EnabledState
          type: wbem
          query: "SELECT PermanentAddress,Speed,OperationalStatus,EnabledState FROM Brocade_FCOEEthernetPort"
          namespace: root/brocade1
          computes:
            # Add 6 Blank columns as stats are not available on FCoE Ports
            # PermanentAddress,Speed,OperationalStatus,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: rightConcat
            column: 4
            value: ;;;;;;
            # Remove dots from MAC Address
            # PermanentAddress,Speed,OperationalStatus,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: replace
            column: 1
            existingValue: .
            newValue: ""
        source(7):
          # Source (8) = table union of FC (source 5) and FCoE (source 6)
          # PermanentAddress,Speed,OperationalStatus,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(5)}"
          - "${source::monitors.network.collect.sources.source(6)}"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # PermanentAddress,Speed,OperationalStatus,OperationalStatus,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: duplicateColumn
            column: 3
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # PermanentAddress,Speed,PATROLStatusArray,OperationalStatus,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # PermanentAddress,Speed,PATROLStatusArray,StatusInformation,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # PermanentAddress,Speed,PATROLStatus,StatusInformation,EnabledState,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: convert
            column: 3
            conversion: array2SimpleStatus
            # Convert EnabledState to a LinkStatus
            # PermanentAddress,Speed,PATROLStatus,StatusInformation,LinkStatus,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount
          - type: translate
            column: 5
            translationTable: "${translation::EnabledStateStatusTranslationTable}"
        source(8):
          # Match the collected information to the device ID using the permananent address
          # PermanentAddress,Speed,PATROLStatus,StatusInformation,LinkStatus,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount,PermanentAddress,DeviceID
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(7)}"
          rightTable: "${source::monitors.network.discovery.sources.source(29)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # Value Table
        #     1        #     2      3        #    4        #       5        # 6        #   7        #         # 8        #      9        #       10        # 11        # 12        #    13
        # PermanentAddress,Speed,PATROLStatus,StatusInformation,LinkStatus,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,BBCreditZero,ErrorCount,PermanentAddress,DeviceID
        source: "${source::monitors.network.collect.sources.source(8)}"
        deviceId: $13
        metrics:
          hw.status{hw.type="network"}: $3
          hw.network.up: legacyLinkStatus($5)
          hw.network.bandwidth.limit: megaBit2Bit($2)
          hw.network.full_duplex: legacyFullDuplex("full")
          hw.errors{hw.type="network"}: $11
          hw.network.packets{direction="transmit"}: $9
          hw.network.packets{direction="receive"}: $8
          hw.network.io{direction="transmit"}: $7
          hw.network.io{direction="receive"}: $6
          hw.errors{hw.type="network", hw.error.type="zero_buffer_credit"}: $10
        legacyTextParameters:
          StatusInformation: $4
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = Brocade_PortModule -
          # SwitchID,DeviceID
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,ModuleNumber FROM Brocade_PortModule"
          computes:
            # Duplicate the DeviceID
            # SwitchID,DeviceID,DeviceID
          - type: duplicateColumn
            column: 2
            # Add the SwitchID and an Underscore to the DeviceID
            # SwitchID,DeviceID,DisplayID
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
        source(2):
          # Use the Blade Discovery Table to associate Switch ID to Chassis ID (for attaching to Chassis for the PM)
          # SwitchID,DeviceID,DisplayID,SwitchID,Hostname,ChassisID
          type: tableJoin
          leftTable: "${source::monitors.other_device.discovery.sources.source(1)}"
          rightTable: "${source::monitors.blade.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
            # Keep only the SwitchID and ChassisID
            # SwitchID,DeviceID,DisplayID,ChassisID
          - type: keepColumns
            columnNumbers: "1,2,3,6"
            # Add Columns to specify details about Port Modules
            # SwitchID,DeviceID,DisplayID,ChassisID,AttachToDeviceType,OtherDeviceType
          - type: rightConcat
            column: 4
            value: ;Blade;PortModule
        source(3):
          # Source(3) = Brocade_PortModule -
          # ChassisID,DeviceID
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID FROM Brocade_CPModule"
          computes:
            # Duplicate the DeviceID
            # ChassisID,DeviceID,DeviceID
          - type: duplicateColumn
            column: 2
            # Add the SwitchID and an Underscore to the DeviceID and CP
            # ChassisID,DeviceID,DisplayID
          - type: leftConcat
            column: 2
            value: _CP
          - type: leftConcat
            column: 2
            value: $1
            # Add CP to the DisplayID
            # ChassisID,DeviceID,DisplayID
          - type: leftConcat
            column: 3
            value: CP
            # Add Additional Column information to match ModuleDiscovery
            # ChassisID,DeviceID,DisplayID,ChassisID,AttachToDeviceType,OtherDeviceType
          - type: rightConcat
            column: 3
            value: ;;Enclosure;CP Module
            # Copy the ChassisID into column 4
            # ChassisID,DeviceID,DisplayID,ChassisID,AttachToDeviceType,OtherDeviceType
          - type: replace
            column: 4
            existingValue: $4
            newValue: $1
        source(4):
          # Union of Port Module and CP Module
          # ChassisID,DeviceID,DisplayID,ChassisID,AttachToDeviceType,OtherDeviceType
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(2)}"
          - "${source::monitors.other_device.discovery.sources.source(3)}"
      mapping:
        # InstanceTable
        # SwitchID,DeviceID,DisplayID,ChassisID,AttachToDeviceType,OtherDeviceType
        source: "${source::monitors.other_device.discovery.sources.source(4)}"
        attributes:
          id: $2
          device_type: $6
          __display_id: $3
          hw.parent.type: $5
          hw.parent.id: $1
          name: "${awk::sprintf(\"%s: %s\", $6, $3)}"
    collect:
      # The Temperature collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Brocade_PortModule
          # SystemName,DeviceID,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,ModuleNumber,OperationalStatus FROM Brocade_PortModule"
          computes:
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,OperationalStatus
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
        source(2):
          # Source(2) = Brocade_CPModule
          # SystemName,DeviceID,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,ModuleNumber,OperationalStatus FROM Brocade_CPModule"
          computes:
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,OperationalStatus
          - type: leftConcat
            column: 2
            value: _CP
          - type: leftConcat
            column: 2
            value: $1
        source(3):
          # Union of Port Module and CP Module
          # SystemName,DeviceID,OperationalStatus
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # SystemName,DeviceID,OperationalStatus
          - type: duplicateColumn
            column: 3
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # SystemName,DeviceID,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # SystemName,DeviceID,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # SystemName,DeviceID,PATROLStatus,StatusInformation
          - type: convert
            column: 3
            conversion: array2SimpleStatus
      mapping:
        # ValueTable
        # SystemName,DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="other_device"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Brocade_Fan
          # SystemName,DeviceID,Speed
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID,Speed FROM Brocade_Fan"
          computes:
            # Duplicate the DeviceID
            # SystemName,DeviceID,DisplayID,Speed
          - type: duplicateColumn
            column: 2
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,DisplayID,Speed
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # InstanceTable = Source(1)
        # SystemName,DeviceID,DisplayID,Speed
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $1
          name: $3
        conditionalCollection:
          hw.fan.speed: $4
    collect:
      # The Temperature collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = CIM_NumericSensor
          # SystemName,DeviceID,Speed,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID,Speed,OperationalStatus FROM Brocade_Fan"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # SystemName,DeviceID,Speed,OperationalStatus
          - type: duplicateColumn
            column: 4
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # SystemName,DeviceID,Speed,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # SystemName,DeviceID,Speed,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 5
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
          - type: convert
            column: 4
            conversion: array2SimpleStatus
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.fan.speed: $3
          hw.status{hw.type="fan"}: $4
        legacyTextParameters:
          StatusInformation: $5
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = Brocade_Fan
          # SystemName,DeviceID
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID FROM Brocade_PowerSupply"
          computes:
            # Duplicate the DeviceID
            # SystemName,DeviceID,DisplayID
          - type: duplicateColumn
            column: 2
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,DisplayID
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # InstanceTable = Source(1)
        # SystemName,DeviceID
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $1
          name: $3
    collect:
      # The Temperature collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = CIM_NumericSensor
          # SystemName,DeviceID,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID,OperationalStatus FROM Brocade_PowerSupply"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # SystemName,DeviceID,OperationalStatus
          - type: duplicateColumn
            column: 3
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # SystemName,DeviceID,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # SystemName,DeviceID,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # SystemName,DeviceID,PATROLStatus,StatusInformation
          - type: convert
            column: 3
            conversion: array2SimpleStatus
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,PATROLStatus,StatusInformation
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # ValueTable = Source(1)
        # SystemName,DeviceID,PATROLStatus,StatusInformation
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="power_supply"}: $3
        legacyTextParameters:
          StatusInformation: $4
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = Brocade_TemperatureSensor
          # SystemName,DeviceID,CurrentReading
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID,Speed FROM Brocade_TemperatureSensor"
          computes:
            # Duplicate the DeviceID
            # SystemName,DeviceID,DisplayID,Speed
          - type: duplicateColumn
            column: 2
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,DisplayID,Speed
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # InstanceTable = Source(1)
        # SystemName,DeviceID,DisplayID,Speed
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $1
          name: $3
        conditionalCollection:
          hw.temperature: $4
    collect:
      # The Temperature collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Brocade_TemperatureSensor
          # SystemName,DeviceID,CurrentReading,OperationalStatus
          type: wbem
          namespace: root/brocade1
          query: "SELECT SystemName,DeviceID,CurrentReading,OperationalStatus FROM Brocade_TemperatureSensor"
          computes:
            # Duplicate the "OperationalStatusArray" column
            # SystemName,DeviceID,Speed,OperationalStatus
          - type: duplicateColumn
            column: 4
            # Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
            # SystemName,DeviceID,Speed,PATROLStatusArray,OperationalStatus
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::DMTFOperationStatusTranslationTable}"
            # And finally, we translate DMTF's OperationalStatus code into a more readable status string
            # SystemName,DeviceID,Speed,PATROLStatusArray,StatusInformation
          - type: arrayTranslate
            column: 5
            translationTable: "${translation::DMTFOperationStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Convert PATROLStatusArray to a simple (unique) PATROLStatus
            # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
          - type: convert
            column: 4
            conversion: array2SimpleStatus
            # Add the SwitchID and an Underscore to the DeviceID
            # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
          - type: leftConcat
            column: 2
            value: _
          - type: leftConcat
            column: 2
            value: $1
      mapping:
        # SystemName,DeviceID,Speed,PATROLStatus,StatusInformation
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.temperature: $3
          hw.status{hw.type="temperature"}: $4
        legacyTextParameters:
          StatusInformation: $5
translations:
  DMTFOperationStatusTranslationTable:
    "11": degraded
    "12": failed
    "13": failed
    "14": failed
    "15": ok
    "16": degraded
    "17": ok
    "18": ok
    Default: UNKNOWN
    "1": ok
    "2": ok
    "3": degraded
    "4": degraded
    "5": degraded
    "6": failed
    "7": failed
    "8": degraded
    "9": degraded
    "10": failed
  PortTypeTranslationTable:
    "110": Ethernet Port
    "50": Ethernet Port
    "51": Ethernet Port
    "52": Ethernet Port
    "53": Ethernet Port
    "10": HBA FC Port N (Node)
    "54": Ethernet Port
    "11": HBA FC Port NL (Node/Loop)
    "55": Ethernet Port
    "12": HBA FC Port F/NL (Node/Loop/Fabric)
    "56": Ethernet Port
    "14": FC Port E
    "15": FC Port F
    "16": FC Port FL
    "17": FC Port B
    "18": FC Port G
    Default: Unknown Network Port Type
    "0": Unknown Network Port Type
    "1": Other Network Port Type
    "100": Ethernet Port
    "101": Ethernet Port
    "102": Ethernet Port
    "103": Ethernet Port
    "104": Ethernet Port
    "105": Ethernet Port
    "106": Ethernet Port
    "107": Ethernet Port
    "108": Ethernet Port
    "109": Ethernet Port
  EnabledStateStatusTranslationTable:
    "2": ok
    "3": degraded
    "4": degraded
    "5": degraded
    "6": degraded
    "7": degraded
    "8": degraded
    "9": degraded
    Default: degraded
    "10": degraded
  DMTFOperationStatusInformationTranslationTable:
    "11": In Service
    "12": No Contact
    "13": Lost Communication
    "14": Aborted
    "15": Dormant
    "16": Supporting Entity in Error
    "17": Completed
    "18": Power Mode
    Default: ""
    "1": Dormant
    "2": ""
    "3": Degraded
    "4": Stressed
    "5": Predicted Failure
    "6": Error
    "7": Non-Recoverable Error
    "8": Starting
    "9": Stopping
    "10": Stopped
