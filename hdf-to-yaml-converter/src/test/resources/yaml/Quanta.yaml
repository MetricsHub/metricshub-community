---
connector:
  displayName: Quanta Rack Mount Server Unit
  platforms: Quanta Server
  reliesOn: Quanta System Manager SNMP Agent
  version: 1.0
  information: "This connector provides the hardware monitoring of the Quanta Rack Mount Server Unit through the SNMP Agent of Quanta System Manager. As Quanta System Manager is an application exposing the data about other systems, this connector needs to be configured for a separate \"Management Card/Chip\" host, even if Quanta System Manager is installed on the same system as the PATROL Agent."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.7244.1.2.1.3.1.1.3
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name and manufacturer of the rack mount unit along with serial and part numbers
          # ID;Model;ChassisType;SerialNumber;FRU;PartNumber;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.6.1
          selectColumns: "2,7,4,6,12,13"
          computes:
          # Excluding Lines without Serial Number
          - type: rightConcat
            column: 4
            value: MSHW_
          - type: rightConcat
            column: 4
            value: _n
          # Exclude Lines that do not contain serial numbers so that we take the enclosure unit with serial number
          - type: excludeMatchingLines
            column: 4
            valueList: MSHW__n
          # ID;Model;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
          - type: replace
            column: 4
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 4
            existingValue: _n
            newValue: ""
          # ID;Model - ;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
          - type: rightConcat
            column: 2
            value: ' - '
            # Identify the FRU and Part Number
            # ID;Model - ChassisType;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
          - type: rightConcat
            column: 2
            value: Column(3)
          # Add \"Part Number: \" to AdditionalInformation2
          - type: leftConcat
            column: 6
            value: "Part Number: "
        source(2):
          # Collect BIOS Version
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.1.8.0
      mapping:
        # Instance Table
        # ID;Model - ChassisType;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          vendor: $column(5)
          serial_number: $column(4)
          bios_version: $monitors.enclosure.discovery.sources.source(2)$
          type: $column(3)
          info: $column(6)
          name: "sprintf(\"Enclosure: %s (%s)\", $column(2), $column(5))"
    collect:
      # Collect
      type: monoInstance
      sources:
        source(1):
          # Get the Corresponding Chassis Unit Status
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.1.4.0
          computes:
          - type: duplicateColumn
            column: 1
          # PATROLStatus;OperState;
          - type: translate
            column: 1
            translationTable: enclosureStatusTranslationTable
            # Translate second StatusCode into a more readable string
            # PATROLStatus;StatusInformation;
          - type: translate
            column: 2
            translationTable: enclosureStatusInformationTranslationTable
      mapping:
        # Value Table
        # ID;ChassisStatus;Power Consumption;
        source: $monitors.enclosure.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="enclosure"}: $column(1)
        legacyTextParameters:
          StatusInformation: $column(2)
  cpu:
    discovery:
      sources:
        source(1):
          # CPU discovery
          # ID;Name;Speed;Status;VendorCode;Model;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.1.1
          selectColumns: "1,3,6,2,4,5"
          computes:
            # Remove processors whose Status is "0" (zero)
            # because it means: no processor
            # ID;Name;Speed;Status;VendorCode;Model;
          - type: excludeMatchingLines
            column: 4
            regExp: ^$
            # Add - to the right of the model name
            # ID;Name;Speed;Status;VendorCode;Model;
          - type: rightConcat
            column: 6
            value: ' - '
            # Add Speed to the right of the Model
            # ID;Name;Speed;Status;VendorCode;Model;
          - type: rightConcat
            column: 6
            value: Column(3)
      mapping:
        # Instance Table
        source: $monitors.cpu.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          vendor: $column(5)
          model: $column(6)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s - %mhhf.s)\", $column(2), $column(5), $column(6), $column(3))"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($column(3))
    collect:
      # Collect is multi-instance (all instances in one shot)
      type: multiInstance
      sources:
        source(1):
          # ID;Speed;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.1.1
          selectColumns: "1,6,2"
          computes:
            # Duplicate status, because we will translate it two times
            # ID;Speed;Status;Status
          - type: duplicateColumn
            column: 3
          # Convert Speed to a number and keep only first column
          - type: extract
            column: 2
            subColumn: 1
            # Translate Status into PATROLStatus
            # ID;Speed;PATROLStatus;Status
          - type: translate
            column: 3
            translationTable: cpuStatusTranslationTable
            # Translate second Status into more readable string
            # ID;Speed;PATROLStatus;StatusInformation
          - type: translate
            column: 4
            translationTable: cpuStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.cpu.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.cpu.speed: megaHertz2Hertz($column(2))
          hw.status{hw.type="cpu"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  memory:
    discovery:
      sources:
        source(1):
          # ID;Location;Presence;CapacityMB;MemoryType;Frequency
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.2.1
          selectColumns: "1,3,2,6,4,5"
          computes:
          # Map only memory modules that are Present
          - type: excludeMatchingLines
            column: 3
            valueList: 0
            # Add Identifiers
            # ID;Location;Presence;CapacityMB;MemoryType;Frequency
          - type: extract
            column: 5
            subColumn: 1
          - type: leftConcat
            column: 2
            value: "Location: "
          - type: leftConcat
            column: 6
            value: "Speed: "
      mapping:
        # InstanceTable = Source(1)
        # ID;Location;Presence;CapacityMB;MemoryType;Frequency
        source: $monitors.memory.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          type: $column(5)
          info: "join($column(2), $column(6), \" \")"
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s MB)\", $column(2), $column(5), $column(4))"
        metrics:
          hw.memory.limit: mebiByte2Byte($column(4))
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # ID;memoryStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.2.1
          selectColumns: "1,2"
          computes:
            # Duplicate status, because we will translate it two times
            # ID;memoryStatus;memoryStatus;
          - type: duplicateColumn
            column: 2
            # Translate memoryStatus into PATROLStatus
            # ID;PATROLStatus;memoryStatus
          - type: translate
            column: 2
            translationTable: memoryStatusTranslationTable
            # Translate second Status into more readable string
            # ID;PATROLStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: memoryStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.memory.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="memory"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # ispresence
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.2.8.0
          computes:
            # Add Display Name
            # isPresence,displayname
          - type: rightConcat
            column: 2
            value: PowerSupply 0
        source(2):
          # ispresence
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.2.9.0
          computes:
            # Add Display Name
            # isPresence,displayname
          - type: rightConcat
            column: 2
            value: PowerSupply 1
        source(3):
          type: tableUnion
          tables:
          - $monitors.power_supply.discovery.sources.source(1)$
          - $monitors.power_supply.discovery.sources.source(2)$
          computes:
          # Keep only the lines/power-supplies with a value for their presence and Omit all lines with "" as isPrsence
          - type: excludeMatchingLines
            column: 1
            regExp: ^$
      mapping:
        # InstanceTable = Source(3)
        # isPresence,displayname
        source: $monitors.power_supply.discovery.sources.source(3)$
        attributes:
          id: $column(2)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
    collect:
      # Collect type is mono-instance
      type: monoInstance
      sources:
        source(1):
          # Status
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.2.8.0
          computes:
            # Duplicate status, because we will translate it two times
            # Status,powersupplyStatus;
          - type: duplicateColumn
            column: 1
            # Add Display Name
            # Status,powersupplyStatus;displayname
          - type: rightConcat
            column: 3
            value: PowerSupply 0
            # Translate powersupplyStatus into PATROLStatus
            # PATROLStatus;displayname;powersupplyStatus
          - type: translate
            column: 1
            translationTable: PowerSupplyStatusTranslationTable
            # Translate second Status into more readable string
            # PATROLStatus;displayname;StatusInformation;
          - type: translate
            column: 2
            translationTable: PowerSupplyStatusInformationTranslationTable
        source(2):
          # Status
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.2.1.2.9.0
          computes:
            # Duplicate status, because we will translate it two times
            # Status,powersupplyStatus;
          - type: duplicateColumn
            column: 1
            # Add Display Name
            # Status,powersupplyStatus;displayname
          - type: rightConcat
            column: 3
            value: PowerSupply 1
            # Translate powersupplyStatus into PATROLStatus
            # PATROLStatus;powersupplyStatus;displayname;
          - type: translate
            column: 1
            translationTable: PowerSupplyStatusTranslationTable
            # Translate second Status into more readable string
            # PATROLStatus;StatusInformation;displayname;
          - type: translate
            column: 2
            translationTable: PowerSupplyStatusInformationTranslationTable
        source(3):
          type: tableUnion
          tables:
          - $monitors.power_supply.collect.sources.source(1)$
          - $monitors.power_supply.collect.sources.source(2)$
      mapping:
        # InstanceTable = Source(3)
        # PATROLStatus;StatusInformation;displayname;
        source: $monitors.power_supply.collect.sources.source(3)$
        deviceId: $column(3)
        metrics:
          hw.status{hw.type="power_supply"}: $column(1)
        legacyTextParameters:
          StatusInformation: $column(2)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = temperature SNMP table
          # ID;SensorLocationCode;AlarmThreshold;WarningThreshold;TemperatureReading;TemperatureStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.4.1
          selectColumns: "1,3,6,7,4,2"
          computes:
          - type: awk
            script: $embedded.EmbeddedFile(1)$
      mapping:
        # Instance table = Source(1)
        # ID;SensorLocationCode;AlarmThreshold;WarningThreshold;TemperatureReading;TemperatureStatus;StatusActivation
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(4)
          hw.temperature.limit{limit_type="high.critical"}: $column(3)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # ID;CurrentReading;TemperatureStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.4.1
          selectColumns: "1,4,2"
          computes:
            # Duplicate status
            # ID;CurrentReading;TemperatureStatus;Status;
          - type: duplicateColumn
            column: 3
            # Translate TemperatureStatus into PATROLStatus
            # ID;CurrentReading;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: TemperatureStatusTranslationTable
            # Translate Status into StatusInformation
            # ID;CurrentReading;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: TemperatureStatusInformationTranslationTable
      mapping:
        # The ValueTable = Source(1)
        # ID;CurrentReading;PATROLStatus;StatusInformation;
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.temperature: $column(2)
          hw.status{hw.type="temperature"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan SNMP table
          # ID;SensorLocationCode;AlarmThreshold;WarningThreshold;FanSpeed;FanStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.3.1
          selectColumns: "1,3,9,8,4,2"
          computes:
          - type: awk
            script: $embedded.EmbeddedFile(1)$
      mapping:
        # Instance table = Source(1)
        # ID;SensorLocationCode;AlarmThreshold;WarningThreshold;FanSpeed;FanStatus;StatusActivation
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $column(4)
          hw.fan.speed.limit{limit_type="low.critical"}: $column(3)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # ID;FanSpeed;FanStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.3.1
          selectColumns: "1,4,2"
          computes:
            # Duplicate status
            # ID;FanSpeed;FanStatus;Status;
          - type: duplicateColumn
            column: 3
            # Translate FanStatus into PATROLStatus
            # ID;FanSpeed;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: FanStatusTranslationTable
            # Translate Status into StatusInformation
            # ID;FanSpeed;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: FanStatusInformationTranslationTable
      mapping:
        # The ValueTable = Source(1)
        # ID;FanSpeed;PATROLStatus;StatusInformation;
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.fan.speed: $column(2)
          hw.status{hw.type="fan"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = Voltage SNMP table
          # ID;SensorLocationCode;UpperThreshold;LowerThreshold;VoltageReading;VoltageStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.5.1
          selectColumns: "1,3,6,9,4,2"
          computes:
          - type: awk
            script: $embedded.EmbeddedFile(2)$
      mapping:
        # Instance table = Source(1)
        # ID;SensorLocationCode;UpperThreshold;LowerThreshold;VoltageReading;VoltageStatus;StatusActivation
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $column(4)
          hw.voltage.limit{limit_type="high.degraded"}: $column(3)
    collect:
      # Collect type is MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1)
          # ID;VoltageReading;VoltageStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.2.1.3.5.1
          selectColumns: "1,4,2"
          computes:
            # Duplicate status
            # ID;VoltageReading;VoltageStatus;Status;
          - type: duplicateColumn
            column: 3
            # Translate VoltageStatus into PATROLStatus
            # ID;VoltageReading;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: VoltageStatusTranslationTable
            # Translate Status into StatusInformation
            # ID;VoltageReading;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: VoltageStatusInformationTranslationTable
      mapping:
        # The ValueTable = Source(1)
        # ID;VoltageReading;PATROLStatus;StatusInformation;
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.voltage: $column(2)
          hw.status{hw.type="voltage"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
embedded:
  EmbeddedFile(1): |-
    BEGIN {FS=";";}
    {
        if($3 < 0) AlarmThreshold = ""; else AlarmThreshold = $3;
        if($4 < 0) WarningThreshold = ""; else WarningThreshold = $4;
        if($5 < 0) SensorReading = ""; else SensorReading = $5;
        if(AlarmThreshold == "" && WarningThreshold == "" || SensorReading == "") StatusActivation=1;
        print $1";"$2";"AlarmThreshold";"WarningThreshold";"SensorReading";"$6";"StatusActivation";"
    }
  EmbeddedFile(2): |-
    BEGIN {FS=";";}
    {
        if ($3 < 0 ) UpperThreshold = ""; else UpperThreshold = $3;
        if ($4 < 0 ) LowerThreshold = ""; else LowerThreshold = $4;
        if ($5 < 0 ) SensorReading = ""; else SensorReading = $5;
        if (UpperThreshold == "" && LowerThreshold == "" || SensorReading == "") StatusActivation=1;
        print $1";"$2";"UpperThreshold";"LowerThreshold";"SensorReading";"$6";"StatusActivation";"
    }
translations:
  enclosureStatusInformationTranslationTable:
    "1": Power ON
    "2": Power OverLoad
    "3": Interlock
    "4": Power at Fault
    "5": Power Control Fault
  TemperatureStatusTranslationTable:
    "1": degraded
    "2": degraded
    "3": ok
    "4": degraded
    "5": failed
    "6": failed
    Default: UNKNOWN
  FanStatusTranslationTable:
    "1": degraded
    "2": degraded
    "3": ok
    "4": degraded
    "5": failed
    "6": failed
    Default: UNKNOWN
  VoltageStatusTranslationTable:
    "1": degraded
    "2": degraded
    "3": ok
    "4": degraded
    "5": failed
    "6": failed
    Default: UNKNOWN
  cpuStatusInformationTranslationTable:
    "0": Processor Not Present
    "1": Processor Present
    Default: Unknown Status
  PowerSupplyStatusTranslationTable:
    "1": ok
    "2": failed
    "4": failed
    "16": failed
    "8": failed
    Default: UNKNOWN
    "32": failed
  VoltageStatusInformationTranslationTable:
    "1": Other
    "2": Unknown
    "3": ok
    "4": Non Critical
    "5": Critical
    "6": Non Recoverable
    Default: Unknown Status
  FanStatusInformationTranslationTable:
    "1": Other
    "2": Unknown
    "3": ok
    "4": Non Critical
    "5": Critical
    "6": Non Recoverable
    Default: Unknown Status
  memoryStatusTranslationTable:
    "0": failed
    "1": ok
    Default: UNKNOWN
  PowerSupplyStatusInformationTranslationTable:
    "1": Present
    "2": Failure Dectected
    "4": Predictive Failure
    "16": PowerSupply Lost Or Out Of Range
    "8": PowerSupply Input Lost
    Default: Unknown Status
    "32": PowerSupply Out Of Range
  TemperatureStatusInformationTranslationTable:
    "1": Other
    "2": Unknown
    "3": ok
    "4": Non Critical
    "5": Critical
    "6": Non Recoverable
    Default: Unknown Status
  cpuStatusTranslationTable:
    "0": failed
    "1": ok
    Default: UNKNOWN
  memoryStatusInformationTranslationTable:
    "0": Memory Not Present
    "1": Memory Present
    Default: Unknown Status
  enclosureStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": degraded
    "4": failed
    "5": degraded
    Default: UNKNOWN
