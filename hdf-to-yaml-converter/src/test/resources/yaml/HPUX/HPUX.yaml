---
connector:
  displayName: HP-UX - Common
  platforms: "HP 9000,HP Integrity,HP SuperDome"
  reliesOn: "HP-UX system commands (ioscan, etc.)"
  information: Discovers the model and type of HP-UX systems. Discovers and monitors processors.
  version: 1.2
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - HP
    criteria:
    # OS should be HP (for HP-UX, whatever version)
    - type: deviceType
      keep:
      - HP
    # The various following tools have to be present
    - type: osCommand
      commandLine: /bin/ls /usr/bin/model
      expectedResult: ^/usr/bin/model$
sudoCommands:
- /usr/bin/adb
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = the output of /usr/bin/model
          # ComputerModel;
          type: osCommand
          commandLine: /usr/bin/model
          separators: |2+

          selectColumns: 1-
      mapping:
        # The discovery table
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: HPUX
          vendor: HP
          model: $1
          type: Computer
          name: "${awk::sprintf(\"Computer: (%s %s)\", \"HP\", $1)}"
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = sh -${file::embeddedFile-1}
          # cpuID;cpuSpeed;cpuModel
          type: osCommand
          commandLine: "/bin/sh ${file::embeddedFile-1}"
          keep: ^MSHW;
          separators: ;
          selectColumns: "3,5,6"
      mapping:
        # Instance table = source(1)
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $1
          model: $3
          hw.parent.type: enclosure
          hw.parent.id: HPUX
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $3, megaHertz2HumanFormat($2))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($2)
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = sh -f ${file::embeddedFile-1}
          # cpuID;cpuStatus
          type: osCommand
          commandLine: "/bin/sh ${file::embeddedFile-1}"
          keep: ^MSHW;
          separators: ;
          selectColumns: "3,4"
          computes:
            # Duplicate the status column
            # cpuID;cpuStatus;cpuStatus
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL status
            # cpuID;PATROLStatus;cpuStatus
          - type: translate
            column: 2
            translationTable: "${translation::cpuStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # cpuID;PATROLStatus;statusInformation
          - type: translate
            column: 3
            translationTable: "${translation::cpuStatusInformationTranslationTable}"
      mapping:
        # ValueTable = source(1)
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="cpu"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  cpuStatusInformationTranslationTable:
    CLAIMED: Claimed
    ERROR: Error
    SCAN: Locked
    DIFF_HW: Bad driver
    NO_HW: Not responding
    Default: Unknown Status
    UNCLAIMED: Unclaimed
  cpuStatusTranslationTable:
    CLAIMED: ok
    ERROR: failed
    SCAN: degraded
    DIFF_HW: degraded
    NO_HW: failed
    Default: UNKNOWN
    UNCLAIMED: degraded
