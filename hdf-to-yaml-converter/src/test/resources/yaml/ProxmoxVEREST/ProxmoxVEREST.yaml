---
connector:
  displayName: Promox Virtual Environment (REST)
  platforms: Proxmox Hypervisors
  reliesOn: Proxmox VE REST API version V6.4-14 or higher
  version: 1.0
  information: This connector provides VM monitoring for Proxmox hypervisors via Proxmox VE REST api
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Linux
    - OOB
    criteria:
    - type: productRequirements
      kmVersion: 10.3.00
    - type: http
      method: GET
      url: /
      header: "Content-Type: application/json"
      expectedResult: Proxmox Virtual Environment
      errorMessage: Unable to connect to Proxmox Virtual Environment. Check port (default port is 8006) and hostname.
monitors:
  vm:
    discovery:
      sources:
        source(1):
          type: http
          method: POST
          url: /api2/json/access/ticket
          body: "${file::embeddedFile-2}"
          header: "Content-Type: application/json"
          computes:
          - type: json2csv
            entryKey: /data
            properties: /ticket
          - type: keepColumns
            columnNumbers: 2
        source(2):
          type: http
          method: GET
          url: "/api2/json/nodes/%{HOSTNAME}/qemu/"
          resultContent: body
          authenticationToken: "${source::monitors.vm.discovery.sources.source(1)}"
          header: "${file::embeddedFile-1}"
          computes:
          - type: json2csv
            entryKey: /data
            properties: /name;/cpus;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
        source(3):
          type: http
          method: GET
          url: "/api2/json/nodes/%{HOSTNAME}/lxc/"
          resultContent: body
          authenticationToken: "${source::monitors.vm.discovery.sources.source(1)}"
          header: "${file::embeddedFile-1}"
          computes:
          - type: json2csv
            entryKey: /data
            properties: /name;/cpus;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: .
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.vm.discovery.sources.source(2)}"
          - "${source::monitors.vm.discovery.sources.source(3)}"
      mapping:
        source: "${source::monitors.vm.discovery.sources.source(4)}"
        attributes:
          id: $2
          __display_id: $2
          vm.host.name: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, $2)}"
        conditionalCollection:
          hw.power{hw.type="vm"}: $3
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: http
          method: GET
          url: "/api2/json/nodes/%{HOSTNAME}/qemu/"
          resultContent: body
          authenticationToken: "${source::monitors.vm.discovery.sources.source(1)}"
          header: "${file::embeddedFile-1}"
          computes:
          - type: json2csv
            entryKey: /data
            properties: /name;/cpus;/status;
        source(2):
          type: http
          method: GET
          url: "/api2/json/nodes/%{HOSTNAME}/lxc/"
          resultContent: body
          authenticationToken: "${source::monitors.vm.discovery.sources.source(1)}"
          header: "${file::embeddedFile-1}"
          computes:
          - type: json2csv
            entryKey: /data
            properties: /name;/cpus;/status;
        source(3):
          type: tableUnion
          tables:
          - "${source::monitors.vm.collect.sources.source(1)}"
          - "${source::monitors.vm.collect.sources.source(2)}"
          computes:
          - type: translate
            column: 4
            translationTable: "${translation::StatusTranslationTable}"
      mapping:
        source: "${source::monitors.vm.collect.sources.source(3)}"
        attributes:
          id: $2
        metrics:
          hw.vm.power_ratio: computePowerShareRatio($3)
          hw.vm.power_state: $4
translations:
  StatusTranslationTable:
    running: "ON"
    stopped: "OFF"
    running (paused): SUSPENDED
