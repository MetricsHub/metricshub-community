---
connector:
  displayName: LSI Logic - LsiUtil - RAID (Windows)
  platforms: Any system with LSI lsiutil
  reliesOn: lsiutil
  information: Gives information about physical disks and volumes of LSI Logic SAS RAID controllers through the lsiutil utility.
  version: 1.0
  detection:
    appliesTo:
    - NT
    supersedes:
    - LSIMegaCliWindows
    criteria:
    - type: deviceType
      keep:
      - NT
    - type: osCommand
      commandLine: "for %i in (1,2,3,4,5,6,7,8,9) do lsiutil.exe -p%i -a 1,2,0 21"
      expectedResult: "^PhysDisk [0-9]"
      errorMessage: Unable to find or execute lsiutil or no LSI Logic controller found
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = output of lsiutil
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(1)
            # DeviceID;Vendor;Model;FirmwareVersion
          - type: awk
            script: EmbeddedFile(1)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          controller_number: $column(1)
          vendor: $column(2)
          model: $column(3)
          firmware_version: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(1), $column(2), $column(3))"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # ControllerNumber;diskID;model;size;
          - type: awk
            script: EmbeddedFile(2)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          vendor: $column(3)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s)\", $column(2), $column(4))"
        metrics:
          hw.physical_disk.size: $column(4)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # diskID;Status;
          - type: awk
            script: EmbeddedFile(2)
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: DiskStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # ControllerNumber;diskID;size;raidType
          - type: awk
            script: EmbeddedFile(3)
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          hw.logical_disk.limit: $column(3)
          raid_level: $column(4)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(4), $column(3))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # diskID;Status;
          - type: awk
            script: EmbeddedFile(3)
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: DiskStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
embedded:
  EmbeddedFile(1): |-
    BEGIN {
        controllerID = "";
    }
    /^MSHW_Controller / {
        controllerID = $2
        model = ""
        firmware = ""
    }
    (($1 == controllerID ".") && (NF > 6) && ($(NF-6) == "LSI") && ($(NF-5) == "Logic")) {
        model = $(NF-4)
        firmware = $(NF-1)
    }
    /^PhysDisk [0-9]/ {
        if (controllerID != "" && model != "")
        {
            print "MSHW;" controllerID ";LSI Logic;" model ";" firmware
            controllerID = ""
            model = ""
        }
    }
  EmbeddedFile(3): |-
    BEGIN {
        controllerID = "";
    }
    /^MSHW_Controller / {
        controllerID = $2
    }
    /^Volume [0-9] is / {
        volumeID = $2
        raidType = $9
        enabled = 0
        diskSize = ""
    }
    /Volume State:/ {
        if ($0 ~ /[Dd]isabled/)
        {
            enabled = 0
        }
        else
        {
            enabled = 1
        }

        colonIndex = index($0, ":")
        status = substr($0, colonIndex + 3, length - colonIndex - 2)
        commaIndex = index(status, ",")
        if (commaIndex > 1)
        {
            status = substr(status, 1, commaIndex - 1)
        }
    }
    /Volume Size/ {
        diskSize = $3
        sizeUnit = $4
        if (sizeUnit == "MB,") { diskSize = diskSize * 1048576 }
        else if (sizeUnit == "GB,") { diskSize = diskSize * 1048576 * 1024 }
        else if (sizeUnit == "TB,") { diskSize = diskSize * 1048576 * 1048576 }
    }
    /^ *$/ {
        if (controllerID != "" && volumeID != "" && enabled == 1)
        {
            print "MSHW;" controllerID ";" volumeID ";" diskSize ";" raidType ";" status
            volumeID = ""
        }
    }
  EmbeddedFile(2): |-
    BEGIN {
        controllerID = "";
    }
    /^MSHW_Controller / {
        controllerID = $2
    }
    /^PhysDisk [0-9]/ {
        if (controllerID != "")
        {
            diskID = $2
            getline
            if ($0 ~ /PhysDisk State:/)
            {
                colonIndex = index($0, ":")
                status = substr($0, colonIndex + 3, length - colonIndex - 2)
                commaIndex = index(status, ",")
                if (commaIndex > 1)
                {
                    status = substr(status, 1, commaIndex - 1)
                }
            }
            getline
            if ($0 ~ /PhysDisk Size/)
            {
                diskSize = $3
                sizeUnit = $4
                if (sizeUnit == "MB,") { diskSize = diskSize * 1048576 }
                else if (sizeUnit == "GB,") { diskSize = diskSize * 1048576 * 1024 }
                else if (sizeUnit == "TB,") { diskSize = diskSize * 1048576 * 1048576 }
                colonIndex = index($0, ":")
                if (colonIndex > 10)
                {
                    tempDiskModel = substr($0, colonIndex + 2, length - colonIndex - 1)
                    n = split(tempDiskModel, diskModelArray, " ")
                    diskModel = ""
                    for (i=1 ; i<n ; i++)
                    {
                        diskModel = diskModel diskModelArray[i] " "
                    }
                    diskModel = diskModel diskModelArray[n]
                }
                print "MSHW;" controllerID ";"  diskID ";" diskModel ";" diskSize ";" status
                status = ""
                diskModel = ""
                diskSize = ""
            }
        }
    }
translations:
  DiskStatusTranslationTable:
    default: UNKNOWN
    offlinerequested: degraded
    optimal: ok
    missing: failed
    online: ok
    initializing: degraded
    failed: failed
    degraded: degraded
    notcompatible: failed
    failedrequested: failed
