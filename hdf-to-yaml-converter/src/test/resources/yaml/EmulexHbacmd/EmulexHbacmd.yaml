---
connector:
  displayName: Emulex HBAs (hbacmd)
  platforms: Any system with Emulex
  reliesOn: Emulex's hbacmd utility
  information: This connector discovers Emulex HBAs of servers running UNIX or Linux using the hbacmd utility provided with the Emulex Drivers.
  version: 1.0
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Linux
    - Solaris
    supersedes:
    - CpqHBA
    - SMISHBA
    criteria:
    # Test the hbacmd command for ports
    - type: osCommand
      commandLine: "%{SUDO:hbacmd} hbacmd ListHBAs"
      expectedResult: Port WWN
      timeout: 120
sudoCommands:
- hbacmd
monitors:
  network:
    discovery:
      sources:
        source(1):
          # Get the list of Ports from hbacmd ListHBAs
          type: osCommand
          commandLine: "%{SUDO:hbacmd} hbacmd ListHBAs"
          timeout: 120
          computes:
            # AWK it
            # Model;WWN;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(2):
          # Get the list of Ports from hbacmd PortAttrib
          type: osCommand
          commandLine: "for HBA in `%{SUDO:hbacmd} hbacmd ListHBAs | /usr/bin/awk '($1 == \"Port\" && $2 == \"WWN\") {print $4}'`;do %{SUDO:hbacmd} hbacmd PortAttrib $HBA;done;"
          timeout: 120
          computes:
            # AWK it
            # Speed;Status;WWN;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Convert Speed from Gbps to Mbps (multiply by 1000)
            # Speed;Status;WWN;
          - type: multiply
            column: 1
            value: 1000
        source(3):
          # Source (3) = TJ of 1 & 2
          # Model;WWN;Speed;Status;WWN;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(1)}"
          rightTable: "${source::monitors.network.discovery.sources.source(2)}"
          leftKeyColumn: 2
          rightKeyColumn: 3
      mapping:
        # InstanceTable = Source(3)
        # Model;WWN;Speed;Status;WWN;
        source: "${source::monitors.network.discovery.sources.source(3)}"
        attributes:
          id: $2
          vendor: Emulex
          model: $1
          bandwidth: $3
          physical_address: $2
          physical_address_type: WWN
          device_type: HBA FC Port
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $2, \"HBA FC Port\", \"Emulex\", $1)}"
    collect:
      # The NetworkCard collect is a "MultiInstance" collect
      type: multiInstance
      sources:
        source(1):
          # Get the list of Ports from hbacmd PortAttrib
          type: osCommand
          commandLine: "for HBA in `%{SUDO:hbacmd} hbacmd ListHBAs | /usr/bin/awk '($1 == \"Port\" && $2 == \"WWN\") {print $4}'`;do %{SUDO:hbacmd} hbacmd PortAttrib $HBA;done;"
          timeout: 120
          computes:
            # AWK it
            # Speed;Status;WWN;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Duplicate Staus Column
            # Speed;Status;Status;Status;WWN;
          - type: duplicateColumn
            column: 2
          - type: duplicateColumn
            column: 2
            # Translate Network Status
            # Speed;PatrolStatus;Status;Status;WWN;
          - type: translate
            column: 2
            translationTable: "${translation::NetworkStatusTranslationTable}"
            # Translate Network Status Information
            # Speed;PatrolStatus;StatusInformation;Status;WWN;
          - type: translate
            column: 3
            translationTable: "${translation::NetworkStatusInfoTranslationTable}"
            # Translate Network Status Information
            # Speed;PatrolStatus;StatusInformation;LinkStatus;WWN;
          - type: translate
            column: 4
            translationTable: "${translation::NetworkLinkStatusTranslationTable}"
            # Convert Speed from Gbps to Mbps (multiply by 1000)
            # Speed;PatrolStatus;StatusInformation;LinkStatus;WWN;
          - type: multiply
            column: 1
            value: 1000
        source(2):
          # Get the list of Ports from hbacmd PortStat
          type: osCommand
          commandLine: "for HBA in `%{SUDO:hbacmd} hbacmd ListHBAs | /usr/bin/awk '($1 == \"Port\" && $2 == \"WWN\") {print $4}'`;do %{SUDO:hbacmd} hbacmd PortStat $HBA;done;"
          timeout: 120
          computes:
            # AWK it
            # TxFrame;RxFrame;TxB;RxB;ErrorCount;WWN;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(3):
          # Source (3) = TJ of 1 & 2
          # Speed;PatrolStatus;StatusInformation;LinkStatus;WWN;TxFrame;RxFrame;TxB;RxB;ErrorCount;WWN;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(2)}"
          leftKeyColumn: 5
          rightKeyColumn: 6
      mapping:
        # ValueTable = Source(1)
        # Speed;PatrolStatus;StatusInformation;LinkStatus;WWN;TxFrame;RxFrame;TxB;RxB;ErrorCount;WWN;
        source: "${source::monitors.network.collect.sources.source(3)}"
        deviceId: $5
        metrics:
          hw.network.bandwidth.limit: megaBit2Bit($1)
          hw.status{hw.type="network"}: $2
          hw.network.up: legacyLinkStatus($4)
          hw.network.packets{direction="receive"}: $7
          hw.network.packets{direction="transmit"}: $6
          hw.errors{hw.type="network"}: $10
          hw.network.io{direction="receive"}: $9
          hw.network.io{direction="transmit"}: $8
        legacyTextParameters:
          StatusInformation: $3
translations:
  NetworkStatusInfoTranslationTable:
    Link Down. Need Adapter Port Reset: Link Down. Need Adapter Port Reset.
    Down: Port Down
    Loopback: Loopback
    User Offline: User Offline
    Operational: ""
    Operational. Need Adapter Port Reset: Operational. Need Adapter Port Reset.
    In Diagnostic Mode: In Diagnostic Mode
    Link Down: Link Down
    Bypassed: Bypassed
    Port Error: Port Error
    Default: UNKNOWN
    Other: Other
  NetworkLinkStatusTranslationTable:
    Operational: ok
    Link Down: degraded
    Default: UNKNOWN
  NetworkStatusTranslationTable:
    Link Down. Need Adapter Port Reset: degraded
    Down: failed
    Loopback: degraded
    User Offline: degraded
    Operational: ok
    Operational. Need Adapter Port Reset: degraded
    In Diagnostic Mode: degraded
    Link Down: ok
    Bypassed: degraded
    Port Error: failed
    Default: UNKNOWN
    Other: UNKNOWN
