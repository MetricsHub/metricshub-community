---
connector:
  displayName: Oracle/Sun Enterprise Mx000 (XSCF)
  platforms: Oracle/Sun Enterprise Mx000
  reliesOn: Sun XSCF utilities installed on the System Controller
  information: "Gives environmental information (temperatures, fans, etc.) and boards status on SPARC Enterprise M4000, M5000, M8000 and M9000 servers."
  version: 1.5
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Solaris
    - OOB
    criteria:
    # showhardconf must return platform's type
    - type: osCommand
      commandLine: showhardconf
      errorMessage: This system does not appear to be an XSCF connected to a SPARC Enterprise Mx000 system
      expectedResult: 'Serial:'
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = Output of the showhardconf command
          type: osCommand
          commandLine: showhardconf
          computes:
          # Remove all colons and semicolons
          - type: awk
            script: "${file::embeddedFile-1}"
        source(2):
          # Source(2) = copy of Source(1)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Process the showhardconf command throug an AWK script that lists the enclosures
            # (the main enclosure as well as the I/O expansion units)
            # EnclosureID;EnclosureType;Vendor;Model;Serial;Fru;Status;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8"
            # Add "FRU: " in front of the Fru column
            # EnclosureID;EnclosureType;Vendor;Model;Serial;Fru
          - type: leftConcat
            column: 6
            value: "Part Number: "
      mapping:
        # The discovery table
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: $1
          type: $2
          vendor: $3
          model: $4
          serial_number: $5
          info: $6
          name: "${awk::sprintf(\"Enclosure: (%s %s)\", $3, $4)}"
        conditionalCollection:
          hw.status{hw.type="enclosure"}: $7
    collect:
      # Collect type is multi-instance (of course)
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of hte showhardconf command
          type: osCommand
          commandLine: showhardconf
          computes:
          # Remove all colons and semicolons
          - type: awk
            script: "${file::embeddedFile-1}"
        source(2):
          # Source(2) = copy of Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Process the showhardconf command throug an AWK script that lists the enclosures
            # (the main enclosure as well as the I/O expansion units)
            # EnclosureID;Status;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,8"
            # Duplicate Status
            # EnclosureID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # EnclosureID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
      mapping:
        # The ValueTable
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="enclosure"}: $2
        legacyTextParameters:
          StatusInformation: $3
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # AWK script that keeps only the CPUs
            # CpuID;Model;Speed;SerialNumber;Fru;PowerConsumption;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,8"
            # Add "FRU: " in front of the Fru column
            # CpuID;Model;Speed;SerialNumber;Fru;PowerConsumption;
          - type: leftConcat
            column: 5
            value: "Part Number: "
          - type: leftConcat
            column: 4
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $1
          model: $2
          info: "${awk::join(\" \", $5, $4)}"
          hw.parent.type: enclosure
          hw.parent.id: Main
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $2, megaHertz2HumanFormat($3))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($3)
    collect:
      # Collet type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # AWK script that keeps only the CPUs
            # CpuID;State;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,7"
            # Duplicate 'State'
            # CpuID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # CpuID;PATROLStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="cpu"}: $2
        legacyTextParameters:
          StatusInformation: $3
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # AWK script that keeps only the memory modules
            # MemoryID;Model;Size;SerialNumber;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          type: $2
          serial_number: $4
          hw.parent.type: enclosure
          hw.parent.id: Main
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $1, $2, $3)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($3)
    collect:
      # Collet type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # AWK script that keeps only the CPUs
            # MemoryID;State
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,6"
            # Duplicate 'State'
            # MemoryID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # MemoryID;PATROLStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # AWK script that keeps only the power supplies
            # PowerSupplyID;ParentID;SerialNumber;FRU;
          - type: awk
            script: "${file::embeddedFile-5}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Add "FRU: " to the left of the FRU column
            # PowerSupplyID;ParentID;SerialNumber;FRU;
          - type: leftConcat
            column: 4
            value: "Part Number: "
          - type: leftConcat
            column: 3
            value: "Serial Number: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          info: "${awk::join(\" \", $4, $3)}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $1
    collect:
      # Collet type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # AWK script that keeps only the power supplies
            # PowerSupplyID;State
          - type: awk
            script: "${file::embeddedFile-5}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,6"
            # Duplicate 'State'
            # MemoryID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # MemoryID;PATROLStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # AWK script that keeps only the fans
            # FanID;FanType;
          - type: awk
            script: "${file::embeddedFile-7}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: Main
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collet type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # AWK script that keeps only the CPUs
            # FanID;State
          - type: awk
            script: "${file::embeddedFile-7}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Duplicate 'State'
            # FanID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # FanID;PATROLStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: showenvironment volt
          computes:
            # Pipe showenvironment's output into the ${file::embeddedFile-6} awk script
            # DeviceID;VoltageType;LowerThreshold;UpperThreshold
          - type: awk
            script: "${file::embeddedFile-6}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: Main
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $3
          hw.voltage.limit{limit_type="high.degraded"}: $4
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: showenvironment volt
          computes:
            # Piped showenvironment's output into the ${file::embeddedFile-6} awk script
            # DeviceID;Voltage;
          - type: awk
            script: "${file::embeddedFile-6}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,6"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: showenvironment temp
          computes:
            # Pipe showenvironment's output into the ${file::embeddedFile-10} awk script
            # MSHW;SensorID;Temperature;Warning;Alarm;
          - type: awk
            script: "${file::embeddedFile-10}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $1
          hw.parent.type: enclosure
          hw.parent.id: Main
          name: "${awk::sprintf(\"%s (%s)\", $1, $1)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: showenvironment temp
          computes:
            # Piped showenvironment's output into the ${file::embeddedFile-10} awk script
            # MSHW;SensorID;Temperature;Warning;Alarm;
          - type: awk
            script: "${file::embeddedFile-10}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # ValueTable = Source(1)
        # SensorID;Temperature
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showdomains -a
          type: osCommand
          commandLine: showdomainstatus -a
          computes:
            # Pipe showdomainsm's output into the ${file::embeddedFile-8} awk script
            # DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
          - type: awk
            script: "${file::embeddedFile-8}"
            keep: ^MSHW;Domain;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(2):
          # Source(2) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # AWK script that keeps only the IO Units, XSCF units, and other stuff
            # DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
          - type: awk
            script: "${file::embeddedFile-9}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
            # Add "FRU: " on the left of the FruPartNumber column
            # DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
          - type: leftConcat
            column: 6
            value: "Part Number: "
          - type: leftConcat
            column: 5
            value: "Serial Number: "
        source(3):
          # Source(3) = union of Source(1) and Source(2)
          # DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(1)}"
          - "${source::monitors.other_device.discovery.sources.source(2)}"
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(3)}"
        attributes:
          device_type: $1
          id: $2
          additional_label: $4
          info: "${awk::join(\" \", $6, $5)}"
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s: %s (%s)\", $1, $2, $4)}"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showdomains -a
          type: osCommand
          commandLine: showdomainstatus -a
          computes:
            # Pipe showdomains' output into the ${file::embeddedFile-8} awk script
            # DeviceID;State
          - type: awk
            script: "${file::embeddedFile-8}"
            keep: ^MSHW;Domain;
            separators: ;
            selectColumns: "3,8"
            # Duplicate 'State'
            # DeviceID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # DeviceID;PATROLStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::DomainStatusTranslationTable}"
        source(2):
          # Source(2) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # AWK script that keeps only the IO Units, XSCF units, and other stuff
            # DeviceID;State;PowerConsumption;
          - type: awk
            script: "${file::embeddedFile-9}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,8,9"
            # Duplicate 'State'
            # DeviceID;State;State;PowerConsumption;
          - type: duplicateColumn
            column: 2
            # Translate the first State column into a PATROL Status
            # DeviceID;PATROLStatus;State;PowerConsumption;
          - type: translate
            column: 2
            translationTable: "${translation::ShowHardConfStatusTranslationTable}"
        source(3):
          # Source(3) = union of Source(1) and Source(2)
          # DeviceID;PATROLStatus;State;PowerConsumption;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
      mapping:
        # ValueTable = Source(3)
        source: "${source::monitors.other_device.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
          hw.power{hw.type="other_device"}: $4
          hw.energy{hw.type="other_device"}: fakeCounter($4)
        legacyTextParameters:
          StatusInformation: $3
translations:
  ShowHardConfStatusTranslationTable:
    Degraded: degraded
    Deconfigured: degraded
    Input Fail: failed
    Maintenance: ok
    Faulted: failed
    Normal: ok
    Default: UNKNOWN
  DomainStatusTranslationTable:
    Panic State: failed
    Powered Off: ok
    Booting/OpenBoot PROM prompt: ok
    Initialization Phase: ok
    Running: ok
    Shutdown Started: ok
    OpenBoot Execution Completed: ok
    Default: UNKNOWN
