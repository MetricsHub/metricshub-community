---
connector:
  displayName: Quantum (ADIC) Enterprise Level Tape Libraries
  platforms: "Quantum Scalar i2000,Quantum Scalar i6000"
  reliesOn: Quantum SNMP Agent (ADIC-MANAGEMENT-MIB)
  version: 1.0
  information: This connector provides hardware monitoring through the Quantum Scalar's SNMP interface.  It is primarily designed for the i2000 and i6000 libraries.
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    supersedes:
    - SMISLibrary
    criteria:
      # DETECTION
      # Does a get_next to see if there are any tape drives
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.3764.1.1.200.20.80.110.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = FRU information
          # Role;Model;Vendor;Firmware;SerialNumber;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.10
          selectColumns: "1,3,6,8,10"
          computes:
            # Add an identifier to enable table Joints
            # MSHW;Role;Model;Vendor;Firmware;SerialNumber;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          # Get the Enclosure(s) ID(s)
          # EnclosureID;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.10.10.1
          selectColumns: ID
          computes:
            # Add an identifier to enable table Joints
            # MSHW;EnclosureID;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(3):
          # Join the EnclosureIDs with the FRUs
          # MSHW;EnclosureID;MSHW;Role;Model;Vendor;Firmware;SerialNumber;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
          computes:
          # Add \"Role: \" to AdditionalInformation1
          - type: leftConcat
            column: 4
            value: "Role: "
      mapping:
        # InstanceTable = Source(1)
        # MSHW;EnclosureID;MSHW;Role;Model;Vendor;Firmware;SerialNumber;
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: $2
          vendor: $6
          model: $5
          serial_number: $8
          bios_version: $7
          type: Storage
          info: $4
          name: "${awk::sprintf(\"Storage: (%s %s)\", $6, $5)}"
    collect:
      type: multiInstance
      sources:
        source(1):
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.10.10.1
          selectColumns: "ID,2"
          computes:
            # Duplicate status, because we will translate it two times
            # EnclosureID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # EnclosureID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::EnclosureStatusTranslationTable}"
            # Translate second Status into more readable string
            # EnclosureID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::EnclosureStatusInformationTranslationTable}"
      mapping:
        # Value Table
        # EnclosureID;PATROLStatus;StatusInformation;
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="enclosure"}: $2
        legacyTextParameters:
          StatusInformation: $3
  tape_drive:
    discovery:
      sources:
        source(1):
          # Source(1) = \tphDriveEntry SNMP table\nTapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.80.110.1
          selectColumns: "ID,6,7,8,9"
          computes:
            # Deactivate Needs Cleaning if value = 0 (autoclean)
            # TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;
          - type: replace
            column: 5
            existingValue: 0
            newValue: ""
            # Extract the DisplayID and Location
            # TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;DisplayID;Location;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8"
      mapping:
        # Instance Table
        # TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;DisplayID;Location;
        source: "${source::monitors.tape_drive.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $6
          vendor: $2
          model: $3
          serial_number: $4
          info: $7
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s %s)\", $6, $2, $3)}"
        conditionalCollection:
          hw.status{hw.type="tape_drive", state="needs_cleaning"}: legacyNeedsCleaning($5)
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \tphysicalDriveEntry SNMP table\nTapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;RASStatus;Loads;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.80.110.1
          selectColumns: "ID,9,23,24,31,20"
          computes:
            # Duplicate status, because we will translate it two times
            # TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;RASStatus;RASStatus;Loads;
          - type: duplicateColumn
            column: 5
            # Translate Status into PATROLStatus
            # TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;RASStatus;Loads;
          - type: translate
            column: 5
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: translate
            column: 6
            translationTable: "${translation::StatusInformationTranslationTable}"
            # Duplicate Cleaning status, because we will translate it two times
            # TapeDriveID;NeedsCleaning;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: duplicateColumn
            column: 2
            # Translate Cleaning Status into CleaningStatus
            # TapeDriveID;CleaningStatus;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: translate
            column: 2
            translationTable: "${translation::CleaningStatusTranslationTable}"
            # Translate second Status into more readable string
            # TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: translate
            column: 3
            translationTable: "${translation::CleaningStatusInformationTranslationTable}"
            # Merge Drive Status Information and Cleaning Status Information
            # TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: rightConcat
            column: 7
            value: $3
            # Add write errors to read errors
            # TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
          - type: add
            column: 4
            value: $5
      mapping:
        # Value Table
        # TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
        source: "${source::monitors.tape_drive.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="tape_drive"}: $6
          hw.status{hw.type="tape_drive", state="needs_cleaning"}: legacyNeedsCleaning($2)
          hw.tape_drive.operations{type="mount"}: $8
          hw.errors{hw.type="tape_drive"}: $4
        legacyTextParameters:
          StatusInformation: $7
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = \tGlobal RAS SNMP table\nDeviceID
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: ID
          computes:
            # Keep only the correct type of group
            # DeviceID
          - type: keepOnlyMatchingLines
            column: 1
            regExp: 5$
            # Add a Type of "Global"
            # Type;DeviceID;
          - type: leftConcat
            column: 1
            value: Global;
            # Add Marker to the End of the DeviceID
            # Type;DeviceID;
          - type: rightConcat
            column: 2
            value: _MSHW
            # Remove the last digit (the type of sensor) to leave just the system ID
            # Type;DeviceID;
          - type: replace
            column: 2
            existingValue: .5_MSHW
            newValue: ""
      mapping:
        # Instance Table
        # Type;DeviceID;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \t\tGlobal RAS SNMP table\nDeviceID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: "ID,2"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
            # Add Marker to the End of the DeviceID
            # DeviceID;PATROLStatus;StatusInformation;
          - type: rightConcat
            column: 1
            value: _MSHW
            # Remove the last digit (the type of sensor) to leave just the system ID
            # DeviceID;PATROLStatus;StatusInformation;
          - type: replace
            column: 1
            existingValue: .5_MSHW
            newValue: ""
      mapping:
        # Value Table
        # DeviceID;PATROLStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  robotics:
    discovery:
      sources:
        source(1):
          # Source(1) = \tGlobal RAS SNMP table\nDeviceID;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: ID
          computes:
            # Keep only the correct type of group
            # DeviceID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: 6$
            # Add a Type of "Global"
            # Type;DeviceID;
          - type: leftConcat
            column: 1
            value: Global;
            # Add Marker to the End of the DeviceID
            # Type;DeviceID;
          - type: rightConcat
            column: 2
            value: _MSHW
            # Remove the last digit (the type of sensor) to leave just the system ID
            # Type;DeviceID;
          - type: replace
            column: 2
            existingValue: .6_MSHW
            newValue: ""
      mapping:
        # Instance Table
        # Type;DeviceID;
        source: "${source::monitors.robotics.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \t\tGlobal RAS SNMP table\nDeviceID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: "ID,2"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
            # Add Marker to the End of the DeviceID
            # DeviceID;PATROLStatus;StatusInformation;
          - type: rightConcat
            column: 1
            value: _MSHW
            # Remove the last digit (the type of sensor) to leave just the system ID
            # DeviceID;PATROLStatus;StatusInformation;
          - type: replace
            column: 1
            existingValue: .6_MSHW
            newValue: ""
      mapping:
        # Value Table
        # DeviceID;PATROLStatus;StatusInformation;
        source: "${source::monitors.robotics.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="robotics"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = \tGlobal RAS SNMP table\nDeviceID;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: ID
          computes:
            # Keep only the correct type of group
            # DeviceID;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: 2$
            # Add a Type of "Global"
            # Type;DeviceID;
          - type: leftConcat
            column: 1
            value: Control System;
            # Add a DisplayID
            # Type;DeviceID;DisplayID;
          - type: rightConcat
            column: 2
            value: ;Global
        source(2):
          # Source(2) = \tComponent Table\nType;DeviceID;DisplayID;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.30.10.1
          selectColumns: "3,ID,5"
        source(3):
          # Union of 1 & 2
          # Type;DeviceID;DisplayID;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.discovery.sources.source(1)}"
          - "${source::monitors.other_device.discovery.sources.source(2)}"
      mapping:
        # Instance Table
        # Type;DeviceID;DisplayID;
        source: "${source::monitors.other_device.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $3
          device_type: $1
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s: %s\", $1, $3)}"
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \t\tGlobal RAS SNMP table\nDeviceID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.20.100.10.1
          selectColumns: "ID,2"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
        source(2):
          # Source(2) = \tComponent Table\nDeviceID;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.30.10.1
          selectColumns: "ID,8"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::EnclosureStatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::EnclosureStatusInformationTranslationTable}"
        source(3):
          # Union of 1 & 2
          # DeviceID;PATROLStatus;StatusInformation;
          type: tableUnion
          tables:
          - "${source::monitors.other_device.collect.sources.source(1)}"
          - "${source::monitors.other_device.collect.sources.source(2)}"
      mapping:
        # Value Table
        # DeviceID;PATROLStatus;StatusInformation;
        source: "${source::monitors.other_device.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Voltage\nSource(1) = \tVoltage Table\nDeviceID;Name;WarningLow;WarningHigh;location
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.20.1
          selectColumns: "ID,2,8,9,10"
          computes:
            # Add a space and the Location to the Name
            # DeviceID;Name;WarningLow;WarningHigh;location
          - type: rightConcat
            column: 2
            value: ' '
          - type: rightConcat
            column: 2
            value: $5
            # Remove Voltage and Sensor from the Name
            # DeviceID;Name;WarningLow;WarningHigh;location
          - type: replace
            column: 2
            existingValue: voltage
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' Sensor'
            newValue: ""
          # DeviceID;Type;WarningLow;WarningHigh;location
          - type: awk
            script: "${file::embeddedFile-2}"
      mapping:
        # Here is the instance table = source(1)
        # DeviceID;Type;WarningLow;WarningHigh;location
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $4
          hw.voltage.limit{limit_type="low.critical"}: $3
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \tVoltage Table\nDeviceID;Status;Voltage;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.20.1
          selectColumns: "ID,3,4"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;Voltage;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;Voltage;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;Voltage;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $4
          hw.status{hw.type="voltage"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = \tTemperature Table\nDeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.30.1
          selectColumns: "ID,2,3,4,6,8,9"
          computes:
            # Exclude Sensors with a Status of "7" (No Data)
            # DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
          - type: excludeMatchingLines
            column: 3
            valueList: 7
            # Remove Thresholds of Zero
            # DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
          - type: leftConcat
            column: 5
            value: MSHW_
          - type: leftConcat
            column: 6
            value: MSHW_
          - type: replace
            column: 5
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 6
            existingValue: MSHW_0
            newValue: ""
          # Remove MSHW_ for non blank / non zero values
          - type: replace
            column: 5
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 6
            existingValue: MSHW_
            newValue: ""
            # Add a space and the Location to the Name
            # DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
          - type: rightConcat
            column: 2
            value: ' '
          - type: rightConcat
            column: 2
            value: $7
            # Remove Voltage and Sensor from the Name
            # DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
          - type: replace
            column: 2
            existingValue: temperature
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' Sensor'
            newValue: ""
      mapping:
        # Here is the instance table = source(1)
        # DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
        metrics:
          hw.temperature.limit{limit_type="high.critical"}: $5
          hw.temperature.limit{limit_type="high.degraded"}: $6
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \tTemperature Table\nDeviceID;Status;Temperature;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.30.1
          selectColumns: "ID,3,4"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;Temperature;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;Temperature;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;Temperature;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $4
          hw.status{hw.type="temperature"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Fan\nSource(1) = \tFan Table\nDeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.40.1
          selectColumns: "ID,2,3,4,5,7,9"
          computes:
            # Exclude Sensors with a Status of "7" (No Data)
            # DeviceID;Type;Status;Speed;NominalLow;WarningLow;
          - type: excludeMatchingLines
            column: 3
            valueList: 7
            # Remove Thresholds of Zero
            # DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
          - type: leftConcat
            column: 5
            value: MSHW_
          - type: leftConcat
            column: 6
            value: MSHW_
          - type: replace
            column: 5
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 6
            existingValue: MSHW_0
            newValue: ""
          # Remove MSHW_ for non blank / non zero values
          - type: replace
            column: 5
            existingValue: MSHW_
            newValue: ""
          - type: replace
            column: 6
            existingValue: MSHW_
            newValue: ""
            # Add a space and the Location to the Name
            # DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
          - type: rightConcat
            column: 2
            value: ' '
          - type: rightConcat
            column: 2
            value: $7
            # Remove Voltage and Sensor from the Name
            # DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
          - type: replace
            column: 2
            existingValue: fan
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' Sensor'
            newValue: ""
      mapping:
        # Here is the instance table = source(1)
        # DeviceID;Type;Status;Speed;NominalLow;WarningLow;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
        metrics:
          hw.fan.speed.limit{limit_type="low.critical"}: $5
          hw.fan.speed.limit{limit_type="low.degraded"}: $6
    collect:
      type: multiInstance
      sources:
        source(1):
          # Source(1) = \tFan Table\nDeviceID;Status;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.3764.1.1.200.200.40.1
          selectColumns: "ID,3,4"
          computes:
            # Duplicate status, because we will translate it two times
            # DeviceID;Status;Status;Speed;
          - type: duplicateColumn
            column: 2
            # Translate Status into PATROLStatus
            # DeviceID;PATROLStatus;Status;Speed;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate second Status into more readable string
            # DeviceID;PATROLStatus;StatusInformation;Speed;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.fan.speed: $4
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  CleaningStatusTranslationTable:
    "1": 1
    "2": 0
    "3": 2
    Default: UNKNOWN
  EnclosureStatusTranslationTable:
    "1": degraded
    "2": UNKNOWN
    "3": ok
    "4": degraded
    "5": failed
    "6": failed
    Default: UNKNOWN
  StatusInformationTranslationTable:
    "1": ""
    "2": Failed
    "3": Degraded
    "4": Warning
    "5": Informational
    "6": Unknown
    "7": Invalid
    Default: Unknown Status
  StatusTranslationTable:
    "1": ok
    "2": failed
    "3": degraded
    "4": degraded
    "5": degraded
    "6": UNKNOWN
    "7": failed
    Default: UNKNOWN
  EnclosureStatusInformationTranslationTable:
    "1": Reporting status of 'Other'
    "2": Unknown
    "3": ""
    "4": Non-Critical
    "5": Critical
    "6": Non-Recoverable
    Default: Unknown Status
  CleaningStatusInformationTranslationTable:
    "0": ""
    "1": ' Cleaning Required'
    "2": ""
    "3": ' Immediate Cleaning Required'
    Default: ' Unknown Cleaning Status'
