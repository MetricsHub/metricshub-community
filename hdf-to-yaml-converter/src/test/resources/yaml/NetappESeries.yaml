---
connector:
  displayName: NetApp E-Series
  platforms: NetApp E-Series
  version: 1.0
  information: "This connector discovers the status of a NetApp E-Series Storage Array, including environment sensors (temperatures, fans, power supplies, etc.). Relies on NetApp SANtricity REST API"
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
      # DETECTION
      # Queries the REST interface for a response containing 'netapp-e'
    - type: http
      method: GET
      url: /devmgr/v2/storage-systems/1
      expectedResult: '"chassisSerialNumber":'
      errorMessage: Invalid credentials / not a NetApp E-Series
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          # Queries the REST interface for Enclosure information
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1
          resultContent: body
          computes:
            # Transform JSON to CSV to extract information
            # JSONID;name;model;fwVersionl;chassisSerialNumber
          - type: json2csv
            entryKey: /
            properties: /name;/model;/chassisSerialNumber;
            separator: ;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          # Trays
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1/hardware-inventory
          resultContent: body
        source(3):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
          # Transform JSON to CSV to extract information
          - type: json2csv
            entryKey: /trays
            properties: /trayRef;/trayId;/partNumber;/serialNumber;
            separator: ;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(4):
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(3)$
          rightTable: $monitors.enclosure.discovery.sources.source(1)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
            # Add "Model: E" for AdditionalInformation3
            # mshw;jsonid;trayRef;trayId;partNumber;serialNumber;mshw;jsonid;name;model;chassisSerialNumber
          - type: leftConcat
            column: 10
            value: E
          # Add \"Chassis Serial Number: \" to AdditionalInformation2
          - type: leftConcat
            column: 11
            value: "Chassis Serial Number: "
          # Add \"Storage System: \"
          - type: leftConcat
            column: 9
            value: "Storage System: "
          # Add \"Tray: \" to DisplayID
          - type: leftConcat
            column: 4
            value: "Tray: "
          - type: leftConcat
            column: 5
            value: "Part Number: "
      mapping:
        # Enclosure Instance Table
        # JSONID;name;model;chassisSerialNumber
        source: $monitors.enclosure.discovery.sources.source(4)$
        attributes:
          id: $column(3)
          __display_id: $column(4)
          model: $column(10)
          serial_number: $column(6)
          type: Storage
          vendor: NetApp
          info: "join($column(9), $column(11), $column(5), \" \")"
          name: "sprintf(\"Storage: %s (%s %s)\", $column(4), \"NetApp\", $column(10))"
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          # Queries the REST interface for Enclosure information
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1
          resultContent: body
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JSONID;status;status;
          - type: json2csv
            entryKey: /
            properties: /status;/status
            separator: ;
          # Translate API status to PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          # This Source is used for almost all other classes
          # Queries the REST interface for Enclosure information
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1/hardware-inventory
          resultContent: body
        source(3):
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
          # Transform JSON to CSV to extract information
          - type: json2csv
            entryKey: /trays
            properties: /trayRef;
            separator: ;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(4):
          type: tableJoin
          leftTable: $monitors.enclosure.collect.sources.source(3)$
          rightTable: $monitors.enclosure.collect.sources.source(1)$
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # Enclosure Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.enclosure.collect.sources.source(4)$
        deviceId: $column(3)
        metrics:
          hw.status{hw.type="enclosure"}: $column(6)
        legacyTextParameters:
          StatusInformation: $column(7)
  physical_disk:
    discovery:
      sources:
        source(1):
          # PhysicalDisk Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;manufacturer;productID;serialNumber;label;firmwareVersion;rawCapacity;maxSpeed;phyDriveType;
          - type: json2csv
            entryKey: drives
            properties: /manufacturer;/productID;/serialNumber;/physicalLocation/label;/firmwareVersion;/rawCapacity;/maxSpeed;/phyDriveTypeData/phyDriveType;../physicalLocation/trayRef;
            separator: ;
          # Label column 8 with speed for additional information
          - type: replace
            column: 8
            existingValue: speed
            newValue: "Speed: "
          - type: leftConcat
            column: 5
            value: 'Bay - '
          - type: leftConcat
            column: 9
            value: "Disk Type: "
      mapping:
        # PhysicalDisk Instance Table
        # JsonID;manufacturer;productID;serialNumber;label;firmwareVersion;rawCapacity;maxSpeed;phyDriveType;
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          vendor: $column(2)
          model: $column(3)
          serial_number: $column(4)
          __display_id: $column(5)
          firmware_version: $column(6)
          info: "join($column(8), $column(9), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(10)
          name: "sprintf(\"%s (%s - %by10hf.s)\", $column(5), $column(2), $column(7))"
        metrics:
          hw.physical_disk.size: $column(7)
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # PhysicalDisk Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: drives
            properties: /status;/status;/ssdWearLife/spareBlocksRemainingPercent;
            separator: ;
          # Translate API status to PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # PhysicalDisk Value Table
        # JsonID;PatrolStatus;StatusInformation;EnduranceRemaining
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
          hw.physical_disk.endurance_utilization{state="remaining"}: percent2Ratio($column(4))
        legacyTextParameters:
          StatusInformation: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # PowerSupply Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;location;model;serialnumber;vendor;
          - type: json2csv
            entryKey: powerSupplies
            properties: /physicalLocation/slot;/partnumber;/serialNumber;/vendorName;../physicalLocation/trayRef;
            separator: ;
          - type: leftConcat
            column: 2
            value: 'PSU - '
          - type: leftConcat
            column: 3
            value: "Part Number: "
          - type: leftConcat
            column: 5
            value: "Vendor: "
          - type: leftConcat
            column: 4
            value: "Serial Number: "
      mapping:
        # PowerSupply Instance Table
        # JsonID;location;model;serialnumber;vendor;
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          info: "join($column(3), $column(5), $column(4), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(6)
          name: $column(2)
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          # PowerSupply Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: powerSupplies
            properties: /status;/status;
            separator: ;
          # Translate API Status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # PowerSupply Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  fan:
    discovery:
      sources:
        source(1):
          # Fan Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;location
          - type: json2csv
            entryKey: fans
            properties: /physicalLocation/slot;../physicalLocation/trayRef;
            separator: ;
          - type: leftConcat
            column: 2
            value: 'Fan - '
      mapping:
        # Fan Instance Table
        # JsonID;location;
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          hw.parent.id: $column(3)
          name: $column(2)
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # Fan Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status
          - type: json2csv
            entryKey: fans
            properties: /status;/status;
            separator: ;
          # Translate API Status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # Fan Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  battery:
    discovery:
      sources:
        source(1):
          # Battery Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;location;Model;SerialNumber;type
          - type: json2csv
            entryKey: batteries
            properties: /physicalLocation/slot;/vendorPN;/vendorSN;/fruType;../physicalLocation/trayRef;
            separator: ;
          - type: leftConcat
            column: 4
            value: "Serial Number: "
      mapping:
        # Battery Instance Table
        # JsonID;location;Model;SerialNumber;type
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          model: $column(3)
          type: $column(5)
          info: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: $column(6)
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(3), $column(5))"
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # Battery Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: batteries
            properties: /status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # Battery Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.battery.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="battery"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  disk_controller:
    discovery:
      sources:
        source(1):
          # DiskController Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;location;Vendor;Model;SerialNumber;Type
          - type: json2csv
            entryKey: controllers
            properties: /physicalLocation/slot;/manufacturer;/oemPartNumber;/serialNumber;/fruType;/partNumber;../physicalLocation/trayRef;
            separator: ;
          - type: leftConcat
            column: 6
            value: "Type: "
      mapping:
        # DiskController Instance Table
        # JsonID;location;Vendor;Model;SerialNumber;Type
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          vendor: $column(3)
          model: $column(4)
          serial_number: $column(5)
          info: "join($column(7), $column(6), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(8)
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(2), $column(3), $column(4))"
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # DiskController Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: controllers
            properties: /status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # DiskController Value Table
        source: $monitors.disk_controller.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="disk_controller"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  temperature:
    discovery:
      sources:
        source(1):
          # Temperature Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
          # Use Json2Csv to process HTTP Response
          - type: json2csv
            entryKey: thermalSensors
            properties: /physicalLocation/slot;../physicalLocation/trayRef
            separator: ;
          - type: leftConcat
            column: 2
            value: 'Temp - '
      mapping:
        # Temperature Instance Table
        # JsonID;location;
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          hw.parent.type: enclosure
          name: $column(2)
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          # Temperature Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: thermalSensors
            properties: /status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # Temperature Value Table
        # JsonID;PatrolStatus;StatusInformation;
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="temperature"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  memory:
    discovery:
      sources:
        source(1):
          # Memory Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;location;serialNumber;Model;Vendor;Size;
          - type: json2csv
            entryKey: cacheMemoryDimms
            properties: /physicalLocation/slot;/serialNumber;/manufacturerPartNumber;/manufacturer;/capacityInMegabytes;../physicalLocation/trayRef;
            separator: ;
      mapping:
        # Memory Instance Table
        # Patrol appends MB twice to the size field!
        # JsonID;location;serialNumber;Model;Vendor;Size;
        source: $monitors.memory.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          serial_number: $column(3)
          model: $column(4)
          vendor: $column(5)
          hw.parent.type: enclosure
          hw.parent.id: $column(7)
          name: "sprintf(\"%s (%s - %s MB)\", $column(2), $column(5), $column(6))"
        metrics:
          hw.memory.limit: mebiByte2Byte($column(6))
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # Memory Source(1) = HardwareInventory
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: cacheMemoryDimms
            properties: /status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # Memory Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.memory.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="memory"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  network:
    discovery:
      sources:
        source(1):
          # Source(1) =  Ethernet (hardware-inventory) [Controller 0]
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID;tray;label;MAC;LinkStatus
          - type: json2csv
            entryKey: "/controllers[0]/netInterfaces"
            properties: /ethernet/physicalLocation/trayRef;/ethernet/physicalLocation/label;/ethernet/macAddr;/ethernet/linkStatus;
          # add "eth - A-" to label
          - type: leftConcat
            column: 3
            value: eth - A-
        source(2):
          # Source(2) =  Ethernet (hardware-inventory) [Controller 1]
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID;tray;label;mac;
          - type: json2csv
            entryKey: "controllers[1]/netInterfaces"
            properties: /ethernet/physicalLocation/trayRef;/ethernet/physicalLocation/label;/ethernet/macAddr;/ethernet/linkStatus;
          # add "eth - B-" to label
          - type: leftConcat
            column: 3
            value: eth - B-
        source(3):
          # Source(3) = Join Controller A and B Ethernet Cards
          # join tables
          type: tableUnion
          tables:
          - $monitors.network.discovery.sources.source(1)$
          - $monitors.network.discovery.sources.source(2)$
          computes:
            # Add physical type designation column
            # JSONID;controllerRef;tray;label;mac;LinkStatus
          - type: rightConcat
            column: 4
            value: ;MAC;;
        source(4):
          # Source(4) =  Fibre (hardware-inventory)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID; ControllerRef; PortName; PortName; Channel; Slot; LinkStatus
          - type: json2csv
            entryKey: /fibrePorts
            properties: /controllerId;/portName;/portName;/channel;/physicalLocation/slot;/linkStatus;
            # Add Channel Label for AdditionalInformation1
            # JSONID; ControllerRef; PortName; PortName; Channel; Location; LinkStatus
          - type: leftConcat
            column: 5
            value: "Channel: "
            # Add Location Label for AdditionalInformation2
            # JSONID; ControllerRef; PortName; PortName; Channel; Location; LinkStatus
          - type: leftConcat
            column: 6
            value: "Location: "
        source(5):
          # Source(5) = Controllers (hardware-inventory)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSON ID;controllerRef;trayRef
          - type: json2csv
            entryKey: controllers
            properties: /controllerRef;/physicalLocation/trayRef;
        source(6):
          # Join Fibre table and Controller table on Controller Ref
          # LeftTable  = JSONID;ControllerRef;PortName;PortName;Channel;Location;LinkStatus
          # RightTable = JSONID;controllerRef;trayRef
          # Result = JSONID;ControllerRef;PortName;PortName;Channel;Location;LinkStatus;JSONID;controllerRef;trayRef
          type: tableJoin
          leftTable: $monitors.network.discovery.sources.source(4)$
          rightTable: $monitors.network.discovery.sources.source(5)$
          leftKeyColumn: 2
          rightKeyColumn: 2
          computes:
          # move tray ref to column 2 to match Ethernet table. (computes 1-3)
          - type: duplicateColumn
            column: 2
          # jsonid;controllerID;controllerID;portname;portname;channel;Location;linkStatus;jsonid;controllerref;trayref;
          - type: replace
            column: 3
            existingValue: Column(3)
            newValue: Column(12)
            # drop extra columns
            # jsonid;controllerID;tray;portname;portname;channel;Location;jsonid;controllerref;trayref;
          - type: keepColumns
            columnNumbers: "1,3,4,5,6,7,8"
            # Add physical type designation column
            # jsonid;tray;portname;portname;WWN;channel;Location;jsonid;
          - type: rightConcat
            column: 4
            value: ;WWN
            # add FC designation to label
            # jsonid;tray;portname;portname;WWN;channel;Location;jsonid;
          - type: leftConcat
            column: 3
            value: 'FC - '
        source(7):
          # Source(7) = Join Ethernet and Fibre
          # Table1 = JSONID;controllerRef;tray;label;mac;addressType
          # Table2 = JSONID;tray;portname;portname;WWN;channel;Location;jsonid;
          type: tableUnion
          tables:
          - $monitors.network.discovery.sources.source(3)$
          - $monitors.network.discovery.sources.source(6)$
          computes:
          # JSONID;controller;tray;portname;WWN;portname;addresstype;linkStatus
          - type: translate
            column: 8
            translationTable: LinkSpeedParameterTranslationTable
      mapping:
        # NetworkCard Instance Table
        # JSONID;controller;tray;label;mac;addressType;
        # JSONID;tray;portname;portname;WWN;channel;Location;jsonid;
        source: $monitors.network.discovery.sources.source(7)$
        attributes:
          id: $column(1)
          __display_id: $column(3)
          physical_address: $column(4)
          physical_address_type: $column(5)
          info: "join($column(6), $column(7), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: $column(3)
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Ethernet (hardware-inventory) [Controller[0]]
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID;linkStatus;linkStatus;linkStatus
          - type: json2csv
            entryKey: "controllers[0]/netInterfaces"
            properties: /ethernet/linkStatus;/ethernet/linkStatus;/ethernet/linkStatus;/ethernet/speed;
        source(2):
          # Source(2) = Ethernet (hardware-inventory) [Controller[1]]
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID;linkStatus;linkStatus;linkStatus
          - type: json2csv
            entryKey: "controllers[1]/netInterfaces"
            properties: /ethernet/linkStatus;/ethernet/linkStatus;/ethernet/linkStatus;/ethernet/speed;
        source(3):
          # Source(3) = Union of Controller A and Controller B Ethernet devices.
          type: tableUnion
          tables:
          - $monitors.network.collect.sources.source(1)$
          - $monitors.network.collect.sources.source(2)$
        source(4):
          # Source(4) = fibrePorts (hardware-inventory)
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response
            # JSONID;linkStatus;linkStatus;linkStatus
          - type: json2csv
            entryKey: /fibrePorts
            properties: /linkStatus;/linkStatus;/linkStatus;/speed;
        source(5):
          # Source(5) = Join Ethernet and Fibre tables
          type: tableUnion
          tables:
          - $monitors.network.collect.sources.source(3)$
          - $monitors.network.collect.sources.source(4)$
          computes:
          # JSONID;PatrolStatus;linkStatus
          - type: translate
            column: 2
            translationTable: NetworkCardStatusTranslationTable
          # JSONID;PatrolStatus;linkStatus
          - type: translate
            column: 3
            translationTable: LinkStatusTranslationTable
      mapping:
        # NetworkCard Value Table
        # JsonID;PatrolStatus;LinkStatus;StatusInformation
        source: $monitors.network.collect.sources.source(5)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="network"}: $column(2)
          hw.network.up: legacyLinkStatus($column(3))
          hw.network.bandwidth.limit: megaBit2Bit($column(5))
        legacyTextParameters:
          StatusInformation: $column(4)
  other_device:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
          # Use Json2Csv to process HTTP Response
          - type: json2csv
            entryKey: sfps
            properties: /physicalLocation/slot;/sfpType/vendorName;/sfpType/vendorPN;/sfpType/vendorSN;sfpType/sfpIdentType;../physicalLocation/trayRef;
            separator: ;
          # Label with 'SFPS'
          - type: leftConcat
            column: 2
            value: 'SFP - '
          - type: leftConcat
            column: 4
            value: "Part Number: "
          - type: leftConcat
            column: 3
            value: "Vendor: "
          - type: leftConcat
            column: 5
            value: "Serial Number: "
      mapping:
        # OtherDevice Instance Table
        # JsonID;location;Vendor;Model;SerialNumber;type;
        source: $monitors.other_device.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          device_type: $column(6)
          info: "join($column(4), $column(3), $column(5), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(7)
          name: "sprintf(\"%s: %s\", $column(6), $column(2))"
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(2)$
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status;
          - type: json2csv
            entryKey: sfps
            properties: /status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 2
            translationTable: StatusTranslationTable
      mapping:
        # OtherDevice Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.other_device.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="other_device"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = Volume information
          # Queries the REST interface for volume information
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1/volumes
          resultContent: body
          computes:
            # Use Json2Csv to process HTTP Response
            # JsonID;name;raidlevel;capacity;currentControllerID;
          - type: json2csv
            entryKey: /
            properties: /name;/raidLevel;/capacity;/currentControllerId;
            separator: ;
          # strip raid from raidlevel
          - type: replace
            column: 3
            existingValue: raid
            newValue: ""
          - type: leftConcat
            column: 1
            value: MSHW;
        source(2):
          # Source(2) = HardwareInventory
          type: copy
          from: $monitors.enclosure.discovery.sources.source(2)$
          computes:
          - type: json2csv
            entryKey: /controllers
            properties: /physicalLocation/trayRef;/controllerRef;
            separator: ;
          - type: leftConcat
            column: 1
            value: MSHW;
        source(3):
          type: tableJoin
          leftTable: $monitors.logical_disk.discovery.sources.source(1)$
          rightTable: $monitors.logical_disk.discovery.sources.source(2)$
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # LogicalDisk Instance Table
        # JsonID;name;raidlevel;capacity;currentControllerID;
        source: $monitors.logical_disk.discovery.sources.source(3)$
        attributes:
          id: $column(3)
          __display_id: $column(3)
          raid_level: $column(4)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(6))"
          name: "sprintf(\"%s (%s - %by2hf.s)\", $column(3), $column(4), $column(5))"
        metrics:
          hw.logical_disk.limit: $column(5)
    collect:
      # Collection type
      type: multiInstance
      sources:
        source(1):
          # Queries the REST interface for volume information
          type: http
          method: GET
          url: /devmgr/v2/storage-systems/1/volumes
          resultContent: body
          computes:
            # Use Json2Csv to process HTTP Response (using same entry twice to easily duplicate column)
            # JsonID;status;status
          - type: json2csv
            entryKey: /
            properties: /name;/status;/status;
            separator: ;
          # Translate API status into PatrolStatus
          - type: translate
            column: 3
            translationTable: StatusTranslationTable
      mapping:
        # LogicalDisk Value Table
        # JsonID;PatrolStatus;StatusInformation
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
translations:
  LinkStatusTranslationTable:
    default: degraded
    none: degraded
    up: ok
    failed: failed
    down: degraded
  StatusTranslationTable:
    needsattn: degraded
    default: failed
    optimal: ok
    maintenancecharging: ok
  LinkSpeedParameterTranslationTable:
    default: degraded
    none: ""
    up: ok
    failed: ""
    down: ""
  NetworkCardStatusTranslationTable:
    default: failed
    none: ok
    up: ok
    failed: failed
    down: ok
