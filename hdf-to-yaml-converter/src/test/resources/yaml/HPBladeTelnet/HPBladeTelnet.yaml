---
connector:
  displayName: HP BladeSystem (SSH)
  platforms: HP BladeSystem
  reliesOn: HP BladeSystem Onboard Administrator
  version: 1.0
  information: This connector provides hardware monitoring for the HP BladeSystem racks through the Onboard Administrator.
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    supersedes:
    - HPBladeSystem
    criteria:
    # host should respond to Telnet/SSH the way described below
    - type: osCommand
      commandLine: SHOW OA INFO
      expectedResult: Onboard Administrator
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: osCommand
          commandLine: show enclosure info
          computes:
          - type: awk
            script: $file("embeddedFile-1")$
            keep: MSHW;
            separators: ;
            selectColumns: "2,3"
        source(2):
          type: osCommand
          commandLine: show interconnect info all
        source(3):
          type: osCommand
          commandLine: show server info all
        source(4):
          type: osCommand
          commandLine: show enclosure powersupply all
        source(5):
          type: osCommand
          commandLine: show enclosure fan all
        source(6):
          type: osCommand
          commandLine: show enclosure temp
        source(7):
          type: tableUnion
          tables:
          - $monitors.enclosure.discovery.sources.source(2)$
          - $monitors.enclosure.discovery.sources.source(3)$
          - $monitors.enclosure.discovery.sources.source(4)$
          - $monitors.enclosure.discovery.sources.source(5)$
          - $monitors.enclosure.discovery.sources.source(6)$
      mapping:
        # The discovery table = source(1)
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: HPBladeChassis
          model: $column(1)
          serial_number: $column(2)
          type: blade
          name: "sprintf(\"Blade Enclosure: (%s)\", $column(1))"
    collect:
      type: monoInstance
      sources:
        source(1):
          type: osCommand
          commandLine: show enclosure status
          computes:
          - type: awk
            script: $file("embeddedFile-2")$
            keep: MSHW;
            separators: ;
            selectColumns: "2,3"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status;powerState;
          - type: translate
            column: 1
            translationTable: OKDegradedFailedTranslationTable
        source(2):
          type: osCommand
          commandLine: show interconnect status all
        source(3):
          type: osCommand
          commandLine: show server status all
        source(4):
          type: osCommand
          commandLine: show enclosure powersupply all
        source(5):
          type: osCommand
          commandLine: show enclosure fan all
        source(6):
          type: osCommand
          commandLine: show enclosure temp
        source(7):
          type: tableUnion
          tables:
          - $monitors.enclosure.collect.sources.source(2)$
          - $monitors.enclosure.collect.sources.source(3)$
          - $monitors.enclosure.collect.sources.source(4)$
          - $monitors.enclosure.collect.sources.source(5)$
          - $monitors.enclosure.collect.sources.source(6)$
      mapping:
        # ValueTable = Source(1)
        source: $monitors.enclosure.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="enclosure"}: $column(1)
          hw.enclosure.power: $column(2)
          hw.enclosure.energy: fakeCounter($column(2))
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-3")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,4"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: HPBladeChassis
          name: "sprintf(\"%s (%s W)\", $column(1), $column(2))"
        metrics:
          hw.power_supply.limit: $column(2)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-3")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,5"
            # Duplicate the status column
            # PowerSupplyID; status ; status ;
          - type: duplicateColumn
            column: 2
            # Now translate first status column from "OK/Degraded/Failed" into OK/Warning/Alarm
            # powerSupplyID;PATROLStatus;status;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: OKDegradedFailedTranslationTable
            # Translate the second status column into a more readable String
            # powerSupplyID;PATROLStatus;statusInformation;
          - type: translate
            column: 3
            translationTable: OKDegradedFailedStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
          hw.power_supply.power: $column(4)
          hw.power_supply.utilization: legacyPowerSupplyUtilization($column(4))
        legacyTextParameters:
          StatusInformation: $column(3)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            #  RETURNS MSHW;FanID; status ; fan Speed Percent ; fan Min ; fan Max ;
            #  SELECTS FanID
            # FanID; status ; fan Speed Percent ; fan Min ; fan Max ;
          - type: awk
            script: $file("embeddedFile-4")$
            separators: ;
            keep: ^MSHW;
            selectColumns: 2
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.fan.discovery.sources.source(7)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: HPBladeChassis
          name: $column(1)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-4")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status;fanState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: OKDegradedFailedTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
          hw.fan.speed_ratio: percent2Ratio($column(3))
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            #  RETURNS MSHW; ID, status, temperature, high caution value, high critical value, statusActivate, temperatureActivate
            #  SELECTS id, high caution value, high critical value, statusActivate, temperatureActivate
          - type: awk
            script: $file("embeddedFile-5")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5,6,7,8"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: HPBladeChassis
          name: $column(1)
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(2)
          hw.temperature.limit{limit_type="high.critical"}: $column(3)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(2)
          type: copy
          from: $monitors.enclosure.collect.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-5")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: OKDegradedFailedTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="temperature"}: $column(2)
          hw.temperature: $column(3)
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-6")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(3)
        source: $monitors.blade.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          blade_name: $column(2)
          model: $column(3)
          serial_number: $column(4)
          hw.parent.type: enclosure
          hw.parent.id: HPBladeChassis
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(2), $column(3))"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(2)
          type: copy
          from: $monitors.enclosure.collect.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-7")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status
          - type: translate
            column: 2
            translationTable: OKDegradedFailedTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.blade.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="blade"}: $column(2)
          hw.blade.power_state: $column(4)
        legacyTextParameters:
          StatusInformation: $column(3)
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-8")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.other_device.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          device_type: $column(2)
          additional_label: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: HPBladeChassis
          name: "sprintf(\"%s: %s (%s)\", $column(2), $column(1), $column(3))"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: $monitors.enclosure.collect.sources.source(7)$
          computes:
          - type: awk
            script: $file("embeddedFile-9")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
            # status;powerState;  (using table in Enclosure Section)
          - type: translate
            column: 2
            translationTable: OKDegradedFailedTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.other_device.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="other_device"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  OKDegradedFailedStatusInformationTranslationTable:
    N/A: ""
    Degraded: Degraded
    Failed: Failed
    OK: ""
    Default: Unknown Status
  OKDegradedFailedTranslationTable:
    N/A: ok
    Degraded: degraded
    Failed: failed
    OK: ok
    Default: UNKNOWN
