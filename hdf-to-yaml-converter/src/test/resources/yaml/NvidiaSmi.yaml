---
embedded:
  EmbeddedFile(1): |
    BEGIN { FS = ": "; gpuID=""; model = ""; serialNumber = ""; gpuUuid = ""; vBios = ""; driverVersion = ""; cudaVersion = ""; firmwareVersion = ""; transferredBytes = ""; receivedBytes =""; gpuUtilization =""; memoryUtilization =""; encoderUtilization =""; decoderUtilization =""; fanSpeed =""; voltage =""; temperature =""; warnTemperature =""; critTemperature =""; powerConsumption =""; minPowerLimit =""; maxPowerLimit =""; correctable=""; uncorrectable="";totalMemory=""}

    #Discovery related values and informative fields.

    /GPU 0/ {split($0,outputarray,":"); gpuID=outputarray[2];}
    /Product Name/ { model = $2; }
    /Serial Number/ && /[0-9]/ { serialNumber = $2; }
    /GPU UUID/ { gpuUuid = "GPU UUID: " $2; }
    /VBIOS Version/ { vBios = " VBIOS Version: " $2; }
    /Driver Version/ { driverVersion = $2; }
    /CUDA Version/ { cudaVersion = "CUDA Version: " $2; }
    /Firmware Version/ && /[0-9]/ { firmwareVersion = $2;}
    /FB Memory Usage/ { getline; totalMemory = $2; gsub(/ MiB/,"",totalMemory)}

    #Collection related values and removal of units of measurement.

    /Tx Throughput/ && /[0-9]/  { transferredBytes = $2; gsub(/ KB\/s/,"",transferredBytes); }
    /Rx Throughput/ && /[0-9]/  { receivedBytes = $2; gsub(/ KB\/s/,"",receivedBytes); }
    /Gpu/ && /%/ { gpuUtilization = $2; gsub(/ %/,"",gpuUtilization); }
    /Memory/ && /%/ { memoryUtilization = $2; gsub(/ %/,"",memoryUtilization); }
    /Encoder/ && /%/ { encoderUtilization = $2; gsub(/ %/,"",encoderUtilization); }
    /Decoder/ && /%/ { decoderUtilization = $2; gsub(/ %/,"",decoderUtilization); }

    #We will now extract and do the sum of the ecc errors.
    #/Correctable/ && /[0-9]/  { correctable+=$2; }
    #/Uncorrectable/ && /[0-9]/  { uncorrectable+=$2; }

    #We will now extract the power consumption.

    /Power Draw/ && /[0-9]/  { powerConsumption = $2; gsub(/ W/,"",powerConsumption); }
    /Min Power Limit/ && /[0-9]/  { minPowerLimit = $2; gsub(/ W/,"",minPowerLimit); }
    /Max Power Limit/ && /[0-9]/  { maxPowerLimit = $2; gsub(/ W/,"",maxPowerLimit);}

    #TBD IF REQUIRED.
    #Parsing through the file to gather the clock speeds. As there are several iterations of these strings, we had to isolate them.

    #/^    Clocks$/ { for(i=1; i<=4; i++);
    #  IF (/Graphics/) getline; graphicsClock = $2; gsub(/ MHz/,"",graphicsClock);
    #  IF (/SM/) getline; smClock = $2; gsub(/ MHz/,"",smClock);
    #  IF (/Memory/) getline; memoryClock = $2; gsub(/ MHz/,"",memoryClock);
    #  IF (/Video/) getline; videoClock = $2; gsub(/ MHz/,"",videoClock); }

    #Collection of fan class values and removal of units of measurement.

    /Fan Speed/ && /[0-9]/  { fanSpeed =$2; gsub(/ %/,"",fanSpeed);}

    #Collection of voltage class values and removal of units of measurement.
    /Voltage/ {getline; if (/[0-9]/) voltage = $2; gsub(/ mV/,"",voltage)}

    #We will now extract the temperature along with its thresholds.
    /GPU Current Temp/ && /[0-9]/  { temperature = $2; gsub(/ C/,"",temperature); }
    /GPU Target Temperature/ && /[0-9]/  { warnTemperature = $2; gsub(/ C/,"",warnTemperature); }
    /GPU Slowdown Temp/ && /[0-9]/  { critTemperature = $2; gsub(/ C/,"",critTemperature);}


    #We will now print all the relevant information, separated by classes. Processes being the last category, this will allow us to print these at the end of each card.
    #We then reset all variables to empty values for the next card.

    /Processes/ {
    print "MSHW_GPU;" "GPU" gpuID ";" transferredBytes * 1024 ";" receivedBytes * 1024 ";" gpuUtilization ";" memoryUtilization ";" encoderUtilization ";" decoderUtilization ";"powerConsumption ";" minPowerLimit ";" maxPowerLimit ";" correctable ";" uncorrectable ";" model ";" serialNumber ";" gpuUuid vBios ";" driverVersion ";" cudaVersion ";" firmwareVersion ";" totalMemory;
    print "MSHW_TEMP;" "GPU" gpuID ";" temperature ";" warnTemperature ";" critTemperature;
    print "MSHW_VOLTAGE;" "GPU" gpuID ";" voltage;
    print "MSHW_FAN;" "GPU" gpuID ";" fanSpeed ;
    gpuID=""; model = ""; serialNumber = ""; gpuUuid = ""; vBios = ""; driverVersion = ""; cudaVersion = ""; firmwareVersion = ""; transferredBytes = ""; receivedBytes =""; gpuUtilization =""; memoryUtilization =""; encoderUtilization =""; decoderUtilization =""; fanSpeed =""; voltage =""; temperature =""; warnTemperature =""; critTemperature =""; powerConsumption =""; minPowerLimit =""; maxPowerLimit =""; correctable=""; uncorrectable="";totalMemory=""}
connector:
  displayName: "Nvidia-Smi"
  platforms: "Any system with Nvidia GPUs"
  reliesOn: "NVIDIA drivers with NVIDIA-SMI support."
  information: "Gives hardware information on most Nvidia GPUs. (Clocking)"
  detection:
    connectionTypes:
    - "remote"
    appliesTo:
    - "NT"
    - "Linux"
    criteria:
    - type: "osCommand"
      commandLine: "nvidia-smi"
      expectedResult: "Driver Version"
      errorMessage: "nvidia-smi not found at target host."
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: "osCommand"
          commandLine: "nvidia-smi -q"
          timeout: 90
          computes:
          - type: "awk"
            script: "EmbeddedFile(1)"
      mapping:
        source: "$monitors.enclosure.discovery.sources.source(1)$"
  gpu:
    discovery:
      sources:
        source(1):
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_GPU"
      mapping:
        source: "$monitors.gpu.discovery.sources.source(1)$"
        attributes:
          vendor: "NVIDIA"
          id: "$column(2)"
          __display_id: "$column(2)"
          model: "$column(14)"
          serial_number: "$column(15)"
          driver_version: "$column(17)"
          firmware_version: "$column(19)"
          info: "join($column(16), $column(18), \" \")"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s %s - %s)\", $column(2), \"NVIDIA\", $column(14), $column(20))"
        metrics:
          hw.gpu.memory.limit: "mebiByte2Byte($column(20))"
    collect:
      type: "multiInstance"
      sources:
        source(1):
          type: "osCommand"
          commandLine: "nvidia-smi -q"
          timeout: 90
          computes:
          - type: "awk"
            script: "EmbeddedFile(1)"
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_GPU"
      mapping:
        source: "$monitors.gpu.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.gpu.utilization{task="general"}: "percent2Ratio($column(5))"
          hw.gpu.memory.utilization: "percent2Ratio($column(6))"
          hw.gpu.utilization{task="encoder"}: "percent2Ratio($column(7))"
          hw.gpu.utilization{task="decoder"}: "percent2Ratio($column(8))"
          hw.gpu.io{direction="receive"}: "fakeCounter($column(4))"
          hw.power{hw.type="gpu"}: "$column(9)"
          hw.energy{hw.type="gpu"}: "fakeCounter($column(9))"
  temperature:
    discovery:
      sources:
        source(1):
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_TEMP"
      mapping:
        source: "$monitors.temperature.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(2)"
          temperature_type: "gpu"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s)\", $column(2), \"gpu\")"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: "$column(4)"
          hw.temperature.limit{limit_type="high.critical"}: "$column(5)"
    collect:
      type: "multiInstance"
      sources:
        source(1):
          type: "osCommand"
          commandLine: "nvidia-smi -q"
          timeout: 90
          computes:
          - type: "awk"
            script: "EmbeddedFile(1)"
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_TEMP"
      mapping:
        source: "$monitors.temperature.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.temperature: "$column(3)"
  voltage:
    discovery:
      sources:
        source(1):
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
          - type: "keepOnlyMatchingLines"
            column: 3
            regExp: "."
      mapping:
        source: "$monitors.voltage.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(2)"
          voltage_type: "gpu"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s)\", $column(2), \"gpu\")"
    collect:
      type: "multiInstance"
      sources:
        source(1):
          type: "osCommand"
          commandLine: "nvidia-smi -q"
          timeout: 90
          computes:
          - type: "awk"
            script: "EmbeddedFile(1)"
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_VOLTAGE"
      mapping:
        source: "$monitors.voltage.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.voltage: "$column(3)"
  fan:
    discovery:
      sources:
        source(1):
          type: "copy"
          from: "$monitors.enclosure.discovery.sources.source(1)$"
          computes:
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_FAN"
      mapping:
        source: "$monitors.fan.discovery.sources.source(1)$"
        attributes:
          id: "$column(2)"
          __display_id: "$column(2)"
          hw.parent.type: "enclosure"
          name: "$column(2)"
        metrics:
          hw.fan.speed_ratio.limit{limit_type="low.degraded"}: "percent2Ratio(\"10\")"
          hw.fan.speed_ratio.limit{limit_type="low.critical"}: "percent2Ratio(\"0\")"
    collect:
      type: "multiInstance"
      sources:
        source(1):
          type: "osCommand"
          commandLine: "nvidia-smi -q"
          timeout: 90
          computes:
          - type: "awk"
            script: "EmbeddedFile(1)"
          - type: "keepOnlyMatchingLines"
            column: 1
            regExp: "^MSHW_FAN"
      mapping:
        source: "$monitors.fan.collect.sources.source(1)$"
        deviceId: "$column(2)"
        metrics:
          hw.fan.speed_ratio: "percent2Ratio($column(3))"
