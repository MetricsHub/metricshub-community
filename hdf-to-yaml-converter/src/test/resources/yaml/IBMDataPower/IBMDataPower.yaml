---
connector:
  displayName: IBM DataPower (SNMP)
  platforms: IBM DataPower
  reliesOn: IBM DataPower SNMP Agent
  version: 1.0
  information: "This connector discovers the enclosure and the disks of IBM DataPower Appliances as well as the various environment sensors (temperatures, fans, power supplies). It relies on the SNMP protocol."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    # Verify that there is a Data Power Firmware
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.14685.3.1.100.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = \tSystem SNMP table\nDescription;Name;
          type: snmpTable
          oid: 1.3.6.1.2.1.1
          selectColumns: "1,5"
          computes:
            # Keep Only Descriptions that Contain DataPower
            # Description;Name;
          - type: keepOnlyMatchingLines
            column: 1
            regExp: DataPower
            # Add the default manufacturer
            # Manufacturer;Description;Name;
          - type: leftConcat
            column: 1
            value: IBM;
        source(2):
          # Create an Instance Table (in case there is no useful info from Source(1)
          # Manufacturer;
          type: static
          value: IBM;
        source(3):
          # Manufacturer;Manufacturer;Description;Name;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: IBM;DataPower;Appliance;
      mapping:
        # Instance Table
        # Manufacturer;Manufacturer;Description;Name;
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: DataPowerAppliance
          vendor: $1
          model: $3
          __display_id: $4
          type: Computer
          name: "${awk::sprintf(\"Computer: %s (%s %s)\", $4, $1, $3)}"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = dpStatusTemperatureSensorsTable
          # ID;UpperNC;UpperC;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.141.1
          selectColumns: "1,3,6"
          computes:
            # Remove "Temperature " from the ID
            # ID;UpperNC;UpperC;
          - type: replace
            column: 1
            existingValue: temperature
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # ID;UpperNC;UpperC;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $2
          hw.temperature.limit{limit_type="high.critical"}: $3
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Value;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.141.1
          selectColumns: "1,2"
          computes:
            # Remove "Temperature " from the ID
            # ID;Value;
          - type: replace
            column: 1
            existingValue: temperature
            newValue: ""
      mapping:
        # ValueTable = Source(1)
        # ID;Value;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = dpStatusVoltageSensorsTable
          # ID;LowerC;UpperC;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.140.1
          selectColumns: "1,3,4"
          computes:
            # Remove "Voltage " from the ID
            # ID;LowerC;UpperC;
          - type: replace
            column: 1
            existingValue: voltage
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # ID;LowerC;UpperC;
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.voltage.limit{limit_type="high.degraded"}: $3
          hw.voltage.limit{limit_type="low.critical"}: $2
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Value;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.140.1
          selectColumns: "1,2"
          computes:
            # Remove "Voltage " from the ID
            # ID;Value;
          - type: replace
            column: 1
            existingValue: voltage
            newValue: ""
      mapping:
        # ValueTable = Source(1)
        # ID;Value;
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $2
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = dpStatusFanSensorsTable
          # ID;LowerC;FanStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.97.1
          selectColumns: "1,3,4"
          computes:
            # Exclude Instances where FanStatus=0 (Fan not present)
            # ID;LowerC;FanStatus;
          - type: excludeMatchingLines
            column: 3
            valueList: 0
            # Translate the Fan Location
            # ID;LowerC;FanStatus;
          - type: translate
            column: 1
            translationTable: "${translation::fanLocationTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # ID;LowerC;FanStatus;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
        metrics:
          hw.fan.speed.limit{limit_type="low.critical"}: $2
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # ID;Value;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.97.1
          selectColumns: "1,2"
          computes:
            # Translate the Fan Location
            # ID;Value;
          - type: translate
            column: 1
            translationTable: "${translation::fanLocationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;Value;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.fan.speed: $2
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = dpStatusPhysicalDiskSensorsTable
          # ID;Vendor;ProductID;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.260.1
          selectColumns: "6,12,13"
          computes:
            # Translate the Disk Location
            # Location;Vendor;ProductID;
          - type: translate
            column: 1
            translationTable: "${translation::diskLocationTranslationTable}"
      mapping:
        # InstanceTable = Source(1)
        # ID;Vendor;ProductID;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          model: $3
          vendor: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = connUnitSensorTable SNMP Table
          # DiskID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.14685.3.1.260.1
          selectColumns: "6,7"
          computes:
            # Duplicate the Status column
            # DiskID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # DiskID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::diskStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # DiskID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::diskStatusInformationTranslationTable}"
            # Translate the ID to Location
            # Location;PATROLStatus;StatusInformation;
          - type: translate
            column: 1
            translationTable: "${translation::diskLocationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # Location;PATROLStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.4.1.14685.3.1.55.13.0
          computes:
          # powersupply,Status,Status Information
          - type: awk
            script: "${file::embeddedFile-1}"
      mapping:
        # InstanceTable = Source(1)
        # powersupply,Status,Status Information
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.4.1.14685.3.1.55.13.0
          computes:
          # powersupply,Status,Status Information
          - type: awk
            script: "${file::embeddedFile-1}"
      mapping:
        # ValueTable = Source(1)
        # Location;PATROLStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  diskLocationTranslationTable:
    "1": HDD0
    "2": HDD1
    "3": HDD2
    "4": HDD3
    "5": Undefined
  diskStatusInformationTranslationTable:
    "11": System
    "12": Undefined Status
    Default: Unknown Status
    "1": Unconfigured Good
    "2": Unconfigured Good Foreign
    "3": Unconfigured Bad
    "4": Unconfigured Bad Foreign
    "5": Hot Spare
    "6": Offline
    "7": Failed
    "8": Rebuild
    "9": Online
    "10": Copy Back
  diskStatusTranslationTable:
    "11": ok
    "12": failed
    Default: UNKNOWN
    "1": ok
    "2": degraded
    "3": failed
    "4": failed
    "5": ok
    "6": degraded
    "7": failed
    "8": degraded
    "9": ok
    "10": degraded
  fanLocationTranslationTable:
    "11": Fan-Tray-1-Fan-1
    "22": Fan-Tray-3-Fan-4
    "12": Fan-Tray-1-Fan-2
    "23": Hard-Disk-Tray-Fan-1
    "13": Fan-Tray-1-Fan-3
    "24": Hard-Disk-Tray-Fan-2
    "14": Fan-Tray-1-Fan-4
    "15": Fan-Tray-2-Fan-1
    "16": Fan-Tray-2-Fan-2
    "17": Fan-Tray-2-Fan-3
    "18": Fan-Tray-2-Fan-4
    "19": Fan-Tray-3-Fan-1
    "1": CPU-1
    "2": CPU-2
    "3": Chassis-1
    "4": Chassis-2
    "5": Chassis-3
    "6": Chassis-4
    "7": Chassis-5
    "8": Chassis-6
    "9": Chassis-7
    "20": Fan-Tray-3-Fan-2
    "10": Chassis-8
    "21": Fan-Tray-3-Fan-3
