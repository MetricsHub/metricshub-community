---
connector:
  displayName: DataDirect Networks (DDN) Disk Array (SNMP)
  platforms: DataDirect Networks (DDN)
  reliesOn: DDN SNMP Agent
  version: 1.0
  information: "This connector discovers the enclosure and the disks of DDN (DataDirect Networks) disk arrays as well as the various environment sensors (temperatures, fans, power supplies). It relies on the SNMP protocol."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # Verify that the DDN SNMP agent responds to our requests
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.6894.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = Hardcoded table
          # DeviceID;Vendor;model;
          type: static
          value: DDN;Data Direct Networks;Disk Array
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: $2
          model: $3
          type: Storage
          name: "${awk::sprintf(\"Storage: (%s %s)\", $2, $3)}"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = tierTable SNMP Table
          # TierID;diskA;diskB;diskC;diskD;diskE;diskF;diskG;diskH;diskP;diskS
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.7.1
          selectColumns: "1,2,3,4,5,6,7,8,9,10,11"
          computes:
            # Process that crap through an AWK script that will generate one line per disk
            # DiskID;DiskType;Status;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
          # Exclude "missing" disks
          - type: excludeMatchingLines
            column: 3
            valueList: 3
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          vendor: $2
          hw.parent.type: enclosure
          hw.parent.id: DDN
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = tierTable SNMP Table
          # TierID;diskA;diskB;diskC;diskD;diskE;diskF;diskG;diskH;diskP;diskS
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.7.1
          selectColumns: "1,2,3,4,5,6,7,8,9,10,11"
          computes:
            # Process that crap through an AWK script that will generate one line per disk
            # DiskID;Status;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4"
            # Duplicate the Status column
            # DiskID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # DiskID;PATROLStatus;Status;
          - type: translate
            column: 2
            translationTable: "${translation::diskStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # DiskID;PATROLStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::diskStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = powerTable SNMP table
          # powerSupplyID;
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.5.1
          selectColumns: 1
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          hw.parent.id: DDN
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = powerTable SNMP table (like discovery)
          # powerSupplyID;Status:
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.5.1
          selectColumns: "1,2"
          computes:
            # Duplicate the status column
            # powerSupplyID;Status:Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL Status
            # powerSupplyID;PATROLStatus:Status;
          - type: translate
            column: 2
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # powerSupplyID;PATROLStatus:StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = powerTable SNMP table
          # FanID;
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.3.1
          selectColumns: 1
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          hw.parent.id: DDN
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = powerTable SNMP table (like discovery)
          # FanID;Status:
          type: snmpTable
          oid: 1.3.6.1.4.1.6894.1.3.1
          selectColumns: "1,2"
          computes:
            # Duplicate the status column
            # FanID;Status:Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL Status
            # FanID;PATROLStatus:Status;
          - type: translate
            column: 2
            translationTable: "${translation::FanStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # FanID;PATROLStatus:StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::FanStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $2
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = Hardcoded table
          # TemperatureID;Location;
          type: static
          value: General;General;
      mapping:
        # Instance Table = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: DDN
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect type is mono-instance
      type: monoInstance
      sources:
        source(1):
          # Source(1) = tempLevel OID
          # Status;
          type: snmpGet
          oid: 1.3.6.1.4.1.6894.1.1.0
          computes:
            # Duplicate the status column
            # Status:Status;
          - type: duplicateColumn
            column: 1
            # Translate the first status column into a PATROL Status
            # PATROLStatus:Status;
          - type: translate
            column: 1
            translationTable: "${translation::TemperatureStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # PATROLStatus:StatusInformation;
          - type: translate
            column: 2
            translationTable: "${translation::TemperatureStatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        metrics:
          hw.status{hw.type="temperature"}: $1
        legacyTextParameters:
          StatusInformation: $2
translations:
  TemperatureStatusTranslationTable:
    "1": ok
    "2": degraded
    "3": failed
    Default: UNKNOWN
  FanStatusTranslationTable:
    "1": ok
    "2": failed
    Default: UNKNOWN
  TemperatureStatusInformationTranslationTable:
    "1": Normal
    "2": Warning
    "3": Critical
    Default: Unknown Status
  PowerSupplyStatusTranslationTable:
    "1": ok
    "2": failed
    Default: UNKNOWN
  FanStatusInformationTranslationTable:
    "1": Healthy
    "2": Failed
    Default: Unknown Status
  diskStatusInformationTranslationTable:
    "1": Healthy
    "2": Failed
    "3": Missing
    Default: Unknown Status
  diskStatusTranslationTable:
    "1": ok
    "2": failed
    "3": failed
    Default: UNKNOWN
  PowerSupplyStatusInformationTranslationTable:
    "1": Healthy
    "2": Failed
    Default: Unknown Status
