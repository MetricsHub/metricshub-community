---
connector:
  displayName: Dell DRAC/MC (Dell Remote Access Controller/Modular Chassis)
  platforms: Dell PowerEdge
  reliesOn: Dell Remote Access Controller/Modular Chassis (DRAC/MC)
  information: "Provides environmental information (temperatures, fans and power supplies) on Dell Blade servers through the Dell Remote Access Card (DRAC)"
  version: 1.0
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    # Host should respond to telnet the way described below
    - type: osCommand
      commandLine: getsysinfo
      expectedResult: RAC
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = Output of the getsysinfo command through telnet
          # Look for the "System Model=" line
          type: osCommand
          commandLine: getsysinfo -c
          computes:
            # Parse the output of getsysinfo with an AWK script
            # Model;SerialNumber
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: MSHW;
            separators: ;
            selectColumns: "2,3"
        source(2):
          # Source(2) = Output of getsensorinfo, getmodinfo and getpbinfo
          type: osCommand
          commandLine: getsensorinfo
        source(3):
          type: osCommand
          commandLine: getmodinfo -A
        source(4):
          type: osCommand
          commandLine: getpbinfo
        source(5):
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
          - "${source::monitors.enclosure.discovery.sources.source(4)}"
      mapping:
        # The discovery table = source(1)
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: DellBladeChassis
          model: $1
          serial_number: $2
          type: blade
          name: "${awk::sprintf(\"Blade Enclosure: (%s)\", $1)}"
    collect:
      type: monoInstance
      sources:
        source(1):
          # Source(2) = Output of getsensorinfo, getmodinfo and getpbinfo
          type: osCommand
          commandLine: getsensorinfo
        source(2):
          type: osCommand
          commandLine: getmodinfo -A
        source(3):
          type: osCommand
          commandLine: getpbinfo
        source(4):
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.collect.sources.source(1)}"
          - "${source::monitors.enclosure.collect.sources.source(2)}"
          - "${source::monitors.enclosure.collect.sources.source(3)}"
        source(5):
          # Source(2) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Retrieve the overall status of the chassis and its power consumption with a smart AWK script
            # Status;StatusInformation;PowerConsumption
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: MSHW;
            separators: ;
            selectColumns: "2,3,4"
            # Remove the trailing "W" in the PowerConsumption value
            # Status;StatusInformation;PowerConsumption
          - type: replace
            column: 3
            existingValue: W
            newValue: ""
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.enclosure.collect.sources.source(5)}"
        metrics:
          hw.status{hw.type="enclosure"}: $1
          hw.enclosure.power: $3
          hw.enclosure.energy: fakeCounter($3)
        legacyTextParameters:
          StatusInformation: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Now, extract the temperatures thanks to a smart AWK script
            # TemperatureID;Location;WarningThreshold;AlarmThreshold
          - type: awk
            script: "${file::embeddedFile-3}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Now, extract the temperatures thanks to a smart AWK script
            # TemperatureID;Temperature;Status;
          - type: awk
            script: "${file::embeddedFile-3}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,6,7"
            # Duplicate the status column
            # TemperatureID;Temperature;Status;Status;
          - type: duplicateColumn
            column: 3
            # Translate the first status column into a PATROLStatus
            # TemperatureID;Temperature;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: "${translation::DRACStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
          hw.status{hw.type="temperature"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Now, extract the fans thanks to a smart AWK script
            # FanID;Location;WarningThreshold;AlarmThreshold
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $3
          hw.fan.speed.limit{limit_type="low.critical"}: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Now, extract the fans thanks to a smart AWK script
            # FanID;Speed;Status;
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,6,7"
            # Duplicate the status column
            # FanID;Speed;Status;Status;
          - type: duplicateColumn
            column: 3
            # Translate the first status column into a PATROLStatus
            # FanID;Speed;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: "${translation::DRACStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.fan.speed: $2
          hw.status{hw.type="fan"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # PowerSupplyID;PowerCapacity
          - type: awk
            script: "${file::embeddedFile-5}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
            # Remove the trailing "W" in PowerCapacity
            # PowerSupplyID;PowerCapacity
          - type: replace
            column: 2
            existingValue: W
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s W)\", $1, $2)}"
        metrics:
          hw.power_supply.limit: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # PowerSupplyID;Status;StatusInformation
          - type: awk
            script: "${file::embeddedFile-6}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
            # Translate the status column into a PATROLStatus
            # PowerSupplyID;PATROLStatus;StatusInformation
          - type: translate
            column: 2
            translationTable: "${translation::DRACStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Now, extract the blades thanks to a smart AWK script
            # BladeID;BladeName;SerialNumber
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
        source(2):
          # Source(1) = copy of Enclosure.Discovery.Source(2) (again)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # But now, extract the model of the blades, always thanks to a smart AWK script
            # BladeName;Model
          - type: awk
            script: "${file::embeddedFile-8}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
        source(3):
          # Source(3) = Table joint of Source(1) and source(2)
          # BladeID;BladeName;SerialNumber;BladeName;Model
          type: tableJoin
          leftTable: "${source::monitors.blade.discovery.sources.source(1)}"
          rightTable: "${source::monitors.blade.discovery.sources.source(2)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable = Source(3)
        source: "${source::monitors.blade.discovery.sources.source(3)}"
        attributes:
          id: $1
          blade_name: $2
          model: $5
          serial_number: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $2, $5)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Now, extract the blade status thanks to a smart AWK script
            # BladeID;Status;StatusInformation;PowerState;
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5,6,7"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.blade.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="blade"}: $2
          hw.blade.power_state: $4
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Now, extract the switches, DRAC and KVM modules thanks to a smart AWK script
            # OtherDeviceID;DeviceType;DeviceName
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $1
          device_type: $2
          additional_label: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s: %s (%s)\", $2, $1, $3)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(4)}"
          computes:
            # Now, extract the switches, DRAC and KVM status thanks to a smart AWK script
            # OtherDeviceID;Status;StatusInformation
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5,6"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  DRACStatusTranslationTable:
    Warning: degraded
    Failed: failed
    Alarm: failed
    OK: ok
    Default: UNKNOWN
    Failure: failed
