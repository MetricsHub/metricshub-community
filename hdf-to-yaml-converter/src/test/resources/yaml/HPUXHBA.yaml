---
embedded:
  EmbeddedFile(1): |-
    print -n  "MS_HW_START ioscan " ; date
    ioscanOutput=`%{SUDO:/usr/sbin/ioscan} /usr/sbin/ioscan -fnC fc`
    echo "$ioscanOutput"
    print -n  "MS_HW_END ioscan " ; date

    devicelist=`(echo "$ioscanOutput" ) | awk '$1 ~ "/dev/fcd[0-9]" {print $1}'`
    for device in $devicelist
        do
        print -n  "MS_HW_START fcmsutil $device " ; date
        %{SUDO:/opt/fcms/bin/fcmsutil} /opt/fcms/bin/fcmsutil $device
        print -n  "MS_HW_END fcmsutil $device " ; date
        done
  EmbeddedFile(3): |-
    $0 ~ /Link Speed =/ && $NF ~ /[MmGg][Bb]/ {speed = $NF ; gsub (/ ?[Gg][Bb]/,"000",speed) ; gsub (/ ?[Mm][Bb]/,"",speed) }

    $0 ~ /Driver state = / {status = $NF}

    END { if (speed != "") {print ( "MSHW;" speed ";" status ";" )}}
  EmbeddedFile(2): "BEGIN {ioscanSection=0; ioscanFcmsutil = 0  }\n$1 ~ /MS_HW_START/ && $2 ~ /ioscan/ {ioscanSection=1}\n\n$1 == \"fc\" && ioscanSection==1 {path=$3\n\t                              description=$0; gsub (/^.*INTERFACE */,\"\",description) ; gsub (/ ?\\(.*\\)/,\"\",description)\n\t                              getline\n\t                              device=$1\n\t                              descriptionArray[device] = description\n\t                              pathArray[device] = path\n\t                             }\n\n$1 ~ /MS_HW_END/ && $2 ~ /ioscan/ {ioscanSection=0}\n\n$1 ~ /MS_HW_START/ && $2 ~ /fcmsutil/ {fcmsutilSection=1\n\t                                     device=$3 ;\n\t                                     portID=$3 ; gsub (\"/dev/\",\"\",portID)\n\t                                    }\n$1 ~ /N_Port/ && $0 ~ /Port World Wide Name =/ && $NF ~ /0x/ && fcmsutilSection==1 { portWWN = $NF ; gsub (/^0x/,\"\",portWWN)}\n$1 ~ /(Switch)|(Target)/ && $0 ~ /Port World Wide Name =/ && $NF ~ /0x/ && fcmsutilSection==1 { remoteWWN = $NF ; gsub (/^0x/,\"\",remoteWWN)}\n$0 ~ /Link Speed =/ && $NF ~ /[MmGg][Bb]/ && fcmsutilSection==1 {speed = $NF ; gsub (/ ?[Gg][Bb]/,\"000\",speed) ; gsub (/ ?[Mm][Bb]/,\"\",speed) }\n\n\n$1 ~ /MS_HW_END/ && $2 ~ /fcmsutil/ && fcmsutilSection==1 && device != \"\" {\n\t                                   fcmsutilSection=0\n\t\t                                 print ( \"MSHW;\" portID \";\" device \";\" descriptionArray[device] \";\" pathArray[device] \";\" speed \";\" portWWN \";\" remoteWWN \";\" )\n\t\t                                 device=\"\" ;\n\t\t                                }"
translations:
  NetworkStatusInfoTranslationTable:
    offline: "Offline - The host bus adapter is not participating on the loop"
    resetting: "The host bus adapter is being reset."
    default: "Unknown Status"
    ready: ""
    awaiting_link_up: "Waiting for the Fibre Channel link to come up."
    online: ""
    loopback_state: "The host bus adapter is in the loop back test phase."
    disabled: "Disabled - The host bus adapter is not participating on the loop"
    suspended: "The driver has been suspended by the user."
  NetworkLinkStatusTranslationTable:
    default: "UNKNOWN"
    ready: "ok"
    awaiting_link_up: "degraded"
    online: "ok"
  NetworkStatusTranslationTable:
    offline: "failed"
    resetting: "degraded"
    default: "UNKNOWN"
    ready: "ok"
    awaiting_link_up: "ok"
    online: "ok"
    loopback_state: "failed"
    disabled: "failed"
    suspended: "degraded"
connector:
  displayName: "HP-UX - HBA"
  platforms: "HP 9000,HP Integrity,HP SuperDome"
  reliesOn: "HP UX system commands (ioscan, fcmsutil)"
  information: "Provides hardware status information for the fiber channel HBA cards on HP UX systems."
  version: "1.0"
  detection:
    connectionTypes:
    - "remote"
    appliesTo:
    - "HP"
    supersedes:
    - "CpqHBA"
    - "SMISHBA"
    criteria:
      # Test the hbacmd command for ports
    - type: "osCommand"
      commandLine: "%{SUDO:/usr/sbin/ioscan} /usr/sbin/ioscan -fnC fc"
      expectedResult: "/dev/"
      timeout: 60
sudoCommands:
- "/usr/sbin/ioscan"
- "/opt/fcms/bin/fcmsutil"
monitors:
  network:
    discovery:
      sources:
        source(1):
          # Get the outputs of ioscan and fcmsutil for all ports using EmbeddedFile 1
          type: "osCommand"
          commandLine: "/bin/sh %EmbeddedFile(1)%"
          timeout: 90
          computes:
            # AWK the output to get the instance table
            # portID;device;description;path;speed;portWWN;remoteWWN;
          - type: "awk"
            script: "EmbeddedFile(2)"
            keep: "^MSHW;"
            separators: ";"
            selectColumns: "2,3,4,5,6,7,8"
      mapping:
        # The Instance Table
        # portID;device;description;path;speed;portWWN;remoteWWN;
        source: "$monitors.network.discovery.sources.source(1)$"
        attributes:
          id: "$column(1)"
          model: "$column(3)"
          physical_address: "$column(6)"
          physical_address_type: "WWN"
          hw.parent.type: "enclosure"
          name: "sprintf(\"%s (%s)\", $column(1), $column(3))"
    collect:
      # Collect type is multi-instance
      type: "monoInstance"
      sources:
        source(1):
          # Source(1) = output of fcmsutil %hbaID%
          type: "osCommand"
          commandLine: "%{SUDO:/opt/fcms/bin/fcmsutil} /opt/fcms/bin/fcmsutil /dev/%NetworkCard.Collect.DeviceID%"
          computes:
            # AWK the output to get the speed and status table
            # speed;status;
          - type: "awk"
            script: "EmbeddedFile(3)"
            keep: "^MSHW;"
            separators: ";"
            selectColumns: "2,3"
            # Duplicate Staus Column
            # Speed;Status;Status;Status;
          - type: "duplicateColumn"
            column: 2
          - type: "duplicateColumn"
            column: 2
            # Translate Network Status
            # Speed;PatrolStatus;Status;Status;
          - type: "translate"
            column: 2
            translationTable: "NetworkStatusTranslationTable"
            # Translate Network Status Information
            # Speed;PatrolStatus;StatusInformation;Status;WWN;
          - type: "translate"
            column: 3
            translationTable: "NetworkStatusInfoTranslationTable"
            # Translate Network Status Information
            # Speed;PatrolStatus;StatusInformation;LinkStatus;
          - type: "translate"
            column: 4
            translationTable: "NetworkLinkStatusTranslationTable"
      mapping:
        # Value table = Source(1)
        # Speed;PatrolStatus;StatusInformation;LinkStatus;
        source: "$monitors.network.collect.sources.source(1)$"
        metrics:
          hw.network.up: "legacyLinkStatus($column(4))"
          hw.network.bandwidth.limit: "megaBit2Bit($column(1))"
          hw.status{hw.type="network"}: "$column(2)"
        legacyTextParameters:
          StatusInformation: "$column(3)"
