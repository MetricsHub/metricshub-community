---
connector:
  displayName: Fujitsu-Siemens Serverview - Agent (v8 or higher)
  platforms: Fujitsu-Siemens PRIMERGY
  reliesOn: Fujitsu-Siemens Serveview Agent
  version: 1.2
  information: This connector provides hardware monitoring through the Fujitsu-Siemens Serverview Agent which supports almost all Fujitsu-Siemens PRIMERGY servers.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    - Linux
    supersedes:
    - ServerviewNT
    - IpmiTool
    - ServerviewWMI
    criteria:
    - type: snmpGet
      oid: 1.3.6.1.4.1.231.2.10.2.2.10.1.3.0
      expectedResult: "^\\([1-9][0-9]\\)\\|\\([89]\\)\\."
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name from the model code
          # ID;sc2UnitModelName;sc2UnitClass;SerialNumber
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.2.3.1
          selectColumns: "1,5,2,7"
          computes:
            # Convert the chassis code into an enclosure type
            # ID;Model;EnclosureType
          - type: translate
            column: 3
            translationTable: "${translation::EnclosureTypeTranslationTable}"
        source(2):
          # now activate powerconsuption if available
          # ID;powerconsuption
          type: snmpTable
          oid: .1.3.6.1.4.1.231.2.10.2.2.10.4.5.1
          selectColumns: "1,5"
          computes:
          # if power powerconsuption is -1 it means that it's not available so blank it to deactivate parameter
          - type: replace
            column: 2
            existingValue: -1
            newValue: ""
        source(3):
          # now joint with source 1
          # ID;sc2UnitModelName;sc2UnitClass;SerialNumber;ID;powerconsuption
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # InstanceTable
        # ID;sc2UnitModelName;sc2UnitClass;SerialNumber;ID;powerconsuption
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: $1
          vendor: Fujitsu-Siemens
          serial_number: $4
          model: $2
          type: $3
          name: "${awk::sprintf(\"Enclosure: (%s %s)\", \"Fujitsu-Siemens\", $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the cabinetInfosTable SNMP table (like discovery)
          # ID;cabinetFrontDoorStatus;cabinetHousingOpenStatus
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.2.3.1
          selectColumns: "1,11,12"
          computes:
          # Multiply cabinetFrontDoorStatus by 4
          - type: multiply
            column: 2
            value: 4
            # Add cabinetHousingOpenStatus to cabinetFrontDoorStatus
            # ID;intrusionCode;cabinetHousingOpenStatus
          - type: add
            column: 2
            value: $3
            # Translate intrusionCode into IntrusionStatus
            # ID;intrusionStatus;cabinetHousingOpenStatus
          - type: translate
            column: 2
            translationTable: "${translation::IntrusionCodeTranslationTable}"
        source(2):
          # now collect PowerConsumption
          # now activate powerconsuption if available
          # ID;powerconsuption
          type: snmpTable
          oid: .1.3.6.1.4.1.231.2.10.2.2.10.4.5.1
          selectColumns: "1,5"
        source(3):
          # now joint
          # now joint with source 1
          # ID;intrusionStatus;cabinetHousingOpenStatus;ID;powerconsuption
          type: tableJoin
          leftTable: "${source::monitors.enclosure.collect.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # ValueTable
        # ID;intrusionStatus;cabinetHousingOpenStatus;ID;powerconsuption
        source: "${source::monitors.enclosure.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="enclosure", state="open"}: legacyIntrusionStatus($2)
          hw.enclosure.power: $5
          hw.enclosure.energy: fakeCounter($5)
  temperature:
    discovery:
      sources:
        source(1):
          # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.5.1.1
          selectColumns: "ID,1,5,3,6,7,8"
          computes:
            # Keep only really available sensors
            # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "3,6,7,8,9"
        source(2):
          # Copy table for sensors with valid discrete status.
          # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
          type: copy
          from: "${source::monitors.temperature.discovery.sources.source(1)}"
          computes:
          # Exclude sensors with invalid discrete status.
          - type: excludeMatchingLines
            column: 3
            valueList: "1,2"
          # Remove current temperatures equal to zero
          - type: leftConcat
            column: 5
            value: MSHW_
          - type: replace
            column: 5
            existingValue: MSHW_0
            newValue: ""
          - type: replace
            column: 5
            existingValue: MSHW_
            newValue: ""
          # Remove thresholds
          - type: replace
            column: 6
            existingValue: $6
            newValue: ""
          - type: replace
            column: 7
            existingValue: $7
            newValue: ""
        source(3):
          # Make a copy of tables
          # This table is for sensors without a valid discrete status.
          # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
          type: copy
          from: "${source::monitors.temperature.discovery.sources.source(1)}"
          computes:
          # Keep only sensors with invalid discrete value
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "1,2"
          # Remove discrete sensor value
          - type: replace
            column: 3
            existingValue: $3
            newValue: ""
          # Exclude where numeric sensor is zero
          - type: excludeMatchingLines
            column: 5
            valueList: 0
        source(4):
          # Union of 2 and 3
          # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
          type: tableUnion
          tables:
          - "${source::monitors.temperature.discovery.sources.source(2)}"
          - "${source::monitors.temperature.discovery.sources.source(3)}"
      mapping:
        # InstanceTable
        # ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
        source: "${source::monitors.temperature.discovery.sources.source(4)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $6
          hw.temperature.limit{limit_type="high.critical"}: $7
    collect:
      # Collect type is Multi-instance
      type: multiInstance
      sources:
        source(1):
          # ID;currentValue;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.5.1.1
          selectColumns: "ID,6,5"
          computes:
            # Duplicate status
            # ID;currentValue;TemperatureStatus;Status;
          - type: duplicateColumn
            column: 3
            # Translate TemperatureStatus into PATROLStatus
            # ID;currentValue;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: "${translation::TemperatureStatusTranslationTable}"
            # Translate Status into StatusInformation
            # ID;currentValue;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: "${translation::TemperatureStatusInformationTranslationTable}"
      mapping:
        # The ValueTable = Source(1)
        # ID;currentValue;PATROLStatus;StatusInformation;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
          hw.status{hw.type="temperature"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # ID;enclosureID;fanStatus;fanSpeed;fanDesignation;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.5.2.1
          selectColumns: "ID,1,5,6,3"
          computes:
            # Keep only fans that are present (status = 3 (ok), 4 (failed), 5 (pred fail), 6 (redundant fan failed))
            # ID;enclosureID;fanStatus;fanSpeed;fanDesignation;
          - type: excludeMatchingLines
            column: 3
            valueList: "1,2,8"
          # Deactivate speed if speed equals zero and status equals Ok
          - type: leftConcat
            column: 4
            value: _MSHW_
          - type: leftConcat
            column: 4
            value: $3
          - type: replace
            column: 4
            existingValue: 3_MSHW_0
            newValue: ""
      mapping:
        # The instance table
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $5
    collect:
      # Collect type is "multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = The fansTable SNMP table
          # ID;enclosureID;fanStatus;fanSpeed
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.5.2.1
          selectColumns: "ID,1,5,6"
          computes:
            # Duplicate the fanStatus column
            # DeviceID;fanStatus;fanStatus;fanSpeed
          - type: duplicateColumn
            column: 3
            # Translate fanStatus into PATROLStatus
            # DeviceID;enclosureID;status;fanStatus;fanSpeed
          - type: translate
            column: 3
            translationTable: "${translation::FanStatusTranslationTable}"
            # Translate the second fanStatus into a more readable string
            # DeviceID;status;statusInformation;fanSpeed
          - type: translate
            column: 4
            translationTable: "${translation::FanStatusInformationTranslationTable}"
      mapping:
        # ValueTable
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $3
          hw.fan.speed: $5
        legacyTextParameters:
          StatusInformation: $4
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1)
          # ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.3.1
          selectColumns: "ID,1,4,3,5,7,8"
        source(2):
          # Copy table for sensors with a valid discrete status
          type: copy
          from: "${source::monitors.voltage.discovery.sources.source(1)}"
          computes:
          # Exclude sensors with invalid discrete status.
          - type: excludeMatchingLines
            column: 3
            valueList: "1,2"
          # Remove voltages that are equal to 4294967295
          - type: replace
            column: 5
            existingValue: 4294967295
            newValue: ""
          # Remove thresholds
          - type: replace
            column: 6
            existingValue: $6
            newValue: ""
          - type: replace
            column: 7
            existingValue: $7
            newValue: ""
        source(3):
          # Make a copy of table
          # This table is for sensors without a valid discrete status.
          # ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
          type: copy
          from: "${source::monitors.voltage.discovery.sources.source(1)}"
          computes:
          # Keep only sensors with invalid discrete value
          - type: keepOnlyMatchingLines
            column: 3
            valueList: "1,2"
          # Remove discrete sensor value
          - type: replace
            column: 3
            existingValue: $3
            newValue: ""
          # Exclude where numeric sensor is 4294967295
          - type: excludeMatchingLines
            column: 5
            valueList: 4294967295
        source(4):
          # Union of 2 and 3
          # ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
          type: tableUnion
          tables:
          - "${source::monitors.voltage.discovery.sources.source(2)}"
          - "${source::monitors.voltage.discovery.sources.source(3)}"
      mapping:
        # InstanceTable
        source: "${source::monitors.voltage.discovery.sources.source(4)}"
        attributes:
          id: $1
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
        metrics:
          hw.voltage.limit{limit_type="low.critical"}: $6
          hw.voltage.limit{limit_type="high.degraded"}: $7
    collect:
      # Collect type = "multi instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = voltage table
          # ID;enclosureID;CurrentValue;VoltageStatus;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.3.1
          selectColumns: "ID,1,5,4"
          computes:
            # Duplicate status
            # ID;enclosureID;CurrentValue;VoltageStatus;StatusInformation;
          - type: duplicateColumn
            column: 4
            # Translate TemperatureStatus into PATROLStatus
            # ID;currentValue;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: "${translation::VoltageStatusTranslationTable}"
            # Translate Status into StatusInformation
            # ID;currentValue;PATROLStatus;StatusInformation;
          - type: translate
            column: 5
            translationTable: "${translation::VoltageStatusInformationTranslationTable}"
      mapping:
        # ValueTable
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.voltage: $3
          hw.status{hw.type="voltage"}: $4
        legacyTextParameters:
          StatusInformation: $5
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = powerSupplyUnitsTable SNMP table
          # ID;enclosureID;PSDesignation;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.2.1
          selectColumns: "ID,1,3,5"
          computes:
          - type: excludeMatchingLines
            column: 4
            valueList: "1,2"
      mapping:
        # InstanceTable
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $3
    collect:
      # Collect type is "Multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = SNMP get on the powerSupplyUnitStatus OID
          # DeviceID;cabinetID;Status
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.2.1
          selectColumns: "ID,1,5"
          computes:
            # Duplicate the powerSupplyUnitStatus
            # DeviceID;cabinetID;Status;StatusInformation
          - type: duplicateColumn
            column: 3
            # Translate the first powerSupplyUnitStatus into a PATROL statuss
            # status;powerSupplyUnitStatus
          - type: translate
            column: 3
            translationTable: "${translation::PowerSupplyStatusTranslationTable}"
            # Translate the second powerSupplyUnitStatus into a more readable string
            # status;statusInformation
          - type: translate
            column: 4
            translationTable: "${translation::PowerSupplyStatusInformationTranslationTable}"
      mapping:
        # Collect table
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $3
        legacyTextParameters:
          StatusInformation: $4
  memory:
    discovery:
      sources:
        source(1):
          # Source(1) = SNMP memoryTable
          # DeviceID;EnclosureID;Status;Size;TypeCode;Socket;MaximumSpeed
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.5.1
          selectColumns: "ID,1,4,6,9,3,15"
          computes:
            # Keep only lines where status is not "not-available (4)" and not "unknown (1)"
            # unknown(1):Module status could not be evaluated
            # not-present(2):Module socket is empty
            # ok(3):Module is available and working properly
            # disabled(4):Module was manually disabled in BIOS setup
            # error(5):Module has encountered errors but is still in use
            # failed(6):Module has failed and was disabled
            # prefailure-predicted(7):Module has encountered too many correctable errors within a certain
            # time period and is predicted to fail in near future
            # hidden(11):Module socket is not available and should be hidden
            # ID;EnclosureID;Status;Size;TypeCode;Socket;
          - type: excludeMatchingLines
            column: 3
            valueList: "1,2,4,11"
          # Add MHz to memory speed
          - type: rightConcat
            column: 7
            value: ' MHz'
          - type: leftConcat
            column: 7
            value: "Speed: "
      mapping:
        # InstanceTable
        source: "${source::monitors.memory.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $6
          type: $5
          info: $7
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s MB)\", $6, $5, $4)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($4)
    collect:
      # Collect type is "multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
          # DeviceID;enclosureID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.5.1
          selectColumns: "ID,1,4"
          computes:
            # Duplicate the status column
            # ID;Status;Status;
          - type: duplicateColumn
            column: 3
            # Translate the first status column into a PATROL Status
            # DeviceID;enclosureID;PATROLStatus;Status;
          - type: translate
            column: 3
            translationTable: "${translation::MemoryModuleStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # DeviceID;enclosureID;PATROLStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: "${translation::MemoryModuleStatusInformationTranslationTable}"
      mapping:
        # ValueTable
        source: "${source::monitors.memory.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="memory"}: $3
        legacyTextParameters:
          StatusInformation: $4
  cpu:
    discovery:
      sources:
        source(1):
          # Source(1) = SNMP cpuTable
          # ID;enclosureID,Speed;Status;Model;cpuDesignation;Vendor;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.4.1
          selectColumns: "ID,1,8,4,5,3,6"
          computes:
            # Keep only lines where status is not "not-available (4)" and not "unknown (1)"
            # ID;enclosureID;Speed;Status;Model;cpuDesignation;Vendor;
          - type: excludeMatchingLines
            column: 4
            valueList: "1,2,4"
            # Remove Genuine from manufacturer's name
            # ID;enclosureID;Speed;Status;Model;cpuDesignation;Vendor;
          - type: replace
            column: 7
            existingValue: Genuine
            newValue: ""
            # Replace "-1" by nothing: that's in case the CPU is disabled and its speed N/A
            # ID;enclosureID;Speed;Status;Model;Socket;Vendor;
          - type: replace
            column: 3
            existingValue: -1
            newValue: ""
      mapping:
        # InstanceTable
        source: "${source::monitors.cpu.discovery.sources.source(1)}"
        attributes:
          id: $1
          model: $5
          __display_id: $6
          vendor: $7
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $6, $7, $5, megaHertz2HumanFormat($3))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($3)
    collect:
      # Collect type is "multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
          # ID,enclosureID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.6.4.1
          selectColumns: "ID,1,4"
          computes:
            # Duplicate the status column
            # ID,enclosureID,Status;Status
          - type: duplicateColumn
            column: 3
            # Translate the first status column into a PATROL Status
            # ID;enclosureID;PATROLStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::CPUStatusTranslationTable}"
            # Translate the second status column into a more readable string
            # PATROLStatus;StatusInformation
          - type: translate
            column: 4
            translationTable: "${translation::CPUStatusInformationTranslationTable}"
      mapping:
        # ValueTable
        source: "${source::monitors.cpu.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="cpu"}: $3
        legacyTextParameters:
          StatusInformation: $4
  battery:
    discovery:
      sources:
        source(1):
          # Discovery
          # ID;Enclosure;Designation;Type;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,1,3,4,8"
          computes:
          # Keep Only Batteries
          - type: keepOnlyMatchingLines
            column: 4
            regExp: battery
          # Exclude components with Unknown or Not-Present Status
          - type: excludeMatchingLines
            column: 5
            valueList: "1,6"
      mapping:
        # InstanceTable = Source(1)
        # ID;Enclosure;Designation;Type;Status;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $3
    collect:
      # Collect type = "multi instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = voltage table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,8"
          computes:
            # Duplicate status
            # ID;Status;StatusInformation;
          - type: duplicateColumn
            column: 2
          # Translate TemperatureStatus into PATROLStatus
          - type: translate
            column: 2
            translationTable: "${translation::SC2CSSSensorTranslationTable}"
          # Translate Status into StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::SC2CSSSensorInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="battery"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          # ID;Enclosure;Designation;Type;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,1,3,4,8"
          computes:
          # Keep Only Disk
          - type: keepOnlyMatchingLines
            column: 4
            regExp: Disk
          # Exclude components with Unknown or Not-Present Status
          - type: excludeMatchingLines
            column: 5
            valueList: "1,6"
      mapping:
        # InstanceTable = Source(1)
        # ID;Enclosure;Designation;Type;Status;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $3
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $3
    collect:
      # Collect type = "multi instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = voltage table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,8"
          computes:
            # Duplicate status
            # ID;Status;StatusInformation;
          - type: duplicateColumn
            column: 2
          # Translate TemperatureStatus into PATROLStatus
          - type: translate
            column: 2
            translationTable: "${translation::SC2CSSSensorTranslationTable}"
          # Translate Status into StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::SC2CSSSensorInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Discovery
          # ID;Enclosure;Designation;Type;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,1,3,4,8"
          computes:
          # Keep Only Disk
          - type: keepOnlyMatchingLines
            column: 4
            regExp: \(PCI\)\|\(Power Unit\)\|\(System Management Module\)
          # Exclude components with Unknown or Not-Present Status
          - type: excludeMatchingLines
            column: 5
            valueList: "1,6"
      mapping:
        # InstanceTable = Source(1)
        # ID;Enclosure;Designation;Type;Status;
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $3
          device_type: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s: %s\", $4, $3)}"
    collect:
      # Collect type = "multi instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = OtherDevice table
          # ID;Status;
          type: snmpTable
          oid: 1.3.6.1.4.1.231.2.10.2.2.10.8.3.1
          selectColumns: "ID,8"
          computes:
            # Duplicate status
            # ID;Status;StatusInformation;
          - type: duplicateColumn
            column: 2
          # Translate TemperatureStatus into PATROLStatus
          - type: translate
            column: 2
            translationTable: "${translation::SC2CSSSensorTranslationTable}"
          # Translate Status into StatusInformation
          - type: translate
            column: 3
            translationTable: "${translation::SC2CSSSensorInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  TemperatureStatusTranslationTable:
    "3": ok
    "4": degraded
    "5": degraded
    "6": degraded
    "7": failed
    "8": ok
    "9": degraded
    Default: UNKNOWN
  FanStatusTranslationTable:
    "3": ok
    "4": failed
    "5": degraded
    "6": degraded
    "7": degraded
    "8": failed
    Default: UNKNOWN
  EnclosureTypeTranslationTable:
    "11": Systemboard In Partition
    "22": Virtual Server Xen
    "23": Virtual Server Pan
    Default: Computer
    "2": Computer
    "3": Storage Extension
    "4": Blade Server Chassis
    "5": Blade Server
    "6": Cluster Node
    "7": Multi Node Chassis
    "8": Multi Node Service
    "9": Virtual Server
    "20": Virtual Server Vmware
    "10": Virtual Partition
    "21": Virtual Server HyperV
  VoltageStatusTranslationTable:
    "3": ok
    "4": failed
    "5": failed
    "6": failed
    "7": degraded
    Default: UNKNOWN
  PowerSupplyStatusTranslationTable:
    "11": failed
    "12": failed
    "13": failed
    "3": ok
    "4": failed
    "5": failed
    "6": failed
    "7": failed
    "8": degraded
    "9": degraded
    Default: UNKNOWN
    "10": failed
  SC2CSSSensorTranslationTable:
    "2": ok
    "3": ok
    "4": failed
    "5": failed
    "6": failed
    Default: UNKNOWN
  VoltageStatusInformationTranslationTable:
    "3": ""
    "4": Below Lower Threshold
    "5": Above Upper Threshold
    "6": Out of Normal Range
    "7": Warning (e.g. Battery failure predicted)
    Default: Unknown Status
  CPUStatusTranslationTable:
    "3": ok
    "4": ok
    "5": failed
    "6": failed
    "7": degraded
    "8": degraded
    Default: UNKNOWN
  MemoryModuleStatusInformationTranslationTable:
    "3": ""
    "4": Disabled in BIOS
    "5": Error but still in use
    "6": Failed and disabled
    "7": Failure Predicted (Error count exceeded)
    Default: Unknown Status
  FanStatusInformationTranslationTable:
    "3": ""
    "4": Failed
    "5": Predicted Failure
    "6": Failed Redundancy
    "7": Not Manageable
    "8": Not Present
    Default: Unknown Status
  PowerSupplyStatusInformationTranslationTable:
    "11": Power Safe Mode
    "12": Non-redundant DC Failure
    "13": Non-redundant AC Failure
    "3": ""
    "4": Failed
    "5": AC Failure
    "6": DC Failure
    "7": Critical Temperature
    "8": Not Manageable
    "9": Fan Failure Predicted
    Default: Unknown Status
    "10": Fan Failed
  MemoryModuleStatusTranslationTable:
    "3": ok
    "4": ok
    "5": failed
    "6": failed
    "7": degraded
    Default: UNKNOWN
  TemperatureStatusInformationTranslationTable:
    "3": ""
    "4": Temperature Sensor Failure
    "5": Temperature Failure
    "6": "Warning: Temperature High"
    "7": "Critical: Temperature Exceeds Tolerance"
    "8": ""
    "9": Warning
    Default: Unknown Status
  IntrusionCodeTranslationTable:
    "11": degraded
    "2": degraded
    "14": degraded
    "6": degraded
    "8": degraded
    "9": degraded
    Default: ok
    "10": degraded
  SC2CSSSensorInformationTranslationTable:
    "2": ""
    "3": Identify LED ON
    "4": Predicted Failure
    "5": Failed
    "6": Removed
    Default: Unknown Status
  CPUStatusInformationTranslationTable:
    "3": ""
    "4": Disabled
    "5": Error
    "6": Failed
    "7": Missing Termination
    "8": Failure predicted
    Default: Unknown Status
