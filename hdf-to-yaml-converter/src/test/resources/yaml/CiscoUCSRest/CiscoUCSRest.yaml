---
connector:
  displayName: Cisco UCS Manager (REST)
  platforms: Cisco UCS
  reliesOn: Cisco UCS Manager (REST XML API)
  version: 1.0
  information: This connector provides hardware monitoring for Cisco UCS Blade chassis (as well as the Cisco Fabric Interconnect Switch) through the REST UCS Manager (running on the Fabric Interconnect Switch).
  detection:
    appliesTo:
    - OOB
    connectionTypes:
    - remote
    supersedes:
    - CiscoUCSBlade
    criteria:
    # Only for Hardware KM 11.3.00+
    - type: productRequirements
      kmVersion: 11.3.00
    # check if it's an ucs
    - type: http
      method: POST
      url: /nuova
      header: "Content-Type: application/xml"
      body: <aaaLogin inName=" inPassword=" />
      expectedResult: Authentication failed
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          body: "<aaaLogin inName=\"%{USERNAME}\" inPassword=\"%{PASSWORD}\" />"
          computes:
          - type: xml2csv
            recordTag: /
            properties: aaaLogin>outCookie
        source(2):
          # equipmentIOCard
          # equipmentFex
          # Source(2) = SELECT dn;model;serial FROM equipmentChassis for blade discovery
          # DeviceID;Model;SerialNumber;
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentChassis\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentChassis>dn;equipmentChassis>model;equipmentChassis>serial
            # Add ";Blade" after SerialNumber
            # DeviceID;Model;SerialNumber;EnclosureType;
          - type: rightConcat
            column: 3
            value: ;Blade
        source(3):
          # Source(3) = SELECT dn;model;serial FROM networkElement
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"networkElement\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: networkElement>dn;networkElement>model;networkElement>serial
        source(4):
          # now discover equipmentfex
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentFex\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentFex>dn;equipmentFex>model;equipmentFex>serial
        source(5):
          # now union both switches
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(3)}"
          - "${source::monitors.enclosure.discovery.sources.source(4)}"
          computes:
            # Add ";Switch" after SerialNumber
            # DeviceID;Model;SerialNumber;EnclosureType;
          - type: rightConcat
            column: 3
            value: ;Switch
        source(6):
          # Source(4) = Union of Source(2) and Source(5)
          # DeviceID;Model;SerialNumber;EnclosureType;
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.discovery.sources.source(2)}"
          - "${source::monitors.enclosure.discovery.sources.source(5)}"
          computes:
            # Duplicate DeviceID to build DisplayID
            # DeviceID;DisplayID;Model;SerialNumber;EnclosureType;
          - type: duplicateColumn
            column: 1
            # Remove "sys/" from the DisplayID
            # DeviceID;DisplayID;Model;SerialNumber;EnclosureType;
          - type: replace
            column: 2
            existingValue: sys/
            newValue: ""
        source(7):
          # Use the bottom source for each discovery sources
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentFan\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(8):
          # Fan Discovery source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentFanStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(9):
          # Power Supply Discovery source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentPsu\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(10):
          # Temperature Discovery source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"swEnvStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(11):
          # Temperature Discovery Source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"computeMbTempStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(12):
          # Blade Discovery source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"computeBlade\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(13):
          # Blade Discovery source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentBladeBiosCapProvider\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(14):
          # NetworkCard Discovery Source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"etherPIo\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(15):
          # NetworkCard Discovery Source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<configResolveClass classId=\"fcPIo\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(16):
          # Release the cookie
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.discovery.sources.source(1)}"
          body: "<aaaLogout inCookie=\"%{AUTHENTICATIONTOKEN}\" />"
      mapping:
        # The discovery table = Source(6)
        source: "${source::monitors.enclosure.discovery.sources.source(6)}"
        attributes:
          id: $1
          __display_id: $2
          vendor: Cisco
          model: $3
          serial_number: $4
          type: $5
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $2, \"Cisco\", $3)}"
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = All UCS queries that we're going to make later
          # Same principle as for the discovery. This is to limit the number of connections we do.
          # Because the Cisco UCS 6120 switches are sensible things; you know.
          # Cookie for data collection
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          body: "<aaaLogin inName=\"%{USERNAME}\" inPassword=\"%{PASSWORD}\" />"
          computes:
          - type: xml2csv
            recordTag: /
            properties: aaaLogin>outCookie
        source(2):
          # Collect for Enclosure
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"faultInst\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: faultInst>dn;faultInst>severity;faultInst>cause
            # Extract the DeviceID from the FaultDeviceID by removing the /fault-... string
            # DeviceID;Severity;StatusInformation;
          - type: replace
            column: 1
            existingValue: /fault-
            newValue: ""
          - type: extract
            column: 1
            subSeparators: ""
            subColumn: 1
            # Translate Severity into a PATROL Status
            # DeviceID;Status;StatusInformation;
          - type: translate
            column: 2
            translationTable: "${translation::faultInstSeverityTranslationTable}"
            # Remove "link-down" lines; because it's not really an error
            # DeviceID;Status;StatusInformation;
          - type: excludeMatchingLines
            column: 3
            valueList: link-down
        source(3):
          # Source(3) = Table joint of Enclosure.Discovery.Source(4) and Source(2)
          # DeviceID;DisplayID;Model;SerialNumber;EnclosureType;DeviceID;Status;StatusInformation;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.discovery.sources.source(6)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;OK;;
        source(4):
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentChassisStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentChassisStats>dn;equipmentChassisStats>inputPower
            # Remove the "/stats" from the EnclosureID
            # EnclosureID;Power;
          - type: replace
            column: 1
            existingValue: /stats
            newValue: ""
        source(5):
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentPsuInputStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentPsuInputStats>dn;equipmentPsuInputStats>power
            # Parse the result of equipmentPsuInputStats to sum up the power consumption per chassis
            # EnclosureID;Power;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(6):
          # Source(5) = Union of Source(3) and Source(4)
          # EnclosureID;Power;
          type: tableUnion
          tables:
          - "${source::monitors.enclosure.collect.sources.source(4)}"
          - "${source::monitors.enclosure.collect.sources.source(5)}"
        source(7):
          # Source(6) = Table joint of Source(2) and Source(5)
          # DeviceID;DisplayID;Model;SerialNumber;EnclosureType;DeviceID;Status;StatusInformation;EnclosureID;Power;
          type: tableJoin
          leftTable: "${source::monitors.enclosure.collect.sources.source(3)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(6)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
        source(8):
          # POST for the collection
          # Fan collect source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"equipmentFanStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(9):
          # Temperature collect Source 1
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"swEnvStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(10):
          # Temperature collect Source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"computeMbTempStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(11):
          # NetworkCard collect Source 2
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"fcPIo\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(12):
          # NetworkCard collect Source 3
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"etherPIo\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(13):
          # NetworkCard collect Source 9
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"fcStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(14):
          # NetworkCard collect Source 6
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"etherRxStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(15):
          # NetworkCard collect Source 7
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<configResolveClass classId=\"etherTxStats\" cookie=\"%{AUTHENTICATIONTOKEN}\" inHierarchical=\"false\" />"
        source(16):
          # remove the cookie
          type: http
          method: POST
          url: /nuova
          header: "Content-Type: application/xml"
          authenticationToken: "${source::monitors.enclosure.collect.sources.source(1)}"
          body: "<aaaLogout inCookie=\"%{AUTHENTICATIONTOKEN}\" />"
      mapping:
        # ValueTable=Source(7)
        source: "${source::monitors.enclosure.collect.sources.source(7)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="enclosure"}: $7
          hw.enclosure.power: $10
          hw.enclosure.energy: fakeCounter($10)
        legacyTextParameters:
          StatusInformation: $8
  fan:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(7)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentFan>presence;equipmentFan>dn;equipmentFan>model;equipmentFan>serial;equipmentFan>intType;equipmentFan>tray;equipmentFan>module;equipmentFan>id
          - type: keepOnlyMatchingLines
            column: 1
            valueList: equipped
          - type: keepColumns
            columnNumbers: "2,3,4,5,6,7,8"
            # Duplicate DeviceID; twice
            # DeviceID;DeviceID;DeviceID;Model;Serial;Location;Tray;Module;FanID;
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
            # Extract the root from the DeviceID path in column(2)
            # DeviceID;ParentID1;DeviceID;Model;Serial;Location;Tray;Module;FanID;
          - type: extract
            column: 2
            subSeparators: /
            subColumn: 1
            # Extract the second-level element from the DeviceID path in column(3)
            # DeviceID;ParentID1;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: extract
            column: 3
            subSeparators: /
            subColumn: 2
            # Concat ParentID1 "/" ParentID2 to form ParentID
            # DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: rightConcat
            column: 2
            value: /
          - type: rightConcat
            column: 2
            value: $3
            # Build a good looking location string from location; tray; module and fanID
            # DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: rightConcat
            column: 6
            value: '; Tray '
          - type: rightConcat
            column: 6
            value: $7
          - type: rightConcat
            column: 6
            value: '; Module '
          - type: rightConcat
            column: 6
            value: $8
          - type: rightConcat
            column: 6
            value: '; Fan '
          - type: rightConcat
            column: 6
            value: $9
            # Duplicate DeviceID (again) to build DisplayID
            # DeviceID;DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: duplicateColumn
            column: 1
            # Remove the (useless) mention of ParentID in DeviceID; to build DisplayID
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: replace
            column: 2
            existingValue: $3
            newValue: ""
            # Remove the leading "/"
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
          - type: leftConcat
            column: 2
            value: "~"
          - type: replace
            column: 2
            existingValue: "~/"
            newValue: ""
          - type: replace
            column: 2
            existingValue: "~"
            newValue: ""
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(8)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentFanStats>dn
            # Remove the /stats in the FanStatID to get the FanDeviceID
            # FanDeviceID;
          - type: replace
            column: 1
            existingValue: /stats
            newValue: ""
        source(3):
          # Source(3) = Table joint of Source(1) and Source(2)
          # If we find a FanDeviceID (stats) in Source(2) matching with Source(1); then we activate the Speed parameter
          # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
          type: tableJoin
          leftTable: "${source::monitors.fan.discovery.sources.source(1)}"
          rightTable: "${source::monitors.fan.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;
          computes:
            # Exclude componnent in a "rack unit" as these are components from a rack server.
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
          - type: excludeMatchingLines
            column: 1
            regExp: ^sys/rack-unit
          - type: leftConcat
            column: 5
            value: "Model: "
          - type: leftConcat
            column: 6
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(3)
        # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
        source: "${source::monitors.fan.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          sensor_location: $7
          info: "${awk::join(\" \", $5, $6)}"
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s)\", $2, $7)}"
        conditionalCollection:
          hw.fan.speed: $11
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Table joint of Fan.Discovery.Source(1) and Enclosure.Collect.Source(2)
          # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;DeviceID;Status;StatusInformation;
          type: tableJoin
          leftTable: "${source::monitors.fan.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;OK;;
        source(2):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(8)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentFanStats>dn;equipmentFanStats>speed
            # Remove the /stats in the FanStatID to get the FanDeviceID
            # FanDeviceID;Speed;
          - type: replace
            column: 1
            existingValue: /stats
            newValue: ""
        source(3):
          # Source(3) = Table joint of Source(1) and Source(2)
          # DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;DeviceID;Status;StatusInformation;FanDeviceID;Speed;
          type: tableJoin
          leftTable: "${source::monitors.fan.collect.sources.source(1)}"
          rightTable: "${source::monitors.fan.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $15
          hw.fan.speed: $18
        legacyTextParameters:
          StatusInformation: $16
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = SELECT presence;dn;model;vendor;serial FROM equipmentPsu
          # DeviceID;Model;Vendor;SerialNumber;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(9)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentPsu>presence;equipmentPsu>dn;equipmentPsu>model;equipmentPsu>vendor;equipmentPsu>serial
          - type: keepOnlyMatchingLines
            column: 1
            valueList: equipped
          - type: keepColumns
            columnNumbers: "2,3,4,5"
            # Duplicate DeviceID; twice
            # DeviceID;DeviceID;DeviceID;Model;Vendor;SerialNumber;
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
            # Extract the root from the DeviceID path in column(2)
            # DeviceID;ParentID1;DeviceID;Model;Vendor;SerialNumber;
          - type: extract
            column: 2
            subSeparators: /
            subColumn: 1
            # Extract the second-level element from the DeviceID path in column(3)
            # DeviceID;ParentID1;ParentID2;Model;Vendor;SerialNumber;
          - type: extract
            column: 3
            subSeparators: /
            subColumn: 2
            # Concat ParentID1 "/" ParentID2 to form ParentID
            # DeviceID;ParentID;ParentID2;Model;Vendor;SerialNumber;
          - type: rightConcat
            column: 2
            value: /
          - type: rightConcat
            column: 2
            value: $3
            # Now; duplicate DeviceID to form DisplayID
            # DeviceID;DeviceID;ParentID;ParentID2;Model;Vendor;SerialNumber;
          - type: duplicateColumn
            column: 1
            # Remove mentions of ParentID in DeviceID to get DisplayID
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
          - type: replace
            column: 2
            existingValue: $3
            newValue: ""
            # Remove the leading "/"
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
          - type: leftConcat
            column: 2
            value: "~"
          - type: replace
            column: 2
            existingValue: "~/"
            newValue: ""
          - type: replace
            column: 2
            existingValue: "~"
            newValue: ""
            # Exclude componnent in a "rack unit" as these are components from a rack server.
            # DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
          - type: excludeMatchingLines
            column: 1
            regExp: ^sys/rack-unit
          - type: leftConcat
            column: 7
            value: "SerialNumber: "
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          power_supply_type: $5
          info: $7
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s)\", $2, $5)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Table joint of PowerSupply.Discovery.Source(1) and Enclosure.Collect.Source(2)
          # DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;DeviceID;Status;StatusInformation;
          type: tableJoin
          leftTable: "${source::monitors.power_supply.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;OK;;
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $9
        legacyTextParameters:
          StatusInformation: $10
  temperature:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(10)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: swEnvStats>dn;swEnvStats>fanCtrlrInlet1;swEnvStats>fanCtrlrInlet2;swEnvStats>fanCtrlrInlet3;swEnvStats>fanCtrlrInlet4;swEnvStats>mainBoardOutlet1;swEnvStats>mainBoardOutlet2
          - type: leftConcat
            column: 1
            value: swEnvStats;
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(11)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: computeMbTempStats>dn;computeMbTempStats>fmTempSenIo;computeMbTempStats>fmTempSenRear
          - type: leftConcat
            column: 1
            value: computeMbTempStats;
          - type: excludeMatchingLines
            column: 3
            valueList: not-applicable
          - type: excludeMatchingLines
            column: 4
            valueList: not-applicable
        source(3):
          # Source(3) = Union of Source(1); Source(2)
          # Various formats to be processed by the awk script
          type: tableUnion
          tables:
          - "${source::monitors.temperature.discovery.sources.source(1)}"
          - "${source::monitors.temperature.discovery.sources.source(2)}"
          computes:
            # Process these couple lines to have one line per temperature sensor
            # TemperatureID;DisplayID;ParentID;Location;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Exclude componnent in a "rack unit" as these are components from a rack server.
            # TemperatureID;DisplayID;ParentID;Location;
          - type: excludeMatchingLines
            column: 1
            regExp: ^sys/rack-unit
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          sensor_location: $4
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s)\", $2, $4)}"
    collect:
      # Collect type is: multiinstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = SELECT dn;fanCtrlrInlet1;fanCtrlrInlet2;fanCtrlrInlet3;fanCtrlrInlet4;mainBoardOutlet1;mainBoardOutlet2 FROM swEnvStats
          # SwitchEnclosureID;fanCtrlrInlet1;fanCtrlrInlet2;fanCtrlrInlet3;fanCtrlrInlet4;mainBoardOutlet1;mainBoardOutlet2;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(9)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: swEnvStats>dn;swEnvStats>fanCtrlrInlet1;swEnvStats>fanCtrlrInlet2;swEnvStats>fanCtrlrInlet3;swEnvStats>fanCtrlrInlet4;swEnvStats>mainBoardOutlet1;swEnvStats>mainBoardOutlet2
          - type: leftConcat
            column: 1
            value: swEnvStats;
        source(2):
          # Source(2) = SELECT dn;fmTempSenIo;fmTempSenRear FROM computeMbTempStats
          # computeMbTempStats;tempStatsID;fmTempSenIo;fmTempSenRear;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(10)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: computeMbTempStats>dn;computeMbTempStats>fmTempSenIo;computeMbTempStats>fmTempSenRear
          - type: leftConcat
            column: 1
            value: computeMbTempStats;
        source(3):
          # Source(3) = Union of Source(1); Source(2)
          # Various formats to be processed by the awk script
          type: tableUnion
          tables:
          - "${source::monitors.temperature.collect.sources.source(1)}"
          - "${source::monitors.temperature.collect.sources.source(2)}"
          computes:
            # Process these couple lines to have one line per temperature sensor
            # DeviceID;Temperature;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,6"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = SELECT presence;dn;model;serial;slotId;usrLbl FROM computeBlade
          # BladeID;Model;SerialNumber;Location;usrLbl;
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(12)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: computeBlade>presence;computeBlade>dn;computeBlade>model;computeBlade>serial;computeBlade>slotId;computeBlade>usrLbl
          - type: keepOnlyMatchingLines
            column: 1
            valueList: equipped
          - type: keepColumns
            columnNumbers: "2,3,4,5,6"
            # Duplicate BladeID; twice
            # BladeID;BladeID;BladeID;Model;SerialNumber;Location;usrLbl;
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
            # Extract the root from the BladeID path in column(2)
            # BladeID;ParentID1;BladeID;Model;SerialNumber;Location;usrLbl;
          - type: extract
            column: 2
            subSeparators: /
            subColumn: 1
            # Extract the second-level element from the DeviceID path in column(3)
            # BladeID;ParentID1;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: extract
            column: 3
            subSeparators: /
            subColumn: 2
            # Concat ParentID1 "/" ParentID2 to form ParentID
            # BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: rightConcat
            column: 2
            value: /
          - type: rightConcat
            column: 2
            value: $3
            # Add "Slot " in from of the location column
            # BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: leftConcat
            column: 6
            value: "Location: "
            # Duplicate BladeID to form DisplayID
            # BladeID;BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: duplicateColumn
            column: 1
            # Remove mentions of ParentID in BladeID to obtain DisplayID
            # BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: replace
            column: 2
            existingValue: $3
            newValue: ""
            # Remove the leading "/" from DisplayID
            # BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
          - type: replace
            column: 2
            existingValue: /
            newValue: ""
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(13)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: equipmentBladeBiosCapProvider>model;equipmentBladeBiosCapProvider>productName
        source(3):
          # Source(3) = Table Joint of Source(1) and source 2
          # This is to retrieve the actual model name; instead of the cryptic model code
          # BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;modelCode;modelName;
          type: tableJoin
          leftTable: "${source::monitors.blade.discovery.sources.source(1)}"
          rightTable: "${source::monitors.blade.discovery.sources.source(2)}"
          leftKeyColumn: 5
          rightKeyColumn: 1
          defaultRightLine: ;;
          computes:
          - type: leftConcat
            column: 4
            value: "Parent ID: "
      mapping:
        # InstanceTable = Source(1)
        # BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;modelCode;modelName;
        source: "${source::monitors.blade.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          serial_number: $5
          blade_name: $8
          model: $10
          info: "${awk::join(\" \", $4, $7)}"
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $8, $10)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Table joint of PowerSupply.Discovery.Source(1) and Enclosure.Collect.Source(1)
          # BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;DeviceID;Status;StatusInformation;
          type: tableJoin
          leftTable: "${source::monitors.blade.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;OK;
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.blade.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="blade"}: $10
        legacyTextParameters:
          StatusInformation: $11
  network:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(14)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: etherPIo>ifType;etherPIo>dn;etherPIo>ifRole;etherPIo>mac;etherPIo>operState;etherPIo>peerDn;etherPIo>portId;etherPIo>slotId;etherPIo>operSpeed
          - type: keepOnlyMatchingLines
            column: 1
            valueList: physical
          - type: excludeMatchingLines
            column: 5
            valueList: sfp-not-present
          # Keep Column
          - type: keepColumns
            columnNumbers: "2,3,4,5,6,7,8,9"
            # Add "MAC" as the PhysicalAddressType
            # NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: rightConcat
            column: 3
            value: ;MAC
            # Translate Type into a DeviceType
            # NetworkCardID;DeviceType;PhysicalAddress;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: translate
            column: 2
            translationTable: "${translation::EthernetTypeTranslationTable}"
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(15)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: fcPIo>ifType;fcPIo>dn;fcPIo>ifRole;fcPIo>wwn;fcPIo>operState;fcPIo>peerDn;fcPIo>portId;fcPIo>slotId;fcPIo>operSpeed
          # mber;SlotNumber;Speed;
          - type: translate
            column: 3
            translationTable: "${translation::FCTypeTranslationTable}"
            # Add "WWN" as the PhysicalAddressType
            # NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: rightConcat
            column: 4
            value: ;WWN
          - type: keepOnlyMatchingLines
            column: 1
            valueList: physical
          - type: excludeMatchingLines
            column: 6
            valueList: sfp-not-present
          # Keep Column
          - type: keepColumns
            columnNumbers: "2,3,4,5,6,7,8,9,10"
        source(3):
          # Source(3) = Union of Source(1) and Source(2)
          # NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(1)}"
          - "${source::monitors.network.discovery.sources.source(2)}"
          computes:
            # Duplicate NetworkCardID; twice
            # NetworkCardID;NetworkCardID;NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: duplicateColumn
            column: 1
          - type: duplicateColumn
            column: 1
            # Extract the root from the NetworkCardID path in column(2)
            # NetworkCardID;ParentID1;NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: extract
            column: 2
            subSeparators: /
            subColumn: 1
            # Extract the second-level element from the DeviceID path in column(3)
            # NetworkCardID;ParentID1;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: extract
            column: 3
            subSeparators: /
            subColumn: 2
            # Concat ParentID1 "/" ParentID2 to form ParentID
            # NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
          - type: rightConcat
            column: 2
            value: /
          - type: rightConcat
            column: 2
            value: $3
            # Build a location string from PortNumber and SlotNumber
            # NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
          - type: leftConcat
            column: 9
            value: " - Port: "
          - type: leftConcat
            column: 9
            value: $10
          - type: leftConcat
            column: 9
            value: "Location: "
            # Duplicate NetworkCardID to build DisplayID
            # NetworkCardID;NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
          - type: duplicateColumn
            column: 1
            # Remove mentions of ParentID in NetworkCardID to get DisplayID
            # NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
          - type: replace
            column: 2
            existingValue: $3
            newValue: ""
            # Remove the leading "/"
            # NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
          - type: leftConcat
            column: 2
            value: "~"
          - type: replace
            column: 2
            existingValue: "~/"
            newValue: ""
          - type: replace
            column: 2
            existingValue: "~"
            newValue: ""
      mapping:
        # InstanceTable = Source(3)
        # NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
        source: "${source::monitors.network.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          device_type: $5
          physical_address: $6
          physical_address_type: $7
          model: $10
          info: $10
          hw.parent.type: enclosure
          hw.parent.id: $3
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $5, $10)}"
        conditionalCollection:
          hw.network.bandwidth.limit: megaBit2Bit($12)
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Table joint of NetworkCard.Discovery.Source(1) and Enclosure.Collect.Source(1)
          # NetworkCardID;DisplayIDParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;DeviceID;Status;StatusInformation;
          type: tableJoin
          leftTable: "${source::monitors.network.discovery.sources.source(3)}"
          rightTable: "${source::monitors.enclosure.collect.sources.source(3)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;OK;;
          computes:
            # For easier reading; we're going to remove all unnecessary columns
            # NetworkCardID;Status;StatusInformation;
          - type: keepColumns
            columnNumbers: "1,14,15"
        source(2):
          # collect status for fcs
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(11)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: fcPIo>dn;fcPIo>operState;fcPIo>operSpeed
        source(3):
          # collect status for Ethernet
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(12)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: etherPIo>dn;etherPIo>operState;etherPIo>operSpeed
        source(4):
          # now union
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(2)}"
          - "${source::monitors.network.collect.sources.source(3)}"
          computes:
            # Translate operState to LinkStatus
            # NetworkCardID;LinkStatus;SpeedGbps
          - type: translate
            column: 2
            translationTable: "${translation::LinkStatusTranslationTable}"
            # Remove the "gbps" from the SpeedGbps column
            # NetworkCardID;LinkStatus;LinkSpeed;
          - type: replace
            column: 3
            existingValue: gbps
            newValue: '000'
            # Same for "mbps"; even though we haven't seen it during our tests
            # NetworkCardID;LinkStatus;LinkSpeed;
          - type: replace
            column: 3
            existingValue: mbps
            newValue: ""
            # Change "indeterminate" for an empty string (as we don't have anything better)
            # NetworkCardID;LinkStatus;LinkSpeed;
          - type: replace
            column: 3
            existingValue: indeterminate
            newValue: ""
        source(5):
          # Source(5) = Table Joint of Source(1) and Source(4)
          # NetworkCardID;Status;StatusInformation;NetworkCardID;LinkStatus;LinkSpeed;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(1)}"
          rightTable: "${source::monitors.network.collect.sources.source(4)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
        source(6):
          # Source(6) = SELECT dn;totalBytes;totalPackets FROM etherRxStats
          # NetworkCardID/rx-stats;ReceivedBytes;ReceivedPackets;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(14)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: etherRxStats>dn;etherRxStats>totalBytes;etherRxStats>totalPackets
            # Remove the /rx-stats from the ID
            # NetworkCardID;ReceivedBytes;ReceivedPackets;
          - type: replace
            column: 1
            existingValue: /rx-stats
            newValue: ""
        source(7):
          # Source(7) = SELECT dn;totalBytes;totalPackets FROM etherTxStats
          # NetworkCardID/tx-stats;TransmittededBytes;TransmittedPackets;
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(15)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: etherTxStats>dn;etherTxStats>totalBytes;etherTxStats>totalPackets
            # Remove the /tx-stats from the ID
            # NetworkCardID;TransmittededBytes;TransmittedPackets;
          - type: replace
            column: 1
            existingValue: /tx-stats
            newValue: ""
        source(8):
          # Source(8) = Table joint of Source(6) and Source(7)
          # NetworkCardID;ReceivedBytes;ReceivedPackets;NetworkCardID;TransmittededBytes;TransmittedPackets;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(6)}"
          rightTable: "${source::monitors.network.collect.sources.source(7)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          computes:
            # Keep only useful columns that will match with what we get from fcStats
            # NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
          - type: keepColumns
            columnNumbers: "1,2,3,5,6"
        source(9):
          # Source(9) = SELECT dn;bytesRx;packetsRx;bytesTx;packetsTx FROM fcStats
          # NetworkCardID/stats;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
          # collect status for Ethernet
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(13)}"
          computes:
          - type: xml2csv
            recordTag: /configResolveClass/outConfigs
            properties: fcStats>dn;fcStats>bytesRx;fcStats>packetsRx;fcStats>bytesTx;fcStats>packetsTx
            # Remove the /stats from the ID
            # NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
          - type: replace
            column: 1
            existingValue: /stats
            newValue: ""
        source(10):
          # Source(10) = Table Union of Source(7) and Source(9)
          # NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittedBytes;TransmittedPackets;
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(7)}"
          - "${source::monitors.network.collect.sources.source(9)}"
        source(11):
          # Source(9) = Table Joint of Source(5) and Source(10)
          # NetworkCardID;Status;StatusInformation;NetworkCardID;LinkStatus;LinkSpeed;NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
          type: tableJoin
          leftTable: "${source::monitors.network.collect.sources.source(5)}"
          rightTable: "${source::monitors.network.collect.sources.source(10)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # ValueTable = Source(9)
        source: "${source::monitors.network.collect.sources.source(11)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="network"}: $2
          hw.network.up: legacyLinkStatus($5)
          hw.network.bandwidth.limit: megaBit2Bit($6)
          hw.network.full_duplex: legacyFullDuplex("full")
          hw.network.io{direction="receive"}: $8
          hw.network.packets{direction="receive"}: $9
          hw.network.io{direction="transmit"}: $10
          hw.network.packets{direction="transmit"}: $11
        legacyTextParameters:
          StatusInformation: $3
translations:
  faultInstSeverityTranslationTable:
    minor: ok
    major: failed
    critical: failed
    warning: degraded
    cleared: ok
    Default: UNKNOWN
    info: ok
  LinkStatusTranslationTable:
    link-down: degraded
    Default: ok
  EthernetTypeTranslationTable:
    server: Ethernet Port (Server)
    mgmt: Ethernet Port (Management)
    Default: Ethernet Port
    network: Ethernet Port (Uplink)
  FCTypeTranslationTable:
    server: FC Port (Server)
    mgmt: FC Port (Management)
    Default: FC Port
    network: FC Port (Uplink)
