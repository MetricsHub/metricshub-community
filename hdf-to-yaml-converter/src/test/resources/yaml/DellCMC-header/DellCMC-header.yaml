---
monitors:
  enclosure:
    discovery:
      mapping:
        # The discovery table = source(1)
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
        attributes:
          id: DellBladeChassis
          __display_id: Dell Blade Chassis
          model: $1
          serial_number: $2
          type: Chassis
          name: "${awk::sprintf(\"Enclosure: %s (%s)\", \"Dell Blade Chassis\", $1)}"
    collect:
      sources:
        source(2):
          # Source(2) = copy of Enclosure.Collect.Source(1)
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
          computes:
            # Retrieve the overall status of the chassis and its power consumption with a smart AWK script
            # Status;StatusInformation;PowerConsumption
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: MSHW;
            separators: ;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.enclosure.collect.sources.source(2)}"
        metrics:
          hw.status{hw.type="enclosure"}: $1
          hw.enclosure.power: $3
          hw.enclosure.energy: fakeCounter($3)
        legacyTextParameters:
          StatusInformation: $2
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the blades thanks to a smart AWK script
            # BladeID;BladeModel;
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,6"
        source(2):
          computes:
            # Now, extract the blades hostnames
            # BladeID;SlotName;HostName;
          - type: awk
            script: "${file::embeddedFile-12}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
        source(3):
          # Source 3 = Join of Blade info and host info
          # BladeID;BladeModel;BladeID;SlotName;HostName;
          type: tableJoin
          leftTable: "${source::monitors.blade.discovery.sources.source(1)}"
          rightTable: "${source::monitors.blade.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;
      mapping:
        # InstanceTable = Source(3)
        # BladeID;BladeModel;BladeID;SlotName;HostName;
        source: "${source::monitors.blade.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $1
          blade_name: $5
          model: $2
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s (%s - %s)\", $1, $5, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # PowerSupplyID;Status;StatusInformation;PowerState
          - type: awk
            script: "${file::embeddedFile-7}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.blade.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="blade"}: $2
          hw.blade.power_state: $4
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the temperatures thanks to a smart AWK script
            # TemperatureID;Location;WarningThreshold;AlarmThreshold;Temperature;Status;
          - type: awk
            script: "${file::embeddedFile-3}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5,6,7"
            # Replace "Unknown" status with blank to deactivate teh parameter
            # TemperatureID;Location;WarningThreshold;AlarmThreshold;Temperature;Status;
          - type: replace
            column: 6
            existingValue: UNKNOWN
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the temperatures thanks to a smart AWK script
            # TemperatureID;Temperature;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-3}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,6,7,8"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.temperature: $2
          hw.status{hw.type="temperature"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the fans thanks to a smart AWK script
            # FanID;Location;WarningThreshold;AlarmThreshold
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $3
          hw.fan.speed.limit{limit_type="low.critical"}: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the fans thanks to a smart AWK script
            # FanID;Speed;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-4}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,6,7,8"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.fan.speed: $2
          hw.status{hw.type="fan"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # PowerSupplyID;
          - type: awk
            script: "${file::embeddedFile-5}"
            separators: ;
            keep: ^MSHW;
            selectColumns: 2
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # PowerSupplyID;Status;StatusInformation
          - type: awk
            script: "${file::embeddedFile-5}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the switches, DRAC and KVM modules thanks to a smart AWK script
            # OtherDeviceID;DeviceType;
          - type: awk
            script: "${file::embeddedFile-6}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          device_type: $2
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s: %s\", $2, $1)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the switches, DRAC and KVM status thanks to a smart AWK script
            # OtherDeviceID;Status;StatusInformation
          - type: awk
            script: "${file::embeddedFile-6}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,4,5"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # MSHW;DeviceID;DisplayID;Status;StatusInformation;size;failurepredicted;Model;SerialNumber;
            # DeviceID;DisplayID;size;Model;SerialNumber;
          - type: awk
            script: "${file::embeddedFile-8}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,6,8,9"
            # Convert the size into bytes
            # DeviceID;DisplayID;size;Model;SerialNumber;
          - type: multiply
            column: 3
            value: 1073741824
      mapping:
        # InstanceTable = Source(1)
        # DeviceID;DisplayID;size;Model;SerialNumber;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          vendor: $4
          serial_number: $5
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $4, bytes2HumanFormatBase10($3))}"
        metrics:
          hw.physical_disk.size: $3
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # MSHW;DeviceID;DisplayID;Status;StatusInformation;size;failurepredicted;Model;SerialNumber;
            # DeviceID;Status;StatusInformation;PredictedFailure
          - type: awk
            script: "${file::embeddedFile-8}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,4,5,7"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
          hw.status{hw.type="physical_disk", state="predicted_failure"}: boolean($4)
        legacyTextParameters:
          StatusInformation: $3
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # MSHW;DeviceID;status;statusInformation;Model;Firmware;
            # DeviceID;Model;Firmware;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5,6"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          model: $2
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $1, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # MSHW;DeviceID;status;statusInformation;Model;Firmware;
            # DeviceID;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-9}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.disk_controller.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="disk_controller"}: $2
        legacyTextParameters:
          StatusInformation: $3
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # DeviceID;Status;StatusInformation;
            # DeviceID;
          - type: awk
            script: "${file::embeddedFile-10}"
            separators: ;
            keep: ^MSHW;
            selectColumns: 2
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # DeviceID;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-10}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="battery"}: $2
        legacyTextParameters:
          StatusInformation: $3
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Discovery.Source(2)
          type: static
          value: ENCLO_SOURCE_DISCO
          computes:
            # Now, extract the power supplies thanks to a smart AWK script
            # MSHW;DeviceID;Status;StatusInformation;Name;RaidLevel;Size;
            # DeviceID;Name;RaidLevel;Size;
          - type: awk
            script: "${file::embeddedFile-11}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,5,6,7"
            # Convert the size into bytes
            # DeviceID;Name;RaidLevel;Size;
          - type: multiply
            column: 4
            value: 1073741824
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          raid_level: $3
          hw.parent.type: enclosure
          hw.parent.id: DellBladeChassis
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $3, bytes2HumanFormatBase2($4))}"
        metrics:
          hw.logical_disk.limit: $4
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = copy of Enclosure.Collect.Source(1)
          type: static
          value: ENCLO_SOURCE_COL
          computes:
            # Now, extract the power supplies status thanks to a smart AWK script
            # DeviceID;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-11}"
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
