---
connector:
  displayName: IBM AIX - HBA
  platforms: IBM POWER
  reliesOn: "IBM AIX system commands (lsdev, lsattr, fcstat, etc.)"
  information: Provides hardware status information for the fiber channel HBA cards on IBM AIX systems.
  version: 1.0
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - RS6000
    criteria:
    # OS should be AIX (whatever version)
    - type: deviceType
      keep:
      - RS6000
      # The command fcstat must be installed
      # (installed by default with AIX 5.3 (Technology Level 5) and AIX 5.2 ML08, whatever that means)
      # The fcstat file is installed with the devices.common.IBM.fc.rte fileset
    - type: osCommand
      commandLine: /bin/ls /usr/sbin/fcstat
      expectedResult: ^/usr/sbin/fcstat$
    # The system must have some fcsX devices
    - type: osCommand
      commandLine: /usr/sbin/lsdev -Cc adapter
      expectedResult: "^fcs[0-9] "
monitors:
  network:
    discovery:
      sources:
        source(1):
          # Source(2) = output of embedded script 1
          # DeviceID;Model;WWN;SerialNumber;PortType;Speed;
          type: osCommand
          commandLine: /bin/sh $embedded.EmbeddedFile(1)$
          keep: ^MSHW;
          separators: ;
          selectColumns: "2,3,4,5,6,7"
          computes:
          # Add "HBA FC Port (" on the left of PortType and ")" on its right
          - type: leftConcat
            column: 5
            value: HBA FC Port (
          - type: rightConcat
            column: 5
            value: )
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.network.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          model: $column(2)
          physical_address: $column(3)
          physical_address_type: WWN
          serial_number: $column(4)
          device_type: $column(5)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s - %s)\", $column(1), $column(5), $column(2))"
    collect:
      # Collect type is multi-instance
      type: monoInstance
      sources:
        source(1):
          # Source(1) = output of fcstat %hbaID%
          # Moved to Embedded file (3)
          # NetworkCard.Collect.Source(1).CommandLine="/usr/sbin/fcstat %NetworkCard.Collect.DeviceID%"
          type: osCommand
          commandLine: /bin/sh $embedded.EmbeddedFile(2)$ %NetworkCard.Collect.DeviceID%
          keep: ^MSHW;
          separators: ;
          selectColumns: "2,3,4,5,6,7,8,9"
      mapping:
        # Value table = Source(1)
        source: $monitors.network.collect.sources.source(1)$
        metrics:
          hw.network.up: legacyLinkStatus($column(1))
          hw.network.bandwidth.limit: megaBit2Bit($column(2))
          hw.errors{hw.type="network"}: $column(3)
          hw.network.packets{direction="receive"}: $column(4)
          hw.network.packets{direction="transmit"}: $column(5)
          hw.network.io{direction="receive"}: $column(6)
          hw.network.io{direction="transmit"}: $column(7)
embedded:
  EmbeddedFile(1): |-
    #!/bin/sh

    LSDEV=/usr/sbin/lsdev
    LSDEVARGS="-C -c adapter -F name"

    LSCFG=/usr/sbin/lscfg
    LSCFGARGS="-vp -l "

    FCSTAT="/usr/sbin/fcstat"
    FCSTATARGS=

    #LSDEV=cat
    #LSDEVARGS=/tmp/lsdevfcs0

    #LSCFG=cat
    #LSCFGARGS=/tmp/lscfg

    #FCSTAT=cat
    #FCSTATARGS=/tmp/fcstat

    for HBA in `$LSDEV $LSDEVARGS|/usr/bin/grep "^fcs[0-9][0-9]*$"`
    do
        HBAMODEL=`$LSCFG $LSCFGARGS$HBA |
                  /bin/tr "." " " |
                  /usr/bin/awk '/^ *Model: / { printf $2; for (i=3 ; i<NF ; i++) { printf " " $i; } printf "\n"; }'`

        if [ $( /usr/sbin/lsdev -p $HBA | grep fscsi | grep Avai | wc -l ) -ne 0 ]; then
            if [ $( ( /usr/sbin/lspath ) | grep $(/usr/sbin/lsdev -p $HBA -r name) | grep -v hdiskpower | grep Enab | wc -l ) -o $( ( /usr/sbin/lsdev -Cc tape ) | grep $(lsdev -p $HBA |  grep fscsi | awk '{print $3}') | grep Avai | wc -l ) -ne 0 ]; then
                $FCSTAT $FCSTATARGS$HBA | /usr/bin/awk -v hbaID=$HBA -v hbaModel="$HBAMODEL" 'BEGIN {
                 #SETTING THIS TO "1" INSTEAD OF ZERO AS A TEMPORARY FIX.
                    foundValidInformation = 1
                }
                /^FIBRE CHANNEL STATISTICS REPORT:/ {
                    foundValidInformation = 1;
                }
                /^ *Port Speed \(running\): +[0-9\.]+ GBIT/ {
                    speed = $4 * 1000
                }
                /^ *Port Type: / {
                    portType = $3
                    for (i=4 ; i<NF ; i++)
                    {
                        portType = portType " " $i
                    }
                }
                /^ *Port WWN: / {
                    wwnAddress = $3
                }
                /^ *World Wide Port Name: / {
                    wwnAddress = $5
                }
                /^ *Serial Number: / {
                    serialNumber = $3
                }
                END {
                    gsub("0x", "", wwnAddress)
                    gsub("0X", "", wwnAddress)
                    if (foundValidInformation == 1)
                    {
                        print "MSHW;" hbaID ";" hbaModel ";" wwnAddress ";" serialNumber ";" portType ";" speed ";"
                    }
                }'
            else
                       echo "MSHW;"$HBA";"$HBAMODEL";;;Unmonitored - No Child Devices;;"
                fi
        else
            echo "MSHW;"$HBA";"$HBAMODEL";;;Unplumbed;;"
        fi
    done
  EmbeddedFile(2): |-
    # if [ $( ( lsdev -Cc disk; lsdev -Cc tape ) | grep $(lsdev -p $1 | grep fscsi | awk '{print $3}') | grep -v hdiskpower | grep Avai | wc -l ) -ne 0 ]; then
    FSC=$(/usr/sbin/lsdev -p $1 -r name |/usr/bin/grep fscsi )

    # Manage Multipathing
    if [  $((/usr/sbin/lspath -p $FSC -s Enabled ; /usr/sbin/lsdev -p $FSC |grep Available)| /usr/bin/grep -v hdiskpower  | /usr/bin/wc -l) -ne 0 ]; then
       /usr/sbin/fcstat $1 | awk '
                  BEGIN {
                        nicStatus = "";
                        errorFrames = 0;
                        dumpFrames = 0;
                        receivedFrames = 0;
                        transmittedFrames = 0;
                        linkStatus = "WARN";
                        inputBytes = 0;
                        outputBytes = 0;
                        speed = "";
                        }
                  ($1 == "Frames:") {
                                     transmittedFrames = $2
                                     receivedFrames = $3
                                    }
                  ($1 == "Error" && $2 == "Frames:") {
                                                      errorFrames = $3
                                                     }
                  ($1 == "Dumped" && $2 == "Frames:") {
                                                       dumpFrames = $3
                                                      }
                  /^ *Port Speed \(running\): +[0-9]+ GBIT/ {
                                                             linkStatus = "OK"
                                                             speed = $4 * 1000
                                                            }
                  /^ +Input Bytes: +[0-9]+ *$/ {
                                                inputBytes = inputBytes + $3
                                               }
                  /^ +Output Bytes: +[0-9]+ *$/ {
                                                 outputBytes = outputBytes + $3
                                                }
                  END {
                       totalErrors = errorFrames + dumpFrames;
                       printf("MSHW;%s;%.0f;%.0f;%.0f;%.0f;%.0f;%.0f;\n", linkStatus, speed, totalErrors, receivedFrames, transmittedFrames, inputBytes, outputBytes);
                      }
                      '
      else
          echo "MSHW;WARN;;;;;;;"
    fi
