---
translations:
  BladeStatusTranslationTable:
    "2": ok
    default: UNKNOWN
    "4": failed
    "5": failed
    "6": ok
  FanStatusTranslationTable:
    "2": ok
    default: UNKNOWN
    "3": ok
    "4": failed
    "5": degraded
    "6": degraded
  PowerSupplyStatusTranslationTable:
    "2": ok
    default: UNKNOWN
    "4": failed
    "5": failed
    "6": ok
  FanStatusInformationTranslationTable:
    "2": Disabled
    default: Unknown Status
    "3": ""
    "4": Failed!
    "5": Failure predicted
    "6": Redundanct fan failed
  BladeStatusInformationTranslationTable:
    "2": ""
    default: Unknown
    "4": Error
    "5": Critical
    "6": Standby
  PowerSupplyStatusInformationTranslationTable:
    "2": ""
    default: Unknown Status
    "4": Error
    "5": Critical
    "6": "Off"
connector:
  displayName: Fujitsu-Siemens Management Blade (FSC BX Blade Servers)
  platforms: Fujitsu-Siemens BX Blade
  reliesOn: Fujitsu-Siemens Management Blade
  version: 1.0
  information: "This connector provides hardware monitoring through the Fujitsu-Siemens Management Blade SNMP Agent which supports the Fujitsu-Siemens Blade servers (BX300, BX600, etc.). Needs to run remotely."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    - type: snmpGet
      oid: 1.3.6.1.4.1.7244.1.1.1.1.12.1.0
      expectedResult: 3
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Get the model name of the blade server
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.1.1.3.1.6.0
      mapping:
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: FSCBlade
          vendor: Fujitsu-Siemens
          model: $column(1)
          type: blade
          name: "sprintf(\"%s (%s %s - %s)\", \"FSCBlade\", \"Fujitsu-Siemens\", $column(1), \"blade\")"
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = s31SysTemperatureSensorTable
          # ID;Status;Designation;WarningThreshold;CriticalThreshold
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.1.1.3.4.1.1
          selectColumns: "ID,2,3,4,5"
          computes:
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "3,4,5,6"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          temperature_type: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: FSCBlade
          name: "sprintf(\"%s (%s)\", $column(1), $column(3))"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $column(4)
          hw.temperature.limit{limit_type="high.critical"}: $column(5)
    collect:
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.1.1.3.4.1.1.6.%Temperature.Collect.DeviceID%
      mapping:
        source: $monitors.temperature.collect.sources.source(1)$
        metrics:
          hw.temperature: $column(1)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = s31SysFanTable
          # ID;Status;Designation
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.1.1.3.3.1.1
          selectColumns: "ID,2,3"
          computes:
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "2,3,4,5,6"
      mapping:
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: FSCBlade
          name: $column(1)
    collect:
      # Source(1) = same SNMP table as in discovery
      # DeviceID;Status;Speed
      type: multiInstance
      sources:
        source(1):
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.1.1.3.3.1.1
          selectColumns: "ID,2,4"
          computes:
          # Duplicate the status column
          - type: duplicateColumn
            column: 2
          # Translate the SNMP status into a PATROL status
          - type: translate
            column: 2
            translationTable: FanStatusTranslationTable
          # Translate the second status column into a more readable string
          - type: translate
            column: 3
            translationTable: FanStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
          hw.fan.speed: $column(4)
        legacyTextParameters:
          StatusInformation: $column(3)
  power_supply:
    discovery:
      sources:
        source(1):
          # Power Supply discovery
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.1.1.3.2.4.1
          selectColumns: "ID,2,3,4"
          computes:
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "2,4,5,6"
          - type: rightConcat
            column: 3
            value: ' '
          - type: rightConcat
            column: 3
            value: Column(4)
      mapping:
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          power_supply_type: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: FSCBlade
          name: "sprintf(\"%s (%s)\", $column(1), $column(3))"
    collect:
      # Power Supply collect
      type: monoInstance
      sources:
        source(1):
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.1.1.3.2.4.1.2.%PowerSupply.Collect.DeviceID%
          computes:
          - type: duplicateColumn
            column: 1
          - type: translate
            column: 1
            translationTable: PowerSupplyStatusTranslationTable
          - type: translate
            column: 2
            translationTable: PowerSupplyStatusInformationTranslationTable
      mapping:
        source: $monitors.power_supply.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="power_supply"}: $column(1)
        legacyTextParameters:
          StatusInformation: $column(2)
  blade:
    discovery:
      sources:
        source(1):
          # Source(1) = SNMP s31SrvBladeTable
          # ID;Status;Manufacturer;Model
          type: snmpTable
          oid: 1.3.6.1.4.1.7244.1.1.1.4.2.1.1
          selectColumns: "ID,2,3,6"
          computes:
          # Keep only present blades
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "2,4,5,6"
          # adds " " to the Manufacturer column
          - type: rightConcat
            column: 3
            value: ' '
          # adds the model column to the Manufacturer column
          - type: rightConcat
            column: 3
            value: Column(4)
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.blade.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          model: $column(3)
          hw.parent.type: enclosure
          hw.parent.id: FSCBlade
          name: "sprintf(\"%s (%s)\", $column(1), $column(3))"
    collect:
      # Collect type is "mono-instance" (one collect for each instance)
      type: monoInstance
      sources:
        source(1):
          # Source(1) = SNMP Get of the s31SrvBladeStatus of the SNMP s31SrvBladeTable table
          # Status;
          type: snmpGet
          oid: 1.3.6.1.4.1.7244.1.1.1.4.2.1.1.2.%Blade.Collect.DeviceID%
          computes:
            # Duplicate the status column
            # Status;Status
          - type: duplicateColumn
            column: 1
            # Translate the first status column into a PATROL Status
            # PATROLStatus;Status
          - type: translate
            column: 1
            translationTable: BladeStatusTranslationTable
            # Translate the second status column into a more readable string
            # PATROLStatus;StatusInformation
          - type: translate
            column: 2
            translationTable: BladeStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.blade.collect.sources.source(1)$
        metrics:
          hw.status{hw.type="blade"}: $column(1)
        legacyTextParameters:
          StatusInformation: $column(2)
