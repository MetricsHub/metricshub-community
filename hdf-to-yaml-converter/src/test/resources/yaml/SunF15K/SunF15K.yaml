---
connector:
  displayName: Oracle/Sun Fire F12K/F15K/F20K/F25K (SMS)
  platforms: Oracle/Sun Fire F15K
  reliesOn: "Sun SMS utilities installed on the System Controller (SC on F15K, etc.)"
  information: "Gives environmental information (temperatures, fans, etc.) and boards status on Sun Fire F12K, F15K, F20K and F25K servers."
  version: 1.1
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Solaris
    - OOB
    criteria:
    # Must be running on the SC (Solaris machine)
    - type: deviceType
      keep:
      - SunOS
      - Solaris
      - OOB
    # Must find the showplatform utility (meaning that SMS is installed)
    - type: osCommand
      commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;which showplatform
      expectedResult: /showplatform$
      errorMessage: Unable to find the platform program
    # showplatform must return platform's type
    - type: osCommand
      commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform
      errorMessage: This System Controller does not appear to be connected to a Sun Fire system
      expectedResult: "^Platform Type: Sun Fire"
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = Output of the showplatform command
          # ComputerModel;
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform
          keep: "^Platform Type: Sun Fire"
          separators: ' '
          selectColumns: 5
          computes:
            # Add "Fire" to the model
            # ComputerModel
          - type: leftConcat
            column: 1
            value: 'Fire '
      mapping:
        # The discovery table
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: SunF15K
          vendor: Sun
          model: $column(1)
          type: Computer
          name: "sprintf(\"Computer: (%s %s)\", \"Sun\", $column(1))"
    collect:
      # Collect type is mono-instance
      type: monoInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # PowerConsumption;
          - type: awk
            script: $file("embeddedFile-6")$
            keep: ^MSHW;PowerConsumption;
            separators: ;
            selectColumns: 3
      mapping:
        # ValueTable = Source(1)
        source: $monitors.enclosure.collect.sources.source(1)$
        metrics:
          hw.enclosure.power: $column(1)
          hw.enclosure.energy: fakeCounter($column(1))
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Send showenvironnment's output into the $file("embeddedFile-2")$ awk script
            # DeviceID;
          - type: awk
            script: $file("embeddedFile-2")$
            keep: ^MSHW;Fan;
            separators: ;
            selectColumns: 3
      mapping:
        # Instance Table = Source(1)
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: SunF15K
          name: "sprintf(\"%s (%s)\", $column(1), $column(1))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe the output of showenvironment into the $file("embeddedFile-2")$ awk script
            # DeviceID;Status
          - type: awk
            script: $file("embeddedFile-2")$
            keep: ^MSHW;Fan;
            separators: ;
            selectColumns: "3,4"
            # Duplicate the status column
            # DeviceID;status;status
          - type: duplicateColumn
            column: 2
            # Translate the first column into a PATROL Status
            # DeviceID;PATROLStatus;status
          - type: translate
            column: 3
            translationTable: ShowEnvironmentStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # DeviceID;
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Temperature;
            separators: ;
            selectColumns: 3
      mapping:
        # Instance Table = Source(1)
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: SunF15K
          name: "sprintf(\"%s (%s)\", $column(1), $column(1))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # DeviceID;Temperature;Status
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Temperature;
            separators: ;
            selectColumns: "3,4,5"
            # Duplicate the status column
            # DeviceID;Temperature;status;status
          - type: duplicateColumn
            column: 3
            # Translate the first column into a PATROL Status
            # DeviceID;Temperature;PATROLStatus;status
          - type: translate
            column: 3
            translationTable: ShowEnvironmentStatusTranslationTable
      mapping:
        # ValueTable = Source(3)
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="temperature"}: $column(3)
          hw.temperature: $column(2)
        legacyTextParameters:
          StatusInformation: $column(4)
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # DeviceID;
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Voltage;
            separators: ;
            selectColumns: 3
      mapping:
        # Instance Table = Source(1)
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: SunF15K
          name: "sprintf(\"%s (%s)\", $column(1), $column(1))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Piped showenvironment's output into the $file("embeddedFile-1")$ awk script
            # DeviceID;Voltage;Status
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Voltage;
            separators: ;
            selectColumns: "3,4,5"
            # Duplicate the status column
            # DeviceID;Voltage;Status;Status
          - type: duplicateColumn
            column: 3
            # Translate the first column into a PATROL Status
            # DeviceID;Voltage;PATROLStatus;Status
          - type: translate
            column: 3
            translationTable: ShowEnvironmentStatusTranslationTable
            # Multiply voltage value by 1000 (convert from V to mV)
            # DeviceID;VoltageMilliVolts;PATROLstatus;status
          - type: multiply
            column: 2
            value: 1000
      mapping:
        # ValueTable = Source(3)
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="voltage"}: $column(3)
          hw.voltage: $column(2)
        legacyTextParameters:
          StatusInformation: $column(4)
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment piped into the $file("embeddedFile-3")$ awk script
          # DeviceID
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-3")$ awk script
            # DeviceID
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;PowerSupply;
            separators: ;
            selectColumns: 3
      mapping:
        # Instance Table = Source(1)
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: SunF15K
          name: $column(1)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-3")$ awk script
            # DeviceID;Status
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;PowerSupply;
            separators: ;
            selectColumns: "3,4"
            # Duplicate the status column
            # DeviceID;Status;Status
          - type: duplicateColumn
            column: 2
            # Translate the first column into a PATROL Status
            # DeviceID;Current;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: ShowEnvironmentStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="power_supply"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  other_device:
    discovery:
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # Source(1) is the list of currents
            # DeviceType;DeviceID;
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Current;
            separators: ;
            selectColumns: "2,3"
            # Duplicate DeviceID because it will be used as AdditionalLabel
            # DeviceType;DeviceID;DeviceID
          - type: duplicateColumn
            column: 2
        source(2):
          # Source(2) = output of showplatform
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform
          timeout: 90
          computes:
            # Pipe showplatform's output into the $file("embeddedFile-4")$ awk script
            # Source(2) is the list of domains
            # DeviceType;DeviceID;AdditionalLabel
          - type: awk
            script: $file("embeddedFile-4")$
            keep: ^MSHW;Domain;
            separators: ;
            selectColumns: "2,3,4"
        source(3):
          # Source(3) = output of showboards
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showboards
          timeout: 90
          computes:
            # Pipe showboards' output into the $file("embeddedFile-5")$ awk script
            # Source(3) is the list of boards
            # DeviceType;DeviceID;AdditionalLabel
          - type: awk
            script: $file("embeddedFile-5")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
        source(4):
          # Source(4) = union of Source(1), Source(2) and Source(3)
          # DeviceType;DeviceID;AdditionalLabel
          type: tableUnion
          tables:
          - $monitors.other_device.discovery.sources.source(1)$
          - $monitors.other_device.discovery.sources.source(2)$
          - $monitors.other_device.discovery.sources.source(3)$
      mapping:
        # Instance Table = Source(1)
        source: $monitors.other_device.discovery.sources.source(4)$
        attributes:
          id: $column(2)
          additional_label: $column(3)
          device_type: $column(1)
          hw.parent.type: enclosure
          hw.parent.id: SunF15K
          name: "sprintf(\"%s: %s (%s)\", $column(1), $column(2), $column(3))"
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = output of showenvironment
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment
          timeout: 90
          computes:
            # Pipe showenvironment's output into the $file("embeddedFile-1")$ awk script
            # DeviceID;Status
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;Current;
            separators: ;
            selectColumns: "3,5"
            # Duplicate the status column
            # DeviceID;Status;Status
          - type: duplicateColumn
            column: 2
            # Translate the first column into a PATROL Status
            # DeviceID;Current;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: ShowEnvironmentStatusTranslationTable
        source(2):
          # Source(2) = output of showplatform
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform
          timeout: 90
          computes:
            # Pipe showplatform's output into the $file("embeddedFile-4")$ awk script
            # Source(2) is the list of domains
            # DeviceID;Status
          - type: awk
            script: $file("embeddedFile-4")$
            keep: ^MSHW;Domain;
            separators: ;
            selectColumns: "3,5"
            # Duplicate the status column
            # DeviceID;Status;Status
          - type: duplicateColumn
            column: 2
            # Translate the first column into a PATROL Status
            # DeviceID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: DomainStatusTranslationTable
        source(3):
          # Source(3) = output of showboards
          type: osCommand
          commandLine: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showboards
          timeout: 90
          computes:
            # Pipe showboards' output into the $file("embeddedFile-5")$ awk script
            # Source(3) is the list of boards
            # DeviceID;Status
          - type: awk
            script: $file("embeddedFile-5")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,5"
            # Duplicate the status column
            # DeviceID;Status;Status
          - type: duplicateColumn
            column: 2
            # Translate the first column into a PATROL Status
            # DeviceID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: BoardStatusTranslationTable
        source(4):
          # Source(4) = union of Source(1), Source(2) and Source(3)
          # DeviceType;DeviceID;AdditionalLabel
          type: tableUnion
          tables:
          - $monitors.other_device.collect.sources.source(1)$
          - $monitors.other_device.collect.sources.source(2)$
          - $monitors.other_device.collect.sources.source(3)$
      mapping:
        # ValueTable = Source(3)
        source: $monitors.other_device.collect.sources.source(4)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="other_device"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  BoardStatusTranslationTable:
    iPOST: degraded
    FAILED: failed
    DEGRADED: degraded
    Default: UNKNOWN
    PASSED: ok
  ShowEnvironmentStatusTranslationTable:
    LOW_CRIT: failed
    HIGH_CRIT: failed
    HIGH_MAX: failed
    BAD: failed
    OVERLIMIT: failed
    LOW_MIN: failed
    OK: ok
    HIGH_WARN: degraded
    INVALID: ok
    Default: failed
    FAIL: failed
    LOW_WARN: degraded
  DomainStatusTranslationTable:
    OBP Debugging: degraded
    Solaris Panic: failed
    Solaris Exited: failed
    Running OBP: ok
    Solaris Quiesced: ok
    OBP in sync Callback to OS: degraded
    Debugging Solaris: degraded
    Running Solaris: ok
    Loading Solaris Failed: failed
    Solaris Halt: degraded
    Solaris Panic Continue: failed
    Unknown: failed
    Powered Off: ok
    Loading Solaris: ok
    Solaris Panic Dump: failed
    In OBP Callback: degraded
    Solaris Panic Debug: failed
    Environmental Emergency: failed
    Environmental Domain Halt: failed
    Running Domain POST: ok
    Exited OBP: degraded
    Domain Exited OBP: degraded
    Loading OBP: ok
    Solaris Halted, in OBP: degraded
    Keyswitch Standby: ok
    Booting OBP: ok
    Domain Down: failed
    Default: UNKNOWN
    OBP Failed: failed
    Solaris Quiesce In-progress: ok
    Solaris Panic Exit: failed
    Booting Solaris: ok
    In Recovery: failed
    Booting Solaris Failed: failed
    Solaris Resume In-progress: degraded
    In OBP Error Reset: failed
