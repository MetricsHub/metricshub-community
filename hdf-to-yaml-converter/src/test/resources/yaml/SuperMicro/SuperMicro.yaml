---
connector:
  displayName: SuperMicro (REST)
  platforms: SuperMicro
  version: 1.0
  information: "This connector provides hardware monitoring for SuperMicro Systems via Redfish REST API. It monitors the Enclosure and Physical Disks as well as the various environment sensors (CPUs, temperatures, fans, power supplies, Memory and Network cards)."
  reliesOn: SuperMicro Baseboard Management Controller REST API
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - OOB
    criteria:
    # Hardware Sentry v10.2.00+
    - type: productRequirements
      kmVersion: 10.2.00
    # DETECTION
    - type: http
      method: GET
      header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
      url: /redfish/v1/Systems/1
      expectedResult: Supermicro
      errorMessage: Invalid credentials / not a SuperMicro system
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          url: /redfish/v1/Systems
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(2):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
        source(3):
          # Enclosure.Discovery.Source(2).Column(2) = Systems
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /
            properties: /@odata.id;/Name;/SerialNumber;/PartNumber;/Manufacturer;/Model;
            separator: ;
        source(4):
          # For use in other Discoveries
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          url: /redfish/v1/Chassis
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(5):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          url: $2
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(4)}"
            concatMethod: json_array_extended
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: "/@odata.id;/Links/ComputerSystems[0]/@odata.id;"
            separator: ;
      mapping:
        # Enclosure Instance Table
        # Json;odata.id;Name;SerialNumber;PartNumber;Manufacturer;Model
        source: "${source::monitors.enclosure.discovery.sources.source(3)}"
        attributes:
          id: $2
          __display_id: $3
          serial_number: $4
          vendor: $6
          model: $7
          type: enclosure
          name: "${awk::sprintf(\"Enclosure: %s (%s %s)\", $3, $6, $7)}"
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          url: /redfish/v1/Systems
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(2):
          type: copy
          from: "${source::monitors.enclosure.collect.sources.source(1)}"
        source(3):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(2)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /
            properties: /@odata.id;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
        source(4):
          # For use in other Collects
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          url: /redfish/v1/Chassis
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(5):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          url: $2
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(4)}"
            concatMethod: json_array_extended
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: "/@odata.id;/Links/ComputerSystems[0]/@odata.id;"
            separator: ;
      mapping:
        # Enclosure Value Table
        # JsonID;odata.id;PatrolStatus;StatusInformation
        source: "${source::monitors.enclosure.collect.sources.source(3)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="enclosure"}: $3
        legacyTextParameters:
          StatusInformation: $4
  cpu:
    discovery:
      sources:
        source(1):
          # Discovery
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2/Processors
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          # JsonID;<System>;@odata.id
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.cpu.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Id;/Socket;/Manufacturer;/Model;/MaxSpeedMHz;
            separator: ;
      mapping:
        # JSONID;<system>;Id;Socket;Manufacturer;Model;MaxSpeedMHz
        source: "${source::monitors.cpu.discovery.sources.source(2)}"
        attributes:
          id: $3
          vendor: $5
          model: $6
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $4, $5, $6, megaHertz2HumanFormat($7))}"
        metrics:
          hw.cpu.speed.limit{limit_type="max"}: megaHertz2Hertz($7)
    collect:
      # COLLECTION
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(2)}"
            concatMethod: json_array
          url: $2/Processors
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.Id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.cpu.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /
            properties: /Id;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # CPU value table
        # JSONID;ID;PatrolStatus;StatusInformation;
        source: "${source::monitors.cpu.collect.sources.source(2)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="cpu"}: $3
        legacyTextParameters:
          StatusInformation: $4
  memory:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2/Memory
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.memory.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Id;/DeviceLocator;/CapacityMiB;/Manufacturer;/PartNumber;/SerialNumber;/MemoryDeviceType;
            separator: ;
      mapping:
        # JSON;<System>;Id;DeviceLocator;CapacityMiB;Manufacturer;PartNumber;SerialNumber;MemoryDeviceType;
        source: "${source::monitors.memory.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $4
          vendor: $6
          model: $7
          serial_number: $8
          type: $9
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s - %s MB)\", $4, $6, $9, $5)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($5)
    collect:
      # COLLECTION
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(2)}"
            concatMethod: json_array
          url: $2/Memory
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.Id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.memory.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /
            properties: /Id;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Memory Value Table
        # JSONID;ID;PatrolStatus;StatusInformation;
        source: "${source::monitors.memory.collect.sources.source(2)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="memory"}: $3
        legacyTextParameters:
          StatusInformation: $4
  fan:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(5)}"
            concatMethod: json_array_extended
          url: $2/Thermal
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Fans
            properties: ../../Column(3);/MemberId;/FanName;/Status/State;LowerThresholdNonCritical;LowerThresholdCritical;
            separator: ;
          # Remove Fans that are not populated
          - type: keepOnlyMatchingLines
            column: 5
            regExp: Enabled
      mapping:
        # Fan Instance Table
        # JsonID;<System>;MemberId;FanName;Status/State;LowerThresholdNonCritical;LowerThresholdCritical;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
        metrics:
          hw.fan.speed.limit{limit_type="low.degraded"}: $6
          hw.fan.speed.limit{limit_type="low.critical"}: $7
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(5)}"
            concatMethod: json_array
          url: $2/Thermal
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Fans
            properties: /MemberId;/Status/Health;/Status/Health;/Reading;/Reading;/MinReadingRange;/MaxReadingRange;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
          # Compute 4 - 5 (Get RPM range and convert to Speed Percentage)
          - type: subtract
            column: 8
            value: $7
          - type: divide
            column: 6
            value: $8
          - type: multiply
            column: 6
            value: 100
      mapping:
        # Fan Value Table
        # JSONID;MemberId;PatrolStatus;StatusInformation;Reading;MinReadingRange;MaxReadingRange;
        source: "${source::monitors.fan.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="fan"}: $3
          hw.fan.speed: $5
          hw.fan.speed_ratio: percent2Ratio($6)
        legacyTextParameters:
          StatusInformation: $4
  physical_disk:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $2/SimpleStorage
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Devices
            properties: ../../Column(2);/Name;/Manufacturer;/Model;
            separator: ;
      mapping:
        # PhysicalDisk Instance Table
        # JSONID;<System>;Name;Manufacturer;Model;
        source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $3
          vendor: $4
          model: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s)\", $3, $4)}"
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2/SimpleStorage
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Devices
            properties: /Name;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # PhysicalDisk Value Table
        # JSONID;Name;PatrolStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(2)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(5)}"
            concatMethod: json_array_extended
          url: $2/Power
          resultContent: body
          computes:
          - type: json2csv
            entryKey: Entry/Value/PowerSupplies
            properties: ../../Column(3);/MemberId;/Name;/Status/State;/PowerSupplyType;/LineInputVoltage;/Model;/firmwareVersion;/SerialNumber;
            separator: ;
          # Exclude PowerSupplies that are marked as "Absent" at discovery
          - type: excludeMatchingLines
            column: 5
            regExp: Absent
          - type: leftConcat
            column: 8
            value: "Model: "
          - type: leftConcat
            column: 9
            value: "Firmware Version: "
          - type: leftConcat
            column: 10
            value: "Serial Number: "
      mapping:
        # PowerSupply Instance Table
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          power_supply_type: $6
          info: "${awk::join(\" \", $8, $9, $10)}"
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: "${awk::sprintf(\"%s (%s - %s W)\", $4, $6, $7)}"
        metrics:
          hw.power_supply.limit: $7
    collect:
      # Collection
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(5)}"
            concatMethod: json_array
          url: $2/Power
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /PowerSupplies
            properties: /MemberId;/Status/Health;/Status/Health;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # PowerSupply Value Table
        # JSONID;MemberId;PatrolStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="power_supply"}: $3
        legacyTextParameters:
          StatusInformation: $4
  temperature:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(5)}"
            concatMethod: json_array_extended
          url: $2/Thermal
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Temperatures
            properties: ../../Column(3);/MemberId;/Name;/Status/State;/UpperThresholdNoncritical;/UpperThresholdCritical;
            separator: ;
          # Keep only Temperature Sensors marked as "Enabled
          - type: keepOnlyMatchingLines
            column: 5
            regExp: Enabled
      mapping:
        # Temperature Instance Table
        # JSONID;<System>;MemberId;Name;State;UpperThresholdNoncritical;UpperThresholdCritical;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(5)}"
            concatMethod: json_array
          url: $2/Thermal
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Temperatures
            properties: /MemberId;/Status/Health;/Status/Health;/ReadingCelsius;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Temperature Value Table
        # JSONID;MemberID;PatrolStatus;StatusInformation;ReadingCelsius;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="temperature"}: $3
          hw.temperature: $5
        legacyTextParameters:
          StatusInformation: $4
  voltage:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(5)}"
            concatMethod: json_array_extended
          url: $2/Power
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value/Voltages
            properties: ../../Column(3);/MemberId;/Name;/Status/State;/UpperThresholdNoncritical;/UpperThresholdCritical;
            separator: ;
          # Keep only Voltage Sensors marked as "Enabled
          - type: keepOnlyMatchingLines
            column: 5
            regExp: Enabled
      mapping:
        # Voltage Instance Table
        # JSONID;<System>;MemberId;Name;State;UpperThresholdNoncritical;UpperThresholdCritical;
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $3
          __display_id: $4
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(5)}"
            concatMethod: json_array
          url: $2/Power
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Voltages
            properties: /MemberId;/Status/Health;/Status/Health;/ReadingVolts;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
          - type: multiply
            column: 5
            value: 1000
      mapping:
        # Voltage Value Table
        # JSONID;MemberID;PatrolStatus;StatusInformation;ReadingCelsius;
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="voltage"}: $3
          hw.voltage: $5
        legacyTextParameters:
          StatusInformation: $4
  network:
    discovery:
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.discovery.sources.source(2)}"
            concatMethod: json_array_extended
          url: $2/EthernetInterfaces
          resultContent: body
          computes:
          - type: json2csv
            entryKey: Entry/Value/Members
            properties: ../../Column(2);/@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.network.discovery.sources.source(1)}"
            concatMethod: json_array_extended
          url: $3
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Entry/Value
            properties: ../Column(2);/Id;/Name;/MACAddress;/Status/State
            separator: ;
          - type: translate
            column: 6
            translationTable: "${translation::LinkSpeedDeactivationTranslationTable}"
      mapping:
        # NetworkCard Instance Table
        # JsonID;System;Id;Name;MACAddress;State;
        source: "${source::monitors.network.discovery.sources.source(2)}"
        attributes:
          id: $3
          __display_id: $4
          physical_address: $5
          hw.parent.type: enclosure
          hw.parent.id: $2
          name: $4
    collect:
      # Collection Type
      type: multiInstance
      sources:
        source(1):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.enclosure.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2/EthernetInterfaces
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /Members
            properties: /@odata.id;
            separator: ;
        source(2):
          type: http
          method: GET
          header: "Authorization: Basic %{BASIC_AUTH_BASE64}"
          executeForEachEntryOf:
            source: "${source::monitors.network.collect.sources.source(1)}"
            concatMethod: json_array
          url: $2
          resultContent: body
          computes:
          - type: json2csv
            entryKey: /
            properties: /Id;/Status/State;/Status/State;/Status/Health;/SpeedMbps;
            separator: ;
          - type: translate
            column: 3
            translationTable: "${translation::NetworkCardStatusTranslationTable}"
          - type: translate
            column: 4
            translationTable: "${translation::LinkStatusTranslationTable}"
          - type: translate
            column: 5
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # NetworkCard Value Table
        # JSONID;Id;NetworkCardStatus;LinkStatus;StatusInformation;SpeedMbps;
        source: "${source::monitors.network.collect.sources.source(2)}"
        deviceId: $2
        metrics:
          hw.status{hw.type="network"}: $3
          hw.network.up: legacyLinkStatus($4)
          hw.network.bandwidth.limit: megaBit2Bit($6)
        legacyTextParameters:
          StatusInformation: $5
translations:
  LinkStatusTranslationTable:
    Enabled: ok
    Disabled: degraded
    Default: degraded
  StatusInformationTranslationTable:
    Warning: The device has warning state.
    Critical: The device is in critical state.
    OK: The device is running normal.
    Default: failed
  StatusTranslationTable:
    Warning: degraded
    Critical: failed
    OK: ok
    Default: failed
  LinkSpeedDeactivationTranslationTable:
    Enabled: "True"
    Default: ""
  NetworkCardStatusTranslationTable:
    Enabled: ok
    Disabled: ok
    Default: failed
