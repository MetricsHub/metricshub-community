---
connector:
  displayName: IBM Netfinity Manager 5.20.x - Basic
  platforms: IBM Netfinity
  reliesOn: IBM Netfinity Manager 5.20.x
  version: 1.0
  information: This connector provides basic environment monitoring through the IBM Netfinity Manager Services SNMP sub-agent which supports almost all old IBM servers (Netfinity) under Windows.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    criteria:
    # Check that there is something below the snmp OID: ...ibm(2).ibmProd(6).netFinity(71).DmiMibs(200).NetFinityServicesMIB(2).dmtfGroups(1).tNetfinityAttributeGroups(4).eNetfinityAttributeGroups(1)
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
monitors:
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = tNetfinityAttributesGroup
          # ID;AttributeName
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,4"
          computes:
          # Keep only attributes whose name contains the word "temperature
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[Tt]emperature"
          # Remove the "temperature" word from the attribute name
          - type: replace
            column: 2
            existingValue: temperature
            newValue: ""
      mapping:
        # Instance table = source(1)
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(1), $column(2))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the a4CurrentValueTextual of the tNetfinityAttributeGroups SNMP table
          # AttributeID;Textual status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,5"
          computes:
            # Duplicate the value
            # Textual status;textual status;
          - type: duplicateColumn
            column: 2
            # Translate the first status into a PATROL status
            # PATROLStatus;textual status
          - type: translate
            column: 2
            translationTable: TemperatureStatusTranslationTable
            # Translate the first status into a PATROL status
            # PATROLStatus;Status information
          - type: translate
            column: 3
            translationTable: TemperatureStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="temperature"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = tNetfinityAttributesGroup
          # ID;AttributeName
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,4"
          computes:
          # Keep only attributes whose name contains the word "fan
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[Ff]an"
          # Remove the "fan" word from the attribute name
          - type: replace
            column: 2
            existingValue: fan
            newValue: ""
      mapping:
        # Instance table = source(1)
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(1), $column(2))"
    collect:
      # Collect type is: multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = the tNetfinityAttributeGroups SNMP table
          # ID;Textual status;
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,5"
          computes:
            # Duplicate the value
            # ID;Textual status;textual status;
          - type: duplicateColumn
            column: 2
            # Translate the first status into a PATROL status
            # ID;PATROLStatus;textual status
          - type: translate
            column: 2
            translationTable: FanStatusTranslationTable
            # Translate the first status into a PATROL status
            # ID;PATROLStatus;Status information
          - type: translate
            column: 3
            translationTable: FanStatusInformationTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="fan"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = always the tNetfinityAttributes SNMP table
          # AttributeID;AttributeName
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,4"
          computes:
            # Keep only the voltages lines
            # That is: whose name matches the following regexp: [Vv]olt
          - type: keepOnlyMatchingLines
            column: 2
            regExp: "[Vv]olt"
          # Remove the " voltage" word (that is not needed)
          - type: replace
            column: 2
            existingValue: voltage
            newValue: ""
      mapping:
        # The instance table is Source(1)
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          sensor_location: $column(2)
          hw.parent.type: enclosure
          name: "sprintf(\"%s (%s)\", $column(1), $column(2))"
    collect:
      # Collect type = multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = ...always the tNetfinityAttributesGroup SNMP table
          # AttributeID;AttributeTextualValue
          type: snmpTable
          oid: 1.3.6.1.4.1.2.6.71.200.2.1.4.1
          selectColumns: "2,5"
          computes:
            # Duplicate the textual value column
            # AttributeID;AttributeTextualValue;AttributeTextualValue
          - type: duplicateColumn
            column: 2
            # Translate the first textual value into a PATROL status
            # AttributeID;PATROLStatus;AttributeTextualValue
          - type: translate
            column: 2
            translationTable: VoltageStatusTranslationTable
            # Translate the second textual value into a more readable string
            # AttributeID;PATROLStatus;StatusInformation
          - type: translate
            column: 3
            translationTable: VoltageStatusInformationTranslationTable
      mapping:
        # The ValueTable is Source(1)
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="voltage"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  TemperatureStatusTranslationTable:
    High: degraded
    Too high: failed
    Ok: ok
    Default: UNKNOWN
  FanStatusTranslationTable:
    Low: degraded
    Too low: failed
    Ok: ok
    Default: UNKNOWN
  VoltageStatusTranslationTable:
    High: degraded
    Low: degraded
    Too low: degraded
    Too high: degraded
    Ok: ok
    Default: UNKNOWN
  TemperatureStatusInformationTranslationTable:
    High: High
    Too high: Too high
    Ok: ""
    Default: Unknown Status
  VoltageStatusInformationTranslationTable:
    High: High
    Low: Low
    Too low: Too low
    Too high: Too high
    Ok: ""
    Default: Unknown Status
  FanStatusInformationTranslationTable:
    Low: Low
    Too low: Too low
    Ok: ""
    Default: Unknown Status
