---
connector:
  displayName: IBM FlashSystem 700/800
  platforms: IBM FlashSystem
  reliesOn: IBM FlashSystem 700/800 SNMP Agent
  version: 1.0
  information: "This connector discovers the enclosure(s) and the disks of IBM FlashSystem 700/800s as well as the various environment sensors (temperatures, fans, power supplies). It relies on the SNMP protocol."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # Verify that there is an IBM FlashSystem
    - type: snmpGetNext
      oid: 1.3.6.1.4.1.8378.10.1
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Source(1) = systemType
          # Version
          type: snmpGet
          oid: 1.3.6.1.4.1.8378.10.1.1
        source(2):
          # Source(2) = version
          # Model
          type: snmpGet
          oid: 1.3.6.1.4.1.8378.10.1.0
          computes:
            # Combine the two tables
            # Model;Version;
          - type: rightConcat
            column: 1
            value: "${source::monitors.enclosure.discovery.sources.source(1)}"
          - type: leftConcat
            column: 2
            value: "FirmwareVersion: "
      mapping:
        # Instance Table
        # Model;Version;
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: IBM FlashSystem
          model: $1
          type: Storage
          info: $2
          name: "${awk::sprintf(\"Storage: (%s)\", $1)}"
    collect:
      # Collect type is mono-instance
      type: multiInstance
      sources:
        source(1):
          # Source (1) Overall Status
          # Status
          type: snmpGet
          oid: 1.3.6.1.4.1.8378.10.1.3
          computes:
            # Duplicate the Status column
            # Status;Status;
          - type: duplicateColumn
            column: 1
            # Translate the first status column into a PATROLStatus
            # PATROLStatus;Status;
          - type: translate
            column: 1
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # PATROLStatus;StatusInformation;
          - type: translate
            column: 2
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # Value Table
        # PATROLStatus;StatusInformation;
        source: "${source::monitors.enclosure.collect.sources.source(1)}"
        deviceId: IBM FlashSystem
        metrics:
          hw.status{hw.type="enclosure"}: $1
        legacyTextParameters:
          StatusInformation: $2
  fan:
    discovery:
      sources:
        source(1):
          # Source(1) = Fan Table
          # ID;Name;Units;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.0.1
          selectColumns: "ID,3,5"
          computes:
            # Duplicate the Units
            # ID;Name;Units;Units;
          - type: duplicateColumn
            column: 3
            # "Translate" The units.  This way it will only be
            # ID;Name;SpeedActivation;Units;
          - type: translate
            column: 3
            translationTable: "${translation::rpmTranslationTable}"
            # "Translate" The units.  This way it will only be
            # ID;Name;SpeedActivation;SpeedPercentActivation;
          - type: translate
            column: 4
            translationTable: "${translation::percentTranslationTable}"
            # Remove "Speed" and "Health" from the Name
            # ID;Name;SpeedActivation;SpeedPercentActivation;
          - type: replace
            column: 2
            existingValue: ' Speed'
            newValue: ""
          - type: replace
            column: 2
            existingValue: ' Health'
            newValue: ""
      mapping:
        # InstanceTable = Source(1)
        # ID;Name;SpeedActivation;SpeedPercentActivation;
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Fan Table
          # ID;Value;Units;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.0.1
          selectColumns: "ID,4,5,6"
        source(2):
          # Copy and keep only RPM
          # ID;Value;Units;State;
          type: copy
          from: "${source::monitors.fan.collect.sources.source(1)}"
          computes:
          # Keep only RPM
          - type: keepOnlyMatchingLines
            column: 3
            valueList: RPM
            # Copy and keep only RPM
            # ID;Percent;Speed;Units;State;
          - type: leftConcat
            column: 2
            value: ;
        source(3):
          # Copy and keep only RPM
          # ID;Value;Units;State;
          type: copy
          from: "${source::monitors.fan.collect.sources.source(1)}"
          computes:
          # Keep only RPM
          - type: keepOnlyMatchingLines
            column: 3
            valueList: percent
            # Copy and keep only RPM
            # ID;Percent;Speed;Units;State;
          - type: rightConcat
            column: 2
            value: ;
        source(4):
          # Union the two collects
          # ID;Percent;Speed;Units;State;
          type: tableUnion
          tables:
          - "${source::monitors.fan.collect.sources.source(2)}"
          - "${source::monitors.fan.collect.sources.source(3)}"
          computes:
            # Duplicate the Status column
            # ID;Percent;Speed;Units;State;State;
          - type: duplicateColumn
            column: 5
            # Translate the first status column into a PATROLStatus
            # ID;Percent;Speed;Units;PatrolStatus;State;
          - type: translate
            column: 5
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;Percent;Speed;Units;PatrolStatus;StatusInformation;
          - type: translate
            column: 6
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(4)
        # ID;Percent;Speed;Units;PatrolStatus;StatusInformation;
        source: "${source::monitors.fan.collect.sources.source(4)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="fan"}: $5
          hw.fan.speed: $3
          hw.fan.speed_ratio: percent2Ratio($2)
        legacyTextParameters:
          StatusInformation: $6
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = Temperature Table
          # ID;Type;Name;Units;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.1.1
          selectColumns: "ID,2,3,5"
          computes:
            # "Translate" The units.  This way it will only be
            # ID;Type;Name;TemperatureActivation;
          - type: translate
            column: 4
            translationTable: "${translation::temperatureTranslationTable}"
            # Remove "Temperature" from the Name
            # ID;Type;Name;TemperatureActivation;
          - type: replace
            column: 3
            existingValue: temperature
            newValue: ""
          - type: replace
            column: 3
            existingValue: temperature
            newValue: ""
            # Add the Name to the Type
            # ID;DisplayID;Name;TemperatureActivation;
          - type: rightConcat
            column: 2
            value: ' '
          - type: rightConcat
            column: 2
            value: $3
      mapping:
        # InstanceTable = Source(1)
        # ID;DisplayID;Name;TemperatureActivation;
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Temperature Table
          # ID;Value;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.1.1
          selectColumns: "ID,4,6"
          computes:
            # Duplicate the Status column
            # ID;Value;State;State;
          - type: duplicateColumn
            column: 3
            # Translate the first status column into a PATROLStatus
            # ID;Value;PatrolStatus;State;
          - type: translate
            column: 3
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;Value;PatrolStatus;StatusInformation;
          - type: translate
            column: 4
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="temperature"}: $3
          hw.temperature: $2
        legacyTextParameters:
          StatusInformation: $4
  power_supply:
    discovery:
      sources:
        source(1):
          # Source(1) = PowerSupply Table
          # ID;Name;Units;Type;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.2.1
          selectColumns: "ID,3,5,2"
          computes:
            # Keep only "boolean" i.e. power supply information
            # ID;Name;Units;Type;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: boolean
            # Remove "Fault Detected" from the Name
            # ID;Name;Units;Type;
          - type: replace
            column: 2
            existingValue: ' Fault Detected'
            newValue: ""
            # Add the Name to the Type
            # ID;Name;Units;Type;
          - type: leftConcat
            column: 2
            value: ' '
          - type: leftConcat
            column: 2
            value: $4
      mapping:
        # InstanceTable = Source(1)
        # ID;Name;Units;
        source: "${source::monitors.power_supply.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = PowerSupply Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.2.1
          selectColumns: "ID,6"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: "${source::monitors.power_supply.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="power_supply"}: $2
        legacyTextParameters:
          StatusInformation: $3
  voltage:
    discovery:
      sources:
        source(1):
          # Source(1) = Power Supply Table
          # ID;Name;Units;Type;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.2.1
          selectColumns: "ID,3,5,2"
        source(2):
          # Source(2) = Battery Table
          # ID;Name;Units;Type;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.3.1
          selectColumns: "ID,3,5,2"
          computes:
            # Add a prefix to differentiate it from Power Supply Voltages
            # ID;Name;Units;Type;
          - type: leftConcat
            column: 1
            value: Batt
        source(3):
          # Union the two sources
          # ID;Name;Units;Type;
          type: tableUnion
          tables:
          - "${source::monitors.voltage.discovery.sources.source(1)}"
          - "${source::monitors.voltage.discovery.sources.source(2)}"
          computes:
            # Keep only "volts" i.e. voltage information
            # ID;Name;Units;Type;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: Volts
            # Remove "Temperature" from the Name
            # ID;Name;Units;Type;
          - type: replace
            column: 2
            existingValue: voltage
            newValue: ""
            # Add the Name to the Type
            # ID;Name;Units;Type;
          - type: leftConcat
            column: 2
            value: ' '
          - type: leftConcat
            column: 2
            value: $4
      mapping:
        # InstanceTable = Source(1)
        # ID;Name;Units;
        source: "${source::monitors.voltage.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Voltage Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.2.1
          selectColumns: "ID,6"
        source(2):
          # Source(2) = Battery Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.3.1
          selectColumns: "ID,6"
          computes:
            # Add a prefix to differentiate it from Power Supply Voltages
            # ID;Name;Units;Type;
          - type: leftConcat
            column: 1
            value: Batt
        source(3):
          # Union the two sources
          # ID;State;
          type: tableUnion
          tables:
          - "${source::monitors.voltage.collect.sources.source(1)}"
          - "${source::monitors.voltage.collect.sources.source(2)}"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;PatrolStatus;StatusInformation;
        source: "${source::monitors.voltage.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="voltage"}: $2
        legacyTextParameters:
          StatusInformation: $3
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = Battery Table
          # ID;Name;Units;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.3.1
          selectColumns: "ID,3,5"
          computes:
            # Keep only "boolean" i.e. battery information
            # ID;Name;Units;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: boolean
            # Keep only "healths"
            # ID;Name;Units;
          - type: keepOnlyMatchingLines
            column: 2
            regExp: Health
      mapping:
        # InstanceTable = Source(1)
        # ID;Name;Units;
        source: "${source::monitors.battery.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Battery Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.1.6.3.1
          selectColumns: "ID,6"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;Value;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;Value;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.battery.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="battery"}: $2
        legacyTextParameters:
          StatusInformation: $3
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = PhysicalDisk Table
          # ID;Name;Size;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.4.1
          selectColumns: "ID,2,6"
          computes:
            # Convert MiB to bytes
            # ID;Name;Size;
          - type: multiply
            column: 3
            value: 1048576
      mapping:
        # InstanceTable = Source(1)
        # ID;Name;Size;
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, bytes2HumanFormatBase10($3))}"
        metrics:
          hw.physical_disk.size: $3
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = PhysicalDisk Table
          # ID;State;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.4.1
          selectColumns: "ID,4"
          computes:
            # Duplicate the Status column
            # ID;State;State;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROLStatus
            # ID;Value;PatrolStatus;State;
          - type: translate
            column: 2
            translationTable: "${translation::StatusTranslationTable}"
            # Translate the second status column into a more readable string
            # ID;Value;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: "${translation::StatusInformationTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # ID;Value;PatrolStatus;StatusInformation;
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  network:
    discovery:
      sources:
        source(1):
          # Source(1) = FC Port Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.2.1
          selectColumns: "2,7"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;WWN
        source(2):
          # Source(2) = iB Table
          # ID;PortID;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.3.1
          selectColumns: "2,6"
          computes:
            # Add the PortIDType
            # ID;PortID;PortIDType;
          - type: rightConcat
            column: 2
            value: ;GUID
        source(3):
          # Union the two discovery
          # ID;PortID;PortIDType;
          type: tableUnion
          tables:
          - "${source::monitors.network.discovery.sources.source(1)}"
          - "${source::monitors.network.discovery.sources.source(2)}"
      mapping:
        # InstanceTable = Source(1)
        # ID;PortID;PortIDType;
        source: "${source::monitors.network.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $1
          physical_address: $2
          physical_address_type: $3
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect type is multi-instance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = FC Port Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.2.1
          selectColumns: "2,5,9"
        source(2):
          # Source(2) = iB Table
          # ID;LinkStatus;Speed;
          type: snmpTable
          oid: 1.3.6.1.4.1.8378.10.3.1
          selectColumns: "2,5,8"
        source(3):
          # Union the two Collect
          # ID;LinkStatus;Speed;
          type: tableUnion
          tables:
          - "${source::monitors.network.collect.sources.source(1)}"
          - "${source::monitors.network.collect.sources.source(2)}"
          computes:
            # Replace the GB units with 000
            # ID;LinkStatus;Speed;
          - type: replace
            column: 3
            existingValue: Gb
            newValue: '000'
            # Replace the Mb units with ""
            # ID;LinkStatus;Speed;
          - type: replace
            column: 3
            existingValue: Mb
            newValue: ""
            # Translate the link status
            # ID;LinkStatus;Speed;
          - type: translate
            column: 2
            translationTable: "${translation::linkTranslationTable}"
      mapping:
        # ValueTable = Source(3)
        # ID;LinkStatus;Speed;
        source: "${source::monitors.network.collect.sources.source(3)}"
        deviceId: $1
        metrics:
          hw.network.up: legacyLinkStatus($2)
          hw.network.bandwidth.limit: megaBit2Bit($3)
translations:
  rpmTranslationTable:
    Default: ""
    rpm: speedActivated
  percentTranslationTable:
    percent: speedPercentActivated
    Default: ""
  temperatureTranslationTable:
    C: temperatureActivation
    Default: ""
  linkTranslationTable:
    Offline: degraded
    Online: ok
    Disabled: degraded
    None: UNKNOWN
    No Light: degraded
    Default: ""
  StatusInformationTranslationTable:
    Warning: Warning
    test: In Test Mode
    Error: Error
    notPresent: Missing
    Good: ""
    Default: Status not recognized
    commError: Communication Error
  StatusTranslationTable:
    Warning: degraded
    test: degraded
    Error: degraded
    notPresent: degraded
    Good: ok
    Default: failed
    commError: UNKNOWN
