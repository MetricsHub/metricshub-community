---
connector:
  displayName: HP-UX - Smart Array RAID
  platforms: "HP 9000,HP Integrity,HP SuperDome"
  reliesOn: HP-UX Smart Array Configuration Utility
  information: Display the physical disks connected to a Smart Array Controller and any configured logical drive and spare drive.
  version: 1.1
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - HP
    criteria:
    # OS should be HP (for HP-UX, whatever version)
    - type: deviceType
      keep:
      - HP
    # The sautil should exist
    - type: osCommand
      commandLine: ls /opt/raidsa/bin/sautil
      expectedResult: sautil$
      errorMessage: The Smart Array RAID Controller Utility is not present on this system.
    # We should find disks attached to one controller
    - type: osCommand
      commandLine: /bin/sh $file("embeddedFile-1")$
      expectedResult: "[GgTtMm][Bb]"
      forceSerialization: true
      errorMessage: "There are not enough rights to execute the sautil utility, or no disks are listed."
sudoCommands:
- /opt/raidsa/bin/sautil
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source (1) : Contains the list of all Disk Controllers
          # /opt/raidsa/bin/sautil /dev/cissx -s output
          # DeviceFile;
          type: osCommand
          commandLine: /bin/sh $file("embeddedFile-1")$
          forceSerialization: true
        source(2):
          # Source(2) = Copy of source(1)
          # DeviceFile;
          type: copy
          from: $monitors.disk_controller.discovery.sources.source(1)$
          computes:
            # Run Source(1) through an AWK script
            # MSHW;Controller;Model;SerialNumber;DeviceID;Firmware
          - type: awk
            script: $file("embeddedFile-2")$
            separators: ;
            keep: ^MSHW;
            selectColumns: "2,3,4,5,6"
        source(3):
          # Source(3) = Copy of source(1)
          # DeviceFile;
          type: copy
          from: $monitors.disk_controller.discovery.sources.source(1)$
          computes:
            # Reformat Source(2) output to create a dependency table to link controllers to disks to arrays
            # MSHW;Controller;Location;DeviceID;Size;Status;
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(4):
          # Source (4) Table Join of Source (2) and Source (3) to keep only controllers that have physical disks  associated with them
          # (2) Controller;Model;SerialNumber;DeviceID;Firmware
          # (3) Controller;Location;DeviceID;Size;Status;
          # (4) Controller;Model;SerialNumber;DeviceID;Firmware;Controller;Location;DeviceID;Size;Status;
          type: tableJoin
          leftTable: $monitors.disk_controller.discovery.sources.source(2)$
          rightTable: $monitors.disk_controller.discovery.sources.source(3)$
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # InstanceTable = Source(4)
        # Controller;Model;SerialNumber;DeviceID;Firmware;Controller;Location;DeviceID;Size;Status;
        source: $monitors.disk_controller.discovery.sources.source(4)$
        attributes:
          id: $column(4)
          controller_number: $column(1)
          model: $column(2)
          firmware_version: $column(5)
          hw.parent.type: enclosure
          name: "sprintf(\"Disk Controller: %s (%s)\", $column(1), $column(2))"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) %DiskController.Discovery.Source(1)
          # DeviceFile;
          type: copy
          from: $monitors.disk_controller.discovery.sources.source(1)$
          computes:
            # Reformat Source(1) output via EmbeddedFile(3)
            # Contains the list of all External and Internal Physical Disks in the system
            # MSHW;Controller;Location;DeviceID;Size;Status;
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
            # Multiply to get Bytes
            #  Controller;Location;DeviceID;SizeBytes
          - type: multiply
            column: 4
            value: 1073741824
          - type: leftConcat
            column: 2
            value: "Location: "
      mapping:
        # The InstanceTable
        # Controller;Location;DeviceID;SizeBytes
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(3)
          info: $column(2)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%by10hf.s)\", $column(3), $column(4))"
        metrics:
          hw.physical_disk.size: $column(4)
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Runs /opt/raidsa/bin/sautil /dev/cissx -s
          # DeviceFile;
          type: osCommand
          commandLine: /bin/sh $file("embeddedFile-1")$
          forceSerialization: true
          computes:
            # Reformat Source(1) = List all Internal Physical Disks in the system and their status
            # The status can be either OK, FAILED, SPARE or UNASSIGNED.
            # MSHW;Controller;Location;DeviceID;Size;Status;
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "4,6"
            # Duplicate the status column
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL status
            # DeviceID;PatrolStatus;Status;
          - type: translate
            column: 2
            translationTable: PhysicalDiskStatusTranslationTable
            # Translate the second status column into a Status Information
            # DeviceID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: PhysicalDiskStatusInformationTranslationTable
      mapping:
        # The ValueTable = source(1)
        #  DeviceID;PatrolStatus;StatusInformation;
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = $monitors.disk_controller.discovery.sources.source(1)$
          # DeviceFile;
          type: copy
          from: $monitors.disk_controller.discovery.sources.source(1)$
          computes:
            # Reformat Source(1) = Builds logical drives Table
            # MSHW;controller;deviceID;raidlevel;size;status;location;
          - type: awk
            script: $file("embeddedFile-4")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,7"
            # Multiply to get Bytes
            # controller;deviceID;raidlevel;sizebytes;location;
          - type: multiply
            column: 4
            value: 1073741824
          - type: leftConcat
            column: 5
            value: "Location: "
      mapping:
        # The InstanceTable
        # controller;deviceID;raidlevel;sizebytes;location;
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          raid_level: $column(3)
          info: $column(5)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %by2hf.s)\", $column(2), $column(3), $column(4))"
        metrics:
          hw.logical_disk.limit: $column(4)
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Collect type = Source(1) = Runs /opt/raidsa/bin/sautil /dev/cissx -s
          type: osCommand
          commandLine: /bin/sh $file("embeddedFile-1")$
          forceSerialization: true
          computes:
            # Reformat Source(1) = List all logical drives and their status
            # The status can be either OK, FAILED, SPARE or UNASSIGNED.
            # MSHW;controller;deviceID;raidlevel;size;status;location;
          - type: awk
            script: $file("embeddedFile-4")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the status column
            # deviceID;status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL status
            # deviceID;Patrolstatus;status
          - type: translate
            column: 2
            translationTable: LogicalDiskStatusTranslationTable
            # Translate the first status column into a PATROL status
            # deviceID;Patrolstatus;StatusInformation
          - type: translate
            column: 3
            translationTable: LogicalDiskStatusInformationTranslationTable
      mapping:
        # The ValueTable = source(1)
        # deviceID;Patrolstatus;StatusInformation
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  battery:
    discovery:
      sources:
        source(1):
          # Source(1) = Disk Controller Source (1)
          type: copy
          from: $monitors.disk_controller.discovery.sources.source(1)$
          computes:
          - type: awk
            script: $file("embeddedFile-5")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
          - type: leftConcat
            column: 3
            value: "Location: "
      mapping:
        # The discovery table
        # controllerdeviceID;deviceID;location;
        source: $monitors.battery.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          info: $column(3)
          hw.parent.type: disk_controller
          hw.parent.id: $column(1)
          name: $column(2)
    collect:
      # Collect type: MultiInstance
      type: multiInstance
      sources:
        source(1):
          # Source(1) = Runs /opt/raidsa/bin/sautil /dev/cissx -s
          # DeviceFile;
          type: osCommand
          commandLine: /bin/sh $file("embeddedFile-1")$
          forceSerialization: true
          computes:
            # Process sautil output through awk embeddedfile(5)
            # MSHW;controllerdeviceID;deviceID;location;status;
          - type: awk
            script: $file("embeddedFile-5")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,5"
            # Duplicate the status column
            # DeviceID;Status;Status;
          - type: duplicateColumn
            column: 2
            # Translate the first status column into a PATROL status
            # DeviceID;PatrolStatus;Status;
          - type: translate
            column: 2
            translationTable: BatteryStatusTranslationTable
            # Translate the second status column into a Status Information
            # DeviceID;PatrolStatus;StatusInformation;
          - type: translate
            column: 3
            translationTable: BatteryStatusInformationTranslationTable
      mapping:
        # The ValueTable = source(1)
        #  DeviceID;PatrolStatus;StatusInformation;
        source: $monitors.battery.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="battery"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  BatteryStatusInformationTranslationTable:
    FAILED: Failed
    OK: ""
    Default: UNKNOWN
  PhysicalDiskStatusInformationTranslationTable:
    SPARE: Spare
    UNASSIGNED: Unassigned
    FAILED: Failed
    OK: ""
    Default: UNKNOWN
  BatteryStatusTranslationTable:
    FAILED: failed
    OK: ok
    Default: UNKNOWN
  LogicalDiskStatusInformationTranslationTable:
    USING: Using Interim Recovery Mode
    READY: Ready for Recovery Operation
    NOT: Not Yet Available
    FAILED: Failed
    QUEUED: Queued for Expanding
    PHYSICAL: Physical Disk not Properly Connected
    RECOVERING: Recovering
    EXPANDING: Expanding
    OK: ""
    WRONG: Wrong Physical Disk was Replaced
    Default: UNKNOWN
  LogicalDiskStatusTranslationTable:
    USING: degraded
    READY: degraded
    NOT: degraded
    FAILED: failed
    QUEUED: ok
    PHYSICAL: failed
    RECOVERING: degraded
    EXPANDING: ok
    OK: ok
    WRONG: failed
    Default: UNKNOWN
  PhysicalDiskStatusTranslationTable:
    SPARE: ok
    UNASSIGNED: ok
    FAILED: failed
    OK: ok
    Default: UNKNOWN
