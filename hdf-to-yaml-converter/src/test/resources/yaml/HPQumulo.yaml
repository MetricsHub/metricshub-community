---
connector:
  displayName: HP Qumulo
  platforms: HP Qumulo storage systems
  reliesOn: QQ CLI
  information: Gives hardware information HP Qumulo storage systems.
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    - NT
    - Linux
    criteria:
    # Checks that QQ CLI is present on target host
    - type: osCommand
      commandLine: qq --help
      expectedResult: Qumulo CLI
      errorMessage: QQ CLI not found on local host.
      executeLocally: true
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} nodes_list"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;displayId;model;serial;uuid;status;status
          - type: awk
            script: $embedded.EmbeddedFile(1)$
      mapping:
        # ID;displayId;model;serial;uuid;status;status
        source: $monitors.enclosure.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(2)
          model: $column(3)
          serial_number: $column(4)
          vendor: HP
          info: $column(5)
          name: "sprintf(\"Enclosure: %s (%s %s)\", $column(2), \"HP\", $column(3))"
    collect:
      sources:
        source(1):
          # Collect
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} nodes_list"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;displayId;model;serial;uuid;status;status
          - type: awk
            script: $embedded.EmbeddedFile(1)$
            # Translate status
            # ID;displayId;model;serial;uuid;status;statusInformation
          - type: translate
            column: 6
            translationTable: EnclosureStatusTranslationTable
      mapping:
        # ID;displayId;model;serial;uuid;status;statusInformation
        source: $monitors.enclosure.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="enclosure"}: $column(6)
        legacyTextParameters:
          StatusInformation: $column(7)
  physical_disk:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} cluster_slots"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;nodeId;model;serial;slot;slotType;size;status;status
          - type: awk
            script: $embedded.EmbeddedFile(2)$
      mapping:
        # ID;nodeId;model;serial;slot;slotType;size;status;status
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(5)
          model: $column(3)
          serial_number: $column(4)
          info: $column(6)
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%by10hf.s)\", $column(5), $column(7))"
        metrics:
          hw.physical_disk.size: $column(7)
    collect:
      sources:
        source(1):
          # Collect
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} cluster_slots"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;nodeId;model;serial;slot;slotType;size;status;status
          - type: awk
            script: $embedded.EmbeddedFile(2)$
            # Translate status
            # ID;nodeId;model;serial;slot;slotType;size;status;statusInformation
          - type: translate
            column: 8
            translationTable: PhysicalDiskStatusTranslationTable
      mapping:
        # ID;nodeId;model;serial;slot;slotType;size;status;statusInformation
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(8)
        legacyTextParameters:
          StatusInformation: $column(9)
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} network_poll"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
          - type: awk
            script: $embedded.EmbeddedFile(3)$
      mapping:
        # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
        source: $monitors.network.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          __display_id: $column(1)
          logical_address: $column(3)
          physical_address: $column(4)
          device_type: Ethernet
          logical_address_type: IP
          physical_address_type: MAC
          hw.parent.type: enclosure
          hw.parent.id: $column(2)
          name: "sprintf(\"%s (%s)\", $column(1), \"Ethernet\")"
    collect:
      sources:
        source(1):
          # Collect
          # Source(1) = Output of the QQ CLI command through OS Commands
          type: osCommand
          commandLine: "qq --host %{HOSTNAME} cluster_slots"
          timeout: 90
          executeLocally: true
          computes:
            # Parse the output of the command with an AWK script
            # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
          - type: awk
            script: $embedded.EmbeddedFile(3)$
            # Translate status
            # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
          - type: translate
            column: 9
            translationTable: NetworkCardStatusTranslationTable
            # Translate linkStatus
            # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
          - type: translate
            column: 8
            translationTable: LinkStatusTranslationTable
      mapping:
        # ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
        source: $monitors.network.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.network.io{direction="transmit"}: $column(6)
          hw.network.io{direction="receive"}: $column(7)
          hw.status{hw.type="network"}: $column(8)
        legacyTextParameters:
          StatusInformation: $column(9)
embedded:
  EmbeddedFile(1): |
    BEGIN {FS = ": |,"}

    /"id"/ {id = $2}
    /"node_name"/ {displayId = $2}
    /"model_number"/ {model = $2}
    /"serial_number"/ {serial = $2}
    /"node_status"/ {status = $2}
    /"uuid"/ {
      uuid = $2;
      result = id ";" displayId ";" model ";" serial ";UUID: " uuid ";" status ";" status;
      gsub(/"/, "", result);
      print result
    }
  EmbeddedFile(3): |
    BEGIN {FS = ": |,"}

    /"interface_id"/ {id = Interface $2}
    /"address"/ {ip = $2}
    /"mac_address"/ {mac = $2}
    /"interface_status": "/ {status = $2}
    /"cable_status"/ {linkStatus = $2}
    /"speed"/ {speed = $2}
    /"bytes_received"/ {bytesReceived = $2}
    /"bytes_sent"/ {bytesSent = $2}
    /"node_id"/ {
      nodeId = $2;
      result = nodeId "-" id ";" nodeId ";" ip ";" mac ";" speed ";" bytesSent ";" bytesReceived ";" linkStatus ";" status ";" status;
      gsub(/"/, "", result);
      print result
    }
  EmbeddedFile(2): |
    BEGIN {FS = ": |,"}

    /"id"/ {id = $2}
    /"node_id"/ {nodeId = $2}
    /"disk_model"/ {model = $2}
    /"disk_serial_number"/ {serial = $2}
    /"slot"/ {slot = "Drive Bay: " $2}
    /"slot_type"/ {slotType = "Slot Type: " $2}
    /"raw_capacity"/ {size = $2}
    /"state"/ {
      status = $2;
      result = id ";" nodeId ";" model ";" serial ";" slot ";" slotType ";" size ";" status ";" status;
      gsub(/"/, "", result);
      print result
    }
translations:
  LinkStatusTranslationTable:
    CONNECTED: ok
    Default: degraded
  EnclosureStatusTranslationTable:
    online: ok
    Default: degraded
  PhysicalDiskStatusTranslationTable:
    healthy: ok
    Default: degraded
  NetworkCardStatusTranslationTable:
    UP: ok
    Default: degraded
