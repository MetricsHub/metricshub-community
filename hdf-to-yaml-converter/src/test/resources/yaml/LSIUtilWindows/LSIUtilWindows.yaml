---
connector:
  displayName: LSI Logic - LsiUtil - RAID (Windows)
  platforms: Any system with LSI lsiutil
  reliesOn: lsiutil
  information: Gives information about physical disks and volumes of LSI Logic SAS RAID controllers through the lsiutil utility.
  version: 1.0
  detection:
    appliesTo:
    - NT
    supersedes:
    - LSIMegaCliWindows
    criteria:
    - type: deviceType
      keep:
      - NT
    - type: osCommand
      commandLine: "for %i in (1,2,3,4,5,6,7,8,9) do lsiutil.exe -p%i -a 1,2,0 21"
      expectedResult: "^PhysDisk [0-9]"
      errorMessage: Unable to find or execute lsiutil or no LSI Logic controller found
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = output of lsiutil
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(1)
            # DeviceID;Vendor;Model;FirmwareVersion
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.disk_controller.discovery.sources.source(1)}"
        attributes:
          id: $1
          controller_number: $1
          vendor: $2
          model: $3
          firmware_version: $4
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s %s)\", $1, $2, $3)}"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # ControllerNumber;diskID;model;size;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
        attributes:
          id: $2
          vendor: $3
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $1)"
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $3, bytes2HumanFormatBase10($4))}"
        metrics:
          hw.physical_disk.size: $4
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # diskID;Status;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: "${translation::DiskStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.physical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="physical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # ControllerNumber;diskID;size;raidType
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $2
          raid_level: $4
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $1)"
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $4, bytes2HumanFormatBase2($3))}"
        metrics:
          hw.logical_disk.limit: $3
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for %%i in (1,2,3,4,5,6,7,8,9) do echo MSHW_Controller %%i && lsiutil.exe -p%%i -a 1,2,0 21"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # diskID;Status;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: "${translation::DiskStatusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        deviceId: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  DiskStatusTranslationTable:
    offlinerequested: degraded
    optimal: ok
    missing: failed
    online: ok
    initializing: degraded
    failed: failed
    degraded: degraded
    notcompatible: failed
    failedrequested: failed
    Default: UNKNOWN
