---
connector:
  displayName: LSI Logic - LsiUtil - RAID
  platforms: Any system with LSI lsiutil
  reliesOn: lsiutil
  information: Gives information about physical disks and volumes of LSI Logic SAS RAID controllers through the lsiutil utility.
  version: 1.0
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Linux
    - Solaris
    criteria:
    - type: deviceType
      keep:
      - Linux
      - Solaris
    - type: osCommand
      commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do %{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
      expectedResult: "^PhysDisk [0-9]"
      errorMessage: Unable to find or execute lsiutil or no LSI Logic controller found
sudoCommands:
- lsiutil
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = output of lsiutil
          type: osCommand
          commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(1)
            # DeviceID;Vendor;Model;FirmwareVersion
          - type: awk
            script: $file("embeddedFile-1")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(1)
          controller_number: $column(1)
          vendor: $column(2)
          model: $column(3)
          firmware_version: $column(4)
          hw.parent.type: enclosure
          name: "sprintf(\"Disk Controller: %s (%s %s)\", $column(1), $column(2), $column(3))"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # ControllerNumber;diskID;model;size;
          - type: awk
            script: $file("embeddedFile-2")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          vendor: $column(3)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(3), bytes2HumanFormatBase10($column(4)))"
        metrics:
          hw.physical_disk.size: $column(4)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(2)
            # diskID;Status;
          - type: awk
            script: $file("embeddedFile-2")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: DiskStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # ControllerNumber;diskID;size;raidType
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: $monitors.logical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          raid_level: $column(4)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(1))"
          name: "sprintf(\"%s (%s - %s)\", $column(2), $column(4), bytes2HumanFormatBase2($column(3)))"
        metrics:
          hw.logical_disk.limit: $column(3)
    collect:
      # Collect type is "all instances in one shot
      type: multiInstance
      sources:
        source(1):
          # Source(1) = lsiutil output
          type: osCommand
          commandLine: "for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
          computes:
            # Reformat lsiutil's output through awk see EmbeddedFile(3)
            # diskID;Status;
          - type: awk
            script: $file("embeddedFile-3")$
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6"
            # Duplicate the Status column
            # DiskID;Status;Status
          - type: duplicateColumn
            column: 2
            # Remove spaces in the Statys column
            # DiskID;Status;Status
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
            # Translate the Status into a PATROL status
            # DiskID;PATROLStatus;Status
          - type: translate
            column: 2
            translationTable: DiskStatusTranslationTable
      mapping:
        # ValueTable = Source(1)
        source: $monitors.logical_disk.collect.sources.source(1)$
        deviceId: $column(1)
        metrics:
          hw.status{hw.type="logical_disk"}: $column(2)
        legacyTextParameters:
          StatusInformation: $column(3)
translations:
  DiskStatusTranslationTable:
    offlinerequested: degraded
    optimal: ok
    missing: failed
    online: ok
    initializing: degraded
    failed: failed
    degraded: degraded
    notcompatible: failed
    failedrequested: failed
    Default: UNKNOWN
