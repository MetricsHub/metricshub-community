---
translations:
  AttachedToDeviceTypeTranslationTable:
    default: Enclosure
    controllers: DiskController
    power-supplies: Enclosure
    enclosures: Enclosure
  LinkSpeedTranslationTable:
    "0": 1000
    "11": 12000
    "12": 16000
    "2": 4000
    "255": ""
    "6": 6000
    "7": 8000
    "8": 10
    "9": 100
    "10": 10000
  LinkStatusTranslationTable:
    not present: degraded
    disconnected: degraded
    warning: degraded
    up: ok
    error: degraded
  StatusInformationTranslationTable:
    "0": Unsupported
    "1": ok
    "2": Critical
    "3": Warning
    "4": Unrecoverable
    "5": Not Installed
    "6": Unknown
    "7": Unavailable
  StatusTranslationTable:
    n/a: UNKNOWN
    critical: failed
    unavailable: ok
    fault: failed
    unrecoverable: failed
    degraded: degraded
    unknown: UNKNOWN
    not installed: UNKNOWN
    "0": failed
    "1": ok
    "2": failed
    unsupported: UNKNOWN
    "3": degraded
    "4": failed
    "5": degraded
    "6": UNKNOWN
    "7": degraded
    warning: degraded
    ok: ok
connector:
  displayName: Dell EMC PowerVault (REST)
  platforms: PowerVault REST
  version: 1.0
  information: "This connector provides hardware monitoring through the PowerVault Management REST API. It monitors the enclosure, controllers, physical disks, and the various environment sensors (fans, power supplies, network cards, voltages, and temperature)."
  detection:
    connectionTypes:
    - remote
    appliesTo:
    - Storage
    criteria:
    # requires %{SHA256_AUTH} replacement macro
    - type: productRequirements
      kmVersion: 11.3.01
    - type: http
      authenticationToken: "%{USERNAME}_%{PASSWORD}"
      url: "/api/login/%{SHA256_AUTH}"
      header: "datatype: json"
      expectedResult: response-type":"Success
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Login
          type: http
          method: GET
          authenticationToken: "%{USERNAME}_%{PASSWORD}"
          url: "api/login/%{SHA256_AUTH}"
          header: "datatype: json"
          computes:
          # extract sessionKey from response
          - type: json2csv
            entryKey: /status
            properties: /response;
          # append header <key> portion to sessionKey
          - type: leftConcat
            column: 2
            value: "sessionKey: "
          # keep only our header string
          - type: keepColumns
            columnNumbers: 2
        source(2):
          # join together sessionKey: <key> and datatype header
          type: tableUnion
          tables:
          - $monitors.enclosure.discovery.sources.source(1)$
          - "datatype: json"
        source(3):
          # begin discovery
          # the big show command (show configuration)
          type: http
          header: $monitors.enclosure.discovery.sources.source(2)$
          url: /api/show/configuration
          method: GET
        source(4):
          # 'Keep a copy for system '
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          # JSON;name;vendor;model;
          - type: json2csv
            entryKey: /system
            properties: /system-name;/vendor-name;/product-id;
          - type: replace
            column: 1
            existingValue: Column(1)
            newValue: MSHW
        source(5):
          # Keep a copy for enclosures
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          # JSON;id;serial-number;
          - type: json2csv
            entryKey: /enclosures
            properties: /enclosure-id;/midplane-serial-number;/product-id;
          - type: replace
            column: 1
            existingValue: Column(1)
            newValue: MSHW
        source(6):
          # Join system information to each enclosure
          # MSHW;id;serialnumber;product-id;MSHW;name;vendor;model;
          type: tableJoin
          leftTable: $monitors.enclosure.discovery.sources.source(5)$
          rightTable: $monitors.enclosure.discovery.sources.source(4)$
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;
        source(7):
          # show frus
          type: http
          header: $monitors.enclosure.discovery.sources.source(2)$
          url: /api/show/sensor-status
          method: GET
          computes:
          # JSON;id;sensor-type;container;enclosure;controller;name;
          - type: json2csv
            entryKey: /sensors
            properties: /durable-id;/sensor-type;/container;/enclosure-id;/controller-id-numeric;/sensor-name;
          # Translate container into AttachedToDeviceType
          - type: translate
            column: 4
            translationTable: AttachedToDeviceTypeTranslationTable
          # Duplicate our new found knowledge
          - type: duplicateColumn
            column: 4
          # place in column 5 the true id of the AttachedToDeviceID (2 computes)
          - type: replace
            column: 5
            existingValue: enclosure
            newValue: Column(6)
          - type: replace
            column: 5
            existingValue: disk_controller
            newValue: Column(7)
      mapping:
        # Enclosure Instance Table
        source: $monitors.enclosure.discovery.sources.source(6)$
        attributes:
          id: $column(2)
          serial_number: $column(3)
          __display_id: $column(6)
          vendor: $column(7)
          model: $column(8)
          type: Storage
          name: "sprintf(\"%s (%s %s - %s)\", $column(6), $column(7), $column(8), \"Storage\")"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          # Login
          type: http
          method: GET
          authenticationToken: "%{USERNAME}_%{PASSWORD}"
          url: "api/login/%{SHA256_AUTH}"
          header: "datatype: json"
          computes:
          # extract sessionKey from response
          - type: json2csv
            entryKey: /status
            properties: /response;
          # append header <key> portion to sessionKey
          - type: leftConcat
            column: 2
            value: "sessionKey: "
          # keep only our header string
          - type: keepColumns
            columnNumbers: 2
        source(2):
          # join together sessionKey: <key> and datatype header
          type: tableUnion
          tables:
          - $monitors.enclosure.collect.sources.source(1)$
          - "datatype: json"
        source(3):
          # show frus
          type: http
          header: $monitors.enclosure.collect.sources.source(2)$
          url: /api/show/sensor-status
          method: GET
          computes:
          # durable-id;value;status;status-numeric;container;enclosure-id;
          - type: json2csv
            entryKey: /sensors
            properties: /durable-id;/sensor-type;/value;/status-numeric;/status-numeric;/container;/enclosure-id;
          - type: translate
            column: 5
            translationTable: StatusTranslationTable
          - type: translate
            column: 6
            translationTable: StatusInformationTranslationTable
          # SubSeparate the numerical value only
          - type: extract
            column: 4
            subColumn: 1
            subSeparators: ' '
        source(4):
          # Keep a copy to return enclosure statuses
          type: copy
          from: $monitors.enclosure.collect.sources.source(3)$
          computes:
          - type: keepOnlyMatchingLines
            column: 7
            regExp: enclosures
        source(5):
          # the big show command (show configuration)
          type: http
          header: $monitors.enclosure.collect.sources.source(2)$
          url: /api/show/configuration
          method: GET
        source(6):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          # JSON;id;serial-number;
          - type: json2csv
            entryKey: /enclosures
            properties: /enclosure-id;/enclosure-power;
        source(7):
          # JSON;id;watts;JSON;durable-id;value;status;status-numeric;container;enclosure-id
          type: tableJoin
          leftTable: $monitors.enclosure.collect.sources.source(6)$
          rightTable: $monitors.enclosure.collect.sources.source(4)$
          leftKeyColumn: 2
          rightKeyColumn: 8
          computes:
          - type: translate
            column: 4
            translationTable: StatusTranslationTable
          - type: translate
            column: 5
            translationTable: StatusInformationTranslationTable
      mapping:
        # Value Table
        source: $monitors.enclosure.collect.sources.source(7)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="enclosure"}: $column(4)
          hw.enclosure.power: $column(3)
          hw.enclosure.energy: fakeCounter($column(3))
        legacyTextParameters:
          StatusInformation: $column(5)
  temperature:
    discovery:
      sources:
        source(1):
          # JSON;id;sensor-type;container;enclosure;controller;name;
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          # keep types "Temperature
          - type: keepOnlyMatchingLines
            column: 3
            regExp: temperature
      mapping:
        source: $monitors.temperature.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(8)
          hw.parent.type: $column(4)
          hw.parent.id: $column(5)
          name: $column(8)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(3)$
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            regExp: temperature
      mapping:
        # JSON;id;value;status;StatusInformation
        source: $monitors.temperature.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.temperature: $column(4)
          hw.status{hw.type="temperature"}: $column(5)
        legacyTextParameters:
          StatusInformation: $column(6)
  voltage:
    discovery:
      sources:
        source(1):
          # JSON;id;sensor-type;container;enclosure;controller;name;
          type: copy
          from: $monitors.enclosure.discovery.sources.source(7)$
          computes:
          # keep types "Voltage
          - type: keepOnlyMatchingLines
            column: 3
            regExp: voltage
      mapping:
        source: $monitors.voltage.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(8)
          hw.parent.type: $column(4)
          hw.parent.id: $column(5)
          name: $column(8)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(3)$
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            regExp: voltage
          # engine expects voltage in mV
          - type: multiply
            column: 4
            value: 1000
      mapping:
        # JSON;id;value;status;StatusInformation
        source: $monitors.voltage.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.voltage: $column(4)
          hw.status{hw.type="voltage"}: $column(5)
        legacyTextParameters:
          StatusInformation: $column(6)
  disk_controller:
    discovery:
      sources:
        source(1):
          # Keep a copy for controllers
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          - type: json2csv
            entryKey: /controllers
            properties: /controller-id-numeric;/controller-id;/vendor;/model;/controller-id-numeric;/hardware-version;/sc-fw;/serial-number;
      mapping:
        source: $monitors.disk_controller.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          model: $column(5)
          controller_number: $column(6)
          firmware_version: $column(7)
          bios_version: $column(8)
          serial_number: $column(9)
          hw.parent.type: enclosure
          name: "sprintf(\"%s %s (%s)\"), \"Disk Controller\", $column(3), $column(5))"
    collect:
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /controllers
            properties: /controller-id-numeric;/health;/health-reason;
          - type: translate
            column: 3
            translationTable: StatusTranslationTable
      mapping:
        source: $monitors.disk_controller.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="disk_controller"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  fan:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          - type: json2csv
            entryKey: /enclosures/power-supplies/fan
            properties: /durable-id;/name;../durable-id;
      mapping:
        source: $monitors.fan.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          hw.parent.type: enclosure
          name: $column(3)
    collect:
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /enclosures/power-supplies/fan
            properties: /durable-id;/health;/health-reason;/speed;
      mapping:
        source: $monitors.fan.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="fan"}: $column(3)
          hw.fan.speed: $column(5)
        legacyTextParameters:
          StatusInformation: $column(4)
  physical_disk:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          - type: json2csv
            entryKey: /drives
            properties: /durable-id;/durable-id;/owner-numeric;/vendor;/model;/revision;/serial-number;/blocks;/blocksize;/ssd-life-left-numeric;
          - type: multiply
            column: 9
            value: Column(10)
          # endurance of 255 means it is not an SSD
          - type: replace
            column: 11
            existingValue: 255
            newValue: "False"
      mapping:
        source: $monitors.physical_disk.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          vendor: $column(5)
          model: $column(6)
          firmware_version: $column(7)
          serial_number: $column(8)
          hw.parent.type: disk_controller
          hw.parent.id: "lookup(\"disk_controller\", \"id\", \"controller_number\", $column(4))"
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(6), $column(9))"
        metrics:
          hw.physical_disk.size: $column(9)
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /drives
            properties: /durable-id;/health;/health-reason;/error;/ssd-life-left-numeric;
          - type: translate
            column: 3
            translationTable: StatusTranslationTable
      mapping:
        source: $monitors.physical_disk.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="physical_disk"}: $column(3)
          hw.physical_disk.endurance_utilization{state="remaining"}: percent2Ratio($column(6))
        legacyTextParameters:
          StatusInformation: $column(4)
  power_supply:
    discovery:
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          - type: json2csv
            entryKey: /enclosures/power-supplies
            properties: /durable-id;/name;/enclosure-id;/model;/serial-number;
          - type: leftConcat
            column: 5
            value: "Model: "
          - type: leftConcat
            column: 6
            value: "Serial Number: "
      mapping:
        # PowerSupply Instance Table
        source: $monitors.power_supply.discovery.sources.source(1)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          info: "join($column(5), $column(6), \" \")"
          hw.parent.type: enclosure
          hw.parent.id: $column(4)
          name: "sprintf(\"%s, $column(3))"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /enclosures/power-supplies
            properties: /durable-id;/health;/health-reason;
          - type: translate
            column: 3
            translationTable: StatusTranslationTable
      mapping:
        # PowerSupply Value Table
        source: $monitors.power_supply.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="power_supply"}: $column(3)
        legacyTextParameters:
          StatusInformation: $column(4)
  network:
    discovery:
      sources:
        source(1):
          # FC Ports
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          # json;id;name;controller-id;vendor;model;
          - type: json2csv
            entryKey: /port/fc-port
            properties: ../durable-id;../port;../controller-numeric;/sfp-vendor;/sfp-part-number;/port-type;/mac-address;/ip-address;../actual-speed-numeric;
          - type: rightConcat
            column: 8
            value: ;WWN;
        source(2):
          # ISCSI Ports
          type: copy
          from: $monitors.enclosure.discovery.sources.source(3)$
          computes:
          # json;id;name;controller-id;vendor;model;mac-address;ip-address;
          - type: json2csv
            entryKey: /port/iscsi-port
            properties: ../durable-id;../port;../controller-numeric;/sfp-vendor;/sfp-part-number;/port-type;/mac-address;/ip-address;../actual-speed-numeric;
          - type: rightConcat
            column: 8
            value: ;MAC;IP
        source(3):
          type: tableUnion
          tables:
          - $monitors.network.discovery.sources.source(1)$
          - $monitors.network.discovery.sources.source(2)$
          computes:
          - type: translate
            column: 12
            translationTable: LinkSpeedTranslationTable
      mapping:
        source: $monitors.network.discovery.sources.source(3)$
        attributes:
          id: $column(2)
          __display_id: $column(3)
          model: $column(6)
          device_type: $column(7)
          physical_address: $column(8)
          physical_address_type: $column(9)
          logical_address_type: $column(10)
          logical_address: $column(11)
          hw.parent.type: disk_controller
          hw.parent.id: $column(4)
          name: "sprintf(\"%s (%s - %s)\", $column(3), $column(7), $column(6))"
    collect:
      # Collect
      type: multiInstance
      sources:
        source(1):
          type: copy
          from: $monitors.enclosure.collect.sources.source(5)$
          computes:
          - type: json2csv
            entryKey: /port
            properties: /durable-id;/health;/health-reason;/status;/actual-speed-numeric;
          - type: translate
            column: 3
            translationTable: StatusTranslationTable
          - type: translate
            column: 6
            translationTable: LinkSpeedTranslationTable
          - type: translate
            column: 5
            translationTable: LinkStatusTranslationTable
      mapping:
        # NetworkCard Value Table
        source: $monitors.network.collect.sources.source(1)$
        deviceId: $column(2)
        metrics:
          hw.status{hw.type="network"}: $column(3)
          hw.network.up: legacyLinkStatus($column(5))
          hw.network.bandwidth.limit: megaBit2Bit($column(6))
        legacyTextParameters:
          StatusInformation: $column(4)
