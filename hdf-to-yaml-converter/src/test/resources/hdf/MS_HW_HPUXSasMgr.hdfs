//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                MS_HW_HPUXDisk.hdf
//
//      Supports: HP-UX machines
//		Monitors: standard non-RAID SCSI harddisks
//      Connects to: different HP-UX standard tools (pvdisplay, ioscan, etc.)
//
//

//
// HEADER
//

hdf.DisplayName="HP-UX - sasmgr Disk Controllers"
hdf.TypicalPlatform="HP 9000,HP Integrity,HP SuperDome"
hdf.ReliesOn="HP-UX system commands (sasmgr, ioscan etc.)"
hdf.Comments="Provides hardware SAS RAID disks status information on HP-UX systems. Requires root privileges."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="HP"

// Sudo-able commands
Sudo(1).Command="/opt/sas/bin/sasmgr"

//
// DETECTION
//

// OS should be HP (for HP-UX, whatever version)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="HP"

// STM should not be present, because in this case, we will use the HPUX-CSTM connector
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="/bin/ls /opt/sas/bin/sasmgr"
Detection.Criteria(2).ExpectedResult="sasmgr$"

// The various following tools have to be present
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="/bin/sh %EmbeddedFile(1)%"
Detection.Criteria(3).ExpectedResult="Info for PHY ID"


//
// NO COMPUTER
//

//
// DISK CONTROLLERS
//

//
// Discovery

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(3)%"

// Run Source(1) through an AWK script
// Output:  MSHW;ID;model;firmwareversion;status;
DiskController.Discovery.Source(1).Compute(1).Type="Awk"
DiskController.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
DiskController.Discovery.Source(1).Compute(1).Separators=";"
DiskController.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
DiskController.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// InstanceTable = Source(1)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(3)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(1)

//
// Collect

// Collect type: MultiInstance
DiskController.Collect.Type="MultiInstance"

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//

DiskController.Collect.Source(1).Type="OsCommand"
DiskController.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(3)%"

// Run Source(1) through an AWK script
// Output:  MSHW;ID;model;firmwareversion;status;
DiskController.Collect.Source(1).Compute(1).Type="Awk"
DiskController.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
DiskController.Collect.Source(1).Compute(1).Separators=";"
DiskController.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
DiskController.Collect.Source(1).Compute(1).SelectColumns="2,5"

// Now translate Status to Patrol Status
// status
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column="2"
DiskController.Collect.Source(1).Compute(2).TranslationTable="ControllerTranslationTable"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)

// The ControllerTranslationTable
ControllerTranslationTable("ONLINE")="OK"
ControllerTranslationTable("Degraded")="WARN"
ControllerTranslationTable("Failed")="ALARM"
ControllerTranslationTable("N/A")="OK"
ControllerTranslationTable(Default)="UNKNOWN"


//
// PHYSICAL DISKS
//


//
// Discovery

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//
PhysicalDisk.Discovery.Source(1).Type="OsCommand"
PhysicalDisk.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"

// Run Source(1) through an AWK script
// Output:  MSHW;ID;model;firmwareversion;status;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
PhysicalDisk.Discovery.Source(1).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,4"

// InstanceTable = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)

//
// Collect

// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//

PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"

// Run Source(1) through an AWK script
// Output:  MSHW;ID;model;firmwareversion;status;
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Compute(1).SelectColumns="2,3"

// Now translate Status to Patrol Status
// status
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="2"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)


// The ControllerTranslationTable
PhysicalDiskTranslationTable("UP")="OK"
PhysicalDiskTranslationTable("DOWN")="ALARM"
PhysicalDiskTranslationTable(Default)="UNKNOWN"


//
// LOGICAL DISKS
//


//
// Discovery

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//
LogicalDisk.Discovery.Source(1).Type="OsCommand"
LogicalDisk.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(5)%"

// Run Source(1) through an AWK script
// MSHW;ID;Status;Controller it is attached to; Raid Level; ; Size
LogicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
LogicalDisk.Discovery.Source(1).Compute(1).Separators=";"
LogicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,4,5,6"

// The InstanceTable
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(3)

//
// Collect

// Collect type: MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = /opt/sas/bin/sasmgr get_info -D $dev
//

LogicalDisk.Collect.Source(1).Type="OsCommand"
LogicalDisk.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(5)%"

// Run Source(1) through an AWK script
// Output:  MSHW;ID;model;firmwareversion;status;
LogicalDisk.Collect.Source(1).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
LogicalDisk.Collect.Source(1).Compute(1).Separators=";"
LogicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Collect.Source(1).Compute(1).SelectColumns="2,3"

// Now translate Status to Patrol Status
// status
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="2"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskTranslationTable"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)







// The LogicalDiskTranslationTable
LogicalDiskTranslationTable("OPTIMAL")="OK"
LogicalDiskTranslationTable("DEGRADED")="WARN"
LogicalDiskTranslationTable("FAILED")="ALARM"
LogicalDiskTranslationTable(Default)="UNKNOWN"


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = shell script that lists physical disks and their status
///    Takes a list of controllers from ioscan and feeds them through sasmgr
///    The While - Cat loop is due to get around the scrolling of sasmgr
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
/usr/sbin/ioscan -fnkd sasd | grep /dev/sasd | while read dev
do
/usr/bin/echo $dev
cat <<-!
                        $(%{SUDO:/opt/sas/bin/sasmgr}/opt/sas/bin/sasmgr get_info -D $dev -q phy=all)
!
done
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = Awk script that takes the output of sasmgr and returns the disks and status
///    Note: A disk with Address = 0x0 is one that the server has not seen since bootup, and one !=0x0 is one that it has seen, but is not responding
///    MSHW;ID;Status;Controller it is attached to
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN  {ID="";health="";controller="";}
$1 ~ /dev.sasd[0-9]/ {controller=$1 ;
                      gsub (/.dev./,"",controller) ;
                      }
$0 ~ /PHY ID/ {ID = $NF}
$0 ~ /PHY [Hh]ealth/ {health = $NF}
$0 ~ /Port SAS Address/ && ID != "" && $NF != "0x0" {
                                     print ("MSHW;" ID ";" health ";" controller ";");
                                     ID="";health=""
                                     }


EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = shell script that lists the physical controllers
///    Takes a list of controllers from ioscan and feeds them through sasmgr
///    The While - Cat loop is due to get around the scrolling of sasmgr
///
/////////////////////////////////////////////////////////
EmbeddedFile(3):
/usr/sbin/ioscan -fnkd sasd | grep /dev/sasd | while read dev
do
/usr/bin/echo $dev
cat <<-!
                        $(%{SUDO:/opt/sas/bin/sasmgr}/opt/sas/bin/sasmgr get_info -D $dev)
!
done
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = Awk Script that returns
///                      MSHW;ID;model;firmwareversion;status;
///
/////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN  {ID="";model="";firmwareversion="";status="";}
$1 ~ /dev.sasd[0-9]/ {ID=$1 ;
                      gsub (/.dev./,"",ID) ;
                      }
$0 ~ /Product Number/ && ID != ""  {model=$NF}
$0 ~ /Health of HBA/ {status=$NF}
$0 ~ /Firmware Revision/ && ID != "" {firmwareversion = $NF ;
                                     print ("MSHW;" ID ";" model ";" firmwareversion ";" status ";");
                                     ID="";model="";firmwareversion="";status="";
                                     }
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = shell script that lists the logical disks
///    Takes a list of controllers from ioscan and feeds them through sasmgr
///    The While - Cat loop is due to get around the scrolling of sasmgr
///
/////////////////////////////////////////////////////////
EmbeddedFile(5):
/usr/sbin/ioscan -fnkd sasd | grep /dev/sasd | while read dev
do
/usr/bin/echo $dev
cat <<-!
                        $(%{SUDO:/opt/sas/bin/sasmgr}/opt/sas/bin/sasmgr get_info -D $dev -q raid)
!
done
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = Awk script that takes the output of sasmgr and returns the disks and status
///    Note: A disk with Address = 0x0 is one that the server has not seen since bootup, and one !=0x0 is one that it has seen, but is not responding
///    MSHW;ID;Status;Controller it is attached to; Raid Level; ; Size
///
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN  {ID="";health="";controller="";raidLevel="";size="";}
$1 ~ /dev.sasd[0-9]/ {controller=$1 ;
                      gsub (/.dev./,"",controller) ;
                      }
$0 ~ /LOGICAL DRIVE [0-9]/ {ID = $(NF-1)}
$0 ~ /Raid Level/ {raidLevel = $NF}
$0 ~ /Raid State/ {health = $NF}
$0 ~ /Raid Size/ && ID != "" {size=$NF ; size = size * 1048576;
                              print ("MSHW;" ID ";" health ";" controller ";" raidLevel ";" size ";");
                              ID="";health="";raidLevel="";size="";
                              }
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////
