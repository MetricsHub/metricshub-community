//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                MS_HW_LinuxMultipath.hdf
//
//      Supports: any Linux machine with the multipathd daemon running
//
//


// HEADER

hdf.DisplayName="Linux - Multipath"
hdf.TypicalPlatform="Any system with multipath"
hdf.ReliesOn="Linux multipath utility"
hdf.Version="1.0"
hdf.Comments="This connector provides the monitoring of HBA cards on all Linux systems through the multipath utility."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux"

// SUDO-able commands
//
Sudo(1).Command="multipath"

//
// DETECTION
//

// OS should be Linux
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Linux"

// Test the multipath command
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:multipath} multipath -l"
Detection.Criteria(2).ExpectedResult="\(^\\_\)\|\(^\`\-\+\-\)"


//
// FC (Network Cards)
//

//
// Discovery

// Get the list of Ports from multipath -l
//
LUN.Discovery.Source(1).Type="OsCommand"
LUN.Discovery.Source(1).CommandLine="%{SUDO:multipath} multipath -l"

// AWK it
// LunName;LunInfo;LunStatus;
LUN.Discovery.Source(1).Compute(1).Type="Awk"
LUN.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(1).Compute(1).Separators=";"
LUN.Discovery.Source(1).Compute(1).SelectColumns="2,3,5"

// InstanceTable = Source(1)
// LunName;LunInfo;LunStatus;
LUN.Discovery.InstanceTable=%LUN.Discovery.Source(1)%
LUN.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LUN.Discovery.Instance.ArrayName=InstanceTable.Column(2)
// LUN.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)



//
// COLLECT

// Collect type is multi-instance
LUN.Collect.Type="MultiInstance"

// Get the list of Ports from multipath -l
//
LUN.Collect.Source(1).Type="OsCommand"
LUN.Collect.Source(1).CommandLine="%{SUDO:multipath} multipath -l"

// AWK it
// LunName;NumberPaths;LunStatus;LunStatusInfo;AvailablePathInformation;
LUN.Collect.Source(1).Compute(1).Type="Awk"
LUN.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Collect.Source(1).Compute(1).Separators=";"
LUN.Collect.Source(1).Compute(1).SelectColumns="2,4,5,6,7"

// ValueTable = Source(1)
// LunName;NumberPaths;LunStatus;LunStatusInfo;AvailablePathInformation;
LUN.Collect.ValueTable=%LUN.Collect.Source(1)%
LUN.Collect.DeviceID=ValueTable.Column(1)
LUN.Collect.AvailablePathCount=ValueTable.Column(2)
// LUN.Collect.Status=ValueTable.Column(3)
// LUN.Collect.StatusInformation=ValueTable.Column(4)
LUN.Collect.AvailablePathInformation=ValueTable.Column(5)

/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes the wonderful array of objects and returns them in column form
///	   MSHW;LunName;LunInfo;NumberPaths;LunStatus;LunStatusInfo;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {NumberPaths=0; LunName=""; LunInfo="" ; LunStatus=""; LunStatusInfo="";AvailablePaths=""}

# RHEL 5 uses the format:
#	0HP_OPEN-E_500060e802c43216001e0f00000000000000c600dm-2 HP,OPEN-E
#	[size=14G][features=0][hwhandler=0]
#	\_ round-robin 0 [prio=0][active]
#	\_ 1:0:0:30 sdc 8:32 [active][undef]

# RHEL 6 uses the format:
#	mpathc (360000970000294901120533030303644) dm-0 EMC,SYMMETRIX
#	size=5.0G features='1 queue_if_no_path' hwhandler='0' wp=rw
#	`-+- policy='round-robin 0' prio=0 status=active
#	  |- 2:0:0:3 sdc 8:32  active undef running
#   `- 2:0:1:3 sde 8:64  active undef running
#
# OR
#
# mpath2 (36001b97004106bf304106bf26b52a9fc) dm-10 VIOLIN,SAN ARRAY
# size=128G features='0' hwhandler='0' wp=rw
# |-+- policy='round-robin 0' prio=0 status=enabled
# | `- 2:0:0:3  sdau 66:224 active undef running
# |-+- policy='round-robin 0' prio=0 status=enabled
# | `- 1:0:2:3  sdw  65:96  active undef running
# `-+- policy='round-robin 0' prio=0 status=enabled
#   `- 1:0:3:3  sdag 66:0   active undef running

$1 ~ /^[0-9A-Za-z][0-9A-Za-z]/ && $1 !~ /[=\[]/ {
                          if (LunName != "") {print ("MSHW;"LunName";"LunInfo";"NumberPaths";"LunStatus";"LunStatusInfo";"AvailablePaths";")}
	                        NumberPaths=0; LunName=""; LunInfo="" ; LunStatus=""; LunStatusInfo="";AvailablePaths="";
	                        LunName=$1 ; LunInfo = $0 ;
	                       }

($1 ~ /\\_/ || $1 ~ /[\|\`]\-/) && $2 !~ /[0-9]+:[0-9]+:[0-9]+:[0-9]+/  {
	                                                    if ($0 ~ /(active)|(ready)|(enabled)/) {LunStatus="OK" ;}
	                                                   	else if ($NF ~ /(faulty)|(failed)/) {LunStatus="ALARM" ; LunStatusInfo = $NF}
                                                      }
(($1 ~ /\\_/ || $1 ~ /[\|\`]\-/) && $2 ~ /[0-9]+:[0-9]+:[0-9]+:[0-9]+/ ) {
	                                                    if ($0 ~ /(active)|(ready)|(enabled)/) {NumberPaths=NumberPaths+1
                                                      if (AvailablePaths=="") {AvailablePaths="Path: " $2 " " $3}
                                                   	      else {AvailablePaths=AvailablePaths " - Path: " $2 " " $3}}
	                                                    }

($1 ~ /[|]/ && $2 ~ /[\|\`]\-/ && $3 ~ /[0-9]+:[0-9]+:[0-9]+:[0-9]+/ ) {
	                                                    if ($0 ~ /(active)|(ready)|(enabled)/) {NumberPaths=NumberPaths+1
                                                      if (AvailablePaths=="") {AvailablePaths="Path: " $3 " " $4}
                                                   	      else {AvailablePaths=AvailablePaths " - Path: " $3 " " $4}}
	                                                    }

END {if (LunName != "" ) {print ("MSHW;"LunName";"LunInfo";"NumberPaths";"LunStatus";"LunStatusInfo";"AvailablePaths";")}}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////
