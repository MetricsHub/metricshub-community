////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Quantum Based Management MIB (ADIC-MANAGEMENT-MIB)
//                Connects to a SNMP agent
//
//


//
// Header
//

hdf.DisplayName="Quantum (ADIC) Enterprise Level Tape Libraries"
hdf.TypicalPlatform="Quantum Scalar i2000,Quantum Scalar i6000"
hdf.ReliesOn="Quantum SNMP Agent (ADIC-MANAGEMENT-MIB)"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through the Quantum Scalar's SNMP interface.  It is primarily designed for the i2000 and i6000 libraries."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"
hdf.Supersedes="MS_HW_SMISLibrary.hdf"

//
// DETECTION
// Does a get_next to see if there are any tape drives
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.3764.1.1.200.20.80.110.1"

//
// Enclosure
//

// Source(1) = FRU information
// Role;Model;Vendor;Firmware;SerialNumber;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.10"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,3,6,8,10"

// Add an identifier to enable table Joints
// MSHW;Role;Model;Vendor;Firmware;SerialNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="MSHW;"

// Get the Enclosure(s) ID(s)
// EnclosureID;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.10.10.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="ID"

// Add an identifier to enable table Joints
// MSHW;EnclosureID;
Enclosure.Discovery.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).String="MSHW;"

// Join the EnclosureIDs with the FRUs
// MSHW;EnclosureID;MSHW;Role;Model;Vendor;Firmware;SerialNumber;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;;;;;"

// Add "Role: " to AdditionalInformation1
Enclosure.Discovery.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(1).Column=4
Enclosure.Discovery.Source(3).Compute(1).String="Role: "

// InstanceTable = Source(1)
// MSHW;EnclosureID;MSHW;Role;Model;Vendor;Firmware;SerialNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(5)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
Enclosure.Discovery.Instance.BiosVersion=InstanceTable.Column(7)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Storage"

//
// Collect


Enclosure.Collect.Type="MultiInstance"

// Source(1) = 	libraryGlobalStatus SNMP OID
// EnclosureID;Status;

Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.10.10.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Duplicate status, because we will translate it two times
// EnclosureID;Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// EnclosureID;PATROLStatus;Status;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="EnclosureStatusTranslationTable"

// Translate second Status into more readable string
// EnclosureID;PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="EnclosureStatusInformationTranslationTable"

// Value Table
// EnclosureID;PATROLStatus;StatusInformation;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)

// The StatusTranslationTable
EnclosureStatusTranslationTable(1)="WARN"
EnclosureStatusTranslationTable(2)="UNKNOWN"
EnclosureStatusTranslationTable(3)="OK"
EnclosureStatusTranslationTable(4)="WARN"
EnclosureStatusTranslationTable(5)="ALARM"
EnclosureStatusTranslationTable(6)="ALARM"
EnclosureStatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
EnclosureStatusInformationTranslationTable(1)="Reporting status of 'Other'"
EnclosureStatusInformationTranslationTable(2)="Unknown"
EnclosureStatusInformationTranslationTable(3)=""
EnclosureStatusInformationTranslationTable(4)="Non-Critical"
EnclosureStatusInformationTranslationTable(5)="Critical"
EnclosureStatusInformationTranslationTable(6)="Non-Recoverable"
EnclosureStatusInformationTranslationTable(Default)="Unknown Status"

//
// Tape Drives
//

// Source(1) = 	phDriveEntry SNMP table
// TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;
TapeDrive.Discovery.Source(1).Type="SnmpTable"
TapeDrive.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.80.110.1"
TapeDrive.Discovery.Source(1).SnmpTableSelectColumns="ID,6,7,8,9"

// Deactivate Needs Cleaning if value = 0 (autoclean)
// TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;
TapeDrive.Discovery.Source(1).Compute(1).Type="Replace"
TapeDrive.Discovery.Source(1).Compute(1).Column=5
TapeDrive.Discovery.Source(1).Compute(1).Replace="0"
TapeDrive.Discovery.Source(1).Compute(1).ReplaceBy=""

// Extract the DisplayID and Location
// TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;DisplayID;Location;
TapeDrive.Discovery.Source(1).Compute(2).Type="Awk"
TapeDrive.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(1)
TapeDrive.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
TapeDrive.Discovery.Source(1).Compute(2).Separators=";"
TapeDrive.Discovery.Source(1).Compute(2).SelectColumns="2,3,4,5,6,7,8"

// Instance Table
// TapedriveID;Vendor;Product;SerialNumber;NeedsCleaning;DisplayID;Location;
TapeDrive.Discovery.InstanceTable=%TapeDrive.Discovery.Source(1)%
TapeDrive.Discovery.Instance.DeviceID=InstanceTable.Column(1)
TapeDrive.Discovery.Instance.DisplayID=InstanceTable.Column(6)
TapeDrive.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
TapeDrive.Discovery.Instance.Vendor=InstanceTable.Column(2)
TapeDrive.Discovery.Instance.Model=InstanceTable.Column(3)
TapeDrive.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
TapeDrive.Discovery.Instance.ParameterActivation.NeedsCleaning=InstanceTable.Column(5)

//
// Collect

TapeDrive.Collect.Type="MultiInstance"

// Source(1) = 	physicalDriveEntry SNMP table
// TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;RASStatus;Loads;
TapeDrive.Collect.Source(1).Type="SnmpTable"
TapeDrive.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.80.110.1"
TapeDrive.Collect.Source(1).SnmpTableSelectColumns="ID,9,23,24,31,20"

// Duplicate status, because we will translate it two times
// TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;RASStatus;RASStatus;Loads;
TapeDrive.Collect.Source(1).Compute(1).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(1).Column="5"

// Translate Status into PATROLStatus
// TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;RASStatus;Loads;
TapeDrive.Collect.Source(1).Compute(2).Type="Translate"
TapeDrive.Collect.Source(1).Compute(2).Column="5"
TapeDrive.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// TapeDriveID;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(3).Type="Translate"
TapeDrive.Collect.Source(1).Compute(3).Column="6"
TapeDrive.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Duplicate Cleaning status, because we will translate it two times
// TapeDriveID;NeedsCleaning;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(4).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(4).Column="2"

// Translate Cleaning Status into CleaningStatus
// TapeDriveID;CleaningStatus;NeedsCleaning;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(5).Type="Translate"
TapeDrive.Collect.Source(1).Compute(5).Column="2"
TapeDrive.Collect.Source(1).Compute(5).TranslationTable="CleaningStatusTranslationTable"

// Translate second Status into more readable string
// TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(6).Type="Translate"
TapeDrive.Collect.Source(1).Compute(6).Column="3"
TapeDrive.Collect.Source(1).Compute(6).TranslationTable="CleaningStatusInformationTranslationTable"

// Merge Drive Status Information and Cleaning Status Information
// TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(7).Type="RightConcat"
TapeDrive.Collect.Source(1).Compute(7).Column="7"
TapeDrive.Collect.Source(1).Compute(7).String=Column(3)

// Add write errors to read errors
// TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.Source(1).Compute(8).Type="Add"
TapeDrive.Collect.Source(1).Compute(8).Column=4
TapeDrive.Collect.Source(1).Compute(8).Add=Column(5)

// Value Table
// TapeDriveID;CleaningStatus;CleaningStatusInformation;ReadErrors;WriteErrors;PATROLStatus;StatusInformation;Loads;
TapeDrive.Collect.ValueTable=%TapeDrive.Collect.Source(1)%
TapeDrive.Collect.DeviceID=ValueTable.Column(1)
TapeDrive.Collect.Status=ValueTable.Column(6)
TapeDrive.Collect.StatusInformation=ValueTable.Column(7)
TapeDrive.Collect.NeedsCleaning=ValueTable.Column(2)
TapeDrive.Collect.MountCount=ValueTable.Column(8)
TapeDrive.Collect.ErrorCount=ValueTable.Column(4)

//
// PowerSupply

// Source(1) = 	Global RAS SNMP table
// DeviceID
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID"

// Keep only the correct type of group
// DeviceID
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).Regexp="5$"

// Add a Type of "Global"
// Type;DeviceID;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=1
PowerSupply.Discovery.Source(1).Compute(2).String="Global;"

// Add Marker to the End of the DeviceID
// Type;DeviceID;
PowerSupply.Discovery.Source(1).Compute(3).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=2
PowerSupply.Discovery.Source(1).Compute(3).String="_MSHW"

// Remove the last digit (the type of sensor) to leave just the system ID
// Type;DeviceID;
PowerSupply.Discovery.Source(1).Compute(4).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(4).Column=2
PowerSupply.Discovery.Source(1).Compute(4).Replace=".5_MSHW"
PowerSupply.Discovery.Source(1).Compute(4).ReplaceBy=""

// Instance Table
// Type;DeviceID;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)
// PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(1)

//
// Collect

PowerSupply.Collect.Type="MultiInstance"

// Source(1) = 		Global RAS SNMP table
// DeviceID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="2"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="3"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Add Marker to the End of the DeviceID
// DeviceID;PATROLStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(4).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(4).Column=1
PowerSupply.Collect.Source(1).Compute(4).String="_MSHW"

// Remove the last digit (the type of sensor) to leave just the system ID
// DeviceID;PATROLStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(5).Type="Replace"
PowerSupply.Collect.Source(1).Compute(5).Column=1
PowerSupply.Collect.Source(1).Compute(5).Replace=".5_MSHW"
PowerSupply.Collect.Source(1).Compute(5).ReplaceBy=""


// Value Table
// DeviceID;PATROLStatus;StatusInformation;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
// Robotic

// Source(1) = 	Global RAS SNMP table
// DeviceID;
Robotic.Discovery.Source(1).Type="SnmpTable"
Robotic.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
Robotic.Discovery.Source(1).SnmpTableSelectColumns="ID"

// Keep only the correct type of group
// DeviceID;
Robotic.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Robotic.Discovery.Source(1).Compute(1).Column=1
Robotic.Discovery.Source(1).Compute(1).Regexp="6$"

// Add a Type of "Global"
// Type;DeviceID;
Robotic.Discovery.Source(1).Compute(2).Type="LeftConcat"
Robotic.Discovery.Source(1).Compute(2).Column=1
Robotic.Discovery.Source(1).Compute(2).String="Global;"

// Add Marker to the End of the DeviceID
// Type;DeviceID;
Robotic.Discovery.Source(1).Compute(3).Type="RightConcat"
Robotic.Discovery.Source(1).Compute(3).Column=2
Robotic.Discovery.Source(1).Compute(3).String="_MSHW"

// Remove the last digit (the type of sensor) to leave just the system ID
// Type;DeviceID;
Robotic.Discovery.Source(1).Compute(4).Type="Replace"
Robotic.Discovery.Source(1).Compute(4).Column=2
Robotic.Discovery.Source(1).Compute(4).Replace=".6_MSHW"
Robotic.Discovery.Source(1).Compute(4).ReplaceBy=""

// Instance Table
// Type;DeviceID;
Robotic.Discovery.InstanceTable=%Robotic.Discovery.Source(1)%
Robotic.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Robotic.Discovery.Instance.DisplayID=InstanceTable.Column(1)
// Robotic.Discovery.Instance.RoboticType=InstanceTable.Column(1)

//
// Collect

Robotic.Collect.Type="MultiInstance"

// Source(1) = 		Global RAS SNMP table
// DeviceID;Status;
Robotic.Collect.Source(1).Type="SnmpTable"
Robotic.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
Robotic.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;
Robotic.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Robotic.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;
Robotic.Collect.Source(1).Compute(2).Type="Translate"
Robotic.Collect.Source(1).Compute(2).Column="2"
Robotic.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(3).Type="Translate"
Robotic.Collect.Source(1).Compute(3).Column="3"
Robotic.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Add Marker to the End of the DeviceID
// DeviceID;PATROLStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(4).Type="RightConcat"
Robotic.Collect.Source(1).Compute(4).Column=1
Robotic.Collect.Source(1).Compute(4).String="_MSHW"

// Remove the last digit (the type of sensor) to leave just the system ID
// DeviceID;PATROLStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(5).Type="Replace"
Robotic.Collect.Source(1).Compute(5).Column=1
Robotic.Collect.Source(1).Compute(5).Replace=".6_MSHW"
Robotic.Collect.Source(1).Compute(5).ReplaceBy=""


// Value Table
// DeviceID;PATROLStatus;StatusInformation;
Robotic.Collect.ValueTable=%Robotic.Collect.Source(1)%
Robotic.Collect.DeviceID=ValueTable.Column(1)
Robotic.Collect.Status=ValueTable.Column(2)
Robotic.Collect.StatusInformation=ValueTable.Column(3)

// OtherDevice

// Source(1) = 	Global RAS SNMP table
// DeviceID;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID"

// Keep only the correct type of group
// DeviceID;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).Regexp="2$"

// Add a Type of "Global"
// Type;DeviceID;
OtherDevice.Discovery.Source(1).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(2).Column=1
OtherDevice.Discovery.Source(1).Compute(2).String="Control System;"

// Add a DisplayID
// Type;DeviceID;DisplayID;
OtherDevice.Discovery.Source(1).Compute(3).Type="RightConcat"
OtherDevice.Discovery.Source(1).Compute(3).Column=2
OtherDevice.Discovery.Source(1).Compute(3).String=";Global"

// Source(2) = 	Component Table
// Type;DeviceID;DisplayID;
OtherDevice.Discovery.Source(2).Type="SnmpTable"
OtherDevice.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.3764.1.1.30.10.1"
OtherDevice.Discovery.Source(2).SnmpTableSelectColumns="3,ID,5"

// Union of 1 & 2
// Type;DeviceID;DisplayID;
OtherDevice.Discovery.Source(3).Type="TableUnion"
OtherDevice.Discovery.Source(3).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(3).Table2=%OtherDevice.Discovery.Source(2)%

// Instance Table
// Type;DeviceID;DisplayID;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(1)

//
// Collect

OtherDevice.Collect.Type="MultiInstance"

// Source(1) = 		Global RAS SNMP table
// DeviceID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.20.100.10.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column="2"
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column="3"
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Add Marker to the End of the DeviceID
// DeviceID;PATROLStatus;StatusInformation;
// OtherDevice.Collect.Source(1).Compute(4).Type="RightConcat"
// OtherDevice.Collect.Source(1).Compute(4).Column=1
// OtherDevice.Collect.Source(1).Compute(4).String="_MSHW"

// Remove the last digit (the type of sensor) to leave just the system ID
// DeviceID;PATROLStatus;StatusInformation;
// OtherDevice.Collect.Source(1).Compute(5).Type="Replace"
// OtherDevice.Collect.Source(1).Compute(5).Column=1
// OtherDevice.Collect.Source(1).Compute(5).Replace=".2_MSHW"
// OtherDevice.Collect.Source(1).Compute(5).ReplaceBy=""

// Source(2) = 	Component Table
// DeviceID;Status
OtherDevice.Collect.Source(2).Type="SnmpTable"
OtherDevice.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.3764.1.1.30.10.1"
OtherDevice.Collect.Source(2).SnmpTableSelectColumns="ID,8"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;
OtherDevice.Collect.Source(2).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(2).Compute(1).Column=2

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;
OtherDevice.Collect.Source(2).Compute(2).Type="Translate"
OtherDevice.Collect.Source(2).Compute(2).Column=2
OtherDevice.Collect.Source(2).Compute(2).TranslationTable="EnclosureStatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(2).Compute(3).Type="Translate"
OtherDevice.Collect.Source(2).Compute(3).Column=3
OtherDevice.Collect.Source(2).Compute(3).TranslationTable="EnclosureStatusInformationTranslationTable"

// Union of 1 & 2
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(3).Type="TableUnion"
OtherDevice.Collect.Source(3).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(3).Table2=%OtherDevice.Collect.Source(2)%

// Value Table
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)


// Voltage
// Source(1) = 	Voltage Table
// DeviceID;Name;WarningLow;WarningHigh;location
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.20.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,2,8,9,10"

// Add a space and the Location to the Name
// DeviceID;Name;WarningLow;WarningHigh;location
Voltage.Discovery.Source(1).Compute(1).Type="RightConcat"
Voltage.Discovery.Source(1).Compute(1).Column=2
Voltage.Discovery.Source(1).Compute(1).String=" "

Voltage.Discovery.Source(1).Compute(2).Type="RightConcat"
Voltage.Discovery.Source(1).Compute(2).Column=2
Voltage.Discovery.Source(1).Compute(2).String=Column(5)

// Remove Voltage and Sensor from the Name
// DeviceID;Name;WarningLow;WarningHigh;location
Voltage.Discovery.Source(1).Compute(3).Type="Replace"
Voltage.Discovery.Source(1).Compute(3).Column=2
Voltage.Discovery.Source(1).Compute(3).Replace=" Voltage"
Voltage.Discovery.Source(1).Compute(3).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(4).Type="Replace"
Voltage.Discovery.Source(1).Compute(4).Column=2
Voltage.Discovery.Source(1).Compute(4).Replace=" Sensor"
Voltage.Discovery.Source(1).Compute(4).ReplaceBy=""



// DeviceID;Type;WarningLow;WarningHigh;location
Voltage.Discovery.Source(1).Compute(5).Type="Awk"
Voltage.Discovery.Source(1).Compute(5).AwkScript=EmbeddedFile(2)

// Here is the instance table = source(1)
// DeviceID;Type;WarningLow;WarningHigh;location
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)
// Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(3)


//
// Collect

Voltage.Collect.Type="MultiInstance"

// Source(1) = 	Voltage Table
// DeviceID;Status;Voltage;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.20.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;Voltage;
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;Voltage;
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="2"
Voltage.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;Voltage;
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(4)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)

// Temperature

// Source(1) = 	Temperature Table
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.30.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,6,8,9"

// Exclude Sensors with a Status of "7" (No Data)
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
Temperature.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=3
Temperature.Discovery.Source(1).Compute(1).ValueList="7"

// Remove Thresholds of Zero
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
Temperature.Discovery.Source(1).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(2).Column=5
Temperature.Discovery.Source(1).Compute(2).String="MSHW_"
Temperature.Discovery.Source(1).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(3).Column=6
Temperature.Discovery.Source(1).Compute(3).String="MSHW_"

Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=5
Temperature.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""
Temperature.Discovery.Source(1).Compute(5).Type="Replace"
Temperature.Discovery.Source(1).Compute(5).Column=6
Temperature.Discovery.Source(1).Compute(5).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(5).ReplaceBy=""

// Remove MSHW_ for non blank / non zero values
Temperature.Discovery.Source(1).Compute(6).Type="Replace"
Temperature.Discovery.Source(1).Compute(6).Column=5
Temperature.Discovery.Source(1).Compute(6).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(6).ReplaceBy=""
Temperature.Discovery.Source(1).Compute(7).Type="Replace"
Temperature.Discovery.Source(1).Compute(7).Column=6
Temperature.Discovery.Source(1).Compute(7).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(7).ReplaceBy=""

// Add a space and the Location to the Name
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
Temperature.Discovery.Source(1).Compute(8).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(8).Column=2
Temperature.Discovery.Source(1).Compute(8).String=" "

Temperature.Discovery.Source(1).Compute(9).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(9).Column=2
Temperature.Discovery.Source(1).Compute(9).String=Column(7)

// Remove Voltage and Sensor from the Name
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;Location;
Temperature.Discovery.Source(1).Compute(10).Type="Replace"
Temperature.Discovery.Source(1).Compute(10).Column=2
Temperature.Discovery.Source(1).Compute(10).Replace=" Temperature"
Temperature.Discovery.Source(1).Compute(10).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(11).Type="Replace"
Temperature.Discovery.Source(1).Compute(11).Column=2
Temperature.Discovery.Source(1).Compute(11).Replace=" Sensor"
Temperature.Discovery.Source(1).Compute(11).ReplaceBy=""


// Here is the instance table = source(1)
// DeviceID;Name;Status;Temperature;NominalHigh;WarningHigh;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
// Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(6)

//
// Collect

Temperature.Collect.Type="MultiInstance"

// Source(1) = 	Temperature Table
// DeviceID;Status;Temperature;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.30.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;Temperature;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;Temperature;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column="2"
Temperature.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;Temperature;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column="3"
Temperature.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(4)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)


// Fan
// Source(1) = 	Fan Table
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.40.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5,7,9"

// Exclude Sensors with a Status of "7" (No Data)
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;
Fan.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=3
Fan.Discovery.Source(1).Compute(1).ValueList="7"

// Remove Thresholds of Zero
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
Fan.Discovery.Source(1).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(2).Column=5
Fan.Discovery.Source(1).Compute(2).String="MSHW_"
Fan.Discovery.Source(1).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(3).Column=6
Fan.Discovery.Source(1).Compute(3).String="MSHW_"

Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=5
Fan.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Fan.Discovery.Source(1).Compute(4).ReplaceBy=""
Fan.Discovery.Source(1).Compute(5).Type="Replace"
Fan.Discovery.Source(1).Compute(5).Column=6
Fan.Discovery.Source(1).Compute(5).Replace="MSHW_0"
Fan.Discovery.Source(1).Compute(5).ReplaceBy=""

// Remove MSHW_ for non blank / non zero values
Fan.Discovery.Source(1).Compute(6).Type="Replace"
Fan.Discovery.Source(1).Compute(6).Column=5
Fan.Discovery.Source(1).Compute(6).Replace="MSHW_"
Fan.Discovery.Source(1).Compute(6).ReplaceBy=""
Fan.Discovery.Source(1).Compute(7).Type="Replace"
Fan.Discovery.Source(1).Compute(7).Column=6
Fan.Discovery.Source(1).Compute(7).Replace="MSHW_"
Fan.Discovery.Source(1).Compute(7).ReplaceBy=""

// Add a space and the Location to the Name
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
Fan.Discovery.Source(1).Compute(8).Type="RightConcat"
Fan.Discovery.Source(1).Compute(8).Column=2
Fan.Discovery.Source(1).Compute(8).String=" "

Fan.Discovery.Source(1).Compute(9).Type="RightConcat"
Fan.Discovery.Source(1).Compute(9).Column=2
Fan.Discovery.Source(1).Compute(9).String=Column(7)

// Remove Voltage and Sensor from the Name
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;Location;
Fan.Discovery.Source(1).Compute(10).Type="Replace"
Fan.Discovery.Source(1).Compute(10).Column=2
Fan.Discovery.Source(1).Compute(10).Replace=" Fan"
Fan.Discovery.Source(1).Compute(10).ReplaceBy=""

Fan.Discovery.Source(1).Compute(11).Type="Replace"
Fan.Discovery.Source(1).Compute(11).Column=2
Fan.Discovery.Source(1).Compute(11).Replace=" Sensor"
Fan.Discovery.Source(1).Compute(11).ReplaceBy=""

// Here is the instance table = source(1)
// DeviceID;Type;Status;Speed;NominalLow;WarningLow;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
// Fan.Discovery.Instance.FanType=InstanceTable.Column(2)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(6)

//
// Collect

Fan.Collect.Type="MultiInstance"

// Source(1) = 	Fan Table
// DeviceID;Status;Speed;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3764.1.1.200.200.40.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Duplicate status, because we will translate it two times
// DeviceID;Status;Status;Speed;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// DeviceID;PATROLStatus;Status;Speed;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// DeviceID;PATROLStatus;StatusInformation;Speed;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(4)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


// The StatusTranslationTable
CleaningStatusTranslationTable(1)="1"
CleaningStatusTranslationTable(2)="0"
CleaningStatusTranslationTable(3)="2"
CleaningStatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
CleaningStatusInformationTranslationTable(1)=" Cleaning Required"
CleaningStatusInformationTranslationTable(2)=""
CleaningStatusInformationTranslationTable(3)=" Immediate Cleaning Required"
CleaningStatusInformationTranslationTable(0)=""
CleaningStatusInformationTranslationTable(Default)=" Unknown Cleaning Status"


// The StatusTranslationTable
StatusTranslationTable(1)="OK"
StatusTranslationTable(2)="ALARM"
StatusTranslationTable(3)="WARN"
StatusTranslationTable(4)="WARN"
StatusTranslationTable(5)="WARN"
StatusTranslationTable(6)="UNKNOWN"
StatusTranslationTable(7)="ALARM"
StatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
StatusInformationTranslationTable(1)=""
StatusInformationTranslationTable(2)="Failed"
StatusInformationTranslationTable(3)="Degraded"
StatusInformationTranslationTable(4)="Warning"
StatusInformationTranslationTable(5)="Informational"
StatusInformationTranslationTable(6)="Unknown"
StatusInformationTranslationTable(7)="Invalid"
StatusInformationTranslationTable(Default)="Unknown Status"

/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    Extract the location from the Tape Drive ID
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[;]"}
$1 ~ /^[0-9.]+$/ {split($1,ID,".");
	                deviceID = $1
	                displayID = ID[12] "," ID[13] "," ID[14] "," ID[15] "," ID[16] "," ID[17]
	                location = "Location: Aisle: " ID[12] " Frame: " ID[13] " Rack: " ID[14] " Section: " ID[15] " Col: " ID[16] " Row: " ID[17]
	                print "MSHW;" $0 displayID ";" location ";"
	               }
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parses
/// The voltage thresholds and returns the sensors with valid thresholds
//  input:
// DeviceID;Type;WarningLow;WarningHigh;
// output:
// DeviceID;Type;WarningLow;WarningHigh;
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS=";";}
{
	if ($3 != 0 && $4 !=0)
	{
		print $0
	}
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
