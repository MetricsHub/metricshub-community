//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//                 MS_HW_NvidiaSmi.hdf
//
//      Supports: Systems with Nvidia GPU drivers
//		Monitors: Nvidia GPUs (Memory, Temp, Fans, Clock, etc.)
//      Connects to: OS via ssh. Supported on both Windows and Linux platforms.
//
//

//
// HEADER
//

hdf.DisplayName="Nvidia-Smi"
hdf.TypicalPlatform="Any system with Nvidia GPUs"
hdf.ReliesOn="NVIDIA drivers with NVIDIA-SMI support."
hdf.Comments="Gives hardware information on most Nvidia GPUs. (Clocking)"
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"

//
// DETECTION
//

// Checks that nvidia-smi is present on target host

Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="nvidia-smi"
Detection.Criteria(1).ExpectedResult="Driver Version"
Detection.Criteria(1).ErrorMessage="nvidia-smi not found at target host."

//
// Discovery

// Source(1) = Output of the nvidia-smi command through OS Commands

Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="nvidia-smi -q"
Enclosure.Discovery.Source(1).TimeOut=90

// Parse the output of nvidia-smi -q with an AWK script for discovery of the GPU class
// MSHW_GPU;gpuID;transferredBytes;receivedBytes;gpuUtilization;memoryUtilization;encoderUtilization;decoderUtilization;powerConsumption;minPowerLimit;maxPowerLimit;correctable;uncorrectable;model;serialNumber;gpuUuid + vBios;driverVersion;cudaVersion;firmwareVersion;totalMemory

Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
// Make a copy of source 1 so a clean copy can be used by other collects

GPU.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only properties of the GPU class

GPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
GPU.Discovery.Source(1).Compute(1).Column=1
GPU.Discovery.Source(1).Compute(1).RegExp="^MSHW_GPU"


// InstanceTable = source (1)
// MSHW_GPU;gpuID;transferredBytes;receivedBytes;gpuUtilization;memoryUtilization;encoderUtilization;decoderUtilization;powerConsumption;minPowerLimit;maxPowerLimit;correctable;uncorrectable;model;serialNumber;gpuUuid + vBios;driverVersion;cudaVersion;firmwareVersion;totalMemory

GPU.Discovery.InstanceTable=%GPU.Discovery.Source(1)%
GPU.Discovery.Instance.Vendor="NVIDIA"
GPU.Discovery.Instance.DeviceID=InstanceTable.Column(2)
GPU.Discovery.Instance.DisplayID=InstanceTable.Column(2)
GPU.Discovery.Instance.Model=InstanceTable.Column(14)
GPU.Discovery.Instance.SerialNumber=InstanceTable.Column(15)
GPU.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(16)
GPU.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(18)
GPU.Discovery.Instance.DriverVersion=InstanceTable.Column(17)
GPU.Discovery.Instance.FirmwareVersion=InstanceTable.Column(19)
GPU.Discovery.Instance.Size=InstanceTable.Column(20)

// GPU Collect
// Collect type is multi-instance

GPU.Collect.Type="MultiInstance"

// Source = Output of nvidia-smi -q

GPU.Collect.Source(1).Type="OSCommand"
GPU.Collect.Source(1).CommandLine="nvidia-smi -q"
GPU.Collect.Source(1).TimeOut=90

// Parse the output of nvidia-smi -q with an AWK script for discovery of the GPU class
// MSHW_GPU;gpuID;transferredBytes;receivedBytes;gpuUtilization;memoryUtilization;encoderUtilization;decoderUtilization;powerConsumption;minPowerLimit;maxPowerLimit;correctable;uncorrectable;model;serialNumber;gpuUuid + vBios;driverVersion;cudaVersion;firmwareVersion;totalMemory

GPU.Collect.Source(1).Compute(1).Type="Awk"
GPU.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
GPU.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
GPU.Collect.Source(1).Compute(2).Column=1
GPU.Collect.Source(1).Compute(2).RegExp="^MSHW_GPU"

// ValueTable = Source(1)
// MSHW_GPU;gpuID;transferredBytes;receivedBytes;gpuUtilization;memoryUtilization;encoderUtilization;decoderUtilization;powerConsumption;minPowerLimit;maxPowerLimit;correctable;uncorrectable;model;serialNumber;gpuUuid + vBios;driverVersion;cudaVersion;firmwareVersion;correctable;uncorrectable

GPU.Collect.ValueTable=%GPU.Collect.Source(1)%
GPU.Collect.DeviceID=ValueTable.Column(2)
GPU.Collect.UsedTimePercent=ValueTable.Column(5)
GPU.Collect.MemoryUtilization=ValueTable.Column(6)
GPU.Collect.EncoderUsedTimePercent=ValueTable.Column(7)
GPU.Collect.DecoderUsedTimePercent=ValueTable.Column(8)
GPU.Collect.TransmittedBytesRate=ValueTable.Column(3)
GPU.Collect.ReceivedBytesRate=ValueTable.Column(4)
GPU.Collect.PowerConsumption=ValueTable.Column(9)
// GPU.Collect.CorrectedErrorCount=ValueTable.Column(12)
// GPU.Collect.ErrorCount=ValueTable.Column(13)

// Temperature Discovery
// Source(1) = copy of Enclosure.Discovery.Source(1)

Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only properties of the temperature class

Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).RegExp="^MSHW_TEMP"

// InstanceTable = Source(1)
// MSHW_TEMP;gpuID;temperature;warnTemperature;critTemperature

Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.TemperatureType="GPU"

// Temperature Collect
// Collect type is multi-instance

Temperature.Collect.Type="MultiInstance"

// Source(1) = Output of the nvidia-smi command through OS Commands

Temperature.Collect.Source(1).Type="OSCommand"
Temperature.Collect.Source(1).CommandLine="nvidia-smi -q"
Temperature.Collect.Source(1).TimeOut=90

// Parse the output of nvidia-smi -q with an AWK script for discovery of the Temperature class

Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(2).Column=1
Temperature.Collect.Source(1).Compute(2).RegExp="^MSHW_TEMP"

// ValueTable = Source (1)
// MSHW_TEMP;gpuID;temperature;warnTemperature;critTemperature

Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(3)

// Source(1) = copy of Enclosure.Discovery.Source(1)

Voltage.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only properties of the voltage class

Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=1
Voltage.Discovery.Source(1).Compute(1).RegExp="^MSHW_VOLTAGE"

// Only discover if there is a voltage collected

Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=3
Voltage.Discovery.Source(1).Compute(1).RegExp="."

// InstanceTable = Source(1)
// MSHW_VOLTAGE;gpuID;Voltage

Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Voltage.Discovery.Instance.VoltageType="GPU"

// Voltage Collect
// Collect type is multi-instance

Voltage.Collect.Type="MultiInstance"

// Source(1) = Output of the nvidia-smi command through OS Commands

Voltage.Collect.Source(1).Type="OSCommand"
Voltage.Collect.Source(1).CommandLine="nvidia-smi -q"
Voltage.Collect.Source(1).TimeOut=90

// Parse the output of nvidia-smi -q with an AWK script for discovery of the voltage class

Voltage.Collect.Source(1).Compute(1).Type="Awk"
Voltage.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Voltage.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Voltage.Collect.Source(1).Compute(2).Column=1
Voltage.Collect.Source(1).Compute(2).RegExp="^MSHW_VOLTAGE"

// ValueTable = Source (1)
// MSHW_TEMP;gpuID;Voltage

Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Voltage=ValueTable.Column(3)

// Source(1) = copy of Enclosure.Discovery.Source(1)

Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only properties of the fan class

Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).RegExp="^MSHW_FAN"

// InstanceTable = Source(1)
// MSHW_FAN;gpuID;fanSpeed

Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.FanType="GPU"
Fan.Discovery.Instance.PercentWarningThreshold=10
Fan.Discovery.Instance.PercentAlarmThreshold=0

// Fan Collect
// Collect type is multi-instance

Fan.Collect.Type="MultiInstance"

// Keep only properties of the fan class

Fan.Collect.Source(1).Type="OSCommand"
Fan.Collect.Source(1).CommandLine="nvidia-smi -q"
Fan.Collect.Source(1).TimeOut=90

// Parse the output of nvidia-smi -q with an AWK script for discovery of the Fan class

Fan.Collect.Source(1).Compute(1).Type="Awk"
Fan.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Fan.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(2).Column=1
Fan.Collect.Source(1).Compute(2).RegExp="^MSHW_FAN"

// ValueTable = Source (1)
// MSHW_TEMP;gpuID;fanSpeed

Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.SpeedPercent=ValueTable.Column(3)


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parses the output of nvidia-smi -q
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):

BEGIN { FS = ": "; gpuID=""; model = ""; serialNumber = ""; gpuUuid = ""; vBios = ""; driverVersion = ""; cudaVersion = ""; firmwareVersion = ""; transferredBytes = ""; receivedBytes =""; gpuUtilization =""; memoryUtilization =""; encoderUtilization =""; decoderUtilization =""; fanSpeed =""; voltage =""; temperature =""; warnTemperature =""; critTemperature =""; powerConsumption =""; minPowerLimit =""; maxPowerLimit =""; correctable=""; uncorrectable="";totalMemory=""}

#Discovery related values and informative fields.

/GPU 0/ {split($0,outputarray,":"); gpuID=outputarray[2];}
/Product Name/ { model = $2; }
/Serial Number/ && /[0-9]/ { serialNumber = $2; }
/GPU UUID/ { gpuUuid = "GPU UUID: " $2; }
/VBIOS Version/ { vBios = " VBIOS Version: " $2; }
/Driver Version/ { driverVersion = $2; }
/CUDA Version/ { cudaVersion = "CUDA Version: " $2; }
/Firmware Version/ && /[0-9]/ { firmwareVersion = $2;}
/FB Memory Usage/ { getline; totalMemory = $2; gsub(/ MiB/,"",totalMemory)}

#Collection related values and removal of units of measurement.

/Tx Throughput/ && /[0-9]/  { transferredBytes = $2; gsub(/ KB\/s/,"",transferredBytes); }
/Rx Throughput/ && /[0-9]/  { receivedBytes = $2; gsub(/ KB\/s/,"",receivedBytes); }
/Gpu/ && /%/ { gpuUtilization = $2; gsub(/ %/,"",gpuUtilization); }
/Memory/ && /%/ { memoryUtilization = $2; gsub(/ %/,"",memoryUtilization); }
/Encoder/ && /%/ { encoderUtilization = $2; gsub(/ %/,"",encoderUtilization); }
/Decoder/ && /%/ { decoderUtilization = $2; gsub(/ %/,"",decoderUtilization); }

#We will now extract and do the sum of the ecc errors.
#/Correctable/ && /[0-9]/  { correctable+=$2; }
#/Uncorrectable/ && /[0-9]/  { uncorrectable+=$2; }

#We will now extract the power consumption.

/Power Draw/ && /[0-9]/  { powerConsumption = $2; gsub(/ W/,"",powerConsumption); }
/Min Power Limit/ && /[0-9]/  { minPowerLimit = $2; gsub(/ W/,"",minPowerLimit); }
/Max Power Limit/ && /[0-9]/  { maxPowerLimit = $2; gsub(/ W/,"",maxPowerLimit);}

#TBD IF REQUIRED.
#Parsing through the file to gather the clock speeds. As there are several iterations of these strings, we had to isolate them.

#/^    Clocks$/ { for(i=1; i<=4; i++);
#  IF (/Graphics/) getline; graphicsClock = $2; gsub(/ MHz/,"",graphicsClock);
#  IF (/SM/) getline; smClock = $2; gsub(/ MHz/,"",smClock);
#  IF (/Memory/) getline; memoryClock = $2; gsub(/ MHz/,"",memoryClock);
#  IF (/Video/) getline; videoClock = $2; gsub(/ MHz/,"",videoClock); }

#Collection of fan class values and removal of units of measurement.

/Fan Speed/ && /[0-9]/  { fanSpeed =$2; gsub(/ %/,"",fanSpeed);}

#Collection of voltage class values and removal of units of measurement.
/Voltage/ {getline; if (/[0-9]/) voltage = $2; gsub(/ mV/,"",voltage)}

#We will now extract the temperature along with its thresholds.
/GPU Current Temp/ && /[0-9]/  { temperature = $2; gsub(/ C/,"",temperature); }
/GPU Target Temperature/ && /[0-9]/  { warnTemperature = $2; gsub(/ C/,"",warnTemperature); }
/GPU Slowdown Temp/ && /[0-9]/  { critTemperature = $2; gsub(/ C/,"",critTemperature);}


#We will now print all the relevant information, separated by classes. Processes being the last category, this will allow us to print these at the end of each card.
#We then reset all variables to empty values for the next card.

/Processes/ {
print "MSHW_GPU;" "GPU" gpuID ";" transferredBytes * 1024 ";" receivedBytes * 1024 ";" gpuUtilization ";" memoryUtilization ";" encoderUtilization ";" decoderUtilization ";"powerConsumption ";" minPowerLimit ";" maxPowerLimit ";" correctable ";" uncorrectable ";" model ";" serialNumber ";" gpuUuid vBios ";" driverVersion ";" cudaVersion ";" firmwareVersion ";" totalMemory;
print "MSHW_TEMP;" "GPU" gpuID ";" temperature ";" warnTemperature ";" critTemperature;
print "MSHW_VOLTAGE;" "GPU" gpuID ";" voltage;
print "MSHW_FAN;" "GPU" gpuID ";" fanSpeed ;
gpuID=""; model = ""; serialNumber = ""; gpuUuid = ""; vBios = ""; driverVersion = ""; cudaVersion = ""; firmwareVersion = ""; transferredBytes = ""; receivedBytes =""; gpuUtilization =""; memoryUtilization =""; encoderUtilization =""; decoderUtilization =""; fanSpeed =""; voltage =""; temperature =""; warnTemperature =""; critTemperature =""; powerConsumption =""; minPowerLimit =""; maxPowerLimit =""; correctable=""; uncorrectable="";totalMemory=""}

EmbeddedFile(1).End
