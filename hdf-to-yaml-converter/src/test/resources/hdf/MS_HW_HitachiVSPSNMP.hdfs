////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Hitachi embedded SNMP agent on VSPs
//

//
// Header
//

hdf.DisplayName="Hitachi HDS USP/VSP (SNMP)"
hdf.TypicalPlatform="Hitachi USP,Hitachi VSP"
hdf.ReliesOn="Hitachi SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector discovers the overall (global) status of Hitachi USP/VSP's Processors, CSW, Cache, SM, Power Supplies, Batteries, Fans, Physical Disks and Environment."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"


// Supersedes the existing SMIS Disk Array Connector
hdf.Supersedes="MS_HW_SMISDiskArray.hdf,MS_HW_HitachiDiskArray.hdf"

// Check that there are VSP OIDs
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.116.5.11.4.1.1.6.1"


// Enclosure

//

// RaidList Table
// SerialNumber;NickName;MainVersion;ProductName
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.5"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;NickName;MainVersion;ProductName
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="RaidList;"

// DKCHW Table
// SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.6"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
Enclosure.Discovery.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).String="DKCHW;"

// DKUH Table
// SerialNumber;PS;Fan;Environment;Drive;
Enclosure.Discovery.Source(3).Type="SnmpTable"
Enclosure.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.7"
Enclosure.Discovery.Source(3).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;PS;Fan;Environment;Drive;
Enclosure.Discovery.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(1).Column=1
Enclosure.Discovery.Source(3).Compute(1).String="DKUH;"

// Union all the discovery tables
// Table;SerialNumber;....
Enclosure.Discovery.Source(4).Type="TableUnion"
Enclosure.Discovery.Source(4).Table1=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(4).Table2=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(4).Table3=%Enclosure.Discovery.Source(3)%


// Take this screwed up table and analyze it
// MSHW_....
Enclosure.Discovery.Source(4).Compute(1).Type="Awk"
Enclosure.Discovery.Source(4).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(4).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(4).Compute(1).Separators=";"

// Take a copy of Enclosure Discovery 4
Enclosure.Discovery.Source(5)=%Enclosure.Discovery.Source(4)%

// Keep only Enclosures
// Class;SerialNumber;DeviceID;Firmware;DisplayID;
Enclosure.Discovery.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(5).Compute(1).Column=1
Enclosure.Discovery.Source(5).Compute(1).ValueList="MSHW_ENC"

// Translate ProductName into ModelName
// Class;SerialNumber;DeviceID;Firmware;DisplayID;
Enclosure.Discovery.Source(5).Compute(2).Type="Translate"
Enclosure.Discovery.Source(5).Compute(2).Column=5
Enclosure.Discovery.Source(5).Compute(2).TranslationTable="modelTranslationTable"

// The vendorTranslationTable
modelTranslationTable("RAID700")="VSP"
modelTranslationTable("RAID600")="USP_V"
modelTranslationTable("RAID500")="USP"
modelTranslationTable("RAID450")="Lightning 9900V"
modelTranslationTable("RAID400")="Lightning 9900"
// modelTranslationTable("HM800")="G200"
// modelTranslationTable(Default)=""


// Instance Table
// Class;SerialNumber;DeviceID;Firmware;DisplayID;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(5)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Vendor="Hitachi"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(5)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)
Enclosure.Discovery.Instance.BiosVersion=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Storage"


//
// Collect

// Collect type is multi-instance (execute once)
Enclosure.Collect.Type="MultiInstance"

// RaidList Table
// SerialNumber;NickName;MainVersion;ProductName
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.5"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;NickName;MainVersion;ProductName
Enclosure.Collect.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).String="RaidList;"

// DKCHW Table
// SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.6"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;Proessor;CSW;Cache;SM;PS;Battery;Fan;Environment;
Enclosure.Collect.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).String="DKCHW;"

// DKUH Table
// SerialNumber;PS;Fan;Environment;Drive;
Enclosure.Collect.Source(3).Type="SnmpTable"
Enclosure.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.116.5.11.4.1.1.7"
Enclosure.Collect.Source(3).SnmpTableSelectColumns="1"

// Add Identifier
// Table;SerialNumber;PS;Fan;Environment;Drive;
Enclosure.Collect.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(3).Compute(1).Column=1
Enclosure.Collect.Source(3).Compute(1).String="DKUH;"

// Union all the.Collect.tables
// Table;SerialNumber;....
Enclosure.Collect.Source(4).Type="TableUnion"
Enclosure.Collect.Source(4).Table1=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(4).Table2=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(4).Table3=%Enclosure.Collect.Source(3)%


// Take this screwed up table and analyze it
// DeviceClass;AttachedTo;DeviceID;DisplayID;Status;  (Except Enclosures, see later)
Enclosure.Collect.Source(4).Compute(1).Type="Awk"
Enclosure.Collect.Source(4).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(4).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Collect.Source(4).Compute(1).Separators=";"

// Duplicate status
// DeviceClass;AttachedTo;DeviceID;DisplayID;Status;Status;
Enclosure.Collect.Source(4).Compute(2).Type="DuplicateColumn"
Enclosure.Collect.Source(4).Compute(2).Column=5

// Translate Status into PATROLStatus (This will fail on enclosure, but it doesn't matter).
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;Status;
Enclosure.Collect.Source(4).Compute(3).Type="Translate"
Enclosure.Collect.Source(4).Compute(3).Column=5
Enclosure.Collect.Source(4).Compute(3).TranslationTable="statusTranslationTable"

// Translate second Status into more readable string
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
Enclosure.Collect.Source(4).Compute(4).Type="Translate"
Enclosure.Collect.Source(4).Compute(4).Column=6
Enclosure.Collect.Source(4).Compute(4).TranslationTable="statusInformationTranslationTable"

// Take a copy of Enclosure Discovery 4
Enclosure.Collect.Source(5)=%Enclosure.Collect.Source(4)%

// Keep only Enclosures
// Class;SerialNumber;DeviceID;Firmware;DisplayID;
Enclosure.Collect.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(5).Compute(1).Column=1
Enclosure.Collect.Source(5).Compute(1).ValueList="MSHW_ENC"

// ValueTable = Source(1)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)

// The StatusTranslationTable
statusTranslationTable(1)="OK"
statusTranslationTable(2)="ALARM"
statusTranslationTable(3)="ALARM"
statusTranslationTable(4)="WARN"
statusTranslationTable(5)="WARN"
statusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
statusInformationTranslationTable(1)=""
statusInformationTranslationTable(2)="Acute"
statusInformationTranslationTable(3)="Serious"
statusInformationTranslationTable(4)="Moderate"
statusInformationTranslationTable(5)="Service"
statusInformationTranslationTable(Default)="Unknown Status"



//
// Temperature
//

// Discovery
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only Temperatures
// Class;AttachedToID;DeviceID;DisplayID;Status;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).ValueList="MSHW_Temperature"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.TemperatureType="Global"


// Temperature Collect

// Collect is multi-instance (all instances in one shot)
Temperature.Collect.Type="MultiInstance"

Temperature.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(3)
Temperature.Collect.Status=ValueTable.Column(5)
Temperature.Collect.StatusInformation=ValueTable.Column(6)

//
// CPU
//

// Discovery
CPU.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only CPUs
// Class;AttachedToID;DeviceID;DisplayID;Status;
CPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=1
CPU.Discovery.Source(1).Compute(1).ValueList="MSHW_CPU"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(4)
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(3)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
CPU.Discovery.Instance.Model="Global"


// CPU Collect

// Collect is multi-instance (all instances in one shot)
CPU.Collect.Type="MultiInstance"

CPU.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(3)
CPU.Collect.Status=ValueTable.Column(5)
CPU.Collect.StatusInformation=ValueTable.Column(6)


//
// Battery
//

// Discovery
Battery.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only Batterys
// Class;AttachedToID;DeviceID;DisplayID;Status;
Battery.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=1
Battery.Discovery.Source(1).Compute(1).ValueList="MSHW_Battery"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Battery.Discovery.Instance.Type="Global"


// Battery Collect

// Collect is multi-instance (all instances in one shot)
Battery.Collect.Type="MultiInstance"

Battery.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(3)
Battery.Collect.Status=ValueTable.Column(5)
Battery.Collect.StatusInformation=ValueTable.Column(6)

//
// Memory
//

// Discovery
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only Memorys
// Class;AttachedToID;DeviceID;DisplayID;Status;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).ValueList="MSHW_Memory"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Memory.Discovery.Instance.Type="Global"


// Memory Collect

// Collect is multi-instance (all instances in one shot)
Memory.Collect.Type="MultiInstance"

Memory.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(3)
Memory.Collect.Status=ValueTable.Column(5)
Memory.Collect.StatusInformation=ValueTable.Column(6)


//
// PhysicalDisk
//

// Discovery
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only PhysicalDisks
// Class;AttachedToID;DeviceID;DisplayID;Status;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="MSHW_PhysicalDisk"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.AdditionalInformation1="Type: Global"


// PhysicalDisk Collect

// Collect is multi-instance (all instances in one shot)
PhysicalDisk.Collect.Type="MultiInstance"

PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(3)
PhysicalDisk.Collect.Status=ValueTable.Column(5)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(6)


//
// PowerSupply
//

// Discovery
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only PowerSupplys
// Class;AttachedToID;DeviceID;DisplayID;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).ValueList="MSHW_PSU"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.PowerSupplyType="Global"


// PowerSupply Collect

// Collect is multi-instance (all instances in one shot)
PowerSupply.Collect.Type="MultiInstance"

PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(5)
PowerSupply.Collect.StatusInformation=ValueTable.Column(6)

//
// Fan
//

// Discovery
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only Fans
// Class;AttachedToID;DeviceID;DisplayID;Status;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).ValueList="MSHW_Fan"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.FanType="Global"


// Fan Collect

// Collect is multi-instance (all instances in one shot)
Fan.Collect.Type="MultiInstance"

Fan.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(3)
Fan.Collect.Status=ValueTable.Column(5)
Fan.Collect.StatusInformation=ValueTable.Column(6)

//
// OtherDevice
//

// Discovery
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(4)%

// Keep Only OtherDevices
// Class;AttachedToID;DeviceID;DisplayID;Status;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).ValueList="MSHW_Other"

// InstanceTable
// Class;AttachedToID;DeviceID;DisplayID;Status;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DeviceType="Internal Bus"


// OtherDevice Collect

// Collect is multi-instance (all instances in one shot)
OtherDevice.Collect.Type="MultiInstance"

OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(4)%

// ValueTable = Source(1)
// DeviceClass;AttachedTo;DeviceID;DisplayID;PATROLStatus;StatusInformation;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(3)
OtherDevice.Collect.Status=ValueTable.Column(5)
OtherDevice.Collect.StatusInformation=ValueTable.Column(6)

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that cleans up the mess of the SNMP Tables
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN{RaidList=1;DKCHW=1;DKUH=1;FS="[;]"};

$1 == "RaidList" {
	if (RaidList==1 || $2 ~ /^[0-9][0-9][0-9][0-9]/) { EnclosureSerialNumber = $2 ; RaidList = 2 ; next}
	else if (RaidList==2) { EnclosureFullName = $2 "." EnclosureSerialNumber ; EnclosureFullNameList[EnclosureSerialNumber] = EnclosureFullName ; RaidList = 3 ; next}
	else if (RaidList==3) { EnclosureFirmwareVersion = $2 ; RaidList = 4 ; next}
	else if (RaidList==4) { EnclosureProductVersion = $2; RaidList = 1 ;
		                      print "MSHW_ENC;" EnclosureSerialNumber ";" EnclosureFullName  ";" EnclosureFirmwareVersion ";" EnclosureProductVersion ";"
		                      next}
	}
$1 == "DKCHW" {
	if (DKCHW==1 || $2 ~ /^[0-9][0-9][0-9][0-9]/) { EnclosureSerialNumber = $2 ; DKCHW = 2 ; next}
	else if (DKCHW==2) { print "MSHW_CPU;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-Controller" ";DKC-Controllers;" $2 ";" ; DKCHW = 3 ; next}
	else if (DKCHW==3) { print "MSHW_Other;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-CSW" ";DKC-CSW;" $2 ";" ; DKCHW = 4 ; next}
	else if (DKCHW==4) { print "MSHW_Memory;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-Cache" ";DKC-Cache;" $2 ";" ; DKCHW = 5 ; next}
	else if (DKCHW==5) { print "MSHW_Memory;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-SystemMemory" ";DKC-SystemMemory;" $2 ";" ; DKCHW = 6 ; next}
	else if (DKCHW==6) { print "MSHW_PSU;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-PSU" ";DKC-PowerSupplies;" $2 ";"; DKCHW = 7 ; next}
	else if (DKCHW==7) { print "MSHW_Battery;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-Batteries" ";DKC-Batteries;" $2 ";"; DKCHW = 8 ; next}
	else if (DKCHW==8) { print "MSHW_Fan;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-Fans" ";DKC-Fans;" $2 ";"; DKCHW = 9 ; next}
	else if (DKCHW==9) { print "MSHW_Temperature;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKC-Environment" ";DKC-Environment;" $2 ";"; DKCHW = 1 ; next}
	}

$1 == "DKUH" {
	if (DKUH==1 || $2 ~ /^[0-9][0-9][0-9][0-9]/) { EnclosureSerialNumber = $2 ; DKUH = 2 ; next}
	else if (DKUH==2) { print "MSHW_PSU;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKU-PSU" ";DKU-PowerSupplies;" $2 ";" ; DKUH = 3 ; next}
	else if (DKUH==3) { print "MSHW_Fan;" EnclosureSerialNumber  ";"  EnclosureFullNameList[EnclosureSerialNumber]  "-DKU-Fans" ";DKU-Fans;" $2 ";"; DKUH = 4 ; next}
	else if (DKUH==4) { print "MSHW_Temperature;" EnclosureSerialNumber  ";" EnclosureFullNameList[EnclosureSerialNumber] "-DKU-Environment" ";DKU-Environment;" $2 ";"; DKUH = 5 ; next}
	else if (DKUH==5) { print "MSHW_PhysicalDisk;" EnclosureSerialNumber  ";" EnclosureFullNameList[EnclosureSerialNumber] "-DKU-PhysicalDisks" ";DKU-PhysicalDisks;" $2 ";"; DKUH = 1 ; next}
	}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////
