//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_IntelModularServer
//
//      Supports: Intel Modular Blade Server Systems
//
//

//
// HEADER
//

hdf.DisplayName="Intel Modular Server"
hdf.TypicalPlatform="Intel Modular"
hdf.ReliesOn="Intel Server Manager 8 SNMP Agents"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through the Intel Modular Server Chassis Managament Module's SNMP Agents."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

//
// DETECTION
//

//
// The Enclosure information is rather limited as not all OEMs populate that table.  But the OID should at least be there.
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.343.2.19.1.2.10.1"


//
// ENCLOSURE: Chassis
//

// Get the Platform Description
// There are other informations in the MIB, but Platform Description seems to be the only one populated.
// Others can be added if we ever get an SNMP walk with this information.
// PlatformDescription
Enclosure.Discovery.Source(1).Type="SnmpGet"
Enclosure.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.343.2.19.1.2.10.1.0"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="IntelChassis"
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"

// Collect

// No collect.  There is a Power Consumption OID which could maybe used later, but it is not populated in our SNMPwalk.

// BLADES
// (Modules)
//
// Discovery

// Source(1) = SNMP bladeEntryTable
// ID;Presence;StatusLED
Blade.Discovery.Source(1).Type="SnmpTable"
Blade.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.202.1.1"
Blade.Discovery.Source(1).SnmpTableSelectColumns="ID,2,7"

// Keep only present blades (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
Blade.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(1).Compute(1).Column=2
Blade.Discovery.Source(1).Compute(1).ValueList="1,-4,-2"

// Translating the LED Fault Status (as in collect)
Blade.Discovery.Source(1).Compute(2).Type="Translate"
Blade.Discovery.Source(1).Compute(2).Column=3
Blade.Discovery.Source(1).Compute(2).TranslationTable="LEDStatusTranslationTable"

// Now replace UNKNOWN LED status (Not applicable etc..) with blank so that the parameter does not appear.
Blade.Discovery.Source(1).Compute(3).Type="Replace"
Blade.Discovery.Source(1).Compute(3).Column=3
Blade.Discovery.Source(1).Compute(3).Replace="UNKNOWN"
Blade.Discovery.Source(1).Compute(3).ReplaceBy=""


// InstanceTable = Source(1)
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Blade.Discovery.Instance.AttachedToDeviceID="IntelChassis"
Blade.Discovery.Instance.AttachedToDeviceType="Computer"
Blade.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
Blade.Collect.Type="MultiInstance"

// Source(1) = SNMP bladeEntryTable
// ID;StatusLED
Blade.Collect.Source(1).Type="SnmpTable"
Blade.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.202.1.1"
Blade.Collect.Source(1).SnmpTableSelectColumns="ID,7"

// Translating the LED Fault Status (as in collect)
// ID;StatusLED
Blade.Collect.Source(1).Compute(1).Type="Translate"
Blade.Collect.Source(1).Compute(1).Column=2
Blade.Collect.Source(1).Compute(1).TranslationTable="LEDStatusTranslationTable"

// ValueTable = Source(1)
// ID;StatusLED
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(1)
Blade.Collect.Status=ValueTable.Column(2)




// DISK CONTROLLERS

// Discovery

// Source(1) = the SCM Table
// ID;Presence;Vendor;Model;StatusLED
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.204.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,5,15"

// Keep only present blades (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
// ID;Presence;Vendor;Model;StatusLED
DiskController.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(1).Compute(1).Column=2
DiskController.Discovery.Source(1).Compute(1).ValueList="1,-4,-2"

// Translating the LED Fault Status (as in collect)
// ID;Presence;Vendor;Model;StatusLED
DiskController.Discovery.Source(1).Compute(2).Type="Translate"
DiskController.Discovery.Source(1).Compute(2).Column=5
DiskController.Discovery.Source(1).Compute(2).TranslationTable="LEDStatusTranslationTable"

// Now replace UNKNOWN LED status (Not applicable etc..) with blank so that the parameter does not appear.
// ID;Presence;Vendor;Model;StatusLED
DiskController.Discovery.Source(1).Compute(3).Type="Replace"
DiskController.Discovery.Source(1).Compute(3).Column=5
DiskController.Discovery.Source(1).Compute(3).Replace="UNKNOWN"
DiskController.Discovery.Source(1).Compute(3).ReplaceBy=""

// InstanceTable = Source(1)
// ID;Presence;Vendor;Model;StatusLED
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.ParameterActivation.ControllerStatus=InstanceTable.Column(5)
DiskController.Discovery.Instance.AttachedToDeviceID="IntelChassis"
DiskController.Discovery.Instance.AttachedToDeviceType="Computer"


//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
DiskController.Collect.Type="MultiInstance"

// Source(1) = the SCM Table
// ID;StatusLED
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.204.1.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="ID,15"

// Translating the LED Fault Status (as in collect)
// ID;StatusLED
DiskController.Collect.Source(1).Compute(1).Type="Translate"
DiskController.Collect.Source(1).Compute(1).Column=2
DiskController.Collect.Source(1).Compute(1).TranslationTable="LEDStatusTranslationTable"

// ValueTable = Source(1)
// ID;StatusLED
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)



// PHYSICAL DISKS

// Discovery

// Source(1) = Shared Drives Table
// ID;Presence;Model;Serial;Firmware;Size;ArrayLocation
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.205.2.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,4,5,6,16,11"

// Keep only present blades (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
// ID;Presence;Vendor;Model;StatusLED
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=2
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="1,-4,-2"

PhysicalDisk.Discovery.Source(1).Compute(2).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=7
PhysicalDisk.Discovery.Source(1).Compute(2).String="Location: "

// The instance table = Source(1)
// ID;Presence;Model;Serial;Firmware;Size;ArrayLocation
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID="IntelChassis"
PhysicalDisk.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = Shared Drives Table
// ID;OperationalStatus;PFA;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.205.2.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8,9"

// Translating the Disk Status into a Patrol Status (this can be expanded if we ever know more about potential status than "ok")
// ID;PatrolOperationalStatus;PFA;
PhysicalDisk.Collect.Source(1).Compute(1).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2
PhysicalDisk.Collect.Source(1).Compute(1).TranslationTable="DiskStatusTranslationTable"

DiskStatusTranslationTable("OK")="OK"
DiskStatusTranslationTable(Default)="ALARM"

// Translating the LED Fault Status (as in collect)
// ID;PatrolOperationalStatus;PatrolPFA;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=3
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DiskPFATranslationTable"

DiskPFATranslationTable("OK")="false"
DiskPFATranslationTable(Default)="true"

// ValueTable = Source(1)
// ID;PatrolOperationalStatus;PatrolPFA;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(3)


// FANS

// Discovery

// Source(1) = Fan Fru Table  (FAN Controllers / Modules)
// ID;Presence;FaultLED;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.206.1.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,2,12"

// Keep only present Fans (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
// ID;Presence;FaultLED;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).ValueList="1,-4,-2"

// Translating the LED Fault Status (as in collect)
// ID;Presence;FaultLED;
Fan.Discovery.Source(1).Compute(2).Type="Translate"
Fan.Discovery.Source(1).Compute(2).Column=3
Fan.Discovery.Source(1).Compute(2).TranslationTable="LEDStatusTranslationTable"

// Exclude Fan Modules that have no status
// ID;Presence;FaultLED;
Fan.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).RegExp="UNKNOWN"

// Add columns
// ID;Presence;FaultLED;Type;(MinThreshold);
Fan.Discovery.Source(1).Compute(4).Type="RightConcat"
Fan.Discovery.Source(1).Compute(4).Column=3
Fan.Discovery.Source(1).Compute(4).String=";Fan Module;"

// Source(2) = Fan Table (Actual Fans)
// ID;MinThreshold;
Fan.Discovery.Source(2).Type="SnmpTable"
Fan.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.206.2.1"
Fan.Discovery.Source(2).SnmpTableSelectColumns="ID,2"

// Add columns
// ID;(Presence);(FaultLED);Type;MinThreshold;
Fan.Discovery.Source(2).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(2).Compute(1).Column=2
Fan.Discovery.Source(2).Compute(1).String=";;Fan;"

// Source(3) = Power Supply Fan Table (Actual Fans)
// ID;MinThreshold;
Fan.Discovery.Source(3).Type="SnmpTable"
Fan.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.207.2.1"
Fan.Discovery.Source(3).SnmpTableSelectColumns="ID,2"

// Add columns
// ID;(Presence);(FaultLED);Type;MinThreshold;
Fan.Discovery.Source(3).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(1).Column=2
Fan.Discovery.Source(3).Compute(1).String=";;Power Supply Fan;"

// Add PS- to the ID
// ID;(Presence);(FaultLED);Type;MinThreshold;
Fan.Discovery.Source(3).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(2).Column=1
Fan.Discovery.Source(3).Compute(2).String="PS-"


// Source(4) = Union of (1) and (2) and (3)
// ID;Presence;FaultLED;Type;MinThreshold;
Fan.Discovery.Source(4).Type="TableUnion"
Fan.Discovery.Source(4).Table1=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(4).Table2=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(4).Table3=%Fan.Discovery.Source(3)%

// InstanceTable = Source(4)
// ID;Presence;FaultLED;Type;MinThreshold;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(4)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Fan.Discovery.Instance.FanType=InstanceTable.Column(4)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
Fan.Discovery.Instance.AttachedToDeviceID="IntelChassis"
Fan.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
Fan.Collect.Type="MultiInstance"

// Source(1) = Fan Fru Table  (FAN Controllers / Modules)
// ID;FaultLED;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.206.1.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,12"

// Translating the LED Fault Status
// ID;FaultLED;
Fan.Collect.Source(1).Compute(1).Type="Translate"
Fan.Collect.Source(1).Compute(1).Column=2
Fan.Collect.Source(1).Compute(1).TranslationTable="LEDStatusTranslationTable"

// Add columns
// ID;FaultLED;(Speed);
Fan.Collect.Source(1).Compute(2).Type="RightConcat"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).String=";"

// Source(2) = Fan Table (Actual Fans)
// ID;Speed;
Fan.Collect.Source(2).Type="SnmpTable"
Fan.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.206.2.1"
Fan.Collect.Source(2).SnmpTableSelectColumns="ID,4"

// Add columns
// ID;(FaultLED);Speed;
Fan.Collect.Source(2).Compute(1).Type="LeftConcat"
Fan.Collect.Source(2).Compute(1).Column=2
Fan.Collect.Source(2).Compute(1).String=";"

// Source(3) = Fan Table (Actual Fans)
// ID;Speed;
Fan.Collect.Source(3).Type="SnmpTable"
Fan.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.207.2.1"
Fan.Collect.Source(3).SnmpTableSelectColumns="ID,4"

// Add columns
// ID;(FaultLED);Speed;
Fan.Collect.Source(3).Compute(1).Type="LeftConcat"
Fan.Collect.Source(3).Compute(1).Column=2
Fan.Collect.Source(3).Compute(1).String=";"

// Add PS- to the ID
// ID;(FaultLED);Speed;
Fan.Collect.Source(3).Compute(2).Type="LeftConcat"
Fan.Collect.Source(3).Compute(2).Column=1
Fan.Collect.Source(3).Compute(2).String="PS-"

// Source(4) = Union of (1) and (2) and (3)
// ID;FaultLEDStatus;Speed;
Fan.Collect.Source(4).Type="TableUnion"
Fan.Collect.Source(4).Table1=%Fan.Collect.Source(1)%
Fan.Collect.Source(4).Table2=%Fan.Collect.Source(2)%
Fan.Collect.Source(4).Table3=%Fan.Collect.Source(3)%

// ValueTable = Source(4)
// ID;FaultLEDStatus;Speed;
Fan.Collect.ValueTable=%Fan.Collect.Source(4)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.Speed=ValueTable.Column(3)



// PowerSupplies

// Discovery

// Source(1) = PowerSupply Fru Table  (PowerSupply Controllers / Modules)
// ID;Presence;FaultLED;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.207.1.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,2,12"

// Keep only present PowerSupplys (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
// ID;Presence;FaultLED;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).ValueList="1,-4,-2"

// Translating the LED Fault Status (as in collect)
// ID;Presence;FaultLED;
PowerSupply.Discovery.Source(1).Compute(2).Type="Translate"
PowerSupply.Discovery.Source(1).Compute(2).Column=3
PowerSupply.Discovery.Source(1).Compute(2).TranslationTable="LEDStatusTranslationTable"

// Exclude PowerSupply Modules that have no status
// ID;Presence;FaultLED;
PowerSupply.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(3).Column=3
PowerSupply.Discovery.Source(1).Compute(3).RegExp="UNKNOWN"

// InstanceTable = Source(1)
// ID;Presence;FaultLED;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="IntelChassis"
PowerSupply.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = PowerSupply Fru Table
// ID;FaultLED;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.207.1.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,12"

// Translating the LED Fault Status
// ID;FaultLED;
PowerSupply.Collect.Source(1).Compute(1).Type="Translate"
PowerSupply.Collect.Source(1).Compute(1).Column=2
PowerSupply.Collect.Source(1).Compute(1).TranslationTable="LEDStatusTranslationTable"

// ValueTable = Source(1)
// ID;FaultLEDStatus;Speed;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)

// Other Devices

// Discovery

// Source(1) = CMM (Chassis Management Modules)
// ID;Presence;FaultLED;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.201.2.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID,2,14"


// Add CMM- to the ID and Type Column "Chassis Management Module"
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(1).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).String="Chassis Management Module;CMM-"

// Source(2) = Chassis Switches
// ID;Presence;FaultLED;
OtherDevice.Discovery.Source(2).Type="SnmpTable"
OtherDevice.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.203.1.1"
OtherDevice.Discovery.Source(2).SnmpTableSelectColumns="ID,2,14"

// Add Switch- to the ID and Type Column "Chassis Switch"
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(2).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(2).Compute(1).Column=1
OtherDevice.Discovery.Source(2).Compute(1).String="Chassis Switch;Switch-"

// Source(3) = Union of (1) and (2)
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(3).Type="TableUnion"
OtherDevice.Discovery.Source(3).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(3).Table2=%OtherDevice.Discovery.Source(2)%


// Keep only present OtherDevices (1=Present, -4=Identify,; -2=Timedout-which we will report as a fault rather than missing)
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(3).Compute(1).Column=3
OtherDevice.Discovery.Source(3).Compute(1).ValueList="1,-4,-2"

// Translating the LED Fault Status (as in collect)
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(3).Compute(2).Type="Translate"
OtherDevice.Discovery.Source(3).Compute(2).Column=4
OtherDevice.Discovery.Source(3).Compute(2).TranslationTable="LEDStatusTranslationTable"

// Exclude OtherDevice Modules that have no status
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.Source(3).Compute(3).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(3).Compute(3).Column=4
OtherDevice.Discovery.Source(3).Compute(3).RegExp="UNKNOWN"

// InstanceTable = Source(3)
// Type;ID;Presence;FaultLED;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AttachedToDeviceID="IntelChassis"
OtherDevice.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = OtherDevice Fru Table
// ID;FaultLED;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.201.2.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,14"

// Add CMM- to the ID
/// ID;FaultLED;
OtherDevice.Collect.Source(1).Compute(1).Type="LeftConcat"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).String="CMM-"

// Source(1) = OtherDevice Fru Table
// ID;FaultLED;
OtherDevice.Collect.Source(2).Type="SnmpTable"
OtherDevice.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.203.1.1"
OtherDevice.Collect.Source(2).SnmpTableSelectColumns="ID,14"

// Add Switch- to the ID
/// ID;FaultLED;
OtherDevice.Collect.Source(2).Compute(1).Type="LeftConcat"
OtherDevice.Collect.Source(2).Compute(1).Column=1
OtherDevice.Collect.Source(2).Compute(1).String="Switch-"

// Source(3) = Union of (1) and (2)
/// ID;FaultLED;
OtherDevice.Collect.Source(3).Type="TableUnion"
OtherDevice.Collect.Source(3).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(3).Table2=%OtherDevice.Collect.Source(2)%

// Translating the LED Fault Status
// ID;FaultLED;
OtherDevice.Collect.Source(3).Compute(1).Type="Translate"
OtherDevice.Collect.Source(3).Compute(1).Column=2
OtherDevice.Collect.Source(3).Compute(1).TranslationTable="LEDStatusTranslationTable"

// ValueTable = Source(1)
// ID;FaultLED;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)

// Network Cards

// Discovery

// Source(1) = switchPhyPortsEntry
// ID;PortName
NetworkCard.Discovery.Source(1).Type="SnmpTable"
NetworkCard.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.203.2.1"
NetworkCard.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Source(2) = switchIfEntry
// ID;MAC;OpStatus
NetworkCard.Discovery.Source(2).Type="SnmpTable"
NetworkCard.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.203.3.1"
NetworkCard.Discovery.Source(2).SnmpTableSelectColumns="ID,6,8"

// Source(3) = Source(1) + Source(2)
// ID;PortName;ID;MAC;OpStatus
NetworkCard.Discovery.Source(3).Type="TableJoint"
NetworkCard.Discovery.Source(3).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(3).RightTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(3).LeftKeyColumn=1
NetworkCard.Discovery.Source(3).RightKeyColumn=1

// Keep only network cards with an up(1) down(2) or dormant (5) operational status
// There is no real status, so will only use the linkstatus parameter
// ID;PortName;ID;MAC;OpStatus
NetworkCard.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(3).Compute(1).Column=5
NetworkCard.Discovery.Source(3).Compute(1).ValueList="1,2,5"

// InstanceTable = Source(3)
// ID;PortName;ID;MAC;OpStatus
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(2)

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = switchIfEntry
// ID;Speed;receivedbytes;transmittedbytes;operationalstatus;inErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Type="SnmpTable"
NetworkCard.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.343.2.19.1.2.10.203.3.1"
NetworkCard.Collect.Source(1).SnmpTableSelectColumns="ID,5,10,16,8,14,20"

// Errorcount = In + Out errorcount
// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Compute(1).Type="Add"
NetworkCard.Collect.Source(1).Compute(1).Column=6
NetworkCard.Collect.Source(1).Compute(1).Add=Column(7)

// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(2).Column=5

// Translate the Link Status
// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=6
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="GenericLinkStatusTranslationTable"

// networkStatusTranslationTable
GenericLinkStatusTranslationTable(1)="OK"
GenericLinkStatusTranslationTable(2)="WARN"

// Translate the Status
// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=5
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="networkStatusTranslationTable"

// networkStatusTranslationTable
networkStatusTranslationTable(1)="OK"
networkStatusTranslationTable(2)="OK"
networkStatusTranslationTable(3)="WARN"
networkStatusTranslationTable(4)="UNKNOWN"
networkStatusTranslationTable(5)="WARN"
networkStatusTranslationTable(6)="ALARM"

// Convert LinkSpeed into Mbp/s
// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.Source(1).Compute(5).Type="Divide"
NetworkCard.Collect.Source(1).Compute(5).Column="2"
NetworkCard.Collect.Source(1).Compute(5).DivideBy="1000000"


// ValueTable = Source(1)
// ID;Speed;receivedbytes;transmittedbytes;operationalStatus;linkStatus;ErrorCount;outErrorCount
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(5)
NetworkCard.Collect.LinkStatus=ValueTable.Column(6)
NetworkCard.Collect.ErrorCount=ValueTable.Column(7)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(3)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(4)
NetworkCard.Collect.Linkspeed=ValueTable.Column(2)






LEDStatusTranslationTable(-32)="UNKNOWN"
LEDStatusTranslationTable(-16)="UNKNOWN"
LEDStatusTranslationTable(-4)="OK"
LEDStatusTranslationTable(-1)="UNKNOWN"
LEDStatusTranslationTable(0)="OK"
LEDStatusTranslationTable(1)="WARN"
LEDStatusTranslationTable(2)="ALARM"
LEDStatusTranslationTable(Default)="UNKNOWN"
