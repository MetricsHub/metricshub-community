//
//
//                  C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//            MS_HW_IbmNetfinityManager.hdf
//
//      Supports: IBM Netfinity Manager 5.20.x BASIC system environment
//				  under Windows
//
//

// Note: there is a little difference between the IBM Netfinity Manager NORMAL
// and BASIC system environment monitoring.
// On some computers, Netfinity gives BASIC environment information (just the
// status of each sensor), and on some other computers, it gives NORMAL information
// (value of the temperatures and voltages)
// To support that behaviour, we have 2 different connectors (.HDF). One support
// NORMAL information, and the other support BASIC information.
// This .HDF supports BASIC information and does not define the computer object.
// The normal .HDF supports NORMAL information and defines the computer object.
// Therefore, on classical IBM computers with Netfinity, the following connectors
// should be used:
//  - IBM Netfinity Manager 5.20.x NORMAL
//  - IBM Netfinity Manager 5.20.x RAID
// On more basic IBM computers, the following connectors should be used:
//  - IBM Netfinity Manager 5.20.x NORMAL  ( <- to define the computer object)
//  - IBM Netfinity Manager 5.20.x BASIC
//  - IBM Netfinity Manager 5.20.x RAID


// HEADER

hdf.DisplayName="IBM Netfinity Manager 5.20.x - Basic"
hdf.TypicalPlatform="IBM Netfinity"
hdf.ReliesOn="IBM Netfinity Manager 5.20.x"
hdf.Version="1.0"
hdf.Comments="This connector provides basic environment monitoring through the IBM Netfinity Manager Services SNMP sub-agent which supports almost all old IBM servers (Netfinity) under Windows."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT"

// DETECTION

// Check that there is something below the snmp OID: ...ibm(2).ibmProd(6).netFinity(71).DmiMibs(200).NetFinityServicesMIB(2).dmtfGroups(1).tNetfinityAttributeGroups(4).eNetfinityAttributeGroups(1)
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2.6.71.200.2.1.4.1"


// ENCLOSURE

// No enclosure definition!
// The computer object is defined in the IBM Netfinity Manager NORMAL connector

//
// TEMPERATURES
//

//
// Temperature discovery

// Source(1) = tNetfinityAttributesGroup
// ID;AttributeName
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="2,4"

// Keep only attributes whose name contains the word "temperature"
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column="2"
Temperature.Discovery.Source(1).Compute(1).RegExp="[Tt]emperature"

// Remove the "temperature" word from the attribute name
Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column="2"
Temperature.Discovery.Source(1).Compute(2).Replace=" temperature"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy=""

// Instance table = source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)


//
// Temperature collect

// Collect type is: multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = the a4CurrentValueTextual of the tNetfinityAttributeGroups SNMP table
// AttributeID;Textual status;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="2,5"

// Duplicate the value
// Textual status;textual status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column="2"

// Translate the first status into a PATROL status
// PATROLStatus;textual status
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column="2"
Temperature.Collect.Source(1).Compute(2).TranslationTable="TemperatureStatusTranslationTable"

// Translate the first status into a PATROL status
// PATROLStatus;Status information
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column="3"
Temperature.Collect.Source(1).Compute(3).TranslationTable="TemperatureStatusInformationTranslationTable"

// The TemperatureStatusTranslationTable
TemperatureStatusTranslationTable("Ok")="OK"
TemperatureStatusTranslationTable("High")="WARN"
TemperatureStatusTranslationTable("Too high")="ALARM"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// The TemperatureStatusInformationTranslationTable
TemperatureStatusInformationTranslationTable("Ok")=""
TemperatureStatusInformationTranslationTable("High")="High"
TemperatureStatusInformationTranslationTable("Too high")="Too high"
TemperatureStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)


//
// FANS
//

//
// Fan discovery

// Source(1) = tNetfinityAttributesGroup
// ID;AttributeName
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="2,4"

// Keep only attributes whose name contains the word "fan"
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column="2"
Fan.Discovery.Source(1).Compute(1).RegExp="[Ff]an"

// Remove the "fan" word from the attribute name
Fan.Discovery.Source(1).Compute(2).Type="Replace"
Fan.Discovery.Source(1).Compute(2).Column="2"
Fan.Discovery.Source(1).Compute(2).Replace=" fan"
Fan.Discovery.Source(1).Compute(2).ReplaceBy=""

// Instance table = source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)


//
// Fan collect

// Collect type is: multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = the tNetfinityAttributeGroups SNMP table
// ID;Textual status;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="2,5"

// Duplicate the value
// ID;Textual status;textual status;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

// Translate the first status into a PATROL status
// ID;PATROLStatus;textual status
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// Translate the first status into a PATROL status
// ID;PATROLStatus;Status information
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The FanStatusTranslationTable
FanStatusTranslationTable("Ok")="OK"
FanStatusTranslationTable("Low")="WARN"
FanStatusTranslationTable("Too low")="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable("Ok")=""
FanStatusInformationTranslationTable("Low")="Low"
FanStatusInformationTranslationTable("Too low")="Too low"
FanStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


//
//  VOLTAGES
//

//
// Voltage discovery

// Source(1) = always the tNetfinityAttributes SNMP table
// AttributeID;AttributeName
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="2,4"

// Keep only the voltages lines
// That is: whose name matches the following regexp: [Vv]olt
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column="2"
Voltage.Discovery.Source(1).Compute(1).RegExp="[Vv]olt"

// Remove the " voltage" word (that is not needed)
Voltage.Discovery.Source(1).Compute(2).Type="Replace"
Voltage.Discovery.Source(1).Compute(2).Column="2"
Voltage.Discovery.Source(1).Compute(2).Replace=" voltage"
Voltage.Discovery.Source(1).Compute(2).ReplaceBy=""

// The instance table is Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)

//
// Voltage collect

// Collect type = multi-instance
Voltage.Collect.Type="MultiInstance"

// Source(1) = ...always the tNetfinityAttributesGroup SNMP table
// AttributeID;AttributeTextualValue
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.4.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="2,5"

// Duplicate the textual value column
// AttributeID;AttributeTextualValue;AttributeTextualValue
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Translate the first textual value into a PATROL status
// AttributeID;PATROLStatus;AttributeTextualValue
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="2"
Voltage.Collect.Source(1).Compute(2).TranslationTable="VoltageStatusTranslationTable"

// Translate the second textual value into a more readable string
// AttributeID;PATROLStatus;StatusInformation
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="VoltageStatusInformationTranslationTable"

// The VoltageStatusTranslationTable
VoltageStatusTranslationTable("Ok")="OK"
VoltageStatusTranslationTable("Low")="WARN"
VoltageStatusTranslationTable("High")="WARN"
VoltageStatusTranslationTable("Too low")="WARN"
VoltageStatusTranslationTable("Too high")="WARN"
VoltageStatusTranslationTable(Default)="UNKNOWN"

// The VoltageStatusInformationTranslationTable
VoltageStatusInformationTranslationTable("Ok")=""
VoltageStatusInformationTranslationTable("Low")="Low"
VoltageStatusInformationTranslationTable("High")="High"
VoltageStatusInformationTranslationTable("Too low")="Too low"
VoltageStatusInformationTranslationTable("Too high")="Too high"
VoltageStatusInformationTranslationTable(Default)="Unknown Status"

// The ValueTable is Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)

