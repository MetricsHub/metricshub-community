//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                 MS_HW_SunXscf.hdf
//
//      Supports: Sun Fire M4000, M5000, M8000, M9000 through their XSCF (eXtended System Controller Fucking shit) card
//		Monitors: Almost everything except memory modules (like usual) and network cards -- OPERATES REMOTELY ON THE SYSTEM CONTROLLER (SC)
//      Connects to: The XSCF utilities that are installed on the SC
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun Enterprise Mx000 (XSCF)"
hdf.TypicalPlatform="Oracle/Sun Enterprise Mx000"
hdf.ReliesOn="Sun XSCF utilities installed on the System Controller"
hdf.Comments="Gives environmental information (temperatures, fans, etc.) and boards status on SPARC Enterprise M4000, M5000, M8000 and M9000 servers."
hdf.Version="1.5"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Solaris,OOB"

// SUDO-ABLE COMMANDS
// None.

//
// DETECTION
//

// showhardconf must return platform's type
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="showhardconf"
Detection.Criteria(1).ErrorMessage="This system does not appear to be an XSCF connected to a SPARC Enterprise Mx000 system"
Detection.Criteria(1).ExpectedResult="Serial:"

//
// COMPUTER
//

//
// Discovery

// Source(1) = Output of the showhardconf command
Enclosure.Discovery.Source(1).Type="OSCommand"
Enclosure.Discovery.Source(1).CommandLine="showhardconf"

// Remove all colons and semicolons
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Source(2) = copy of Source(1)
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Process the showhardconf command throug an AWK script that lists the enclosures
// (the main enclosure as well as the I/O expansion units)
// EnclosureID;EnclosureType;Vendor;Model;Serial;Fru;Status;
Enclosure.Discovery.Source(2).Compute(1).Type="Awk"
Enclosure.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Discovery.Source(2).Compute(1).Separators=";"
Enclosure.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5,6,7,8"

// Add "FRU: " in front of the Fru column
// EnclosureID;EnclosureType;Vendor;Model;Serial;Fru
Enclosure.Discovery.Source(2).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(2).Column=6
Enclosure.Discovery.Source(2).Compute(2).String="Part Number: "

// The discovery table
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(4)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
Enclosure.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)


//
// Collect

// Collect type is multi-instance (of course)
Enclosure.Collect.Type="MultiInstance"

// Source(1) = output of hte showhardconf command
Enclosure.Collect.Source(1).Type="OSCommand"
Enclosure.Collect.Source(1).CommandLine="showhardconf"

// Remove all colons and semicolons
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Source(2) = copy of Source(1)
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Process the showhardconf command throug an AWK script that lists the enclosures
// (the main enclosure as well as the I/O expansion units)
// EnclosureID;Status;
Enclosure.Collect.Source(2).Compute(1).Type="Awk"
Enclosure.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Collect.Source(2).Compute(1).Separators=";"
Enclosure.Collect.Source(2).Compute(1).SelectColumns="2,8"

// Duplicate Status
// EnclosureID;Status;Status;
Enclosure.Collect.Source(2).Compute(2).Type="DuplicateColumn"
Enclosure.Collect.Source(2).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// EnclosureID;PATROLStatus;Status;
Enclosure.Collect.Source(2).Compute(3).Type="Translate"
Enclosure.Collect.Source(2).Compute(3).Column=2
Enclosure.Collect.Source(2).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// The ShowHardConfStatusTranslationTable
ShowHardConfStatusTranslationTable("Faulted")="ALARM"
ShowHardConfStatusTranslationTable("Degraded")="WARN"
ShowHardConfStatusTranslationTable("Deconfigured")="WARN"
ShowHardConfStatusTranslationTable("Maintenance")="OK"
ShowHardConfStatusTranslationTable("Normal")="OK"
ShowHardConfStatusTranslationTable("Input Fail")="ALARM"
ShowHardConfStatusTranslationTable(Default)="UNKNOWN"

// The ValueTable
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)


//
// CPU
//

//
// Discovery

// Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
Cpu.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// AWK script that keeps only the CPUs
// CpuID;Model;Speed;SerialNumber;Fru;PowerConsumption;
Cpu.Discovery.Source(1).Compute(1).Type="Awk"
Cpu.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
Cpu.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Cpu.Discovery.Source(1).Compute(1).Separators=";"
Cpu.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6,8"

// Add "FRU: " in front of the Fru column
// CpuID;Model;Speed;SerialNumber;Fru;PowerConsumption;
Cpu.Discovery.Source(1).Compute(2).Type="LeftConcat"
Cpu.Discovery.Source(1).Compute(2).Column=5
Cpu.Discovery.Source(1).Compute(2).String="Part Number: "

Cpu.Discovery.Source(1).Compute(3).Type="LeftConcat"
Cpu.Discovery.Source(1).Compute(3).Column=4
Cpu.Discovery.Source(1).Compute(3).String="Serial Number: "

// InstanceTable = Source(1)
Cpu.Discovery.InstanceTable=%Cpu.Discovery.Source(1)%
Cpu.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Cpu.Discovery.Instance.Model=InstanceTable.Column(2)
Cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(3)
Cpu.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
Cpu.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Cpu.Discovery.Instance.PowerConsumption=InstanceTable.Column(6)
Cpu.Discovery.Instance.AttachedToDeviceID="Main"


//
// Collect

// Collet type is multi-instance
Cpu.Collect.Type="MultiInstance"

// Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
Cpu.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// AWK script that keeps only the CPUs
// CpuID;State;
Cpu.Collect.Source(1).Compute(1).Type="Awk"
Cpu.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
Cpu.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Cpu.Collect.Source(1).Compute(1).Separators=";"
Cpu.Collect.Source(1).Compute(1).SelectColumns="2,7"

// Duplicate 'State'
// CpuID;State;State;
Cpu.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Cpu.Collect.Source(1).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// CpuID;PATROLStatus;State;
Cpu.Collect.Source(1).Compute(3).Type="Translate"
Cpu.Collect.Source(1).Compute(3).Column=2
Cpu.Collect.Source(1).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// ValueTable = Source(1)
Cpu.Collect.ValueTable=%Cpu.Collect.Source(1)%
Cpu.Collect.DeviceID=ValueTable.Column(1)
Cpu.Collect.Status=ValueTable.Column(2)
Cpu.Collect.StatusInformation=ValueTable.Column(3)

//
// MEMORY
//

//
// Discovery

// Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// AWK script that keeps only the memory modules
// MemoryID;Model;Size;SerialNumber;
Memory.Discovery.Source(1).Compute(1).Type="Awk"
Memory.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
Memory.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Memory.Discovery.Source(1).Compute(1).Separators=";"
Memory.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// InstanceTable = Source(1)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Type=InstanceTable.Column(2)
Memory.Discovery.Instance.Size=InstanceTable.Column(3)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Memory.Discovery.Instance.AttachedToDeviceID="Main"


//
// Collect

// Collet type is multi-instance
Memory.Collect.Type="MultiInstance"

// Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
Memory.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// AWK script that keeps only the CPUs
// MemoryID;State
Memory.Collect.Source(1).Compute(1).Type="Awk"
Memory.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
Memory.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Memory.Collect.Source(1).Compute(1).Separators=";"
Memory.Collect.Source(1).Compute(1).SelectColumns="2,6"

// Duplicate 'State'
// MemoryID;State;State;
Memory.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// MemoryID;PATROLStatus;State;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=2
Memory.Collect.Source(1).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)



//
// POWER SUPPLIES
//

//
// Discovery

// Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// AWK script that keeps only the power supplies
// PowerSupplyID;ParentID;SerialNumber;FRU;
PowerSupply.Discovery.Source(1).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(5)
PowerSupply.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Discovery.Source(1).Compute(1).Separators=";"
PowerSupply.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// Add "FRU: " to the left of the FRU column
// PowerSupplyID;ParentID;SerialNumber;FRU;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).String="Part Number: "

PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=3
PowerSupply.Discovery.Source(1).Compute(3).String="Serial Number: "

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)


//
// Collect

// Collet type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// AWK script that keeps only the power supplies
// PowerSupplyID;State
PowerSupply.Collect.Source(1).Compute(1).Type="Awk"
PowerSupply.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(5)
PowerSupply.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Collect.Source(1).Compute(1).Separators=";"
PowerSupply.Collect.Source(1).Compute(1).SelectColumns="2,6"

// Duplicate 'State'
// MemoryID;State;State;
PowerSupply.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// MemoryID;PATROLStatus;State;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=2
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
// FANS
//

//
// Discovery

// Source(1) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// AWK script that keeps only the fans
// FanID;FanType;
Fan.Discovery.Source(1).Compute(1).Type="Awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
Fan.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Discovery.Source(1).Compute(1).Separators=";"
Fan.Discovery.Source(1).Compute(1).SelectColumns="2,3"

// InstanceTable = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)
Fan.Discovery.Instance.AttachedToDeviceID="Main"


//
// Collect

// Collet type is multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = copy of enclosure.collect.source(1) (output of the showhardconf command)
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// AWK script that keeps only the CPUs
// FanID;State
Fan.Collect.Source(1).Compute(1).Type="Awk"
Fan.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
Fan.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Collect.Source(1).Compute(1).Separators=";"
Fan.Collect.Source(1).Compute(1).SelectColumns="2,4"

// Duplicate 'State'
// FanID;State;State;
Fan.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// FanID;PATROLStatus;State;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=2
Fan.Collect.Source(1).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)




//
// VOLTAGES
//

//
// Discovery

// Source(1) = output of showenvironment
Voltage.Discovery.Source(1).Type="OSCommand"
Voltage.Discovery.Source(1).CommandLine="showenvironment volt"

// Pipe showenvironment's output into the %EmbeddedFile(6)% awk script
// DeviceID;VoltageType;LowerThreshold;UpperThreshold
Voltage.Discovery.Source(1).Compute(1).Type="Awk"
Voltage.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
Voltage.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Discovery.Source(1).Compute(1).Separators=";"
Voltage.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// Instance Table = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.AttachedToDeviceID="Main"


//
// Collect

// Collect type is "all instances in one shot"
Voltage.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
Voltage.Collect.Source(1).Type="OSCommand"
Voltage.Collect.Source(1).CommandLine="showenvironment volt"

// Piped showenvironment's output into the %EmbeddedFile(6)% awk script
// DeviceID;Voltage;
Voltage.Collect.Source(1).Compute(1).Type="Awk"
Voltage.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
Voltage.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Collect.Source(1).Compute(1).Separators=";"
Voltage.Collect.Source(1).Compute(1).SelectColumns="2,6"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)

//
// Temperatures
//

//
// Discovery

// Source(1) = output of showenvironment
Temperature.Discovery.Source(1).Type="OSCommand"
Temperature.Discovery.Source(1).CommandLine="showenvironment temp"

// Pipe showenvironment's output into the %EmbeddedFile(10)% awk script
// MSHW;SensorID;Temperature;Warning;Alarm;
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(10)
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// Instance Table = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AttachedToDeviceID="Main"


//
// Collect

// Collect type is "all instances in one shot"
Temperature.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
Temperature.Collect.Source(1).Type="OSCommand"
Temperature.Collect.Source(1).CommandLine="showenvironment temp"

// Piped showenvironment's output into the %EmbeddedFile(10)% awk script
// MSHW;SensorID;Temperature;Warning;Alarm;
Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(10)
Temperature.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Collect.Source(1).Compute(1).Separators=";"
Temperature.Collect.Source(1).Compute(1).SelectColumns="2,3"

// ValueTable = Source(1)
// SensorID;Temperature
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)

//
// OTHER DEVICES (IO boards and domains)
//

//
// Discovery

// Source(1) = output of showdomains -a
OtherDevice.Discovery.Source(1).Type="OSCommand"
OtherDevice.Discovery.Source(1).CommandLine="showdomainstatus -a"

// Pipe showdomainsm's output into the %EmbeddedFile(8)% awk script
// DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
OtherDevice.Discovery.Source(1).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(8)
OtherDevice.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Domain;"
OtherDevice.Discovery.Source(1).Compute(1).Separators=";"
OtherDevice.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6,7"

// Source(2) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
OtherDevice.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// AWK script that keeps only the IO Units, XSCF units, and other stuff
// DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
OtherDevice.Discovery.Source(2).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(9)
OtherDevice.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Discovery.Source(2).Compute(1).Separators=";"
OtherDevice.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5,6,7"

// Add "FRU: " on the left of the FruPartNumber column
// DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
OtherDevice.Discovery.Source(2).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(2).Compute(2).Column=6
OtherDevice.Discovery.Source(2).Compute(2).String="Part Number: "

OtherDevice.Discovery.Source(2).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(2).Compute(3).Column=5
OtherDevice.Discovery.Source(2).Compute(3).String="Serial Number: "


// Source(3) = union of Source(1) and Source(2)
// DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruPartNumber;
OtherDevice.Discovery.Source(3).Type="TableUnion"
OtherDevice.Discovery.Source(3).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(3).Table2=%OtherDevice.Discovery.Source(2)%

// Instance Table = Source(1)
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AdditionalLabel=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)

//
// Collect

// Collect type is "all instances in one shot"
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = output of showdomains -a
OtherDevice.Collect.Source(1).Type="OSCommand"
OtherDevice.Collect.Source(1).CommandLine="showdomainstatus -a"

// Pipe showdomains' output into the %EmbeddedFile(8)% awk script
// DeviceID;State
OtherDevice.Collect.Source(1).Compute(1).Type="Awk"
OtherDevice.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(8)
OtherDevice.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Domain;"
OtherDevice.Collect.Source(1).Compute(1).Separators=";"
OtherDevice.Collect.Source(1).Compute(1).SelectColumns="3,8"

// Duplicate 'State'
// DeviceID;State;State;
OtherDevice.Collect.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// DeviceID;PATROLStatus;State;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=2
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="DomainStatusTranslationTable"

// The DomainStatusTranslationTable
DomainStatusTranslationTable("Powered Off")="OK"
DomainStatusTranslationTable("Panic State")="ALARM"
DomainStatusTranslationTable("Shutdown Started")="OK"
DomainStatusTranslationTable("Initialization Phase")="OK"
DomainStatusTranslationTable("OpenBoot Execution Completed")="OK"
DomainStatusTranslationTable("Booting/OpenBoot PROM prompt")="OK"
DomainStatusTranslationTable("Running")="OK"
DomainStatusTranslationTable(Default)="UNKNOWN"


// Source(2) = copy of enclosure.discovery.source(1) (output of the the showhardconf command)
OtherDevice.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// AWK script that keeps only the IO Units, XSCF units, and other stuff
// DeviceID;State;PowerConsumption;
OtherDevice.Collect.Source(2).Compute(1).Type="Awk"
OtherDevice.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(9)
OtherDevice.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Collect.Source(2).Compute(1).Separators=";"
OtherDevice.Collect.Source(2).Compute(1).SelectColumns="3,8,9"

// Duplicate 'State'
// DeviceID;State;State;PowerConsumption;
OtherDevice.Collect.Source(2).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(2).Compute(2).Column=2

// Translate the first State column into a PATROL Status
// DeviceID;PATROLStatus;State;PowerConsumption;
OtherDevice.Collect.Source(2).Compute(3).Type="Translate"
OtherDevice.Collect.Source(2).Compute(3).Column=2
OtherDevice.Collect.Source(2).Compute(3).TranslationTable="ShowHardConfStatusTranslationTable"

// Source(3) = union of Source(1) and Source(2)
// DeviceID;PATROLStatus;State;PowerConsumption;
OtherDevice.Collect.Source(3).Type="TableUnion"
OtherDevice.Collect.Source(3).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(3).Table2=%OtherDevice.Collect.Source(2)%

// ValueTable = Source(3)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)
OtherDevice.Collect.PowerConsumption=ValueTable.Column(4)


/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes showhardconf output as stdin
///    and returns the server model and serial number
///	   MSHW;Model;SerialNumber
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {
	path = "";
}
{
	gsub("[ ;:\*]", " ");

	if ($1 == "SPARC" || $1 == "+")
	{
		gsub(" +", " ");
		print $0;
	}
	else if (NF > 0)
	{
		name = $1;

		depth = (index($0, name) - 1) / 4;
		if (depth < 0) { indent = 0; }

		split(path, pathArray, "/");
		path = "";
		for (i=1 ; i<depth ; i++)
		{
			path = path pathArray[i] "/";
		}
		path = path name;

		gsub(" +", " ");

		ioxIndex = index(path, "IOX@");
		if (ioxIndex > 0)
		{
			print substr(path, ioxIndex, length(path) - ioxIndex + 1) " " $0
		}
		else
		{
			print path " " $0 " "
		}
	}
}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///    AWK script that takes showhardconf output as stdin
///    and returns the server model and serial number
///
/////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN { ioxList = ";"; }
(NR == 1) { ServerModel = $0 }
(NR == 2) { SerialNumber = $3 ; print "MSHW;Main;Computer;;" ServerModel ";" SerialNumber ";;;" ; }
($2 ~ /^IOX@/ && $3 == "Status") {
	DeviceID = $2;
	if (index(ioxList, ";" DeviceID ";") == 0)
	{
		ioxList = ioxList DeviceID ";";
		Name = DeviceID " I/O Expansion Unit";
		status = $4;
		SerialNumber = $6;
		getline;
		FruNumber = $3 " " $4;
		print "MSHW;" DeviceID ";Enclosure;;" Name ";" SerialNumber ";" FruNumber ";" status ;
	}
}
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///    AWK script that takes showhardconf output as stdin
///    and returns the list of processors
///	   MSHW;CpuID;Model;Speed;SerialNumber;Fru;Status;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN { MotherBoardID = ""; }
($2 ~ /^CPUM#[0-9]+-CHIP#[0-9]+$/) {
	cpuID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3;
	getline;
	Speed = $3 * 1000;
	getline;
	CoreCount = $3;
	if (CoreCount == 4)
	{
		PowerConsumption = 135;
	}
	else
	{
		PowerConsumption = 120;
	}
	print "MSHW;" cpuID ";" cpuID " - " CoreCount "-core SPARC64;" Speed ";" SerialNumber ";" FruPartNumber ";" status ";" PowerConsumption
}
EmbeddedFile(3).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 4
///
///    AWK script that takes showhardconf output as stdin
///    and returns the list of memory modules
///	   MSHW;MemoryID;Model;Size;SerialNumber;Status;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(4):
($2 ~ /^MEM#[0-9A-Za-z]+$/) {
	memoryID = $1;
	status = $4;
	getline;
	SerialNumber = $3;
	getline;
	Size = $5
	SizeUnit = $6
	if (SizeUnit == "GB") { Size = Size * 1024; }
	print "MSHW;" memoryID ";" memoryID ";" Size ";" SerialNumber ";" status
}
EmbeddedFile(4).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 5
///
///    AWK script that takes showhardconf output as stdin
///    and returns the list of power supplies
///	   MSHW;PowerSupplyID;SerialNumber;Status;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(5):
($2 ~ /^PSU#[0-9]+$/) {
	powersupplyID = $1;
	status = $4;
	SerialNumber = $6;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	getline;
	if ($2 ~ /Power_Status/ && $3 ~ /[Ii]nput/ && $4 ~ /[Ff]ail/ && status == "Normal") {status = "Input Fail"};
	print "MSHW;" powersupplyID ";;" SerialNumber ";FRU: " FruPartNumber ";" status
}
($2 ~ /^PS[0-9]$/ && $3 == "Status") {
	powersupplyID = $1;
	status = $4;
	SerialNumber = $6;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	if (index(powersupplyID, "/") > 0)
	{
		parentID = substr(powersupplyID, 1, index(powersupplyID, "/") - 1)
	}
	else
	{
		parentID = "Main";
	}
	print "MSHW;" powersupplyID ";" parentID ";" SerialNumber ";" FruPartNumber ";" status
}
EmbeddedFile(5).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 6
///
///    AWK script that takes "showenvironment volt" output as stdin
///    and returns the list of voltages
///	   MSHW;VoltageID;VoltageType;LowerThreshold;UpperThreshold;Voltage
///
/////////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN { GroupID = ""; SubDeviceID = ""; }
{
	if ($1 ~ /^CPUM/ || $1 ~ /^MEMB/)
	{
		SubDeviceID = $1;
	}
	else if ($1 !~ /^-?[0-9\.]+V[#L]?[0-9]?$/)
	{
		GroupID = $1;
		if (GroupID !~ /^MBU_[A-Z0-9a-z]+$/ && GroupID !~ /^CMU#[0-9]+$/)
		{
			SubDeviceID = "";
		}
	}
	else if ($0 ~ /[0-9\.]+V#?[0-9]? Power Supply Group:-?[0-9\.]+V/)
	{
		if ((GroupID ~ /^MBU_[A-Z0-9a-z]+$/ || GroupID ~ /^CMU#[0-9]+$/) && SubDeviceID != "")
		{
			VoltageID = GroupID "/" SubDeviceID "/" $1
			VoltageType = GroupID "/" SubDeviceID " - " $1
		}
		else
		{
			VoltageID = GroupID "/" $1
			VoltageType = GroupID " - " $1
		}
		gsub("[.]","_",VoltageID)
		NominalVoltage = substr($1, 1, length($1) - 1)
		UpperThreshold = NominalVoltage * 1.1 * 1000;
		LowerThreshold = NominalVoltage * 0.9 * 1000;
		CurrentVoltage = substr($4, 7, length($4) - 7);
		CurrentVoltage = CurrentVoltage * 1000;
		print "MSHW;" VoltageID ";" VoltageType ";" LowerThreshold ";" UpperThreshold ";" CurrentVoltage
	}
}
EmbeddedFile(6).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 7
///
///    AWK script that takes showhardconf output as stdin
///    and returns the list of fans
///	   MSHW;FanID;FanType;SerialNumber;Status;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(7):
($2 ~ /^FAN_[0-9A-Za-z#_]+$/) {
	fanID = $1;
	status = $4;
	print "MSHW;" fanID ";" fanID ";" status
}
EmbeddedFile(7).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 8
///
///    AWK script that takes showdomainstatus output as stdin
///    and returns the list of domains
///	   MSHW;Domain;DomainID;AdditionalLabel;Status;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(8):
/^ *[0-9A-Z]+ / {
	if ($1 != "DID" && $2 != "-")
	{
		printf("MSHW;Domain;%s;Main;;;;", $1);
		for (i=2 ; i<NF ; i++)
		{
			printf("%s ", $i);
		}
		if (NF > 1)
		{
			printf("%s\n", $NF);
		}
	}
}
EmbeddedFile(8).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 9
///
///    AWK script that takes showhardconf output as stdin
///    and returns the list of IO units, XSCF units, etc.
///	   MSHW;DeviceType;DeviceID;ParentID;AdditionalLabel;SerialNumber;FruNumber;State;Wattage
///
/////////////////////////////////////////////////////////////
EmbeddedFile(9):
BEGIN {
	XSCFUList = ";";
	IOUList = "";
}
($2 ~ /^IOU#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	IOUList = IOUList "�MSHW;I/O Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";Power:"
}
($1 ~ "^IOU#[0-9]+/PCI#[0-9]+$" && $NF != "DownLink") {
	IOUList = IOUList "W";
}
($2 ~ /^XSCFU$/ || $2 ~ /^XSCFU_[A-Z]#[0-9]$/) {
	DeviceID = $1;
	if (index(XSCFUList, ";" DeviceID ";") > 0)
	{
		DeviceID = DeviceID "b";
	}
	else
	{
		XSCFUList = XSCFUList DeviceID ";";
	}
	status = $4;
	if (index(status, ",") > 1) { status = substr(status, 1, index(status, ",") - 1); }
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;XSCF Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";30"
}
($2 ~ /^OPNL$/ || $2 ~ /^OPNL#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Operator Panel;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";2"
}
($2 ~ /^CMU#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;CPU/Memory Board Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";80"
}
($2 ~ /^MEMB#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Memory Board;" DeviceID ";Main;" DeviceID ";" SerialNumber ";" FruPartNumber ";" status ";50"
}
($2 ~ /^MBU_[A-Z0-9]$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Motherboard Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";80"
}
($2 ~ /BP_[A-Z]#[0-9]$/ || $2 ~ /BP#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Backplane;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";25"
}
($2 ~ /^DDC_[A-Z]#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	print "MSHW;DC-to-DC Converter;" DeviceID ";Main;" DeviceID ";" SerialNumber ";;" status ";5"
}
($2 ~ /^DDCR$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	print "MSHW;DC-to-DC Converter;" DeviceID ";Main;" DeviceID ";" SerialNumber ";;" status ";5"
}
($NF == "DownLink" && $3 == "Status") {
	DeviceID = $1;
	status = $4;
	getline;
	SerialNumber = $5;
	getline;
	Connection = $3;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;DownLink Card;" DeviceID ";Main;to " Connection ";" SerialNumber ";" FruPartNumber ";" status ";35"
}
($2 ~ /^IOB[0-9]+$/ && $3 == "Status") {
	DeviceID = $1;
	ShortName = $2;
	status = $4;
	SerialNumber = $6;
	getline;
	FruPartNumber = $3 " " $4 " " $5
	if (index(DeviceID, "/") > 0)
	{
		parentID = substr(DeviceID, 1, index(DeviceID, "/") - 1);
	}
	else
	{
		parentID = "Main";
	}
	IOBList = IOBList "�MSHW;I/O Board;" DeviceID ";" parentID ";" ShortName ";" SerialNumber ";" FruPartNumber ";" status ";Power:"
}
($1 ~ "^IOX@[A-Z0-9]+/IOB[0-9]+/SLOT[0-9]+$") {
	IOBList = IOBList "w";
}
($2 == "LINK" && $3 == "Status") {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	split(DeviceID, PathArray, "/");
	parentID = PathArray[1];
	ShortName = PathArray[2];
	print "MSHW;UpLink Card;" DeviceID ";" parentID ";" ShortName ";" SerialNumber ";" FruPartNumber ";" status ";35"
}
($2 ~ /^XBU_[A-Z]#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Crossbar Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";80"
}
($2 ~ /^CLKU_[A-Z]#[0-9]+$/) {
	DeviceID = $1;
	status = $4;
	SerialNumber = $8;
	getline;
	FruPartNumber = $3 " " $4 " " $5;
	print "MSHW;Clock Control Unit;" DeviceID ";Main;;" SerialNumber ";" FruPartNumber ";" status ";4"
}
END {
	IOUCount = split(IOUList, IOUArray, "�");
	for (i=2; i<=IOUCount; i++)
	{
		powerIndex = index(IOUArray[i], ";Power:");
		PowerConsumption = (length(IOUArray[i]) - powerIndex - 6) * 20;
		if (PowerConsumption < 0) { PowerConsumption = 20; }
		PowerConsumption = PowerConsumption + 40;
		print substr(IOUArray[i], 1, powerIndex) PowerConsumption
	}
	IOBCount = split(IOBList, IOBArray, "�");
	for (i=2; i<=IOBCount; i++)
	{
		powerIndex = index(IOBArray[i], ";Power:");
		PowerConsumption = (length(IOBArray[i]) - powerIndex - 6) * 20;
		if (PowerConsumption < 0) { PowerConsumption = 20; }
		PowerConsumption = PowerConsumption + 40;
		print substr(IOBArray[i], 1, powerIndex) PowerConsumption
	}
}
EmbeddedFile(9).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 10
///
///    AWK script that takes "showenvironment temp" output as stdin
///    and returns the list of temperatures
///	   MSHW;SensorID;Temperature;Warning;Alarm;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(10):
BEGIN { GroupID = ""; SensorID = ""; FS=":";}
$1 ~ /Temperature/ {
	                  Temp = $2 ; gsub(/[^0-9\.]/,"",Temp);
	                  Warn = "40"; Alarm = "45" ;
	                  print ("MSHW;Ambient Temperature;" Temp ";" Warn ";" Alarm ";")
	                 }
$1 ~ /CMU#[0-9]/ {
	                GroupID = $1; gsub(/ /,"",GroupID);
                  Temp = $2 ; gsub(/[^0-9\.]/,"",Temp);
                  Warn = "55"; Alarm = "60" ;
	                print ("MSHW;" GroupID ";" Temp ";" Warn ";" Alarm ";")
	               }

$1 ~ /CPUM#[0-9]/ {
	                SensorID = $1; gsub(/ /,"",SensorID); SensorID = GroupID "/" SensorID ;
	                Temp = $2 ; gsub(/[^0-9\.]/,"",Temp);
                  Warn = "85"; Alarm = "100" ;
	                print ("MSHW;" SensorID ";" Temp ";" Warn ";" Alarm ";")
	               }
EmbeddedFile(10).End
///////////////////////////////////////////////////////////////
