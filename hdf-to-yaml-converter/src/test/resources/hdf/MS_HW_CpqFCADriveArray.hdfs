//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//             MS_HW_CpqFCADriveArray.hdf
//
//      Supports: The fibre-connected HP/Compaq StorageWorks arrays
//      Connects to: hp Insight Manager (FCA Management) under Windows, Linux and Tru64
//
//

// HEADER

hdf.DisplayName="HP Insight Management Agent - Fiber Array"
hdf.TypicalPlatform="HP ProLiant"
hdf.ReliesOn="HP Insight Management Agents"
hdf.Version="1.0"
hdf.Comments="This connector monitors the fiber-connected HP/Compaq StorageWorks Arrays by connecting to the Fiber Array Management SNMP sub-agent of the HP Insight Manager agent."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux,OSF1,VMS,OOB,Solaris"
hdf.Supersedes="MS_HW_SunRaidctl.hdf,MS_HW_SunIostat.hdf,MS_HW_SunIostatNonSun.hdf,MS_HW_SunTapeDrives.hdf"

// DETECTION

// The system must have a fiber-attached physical disk
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.232.16.2.5.1.1"

// The system must have a StorageWorks box
Detection.Criteria(2).Type="SNMP"
Detection.Criteria(2).SnmpGetNext="1.3.6.1.4.1.232.8.2.2.1.1"


//
// STORAGE ENCLOSURE
//

//
// Discovery

// Source(1) = cpqSsChassisTable SNMP table
// ID;ModelNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.8.2.2.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,19"

// Translate the ModelNumber into a model name
// ID;Model
Enclosure.Discovery.Source(1).Compute(1).Type="Translate"
Enclosure.Discovery.Source(1).Compute(1).Column="2"
Enclosure.Discovery.Source(1).Compute(1).TranslationTable="StorageWorksModelTranslationTable"

// The StorageWorksModelTranslationTable
StorageWorksModelTranslationTable(2)="Compaq StorageWorks RAID Array 4000/4100"
StorageWorksModelTranslationTable(3)="Compaq StorageWorks Modular Smart Array 1000"
StorageWorksModelTranslationTable(4)="HP StorageWorks Modular Smart Array 500"
StorageWorksModelTranslationTable(5)="Compaq StorageWorks Enterprise/Modular RAID Array"
StorageWorksModelTranslationTable(6)="Compaq StorageWorks Enterprise Virtual Array"
StorageWorksModelTranslationTable(7)="HP StorageWorks Modular Smart Array 500 G2"
StorageWorksModelTranslationTable(8)="HP StorageWorks Modular Smart Array 20"
StorageWorksModelTranslationTable(9)="HP StorageWorks Modular Smart Array 1500 CS"
StorageWorksModelTranslationTable(10)="HP StorageWorks Modular Smart Array 1510i"
StorageWorksModelTranslationTable(Default)="HP/Compaq StorageWorks Array"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type="Storage"

/////////////////////////////////////////////////
///  ***  P H Y S I C A L   D I S K S   ***   ///
/////////////////////////////////////////////////

//
// Discovery

// Source(1) = the cpqFcaPhyDrv snmp table
// ID;EnclosureID;Model;Size;SerialNumber
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.5.1.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,38,43"

// Change the 4294967295 size value into an empty string
// because this is not a real size
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="4"
PhysicalDisk.Discovery.Source(1).Compute(1).Replace="4294967295"
PhysicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=""

// Change the -1 size value into an empty string
// because this is not a real size
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(2).Column="4"
PhysicalDisk.Discovery.Source(1).Compute(2).Replace="-1"
PhysicalDisk.Discovery.Source(1).Compute(2).ReplaceBy=""

// Convert the size into bytes
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(3).Column="4"
PhysicalDisk.Discovery.Source(1).Compute(3).MultiplyBy="1048576"

// The instance table = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType=""

//
// Collect

// Collect type is: multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = the cpqFcaPhyDrv snmp table
// ID;status;SMARTstatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.5.1.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,6,49,15,17"

// Duplicate the status column
// ID;status;status;SMARTstatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL status
// ID;PATROLstatus;status;SMARTstatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="2"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable(2)="OK"
PhysicalDiskStatusTranslationTable(3)="OK"
PhysicalDiskStatusTranslationTable(4)="WARN"
PhysicalDiskStatusTranslationTable(5)="WARN"
PhysicalDiskStatusTranslationTable(6)="ALARM"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// ID;PATROLstatus;statusInformation;SMARTstatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column="3"
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable(2)="Unconfigured"
PhysicalDiskStatusInformationTranslationTable(3)=""
PhysicalDiskStatusInformationTranslationTable(4)="Too many errors"
PhysicalDiskStatusInformationTranslationTable(5)="Predicted failure"
PhysicalDiskStatusInformationTranslationTable(6)="Failed"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"

// Translate the SMARTstatus into a 0 (no failure predicted) or 1 (failure is predicted)
// ID;PATROLstatus;statusInformation;predictFailureStatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column="4"
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskSMARTStatusTranslationTable"

// The PhysicalDiskSMARTStatusTranslationTable
PhysicalDiskSMARTStatusTranslationTable(1)="FALSE"
PhysicalDiskSMARTStatusTranslationTable(2)="FALSE"
PhysicalDiskSMARTStatusTranslationTable(3)="TRUE"
PhysicalDiskSMARTStatusTranslationTable(Default)="FALSE"

// Add WriteErrors to ReadErros = ErrorCount
// ID;PATROLstatus;statusInformation;predictFailureStatus;ReadErrors;WriteErrors
PhysicalDisk.Collect.Source(1).Compute(5).Type="Add"
PhysicalDisk.Collect.Source(1).Compute(5).Column="5"
PhysicalDisk.Collect.Source(1).Compute(5).Add=Column(6)

// The ValueTable = source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(4)
PhysicalDisk.Collect.ErrorCount=ValueTable.Column(5)


///////////////////////////////////////////////
///  ***  L O G I C A L   D I S K S   ***   ///
///////////////////////////////////////////////

//
// Discovery

// Source(1) = the cpqFcaLogDrv snmp table
// ID;EnclosureID;FaultToleranceLevel;SizeMB
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.3.1.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,9"

// Translate size into bytes
// ID;ControllerNumber;FaultToleranceLevel;Size
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column="4"
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1048576"

// Translate the FaultToleranceLevel into a more readable string
// ID;ControllerNumber;RAIDLevel;Size
LogicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(2).Column="3"
LogicalDisk.Discovery.Source(1).Compute(2).TranslationTable="RAIDLevelTranslationTable"

// The RAIDLevelTranslationTable
RAIDLevelTranslationTable(1)=""
RAIDLevelTranslationTable(2)="0"
RAIDLevelTranslationTable(3)="1"
RAIDLevelTranslationTable(4)="4"
RAIDLevelTranslationTable(5)="5"
RAIDLevelTranslationTable(7)="ADG"
RAIDLevelTranslationTable(Default)=""

// The InstanceTable
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.AttachedToDeviceType=""
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(3)

//
// Collect

// Collect type = MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = the cpqFcaLogDrv snmp table
// ID;Status
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.3.1.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,4"

// Duplicate the status column
// ID;Status;Status
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL status
// ID;PATROLStatus;Status
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="2"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable(2)="OK"
LogicalDiskStatusTranslationTable(3)="ALARM"
LogicalDiskStatusTranslationTable(4)="OK"
LogicalDiskStatusTranslationTable(5)="WARN"
LogicalDiskStatusTranslationTable(6)="OK"
LogicalDiskStatusTranslationTable(7)="WARN"
LogicalDiskStatusTranslationTable(8)="ALARM"
LogicalDiskStatusTranslationTable(9)="ALARM"
LogicalDiskStatusTranslationTable(10)="WARN"
LogicalDiskStatusTranslationTable(11)="ALARM"
LogicalDiskStatusTranslationTable(12)="OK"
LogicalDiskStatusTranslationTable(13)="ALARM"
LogicalDiskStatusTranslationTable(14)="OK"
LogicalDiskStatusTranslationTable(15)="ALARM"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// ID;PATROLStatus;StatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="3"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable(2)=""
LogicalDiskStatusInformationTranslationTable(3)="Failed"
LogicalDiskStatusInformationTranslationTable(4)="Unconfigured"
LogicalDiskStatusInformationTranslationTable(5)="Recovering"
LogicalDiskStatusInformationTranslationTable(6)="Ready for rebuild"
LogicalDiskStatusInformationTranslationTable(7)="Rebuilding"
LogicalDiskStatusInformationTranslationTable(8)="Wrong drive"
LogicalDiskStatusInformationTranslationTable(9)="Bad connect"
LogicalDiskStatusInformationTranslationTable(10)="Overheating"
LogicalDiskStatusInformationTranslationTable(11)="Shutdown"
LogicalDiskStatusInformationTranslationTable(12)="Expanding"
LogicalDiskStatusInformationTranslationTable(13)="Not available"
LogicalDiskStatusInformationTranslationTable(14)="Queued for expansion"
LogicalDiskStatusInformationTranslationTable(15)="Hard error"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"

// The ValueTable = source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
//   D I S K   C O N T R O L L E R S
//

// Fiber Array Controllers

//
// Discovery

// Source(1) = the cpqFcaCntlr SNMP table
// DeviceID;BoxIndex;ModelCode
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.2.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3"

// Translate ModelCode into a more readable string
// DeviceID;BoxIndex;Model
DiskController.Discovery.Source(1).Compute(1).Type="Translate"
DiskController.Discovery.Source(1).Compute(1).Column="3"
DiskController.Discovery.Source(1).Compute(1).TranslationTable="ArrayControllerModelTranslationTable"

// The ArrayControllerModelTranslationTable
ArrayControllerModelTranslationTable(2)="Compaq StorageWorks RAID Array 4000"
ArrayControllerModelTranslationTable(3)="Compaq StorageWorks Modular Smart Array 1000"
ArrayControllerModelTranslationTable(4)="HP StorageWorks Modular Smart Array 500"
ArrayControllerModelTranslationTable(5)="Compaq StorageWorks HSG80 RAID Array"
ArrayControllerModelTranslationTable(6)="Compaq StorageWorks HSV110 Virtual Array"
ArrayControllerModelTranslationTable(7)="HP StorageWorks Modular Smart Array 500 G2"
ArrayControllerModelTranslationTable(8)="HP StorageWorks Modular Smart Array 20"
ArrayControllerModelTranslationTable(9)="HP StorageWorks Modular Smart Array 1510i"
ArrayControllerModelTranslationTable(Default)="HP StorageWorks Controller"

// InstanceTable
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(3)
DiskController.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
DiskController.Discovery.Instance.AttachedToDeviceType=""

//
// Collect

DiskController.Collect.Type="MultiInstance"

// Source(1) = the cpqFcaCntlr snmp table
// ID;Status
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.232.16.2.2.1.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Duplicate the status column
// ID;Status;Status
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL status
// ID;PATROLStatus;Status
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column="2"
DiskController.Collect.Source(1).Compute(2).TranslationTable="DiskControllerStatusTranslationTable"

// The DiskControllerStatusTranslationTable
DiskControllerStatusTranslationTable(2)="OK"
DiskControllerStatusTranslationTable(3)="ALARM"
DiskControllerStatusTranslationTable(4)="ALARM"
DiskControllerStatusTranslationTable(5)="WARN"
DiskControllerStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// ID;PATROLStatus;StatusInformation
DiskController.Collect.Source(1).Compute(3).Type="Translate"
DiskController.Collect.Source(1).Compute(3).Column="3"
DiskController.Collect.Source(1).Compute(3).TranslationTable="DiskControllerStatusInformationTranslationTable"

// The DiskControllerStatusInformationTranslationTable
DiskControllerStatusInformationTranslationTable(2)=""
DiskControllerStatusInformationTranslationTable(3)="Failed"
DiskControllerStatusInformationTranslationTable(4)="Offline"
DiskControllerStatusInformationTranslationTable(5)="Redundant path offline"
DiskControllerStatusInformationTranslationTable(Default)="Unknown Status"

// Source(2) = cpqFcaAccel snmp table
// ID;BatteryStatus
DiskController.Collect.Source(2).Type="SnmpTable"
DiskController.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.232.16.2.2.2.1"
DiskController.Collect.Source(2).SnmpTableSelectColumns="ID,6"

// Some hacks to manage the case where we don't have an Accel table
DiskController.Collect.Source(3)=%DiskController.Collect.Source(1)%
DiskController.Collect.Source(3).Compute(1).Type="KeepColumns"
DiskController.Collect.Source(3).Compute(1).ColumnNumbers="1"

DiskController.Collect.Source(4).Type="TableUnion"
DiskController.Collect.Source(4).Table1=%DiskController.Collect.Source(2)%
DiskController.Collect.Source(4).Table2=%DiskController.Collect.Source(3)%

// Translate the BatteryStatus column into a PATROL status
// ID;BatteryStatus
DiskController.Collect.Source(4).Compute(1).Type="Translate"
DiskController.Collect.Source(4).Compute(1).Column="2"
DiskController.Collect.Source(4).Compute(1).TranslationTable="DiskControllerBatteryStatusTranslationTable"

// The DiskControllerBatteryStatusTranslationTable
// The DiskControllerBatteryStatusTranslationTable
DiskControllerBatteryStatusTranslationTable(2)="OK"
DiskControllerBatteryStatusTranslationTable(3)="OK"
DiskControllerBatteryStatusTranslationTable(4)="ALARM"
DiskControllerBatteryStatusTranslationTable(5)="WARN"
DiskControllerBatteryStatusTranslationTable(6)="OK"
DiskControllerBatteryStatusTranslationTable(Default)="UNKNOWN"

// Source(5) = table joint of source(1) and source(2)
// ID;PATROLStatus;StatusInformation;ID;BatteryStatus
DiskController.Collect.Source(5).Type="TableJoint"
DiskController.Collect.Source(5).LeftTable=%DiskController.Collect.Source(1)%
DiskController.Collect.Source(5).RightTable=%DiskController.Collect.Source(4)%
DiskController.Collect.Source(5).LeftKeyColumn="1"
DiskController.Collect.Source(5).RightKeyColumn="1"

// The ValueTable = source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(5)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)
DiskController.Collect.BatteryStatus=ValueTable.Column(5)


//

