//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//               MS_HW_IBMAIXChrpMachstat.hdf
//
//      Supports: IBM CHRP-based AIX machines
//		Monitors: temperatures, voltages, fans and power supplies (environment)
//      Connects to: machstat
//
//

//
// HEADER
//

hdf.DisplayName="IBM AIX - CHRP Environment"
hdf.TypicalPlatform="IBM POWER"
hdf.ReliesOn="IBM AIX system commands (machstat)"
hdf.Comments="Provides hardware environment information (temperature sensors, voltage sensors, fans, power supplies) on IBM CHRP-based AIX systems."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="RS6000"

// Sudo-able commands
Sudo(1).Command="/usr/sbin/bootinfo"
Sudo(2).Command="/usr/sbin/machstat"

//
// DETECTION
//

// OS should be HP (for HP-UX, whatever version)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="RS6000"

// The various following tools have to be present
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:/usr/sbin/bootinfo}/usr/sbin/bootinfo -p"
Detection.Criteria(2).ExpectedResult="^chrp$"

//
// No COMPUTER enclosure (should be created by the IBMAIX HDF)
//

//
// No TEMPERATURE
//


//
// FANS
//

//
// Discovery

// Source(1) = static table of one row
Fan.Discovery.Source(1)="SystemCooling;System Cooling;"

// Instance Table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)

//
// Collect

// Collect type = mono-instance
Fan.Collect.Type="MonoInstance"

// Source(1) = machstat -f
// EPOW Event;
Fan.Collect.Source(1).Type="OsCommand"
Fan.Collect.Source(1).CommandLine="%{SUDO:/usr/sbin/machstat}/usr/sbin/machstat -f"
Fan.Collect.Source(1).KeepOnlyRegExp="^[0-9] [0-9]"
Fan.Collect.Source(1).Separators=" "
Fan.Collect.Source(1).SelectColumns="1"

// Duplicate the EPOW Event
// EPOW Event;EPOW Event
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="1"

// Translate the first EPOW Event column into a PATROL Status
// PATROLStatus;EPOW Event
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="1"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// The FanStatusTranslationTable
FanStatusTranslationTable(1)="WARN"
FanStatusTranslationTable(Default)="OK"

// Translate the second EPOW Event column into a more readable string
// PATROLStatus;statusInformation
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="2"
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(1)="Non-critical Cooling Problem"
FanStatusInformationTranslationTable(Default)=""

// ValueTable = Source(1) (easy enough)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.Status=ValueTable.Column(1)
Fan.Collect.StatusInformation=ValueTable.Column(2)


//
// POWER SUPPLIES
//

//
// Discovery

// Source(1) = static table of one row
PowerSupply.Discovery.Source(1)="SystemPower;System Power;"

// Instance Table = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(2)

//
// Collect

// Collect type = mono-instance
PowerSupply.Collect.Type="MonoInstance"

// Source(1) = machstat -f
// EPOW Event;
PowerSupply.Collect.Source(1).Type="OsCommand"
PowerSupply.Collect.Source(1).CommandLine="%{SUDO:/usr/sbin/machstat}/usr/sbin/machstat -f"
PowerSupply.Collect.Source(1).KeepOnlyRegExp="^[0-9] [0-9]"
PowerSupply.Collect.Source(1).Separators=" "
PowerSupply.Collect.Source(1).SelectColumns="1"

// Duplicate the EPOW Event
// EPOW Event;EPOW Event
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="1"

// Translate the first EPOW Event column into a PATROL Status
// PATROLStatus;EPOW Event
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="1"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(0)="OK"
PowerSupplyStatusTranslationTable(1)="OK"
PowerSupplyStatusTranslationTable(2)="WARN"
PowerSupplyStatusTranslationTable(3)="ALARM"
PowerSupplyStatusTranslationTable(4)="ALARM"
PowerSupplyStatusTranslationTable(5)="ALARM"
PowerSupplyStatusTranslationTable(7)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// Translate the second EPOW Event column into a more readable string
// PATROLStatus;statusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="2"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(0)=""
PowerSupplyStatusInformationTranslationTable(1)=""
PowerSupplyStatusInformationTranslationTable(2)="Non-critical Power Problem"
PowerSupplyStatusInformationTranslationTable(3)="Severe Power Problem - Shutting down!"
PowerSupplyStatusInformationTranslationTable(4)="Critical Problem - Halting now!"
PowerSupplyStatusInformationTranslationTable(5)="Critical Problem"
PowerSupplyStatusInformationTranslationTable(7)="Critical Problem"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1) (easy enough)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)
