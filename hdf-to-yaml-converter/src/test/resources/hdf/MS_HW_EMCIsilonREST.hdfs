////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Emc Isilon Cluster
//                Connects to REST API
//
//

//
// Header
//

hdf.DisplayName="EMC Isilon Cluster (REST)"
hdf.TypicalPlatform="EMC Isilon"
hdf.Version="1.0"
hdf.Comments="This connector discovers the status of an EMC Isilon Storage Cluster, as well as the various environment sensors (temperatures, fans, power supplies, etc.). Requires EMC Isilon (v8) or later."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

//
// DETECTION
//

// Check that we are talking to an Isilon System
// and that version 3 (IsiFS v8 or later) of the API is available
// Json Output
Detection.Criteria(1).Type="HTTP"
Detection.Criteria(1).Method="GET"
Detection.Criteria(1).URL="/platform/3/cluster/version"
Detection.Criteria(1).ExpectedResult="Isilon OneFS"
Detection.Criteria(1).ErrorMessage="Credentials Incorrect / Not an Isilon (v8) or later system"

//
// ENCLOSURE
//

// JSON Output
Enclosure.Discovery.Source(1).Type="HTTP"
Enclosure.Discovery.Source(1).Method="GET"
Enclosure.Discovery.Source(1).URL="/platform/3/cluster/nodes"
Enclosure.Discovery.Source(1).ResultContent="body"

// Preserve original source for re-use by other classes
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;NodeID;serial_number;model;nvram;
Enclosure.Discovery.Source(2).Compute(1).Type="Json2Csv"
Enclosure.Discovery.Source(2).Compute(1).EntryKey="nodes/hardware"
Enclosure.Discovery.Source(2).Compute(1).Properties="../lnn;/serial_number;/product;/nvram;"

// Adding Cluster Enclosure to attach disks to
Enclosure.Discovery.Source(3).Type="TableUnion"
Enclosure.Discovery.Source(3).Table1=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).Table2="Cluster;Cluster;;;;"

Enclosure.Discovery.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(1).Column=5
Enclosure.Discovery.Source(3).Compute(1).String="NVRAM: "

// Duplicate the NodeID column to use for the display ID
// JsonID;NodeID;serial_number;model;nvram;displayID
Enclosure.Discovery.Source(3).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(3).Compute(2).Column=5
Enclosure.Discovery.Source(3).Compute(2).String=";"

Enclosure.Discovery.Source(3).Compute(3).Type="RightConcat"
Enclosure.Discovery.Source(3).Compute(3).Column=6
Enclosure.Discovery.Source(3).Compute(3).String=column(2)

// Add the word Node to the display ID
// JsonID;NodeID;serial_number;model;nvram;displayID
Enclosure.Discovery.Source(3).Compute(4).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(4).Column=6
Enclosure.Discovery.Source(3).Compute(4).String="Node "

// Instance Table
// JsonID;NodeID;serial_number;model;nvram;displayID
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(6)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Vendor="EMC"
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Enclosure.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="Storage"

// Collect
Enclosure.Collect.Type="MultiInstance"

// JSON Output
Enclosure.Collect.Source(1).Type="HTTP"
Enclosure.Collect.Source(1).Method="GET"
Enclosure.Collect.Source(1).URL="/platform/3/cluster/nodes"
Enclosure.Collect.Source(1).ResultContent="body"

// Preserve original Source for re-use
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;LNN;smartfailed;dead;down;readonly;in_cluster;shutdown_readonly;
//  1      2          3    4     5   6          7           8
Enclosure.Collect.Source(2).Compute(1).Type="Json2Csv"
Enclosure.Collect.Source(2).Compute(1).EntryKey="nodes/state/smartfail"
Enclosure.Collect.Source(2).Compute(1).Properties="../../lnn;/smartfailed;/dead;/down;/readonly;/in_cluster;/shutdown_readonly;"
Enclosure.Collect.Source(2).Compute(1).Separator=";"

// Translate the Various Boolean Status
Enclosure.Collect.Source(2).Compute(2).Type="Translate"
Enclosure.Collect.Source(2).Compute(2).Column=3
Enclosure.Collect.Source(2).Compute(2).TranslationTable="SmartFailedTranslateTable"
SmartFailedTranslateTable("true")="SmartFailed"
SmartFailedTranslateTable(Default)=""

Enclosure.Collect.Source(2).Compute(3).Type="Translate"
Enclosure.Collect.Source(2).Compute(3).Column=4
Enclosure.Collect.Source(2).Compute(3).TranslationTable="DeadTranslateTable"
DeadTranslateTable("true")="Dead"
DeadTranslateTable(Default)=""

Enclosure.Collect.Source(2).Compute(4).Type="Translate"
Enclosure.Collect.Source(2).Compute(4).Column=5
Enclosure.Collect.Source(2).Compute(4).TranslationTable="DownTranslateTable"
DownTranslateTable("true")="Down"
DeadTranslateTable(Default)=""

Enclosure.Collect.Source(2).Compute(5).Type="Translate"
Enclosure.Collect.Source(2).Compute(5).Column=6
Enclosure.Collect.Source(2).Compute(5).TranslationTable="ReadOnlyTranslateTable"
ReadOnlyTranslateTable("true")="ReadOnly"
ReadOnlyTranslateTable(Default)=""

Enclosure.Collect.Source(2).Compute(6).Type="Translate"
Enclosure.Collect.Source(2).Compute(6).Column=7
Enclosure.Collect.Source(2).Compute(6).TranslationTable="InclusterTranslateTable"
InclusterTranslateTable("true")="InCluster"
InclusterTranslateTable("false")="NotInCluster"
InclusterTranslateTable(Default)=""

Enclosure.Collect.Source(2).Compute(7).Type="Translate"
Enclosure.Collect.Source(2).Compute(7).Column=8
Enclosure.Collect.Source(2).Compute(7).TranslationTable="ShutDownReadOnlyTranslateTable"
ShutDownReadOnlyTranslateTable("true")="ShutDownReadOnly"
ShutDownReadOnlyTranslateTable(Default)=""

// Concat all the Status Columns into one Column
// JsonID;LNN;smartfailed;dead;down;readonly;in_cluster;shutdown_readonly;
//  1      2          3    4     5   6          7           8
Enclosure.Collect.Source(2).Compute(8).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(8).Column=3
Enclosure.Collect.Source(2).Compute(8).String="|"
Enclosure.Collect.Source(2).Compute(9).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(9).Column=3
Enclosure.Collect.Source(2).Compute(9).String=Column(4)

Enclosure.Collect.Source(2).Compute(10).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(10).Column=3
Enclosure.Collect.Source(2).Compute(10).String="|"
Enclosure.Collect.Source(2).Compute(11).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(11).Column=3
Enclosure.Collect.Source(2).Compute(11).String=Column(5)

Enclosure.Collect.Source(2).Compute(12).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(12).Column=3
Enclosure.Collect.Source(2).Compute(12).String="|"
Enclosure.Collect.Source(2).Compute(13).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(13).Column=3
Enclosure.Collect.Source(2).Compute(13).String=Column(6)

Enclosure.Collect.Source(2).Compute(14).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(14).Column=3
Enclosure.Collect.Source(2).Compute(14).String="|"
Enclosure.Collect.Source(2).Compute(15).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(15).Column=3
Enclosure.Collect.Source(2).Compute(15).String=Column(7)

Enclosure.Collect.Source(2).Compute(16).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(16).Column=3
Enclosure.Collect.Source(2).Compute(16).String="|"
Enclosure.Collect.Source(2).Compute(17).Type="RightConcat"
Enclosure.Collect.Source(2).Compute(17).Column=3
Enclosure.Collect.Source(2).Compute(17).String=Column(8)

// Keep only columns
// JsonID;LNN;StatusArray;
Enclosure.Collect.Source(2).Compute(18).Type="KeepColumns"
Enclosure.Collect.Source(2).Compute(18).ColumnNumbers="1,2,3"

// Make a copy to start the numbering again
// JsonID;LNN;StatusArray;
Enclosure.Collect.Source(3)=%Enclosure.Collect.Source(2)%

// Duplicate the StatusArray
// JsonID;LNN;StatusArray;StatusArray;
Enclosure.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(3).Compute(1).Column=3

// Translate first Status into a PATROL status
// JsonID;LNN;PatrolStatus;StatusArray;
Enclosure.Collect.Source(3).Compute(2).Type="ArrayTranslate"
Enclosure.Collect.Source(3).Compute(2).Column=3
Enclosure.Collect.Source(3).Compute(2).TranslationTable="NodeStatusTranslationTable"

// NodeStatusTranslationTable
NodeStatusTranslationTable("SmartFailed")="ALARM"
NodeStatusTranslationTable("Dead")="ALARM"
NodeStatusTranslationTable("Down")="ALARM"
NodeStatusTranslationTable("ReadOnly")="WARN"
NodeStatusTranslationTable("InCluster")="OK"
NodeStatusTranslationTable("NotInCluster")="WARN"
NodeStatusTranslationTable("ShutDownReadOnly")="WARN"
NodeStatusTranslationTable(Default)="OK"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// JsonID;LNN;PatrolStatus;StatusArray;
Enclosure.Collect.Source(3).Compute(3).Type="Convert"
Enclosure.Collect.Source(3).Compute(3).Column=3
Enclosure.Collect.Source(3).Compute(3).ConversionType="Array2SimpleStatus"

// Translate second Status into a statusInformation
// JsonID;LNN;PatrolStatus;StatusArray;
Enclosure.Collect.Source(3).Compute(4).Type="ArrayTranslate"
Enclosure.Collect.Source(3).Compute(4).Column=4
Enclosure.Collect.Source(3).Compute(4).TranslationTable="NodeStatusInformationTranslationTable"

// NodeStatusInformationTranslationTable
NodeStatusInformationTranslationTable("SmartFailed")="SmartFailed"
NodeStatusInformationTranslationTable("Dead")="Dead"
NodeStatusInformationTranslationTable("Down")="Down"
NodeStatusInformationTranslationTable("ReadOnly")="ReadOnly"
NodeStatusInformationTranslationTable("InCluster")="InCluster"
NodeStatusInformationTranslationTable("NotInCluster")="NotInCluster"
NodeStatusInformationTranslationTable("ShutDownReadOnly")="ShutDownReadOnly"
NodeStatusInformationTranslationTable(Default)=""

// Adding Cluster collect so not to generate system output errors
Enclosure.Collect.Source(4).Type="TableUnion"
Enclosure.Collect.Source(4).Table1=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(4).Table2="Cluster;Cluster;;;;"

// Value Table
// JsonID;LNN;PatrolStatus;StatusInformation;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)
Enclosure.Collect.Status=ValueTable.Column(3)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)

//
// Fan
//

// Discovery
// Json Output
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;lnn;name;name;
Fan.Discovery.Source(1).Compute(1).Type="Json2Csv"
Fan.Discovery.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Fan.Discovery.Source(1).Compute(1).Properties="../../../lnn;../name;/name;"

// Keep only fans
Fan.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column=3
Fan.Discovery.Source(1).Compute(2).RegExp="Fans"

// Duplicate Name Column
// JsonID;lnn;type;name;name;
Fan.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(3).Column=4

// Translate second name column to Upper and Lower Thresholds
// JsonID;lnn;type;name;WarningThreshold;AlarmThreshold;
Fan.Discovery.Source(1).Compute(4).Type="Translate"
Fan.Discovery.Source(1).Compute(4).Column=5
Fan.Discovery.Source(1).Compute(4).TranslationTable="FanThresholdTranslationTable"

FanThresholdTranslationTable("FAN TAC SENSOR 1")=";800"
FanThresholdTranslationTable("FAN TAC SENSOR 2")=";800"
FanThresholdTranslationTable("FAN TAC SENSOR 3")=";800"
FanThresholdTranslationTable("PS FAN SPEED 1")=";800"
FanThresholdTranslationTable("PS FAN SPEED 2")=";800"
FanThresholdTranslationTable(Default)=";"

// Instance Table
// JsonID;lnn;type;name;LowerThreshold;UpperThreshold
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Fan.Collect.Type="MultiInstance"

// Json Output
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
//JsonID;value;
Fan.Collect.Source(1).Compute(1).Type="Json2Csv"
Fan.Collect.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Fan.Collect.Source(1).Compute(1).Properties="/value;"

// Value Table
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(2)

//
// Voltage
//

// Discovery

//Json Output
Voltage.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;lnn;type;name;value;
Voltage.Discovery.Source(1).Compute(1).Type="Json2Csv"
Voltage.Discovery.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Voltage.Discovery.Source(1).Compute(1).Properties="../../../lnn;../name;/name;/value;"

// Keep only Voltages
Voltage.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(2).Column=3
Voltage.Discovery.Source(1).Compute(2).RegExp="Volts"

// remove discovered instances with no values
Voltage.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(1).Compute(3).Column=5
Voltage.Discovery.Source(1).Compute(3).RegExp="na"

// Duplacate name column
// JsonID;lnn;type;name;name;value;
Voltage.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Voltage.Discovery.Source(1).Compute(4).Column=4

// Translate new Column in to Upper and Lower Thresholds
// JsonID;lnn;type;name;LowerThreshold;UpperThreshold;value;
Voltage.Discovery.Source(1).Compute(5).Type="Translate"
Voltage.Discovery.Source(1).Compute(5).Column=5
Voltage.Discovery.Source(1).Compute(5).TranslationTable="VoltageThresholdTranslationTable"

// VoltageThresholdTranslationTable
// Note:  Not all voltages have thresholds.
// Sensors are either not listed in isi_hw_check Output
// or are listed as "na"
VoltageThresholdTranslationTable("BB +1.1V STBY")="1060;1150"
VoltageThresholdTranslationTable("BB +1.2V VCCP1")="570;1440"
VoltageThresholdTranslationTable("BB +1.2V P1vcc")="570;1440"
VoltageThresholdTranslationTable("BB +1.2V P2vcc")="570;1440"
VoltageThresholdTranslationTable("BB +1.35 P1LV AB")="570;1440"
VoltageThresholdTranslationTable("BB +1.35 P2LV CD")="570;1440"
VoltageThresholdTranslationTable("BB +1.8V AUX")="1730;1870"
VoltageThresholdTranslationTable("BB +12.0V")="11050;12870"
VoltageThresholdTranslationTable("BB +3.0V VBAT")="2240;"
VoltageThresholdTranslationTable("BB +3.3V")="3070;3510"
VoltageThresholdTranslationTable("BB +3.3V AUX")="3070;3510"
VoltageThresholdTranslationTable("BB +5.0V")="4630;5350"
VoltageThresholdTranslationTable("BB +5.0V STBY")="4630;5350"
VoltageThresholdTranslationTable("BB -12.0V")="-13230;-10640"
VoltageThresholdTranslationTable("BB 1.5V P1DDR AB")="1410;1590"
VoltageThresholdTranslationTable("BB 1.5V P2DDR AB")="1410;1590"
VoltageThresholdTranslationTable("BB 1.5V P1DDR CD")="1410;1590"
VoltageThresholdTranslationTable("BB 1.5V P2DDR CD")="1410;1590"
VoltageThresholdTranslationTable("PS IN VOLT 1")= ";"
VoltageThresholdTranslationTable("PS IN VOLT 2")= ";"
VoltageThresholdTranslationTable("PS OUT VOLT 1")="11400;12800"
VoltageThresholdTranslationTable("PS OUT VOLT 2")="11400;12800"
VoltageThresholdTranslationTable("V1.0")="920;1080"
VoltageThresholdTranslationTable("VCC_1V0")="920;1080"
VoltageThresholdTranslationTable("VCC_1V8")="1660;1940"
VoltageThresholdTranslationTable("V1.8")="1660;1940"
VoltageThresholdTranslationTable("V12.0")="11020;12960"
VoltageThresholdTranslationTable("VCC_12V0")="11020;12960"
VoltageThresholdTranslationTable("V12.0_BB_A")="11020;12960"
VoltageThresholdTranslationTable("V12.0_FAN1")="11020;12960"
VoltageThresholdTranslationTable("V12.0_FAN2")="11020;12960"
VoltageThresholdTranslationTable("V12.0_FAN3")="11020;12960"
VoltageThresholdTranslationTable("V12.0_MB0")="11020;12960"
VoltageThresholdTranslationTable("V12.0_MB1")="11020;12960"
VoltageThresholdTranslationTable("V3.3")="3030;3560"
VoltageThresholdTranslationTable("VCC_3V3")="3030;3560"
VoltageThresholdTranslationTable("V3.3_CMD")="3030;3560"
VoltageThresholdTranslationTable("V3.3_STBY")="3030;3560"
VoltageThresholdTranslationTable("V5.0")="4600;5400"
VoltageThresholdTranslationTable("VCC_5V0")="4600;5400"
VoltageThresholdTranslationTable("VCC_5V0_SB")="4600;5400"
VoltageThresholdTranslationTable("VCC_5V0_CBL")="4600;5400"
VoltageThresholdTranslationTable("V5.0_FP_X")="4600;5400"
VoltageThresholdTranslationTable("V5.0_NVRAM")="4600;5400"
VoltageThresholdTranslationTable("V5.0_STBY")="4600;5400"
VoltageThresholdTranslationTable(Default)=";"

// Instance Table
// JsonID;lnn;type;name;LowerThreshold;UpperThreshold;value;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(6)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Voltage.Collect.Type="MultiInstance"

// Json Ouput
Voltage.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;value;
Voltage.Collect.Source(1).Compute(1).Type="Json2Csv"
Voltage.Collect.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Voltage.Collect.Source(1).Compute(1).Properties="/value;"

Voltage.Collect.Source(1).Compute(2).Type="Replace"
Voltage.Collect.Source(1).Compute(2).Column=2
Voltage.Collect.Source(1).Compute(2).Replace="NA"
Voltage.Collect.Source(1).Compute(2).ReplaceBy=""

Voltage.Collect.Source(1).Compute(3).Type="Multiply"
Voltage.Collect.Source(1).Compute(3).Column=2
Voltage.Collect.Source(1).Compute(3).MultiplyBy=1000

// Value Table
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)

//
// Temperature
//

// Discovery
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;lnn;type;name;
Temperature.Discovery.Source(1).Compute(1).Type="Json2Csv"
Temperature.Discovery.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Temperature.Discovery.Source(1).Compute(1).Properties="../../../lnn;../name;/name;"

// Keep only Temperatures
Temperature.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(2).Column=3
Temperature.Discovery.Source(1).Compute(2).RegExp="Temps"

// Duplicate name column
// JsonID;lnn;type;name;name;
Temperature.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(3).Column=4

// Translate new column into Warning / Alarm
// JsonID;lnn;type;name;Warning;Alarm;
Temperature.Discovery.Source(1).Compute(4).Type="Translate"
Temperature.Discovery.Source(1).Compute(4).Column=5
Temperature.Discovery.Source(1).Compute(4).TranslationTable="TemperatureThresholdTranslationTable"

// TemperatureThresholdTranslationTable
// A lot of sensors are of type "Margin" which are "degrees below warning"
// so are negative values
TemperatureThresholdTranslationTable("BB BMC Temp")=";100"
TemperatureThresholdTranslationTable("BB EDGE Temp")=";65"
TemperatureThresholdTranslationTable("BB MEM VR Temp")=";115"
TemperatureThresholdTranslationTable("BB P1 VR Temp")=";115"
TemperatureThresholdTranslationTable("DIMM Thrm Mrgn 1")="0;5"
TemperatureThresholdTranslationTable("DIMM Thrm Mrgn 2")="0;5"
TemperatureThresholdTranslationTable("DIMM Thrm Mrgn 3")="0;5"
TemperatureThresholdTranslationTable("DIMM Thrm Mrgn 4")="0;5"
TemperatureThresholdTranslationTable("LAN NIC Temp")=";115"
TemperatureThresholdTranslationTable("P1 DTS Therm Mgn")="0;10"
TemperatureThresholdTranslationTable("P1 Therm Margin")="0;10"
TemperatureThresholdTranslationTable("P2 DTS Therm Mgn")="0;10"
TemperatureThresholdTranslationTable("P2 Therm Margin")="0;10"
TemperatureThresholdTranslationTable("PS TEMP 1")=";95"
TemperatureThresholdTranslationTable("PS TEMP 2")=";95"
TemperatureThresholdTranslationTable("TEMP SENSOR 1")=";50"
TemperatureThresholdTranslationTable("TEMP SENSOR 2")=";50"
TemperatureThresholdTranslationTable("LSI CORE TEMP")=";73"
TemperatureThresholdTranslationTable("SSB Temp")=";95"
TemperatureThresholdTranslationTable(Default)=";"

// Instance Table
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)

Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Temperature.Collect.Type="MultiInstance"

// JSON Output
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;value;
Temperature.Collect.Source(1).Compute(1).Type="Json2Csv"
Temperature.Collect.Source(1).Compute(1).EntryKey="nodes/sensors/sensors/values"
Temperature.Collect.Source(1).Compute(1).Properties="/value;"

Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)

//
// PowerSupply
//

// Discovery
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
//JsonID;lnn;name;type;
PowerSupply.Discovery.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Discovery.Source(1).Compute(1).EntryKey="nodes/status/powersupplies/supplies"
PowerSupply.Discovery.Source(1).Compute(1).Properties="../../../lnn;/name;/type;"

// AdditionalInformation Vendor
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).String="Vendor: "

// The Instance table
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
PowerSupply.Collect.Type="MultiInstance"

PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
PowerSupply.Collect.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Collect.Source(1).Compute(1).EntryKey="nodes/status/powersupplies/supplies"
PowerSupply.Collect.Source(1).Compute(1).Properties="/status;/status"

// Fixing some power supply status to be translatable
// This is necessary as the status returned by the host sometimes contains variables (displayName)
PowerSupply.Collect.Source(1).Compute(2).Type="Awk"
PowerSupply.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(1)

PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=2
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusTranslationTable"

PowerSupplyStatusTranslationTable("Good")="OK"
PowerSupplyStatusTranslationTable(Default)="ALARM"

// The Value table
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

//
// CPU
//

// Discovery
CPU.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
//JsonID;lnn;model;
CPU.Discovery.Source(1).Compute(1).Type="Json2Csv"
CPU.Discovery.Source(1).Compute(1).EntryKey="nodes/status/cpu"
CPU.Discovery.Source(1).Compute(1).Properties="../../lnn;/model;"

// The instance table
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID="CPUs Overtemp"
CPU.Discovery.Instance.Model=InstanceTable.Column(3)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
CPU.Collect.Type="MultiInstance"

CPU.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
CPU.Collect.Source(1).Compute(1).Type="Json2Csv"
CPU.Collect.Source(1).Compute(1).EntryKey="nodes/status/cpu"
CPU.Collect.Source(1).Compute(1).Properties="/overtemp;"

CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column=2
CPU.Collect.Source(1).Compute(2).TranslationTable="CPUStatusTranslationTable"

CPUStatusTranslationTable("Normal")="OK"
CPUStatusTranslationTable(Default)="ALARM"

// The value table
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(2)

//
// PhysicalDisk
//

// Discovery
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// Taking logical_block_length as physical_block_length is way off for SSDS
// JsonID;lnn;location;model;serial;blocks;logical_block_length;ui_state
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Discovery.Source(1).Compute(1).EntryKey="nodes/drives"
PhysicalDisk.Discovery.Source(1).Compute(1).Properties="../lnn;/locnstr;/model;/serial;/blocks;/logical_block_length;/ui_state"

// Get size in Bytes
// JsonID;lnn;location;model;serial;size(bytes);logical_block_length;ui_state
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=6
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=Column(8)

// Get size in Bytes
// JsonID;lnn;location;model;serial;size(bytes);logical_block_length;ui_state
PhysicalDisk.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=8
PhysicalDisk.Discovery.Source(1).Compute(3).RegExp="EMPTY"

// Add node and drive information to DisplayName
// node;lnn;displayID;model;serial;size(bytes);logical_block_length;ui_state
PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=3
PhysicalDisk.Discovery.Source(1).Compute(4).String=" "

PhysicalDisk.Discovery.Source(1).Compute(5).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(5).Column=3
PhysicalDisk.Discovery.Source(1).Compute(5).String=Column(2)

PhysicalDisk.Discovery.Source(1).Compute(6).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(6).Column=3
PhysicalDisk.Discovery.Source(1).Compute(6).String="Node "

// The Instance table
// node;lnn;displayID;model;serial;size(bytes);logical_block_length;ui_state
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(6)

PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
PhysicalDisk.Collect.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Collect.Source(1).Compute(1).EntryKey="nodes/drives"
PhysicalDisk.Collect.Source(1).Compute(1).Properties="/ui_state;/serial"

// JSonID;ui_state;ui_state;serial
PhysicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2

// JsonID;patrolStatus;ui_state;serial
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=2
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusTranslationTable"

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable("HEALTHY")="OK"
PhysicalDiskStatusTranslationTable("L3")="OK"
PhysicalDiskStatusTranslationTable("JOURNAL")="OK"
PhysicalDiskStatusTranslationTable("STALLED")="OK"
PhysicalDiskStatusTranslationTable("BOOT_DRIVE")="OK"
PhysicalDiskStatusTranslationTable("SMARTFAIL")="WARN"
PhysicalDiskStatusTranslationTable("RESTRIPE")="WARN"
PhysicalDiskStatusTranslationTable("SUSPENDED")="WARN"
PhysicalDiskStatusTranslationTable("NEW")="WARN"
PhysicalDiskStatusTranslationTable("PREPARING")="WARN"
PhysicalDiskStatusTranslationTable("USED")="WARN"
PhysicalDiskStatusTranslationTable("WRONG_TYPE")="WARN"
PhysicalDiskStatusTranslationTable("REPLACE")="ALARM"
PhysicalDiskStatusTranslationTable("ERASE")="WARN"
PhysicalDiskStatusTranslationTable("NOT")="ALARM"
PhysicalDiskStatusTranslationTable("INSECURE")="ALARM"
PhysicalDiskStatusTranslationTable("UNENCRYPTED")="ALARM"
PhysicalDiskStatusTranslationTable("SED_ERROR")="ALARM"
PhysicalDiskStatusTranslationTable("EMPTY")="WARN"
PhysicalDiskStatusTranslationTable(Default)="ALARM"

// The value table
// JsonID;patrolStatus;ui_state;serial
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(4)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
// NetworkCard
//

// Discovery
// Json Output
NetworkCard.Discovery.Source(1).Type="HTTP"
NetworkCard.Discovery.Source(1).Method="GET"
NetworkCard.Discovery.Source(1).URL="/platform/3/network/interfaces"
NetworkCard.Discovery.Source(1).ResultContent="body"

// Transform JSON to CSV to extract information
// JsonID;lnn;name;status;
NetworkCard.Discovery.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Discovery.Source(1).Compute(1).EntryKey="interfaces"
NetworkCard.Discovery.Source(1).Compute(1).Properties="/lnn;/name;/status;"

// JsonID;lnn;name;status;
NetworkCard.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(2).Column=4
NetworkCard.Discovery.Source(1).Compute(2).RegExp="Not Available"

// Instance Table
// JsonID;lnn;name;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect type is MultiInstance
NetworkCard.Collect.Type="MultiInstance"

//Json Output
NetworkCard.Collect.Source(1).Type="HTTP"
NetworkCard.Collect.Source(1).Method="GET"
NetworkCard.Collect.Source(1).URL="/platform/3/network/interfaces"
NetworkCard.Collect.Source(1).ResultContent="body"

// Transform JSON to CSV to extract information
// JsonID;status;
NetworkCard.Collect.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Collect.Source(1).Compute(1).EntryKey="interfaces"
NetworkCard.Collect.Source(1).Compute(1).Properties="/status;"

// Duplicate status column
// JsonID;status;status;
NetworkCard.Collect.Source(1).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(2).Column=2

// Duplicate status column
// JsonID;status;status;status;
NetworkCard.Collect.Source(1).Compute(3).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(3).Column=2

// Translate NetworkCardStatus into PatrolStatus
// JsonID;NetworkcardStatus;NetworkcardStatus;status;
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=2
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="NetworkCardStatusTranslationTable"

NetworkCardStatusTranslationTable("inactive")="OK"
NetworkCardStatusTranslationTable("up")="OK"
NetworkCardStatusTranslationTable("no carrier")="OK"
NetworkCardStatusTranslationTable(Default)="ALARM"

// Translate second status into LinkStatus
// JsonID;NetworkcardStatus;LinkStatus;status;
NetworkCard.Collect.Source(1).Compute(5).Type="Translate"
NetworkCard.Collect.Source(1).Compute(5).Column=3
NetworkCard.Collect.Source(1).Compute(5).TranslationTable="LinkStatusTranslationTable"

// The NetworkCardStatusTranslationTable
LinkStatusTranslationTable("inactive")="WARN"
LinkStatusTranslationTable("up")="OK"
LinkStatusTranslationTable("no carrier")="WARN"
LinkStatusTranslationTable(Default)="WARN"

// Value Table
// JsonID;NetworkcardStatus;LinkStatus;statusInformation
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(2)
NetworkCard.Collect.StatusInformation=ValueTable.Column(4)
NetworkCard.Collect.LinkStatus=ValueTable.Column(3)

//
//  Battery
//

//  Discovery
Battery.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;lnn;
Battery.Discovery.Source(1).Compute(1).Type="Json2Csv"
Battery.Discovery.Source(1).Compute(1).EntryKey="nodes/status/batterystatus"
Battery.Discovery.Source(1).Compute(1).Properties="../../lnn;"

//Copy Source(1) into new Source(2)
Battery.Discovery.Source(2)=%Battery.Discovery.Source(1)%

//Add " - 1" to JsonID
Battery.Discovery.Source(2).Compute(1).Type="RightConcat"
Battery.Discovery.Source(2).Compute(1).Column=1
Battery.Discovery.Source(2).Compute(1).String="-1"

//Duplicate lnn;
//JsonID;lnn;lnn;
Battery.Discovery.Source(2).Compute(2).Type="DuplicateColumn"
Battery.Discovery.Source(2).Compute(2).Column=2

// Replace column 3 with Display String
// JsonID;lnn;DisplayName;
Battery.Discovery.Source(2).Compute(3).Type="Replace"
Battery.Discovery.Source(2).Compute(3).Column=3
Battery.Discovery.Source(2).Compute(3).Replace=Column(3)
Battery.Discovery.Source(2).Compute(3).ReplaceBy="Battery 1"

//Copy Source(1) into new Source(3)
Battery.Discovery.Source(3)=%Battery.Discovery.Source(1)%

//Add " - 2" to JsonID
Battery.Discovery.Source(3).Compute(1).Type="RightConcat"
Battery.Discovery.Source(3).Compute(1).Column=1
Battery.Discovery.Source(3).Compute(1).String="-2"

//Duplicate lnn;
//JsonID;lnn;lnn;
Battery.Discovery.Source(3).Compute(2).Type="DuplicateColumn"
Battery.Discovery.Source(3).Compute(2).Column=2

// Replace column 3 with Display String
// JsonID;lnn;DisplayName;
Battery.Discovery.Source(3).Compute(3).Type="Replace"
Battery.Discovery.Source(3).Compute(3).Column=3
Battery.Discovery.Source(3).Compute(3).Replace=Column(3)
Battery.Discovery.Source(3).Compute(3).ReplaceBy="Battery 2"

// Union Source(2) and Source(3)
// This creates proper number of discovered instances
// JsonID;lnn;DisplayName;
Battery.Discovery.Source(4).Type="TableUnion"
Battery.Discovery.Source(4).Table1=%Battery.Discovery.Source(2)%
Battery.Discovery.Source(4).Table2=%Battery.Discovery.Source(3)%

// Instance Table
// JsonID;lnn;DisplayName;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(4)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//  Collect
Battery.Collect.Type="MultiInstance"

//Json Output
Battery.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Transform JSON to CSV to extract information
// JsonID;result1;status1;result2;status2;
Battery.Collect.Source(1).Compute(1).Type="Json2Csv"
Battery.Collect.Source(1).Compute(1).EntryKey="nodes/status/batterystatus"
Battery.Collect.Source(1).Compute(1).Properties="/result1;/status1;/result2;/status2;"

// Keep Columns related to battery 1 and store in Source(2)
// JsonID;result1;status1;
Battery.Collect.Source(2)=%Battery.Collect.Source(1)%
Battery.Collect.Source(2).Compute(1).Type="KeepColumns"
Battery.Collect.Source(2).Compute(1).ColumnNumbers="1,2,3"

// Add " - 1" to JsonID to match discovery instance
// JsonID;result1;status1;
Battery.Collect.Source(2).Compute(2).Type="RightConcat"
Battery.Collect.Source(2).Compute(2).Column=1
Battery.Collect.Source(2).Compute(2).String="-1"

// Keep columns related to battery 2 and store in Source(3)
// JsonID;result2;status2;
Battery.Collect.Source(3)=%Battery.Collect.Source(1)%
Battery.Collect.Source(3).Compute(1).Type="KeepColumns"
Battery.Collect.Source(3).Compute(1).ColumnNumbers="1,4,5"

// Add " - 2" to JsonID to match discovery instance
// JsonID;result2;status2;
Battery.Collect.Source(3).Compute(2).Type="RightConcat"
Battery.Collect.Source(3).Compute(2).Column=1
Battery.Collect.Source(3).Compute(2).String="-2"

// Union Source(2) and Source(3) to get proper number of collection instances
Battery.Collect.Source(4).Type="TableUnion"
Battery.Collect.Source(4).Table1=%Battery.Collect.Source(2)%
Battery.Collect.Source(4).Table2=%Battery.Collect.Source(3)%

// Translate battery status into PatrolStatus
// JsonID;PatrolStatus;StatusInformation;
Battery.Collect.Source(4).Compute(1).Type="Translate"
Battery.Collect.Source(4).Compute(1).Column=2
Battery.Collect.Source(4).Compute(1).TranslationTable="BatteryStatusTranslationTable"

BatteryStatusTranslationTable("passed")="OK"
BatteryStatusTranslationTable("Good-Good")="OK"
BatteryStatusTranslationTable("Good")="OK"
BatteryStatusTranslationTable("Ready, enabled, and fully charged")="OK"
BatteryStatusTranslationTable("Ready and enabled")="OK"
BatteryStatusTranslationTable("Good-Testing")="OK"
BatteryStatusTranslationTable("Testing-Good")="OK"
BatteryStatusTranslationTable("Good-Test")="OK"
BatteryStatusTranslationTable(Default)="ALARM"

// Value Table
// JsonID;patrolStatus;status;
Battery.Collect.ValueTable=%Battery.Collect.Source(4)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

//
// LogicalDisk
//

// Discovery
LogicalDisk.Discovery.Source(1).Type="HTTP"
LogicalDisk.Discovery.Source(1).Method="GET"
LogicalDisk.Discovery.Source(1).URL="/platform/3/storagepool/storagepools"
LogicalDisk.Discovery.Source(1).ResultContent="body"

// Transform JSON to CSV to extract information
// JsonID;lnn;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Json2Csv"
LogicalDisk.Discovery.Source(1).Compute(1).EntryKey="storagepools"
LogicalDisk.Discovery.Source(1).Compute(1).Properties="/name;/usage/total_bytes;/protection_policy;"

LogicalDisk.Discovery.Source(1).Compute(2).Type="LeftConcat"
LogicalDisk.Discovery.Source(1).Compute(2).Column=4
LogicalDisk.Discovery.Source(1).Compute(2).String="Protection Policy: "

// The Instance table
// JsonID;lnn;Status;AdditionalInformation;StatusInformation;ID;TotalSize;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.AttachedToDeviceID="Cluster"
LogicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)


//Collection

// Collect type is MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

//Json Output
LogicalDisk.Collect.Source(1).Type="HTTP"
LogicalDisk.Collect.Source(1).Method="GET"
LogicalDisk.Collect.Source(1).URL="/platform/3/storagepool/storagepools"
LogicalDisk.Collect.Source(1).ResultContent="body"

// Transform JSON to CSV to extract information
// JsonID;lnn;underprovisioned;missing_drives;devices_down;devices_smartfailed;waiting_repair
LogicalDisk.Collect.Source(1).Compute(1).Type="Json2Csv"
LogicalDisk.Collect.Source(1).Compute(1).EntryKey="storagepools"
LogicalDisk.Collect.Source(1).Compute(1).Properties="/health_flags[0];/health_flags[1];/health_flags[2];/health_flags[3];/health_flags[4];"

LogicalDisk.Collect.Source(1).Compute(2).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).String="|"

// missing_drives
LogicalDisk.Collect.Source(1).Compute(3).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(3).Column=2
LogicalDisk.Collect.Source(1).Compute(3).String=Column(3)

LogicalDisk.Collect.Source(1).Compute(4).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(4).Column=2
LogicalDisk.Collect.Source(1).Compute(4).String="|"

// devices_down
LogicalDisk.Collect.Source(1).Compute(5).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(5).Column=2
LogicalDisk.Collect.Source(1).Compute(5).String=Column(4)

LogicalDisk.Collect.Source(1).Compute(6).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(6).Column=2
LogicalDisk.Collect.Source(1).Compute(6).String="|"

// devices_smartfailed
LogicalDisk.Collect.Source(1).Compute(7).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(7).Column=2
LogicalDisk.Collect.Source(1).Compute(7).String=Column(5)

LogicalDisk.Collect.Source(1).Compute(8).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(8).Column=2
LogicalDisk.Collect.Source(1).Compute(8).String="|"

// waiting_repair
LogicalDisk.Collect.Source(1).Compute(9).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(9).Column=2
LogicalDisk.Collect.Source(1).Compute(9).String=Column(6)

// Adding default case if no other statuses
// default_ok
LogicalDisk.Collect.Source(1).Compute(10).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(10).Column=2
LogicalDisk.Collect.Source(1).Compute(10).String="|default_ok"

LogicalDisk.Collect.Source(1).Compute(11).Type="KeepColumns"
LogicalDisk.Collect.Source(1).Compute(11).ColumnNumbers="1,2"

LogicalDisk.Collect.Source(2)=%LogicalDisk.Collect.Source(1)%

// Duplicate status array column
// JsonID;StatusArray;
LogicalDisk.Collect.Source(2).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(2).Compute(1).Column=2

// Translate StatusArray into PatrolStatus
// JsonID;StatusArray;StatusArray
LogicalDisk.Collect.Source(2).Compute(2).Type="ArrayTranslate"
LogicalDisk.Collect.Source(2).Compute(2).Column=2
LogicalDisk.Collect.Source(2).Compute(2).TranslationTable="HealthFlagsTranslationTable"

HealthFlagsTranslationTable("underprovisioned")="WARN"
HealthFlagsTranslationTable("missing_drives")="WARN"
HealthFlagsTranslationTable("devices_down")="WARN"
HealthFlagsTranslationTable("devices_smartfailed")="WARN"
HealthFlagsTranslationTable("waiting_repair")="WARN"
HealthFlagsTranslationTable("default_ok")="OK"
HealthFlagsTranslationTable(Default)="UNKNOWN"

// Translate StatusArray into a StatusInformation
// JsonID;PATROLStatusArray;StatusArray
LogicalDisk.Collect.Source(2).Compute(3).Type="ArrayTranslate"
LogicalDisk.Collect.Source(2).Compute(3).Column=3
LogicalDisk.Collect.Source(2).Compute(3).TranslationTable="HealthFlagsDescriptionTranslationTable"

HealthFlagsDescriptionTranslationTable("underprovisioned")="Underprovisioned"
HealthFlagsDescriptionTranslationTable("missing_drives")="Missing Drives"
HealthFlagsDescriptionTranslationTable("devices_down")="Devices Down"
HealthFlagsDescriptionTranslationTable("devices_smartfailed")="Devices Smartfailed"
HealthFlagsDescriptionTranslationTable("waiting_repair")="Waiting Repair"
HealthFlagsDescriptionTranslationTable(Default)=""

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// JsonID;PatrolStatusArray;StatusInformation;
LogicalDisk.Collect.Source(2).Compute(4).Type="Convert"
LogicalDisk.Collect.Source(2).Compute(4).Column=2
LogicalDisk.Collect.Source(2).Compute(4).ConversionType="Array2SimpleStatus"

// The Value Table
// JsonID;PatrolStatus;StatusInformation;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(2)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that modifies the status to a translatable one
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
#Collection related values and informative fields.

BEGIN {FS=";";OFS=";"}
gsub(/.*good/,"Good",$2)
{print $0}

EmbeddedFile(1).End
