//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                MS_HW_HPUXDisk.hdf
//
//      Supports: HP-UX machines
//		Monitors: standard non-RAID SCSI harddisks
//      Connects to: different HP-UX standard tools (pvdisplay, ioscan, etc.)
//
//

//
// HEADER
//

hdf.DisplayName="HP-UX - Disks"
hdf.TypicalPlatform="HP 9000,HP Integrity,HP SuperDome"
hdf.ReliesOn="HP-UX system commands (pvdisplay, ioscan, etc.)"
hdf.Comments="Provides hardware SCSI disks status information on HP-UX systems. Requires root privileges."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="HP"

// Sudo-able commands
Sudo(1).Command="/usr/sbin/diskinfo"

//
// DETECTION
//

// OS should be HP (for HP-UX, whatever version)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="HP"

// STM should not be present, because in this case, we will use the HPUX-CSTM connector
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="if /bin/test ! -f /usr/bin/stm ; then /bin/echo ""NO STM""; fi"
Detection.Criteria(2).ExpectedResult="^NO STM$"

// The various following tools have to be present
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="FIRSTRAWDEVICE=`/bin/ls /dev/rdsk|/bin/head -1`; %{SUDO:/usr/sbin/diskinfo}/usr/sbin/diskinfo /dev/rdsk/$FIRSTRAWDEVICE"
Detection.Criteria(3).ExpectedResult="^SCSI describe of /dev/rdsk/"

//
// NO COMPUTER
//

//
// DISK CONTROLLERS
//

//
// Discovery

// Source(1) = output of EmbeddedFile(1)
// diskNumber;controllerID;deviceID;Vendor Model;size
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"
DiskController.Discovery.Source(1).Timeout="60"
DiskController.Discovery.Source(1).KeepOnlyRegExp="^MSHW;"
DiskController.Discovery.Source(1).Separators=";"
DiskController.Discovery.Source(1).SelectColumns="2,3,4,5,6"

// Source(2) = output of ioscan -kFC ext_bus
// DeviceID;Model
DiskController.Discovery.Source(2).Type="OsCommand"
DiskController.Discovery.Source(2).CommandLine="/usr/sbin/ioscan -kFC ext_bus"
DiskController.Discovery.Source(2).KeepOnlyRegExp=":ext_bus:"
DiskController.Discovery.Source(2).Separators=":"
DiskController.Discovery.Source(2).SelectColumns="11,18"

// Source(3) = table joint of Source(2) and Source(1)
// This is to keep only disk controllers that actually have disks
// ControllerDeviceID;Model;diskNumber;controllerID;deviceID;Vendor Model;size
DiskController.Discovery.Source(3).Type="TableJoint"
DiskController.Discovery.Source(3).LeftTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(3).LeftKeyColumn="1"
DiskController.Discovery.Source(3).RightKeyColumn="2"

// InstanceTable = Source(3)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)


//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = copy of the DiskController.Discovery.Source(1)
// diskNumber;controllerID;deviceID;Vendor Model;size
PhysicalDisk.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// InstanceTable = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(4)

//
// Collect

// Collect type is "mono-instance"
PhysicalDisk.Collect.Type="MonoInstance"

// Source(1) = output of the pvdisplay command
PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="/usr/sbin/pvdisplay /dev/dsk/%PhysicalDisk.Collect.DeviceID%"

// Process output of pvdisplay through a awk script
// PV Status
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript="/^PV Status/ {print ""MSHW;"" $3 ""-"" $4}"
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"
PhysicalDisk.Collect.Source(1).Compute(1).SelectColumns="2"

// Duplicate the (single) status column
// PV Status;PV Status
PhysicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(2).Column="1"

// Translate the PV status into a PATROL status
// PATROLStatus;PV Status
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column="1"
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusTranslationTable"

// Translate the second PV Status into a more readable string
// PATROLStatus;StatusInformation
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column="2"
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable("available-")="OK"
PhysicalDiskStatusTranslationTable("available/data-spared")="OK"
PhysicalDiskStatusTranslationTable("available/active-spare")="OK"
PhysicalDiskStatusTranslationTable("available/standby-spare")="OK"
PhysicalDiskStatusTranslationTable("unavailable-")="ALARM"
PhysicalDiskStatusTranslationTable("unavailable/data-spared")="WARN"
PhysicalDiskStatusTranslationTable("unavailable/active-spare")="ALARM"
PhysicalDiskStatusTranslationTable("unavailable/standby-spare")="WARN"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable("available-")=""
PhysicalDiskStatusInformationTranslationTable("available/data-spared")="Spared"
PhysicalDiskStatusInformationTranslationTable("available/active-spare")="Active spare"
PhysicalDiskStatusInformationTranslationTable("available/standby-spare")="Spare"
PhysicalDiskStatusInformationTranslationTable("unavailable-")="Unavailable"
PhysicalDiskStatusInformationTranslationTable("unavailable/data-spared")="Unavailable but spared"
PhysicalDiskStatusInformationTranslationTable("unavailable/active-spare")="Dead spare: Data loss!"
PhysicalDiskStatusInformationTranslationTable("unavailable/standby-spare")="Unavailable spare"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.Status=ValueTable.Column(1)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(2)


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = shell script that lists disks, hardware path and raw device path
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
echo "Retrieving disk devices"
diskList=`/usr/sbin/ioscan -kfnC disk|/bin/grep -e DEVICE -e /dev|/bin/awk '{
	if ($1 == "disk")
	{
		diskNumber = $2
		hardwarePath = $3
		rawDevicePath = ""
	}
	if ($2 ~ "^/dev/rdsk/")
	{
		deviceID = substr($2, 11)
		controllerIndex = match(hardwarePath, "\.[0-9]+\.[0-9]+$")
		if (diskNumber != "" && hardwarePath != "" && controllerIndex > 0)
		{
			controllerID = substr(hardwarePath, 1, controllerIndex - 1)
			print diskNumber ";" controllerID ";" deviceID
		}
		deviceID = ""
		deviceNumber = ""
		hardwarePath = ""
	}
}'`

for diskInformation in $diskList
do
deviceID=`/bin/echo $diskInformation|/bin/awk -F";" '{print $3}'`
%{SUDO:/usr/sbin/diskinfo}/usr/sbin/diskinfo /dev/rdsk/$deviceID|/bin/awk -v diskInformation=$diskInformation '{
	if ($0 ~ "^SCSI describe of /dev/rdsk")
	{
		vendor = ""
		productID = ""
		type = "";
		size = "";
	}

	if ($1 == "vendor:")
	{
		vendor = $2
	}

	if ($1 == "product" && $2 == "id:")
	{
		productID = $3
	}

	if ($1 == "type:")
	{
		type = $2 " " $3
	}

	if ($1 == "size:")
	{
		size = $2
		if (type == "direct access" && vendor != "" && productID != "" && size > 0)
		{
			printf("MSHW;%s;%s;%.0f\n", diskInformation, vendor " " productID, size*1024)
		}
	}
}'
done
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

