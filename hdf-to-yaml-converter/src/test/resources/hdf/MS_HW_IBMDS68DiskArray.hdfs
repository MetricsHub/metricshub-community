////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: IBM DS68 SMI-S Compliant Disk Arrays
//                Connects to an IBM Storage Manager Agent
//				  (namespace is root/ibm)
//

//
// Header
//

hdf.DisplayName="IBM DS6000/8000 Disk Arrays"
hdf.TypicalPlatform="IBM DS6000,DS8000"
hdf.ReliesOn="IBM SMI-S Agent (IBM System Storage DS6000/DS8000 Storage Manager)"
hdf.Version="1.0"
hdf.Comments="This connector discovers the enclosure and the disks of IBM SAN disk arrays, as well as the storage pools and storage volumes. It will also discover and monitor the FC ports, physical and logical disks of the array. It relies on the WBEM technology and supports SMI-S compliant disk arrays only."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"


// Supersedes the existing SMIS Disk Array Connector
hdf.Supersedes="MS_HW_SMISDiskArray.hdf"

//
// Detection
//

// Verify that there is an IBMTSDS_StorageSystem instance

Detection.Criteria(1).Type="WBEM"
Detection.Criteria(1).WbemNameSpace="root/ibm"
Detection.Criteria(1).WbemQuery="SELECT Name,Dedicated FROM IBMTSDS_StorageSystem"

// There also must be disk drives declared in this namespace
Detection.Criteria(2).Type="WBEM"
Detection.Criteria(2).WbemQuery="SELECT DeviceID FROM IBMTSDS_DiskDrive"
Detection.Criteria(2).WbemNameSpace="root/ibm"

//
// Enclosure
//

//
// Discovery

// Source(1) = IBMTSDS_StorageSystem
// StorageSystemID,AdditionalInformationIndex,AdditionalInformationValues
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemQuery="SELECT Name,IdentifyingDescriptions,OtherIdentifyingInfo FROM IBMTSDS_StorageSystem"
Enclosure.Discovery.Source(1).WbemNameSpace="root/ibm"

// Instance Table
// Name,Caption,Manufacturer,Model,SerialNumber
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="IBM"
Enclosure.Discovery.Instance.Model="DS6000/8000"
Enclosure.Discovery.Instance.Type="Storage"

//
// Collect

// Collect type is multiinstance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = CIM_ComputerSystem
// Name;OperationalStatus;
Enclosure.Collect.Source(1).Type="Wbem"
Enclosure.Collect.Source(1).WbemQuery="SELECT Name,OperationalStatus FROM IBMTSDS_StorageSystem"
Enclosure.Collect.Source(1).WbemNameSpace="root/ibm"

// Duplicate the "OperationalStatusArray" column
// Name;OperationalStatus;OperationalStatus;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// Name;PATROLStatusArray;OperationalStatus;
Enclosure.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// Name;PATROLStatusArray;StatusDescriptions;
Enclosure.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Enclosure.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.Source(1).Compute(4).Type="Convert"
Enclosure.Collect.Source(1).Compute(4).Column=2
Enclosure.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)

//
//  Physical disks
//


//
// Discovery

// Source(1) = IBMTSDS_DiskDrive
// DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive
PhysicalDisk.Discovery.Source(1).Type="WBEM"
PhysicalDisk.Discovery.Source(1).WbemQuery="SELECT Location,DeviceID,DDMSpeed,SystemName,__Path FROM IBMTSDS_DiskDrive"
PhysicalDisk.Discovery.Source(1).WbemNameSpace="root/ibm"

// Duplicate the Disk ID
// Note actually used.  This is left here for the hope someday of trimming the display ID once we get an idea of system structure
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive
PhysicalDisk.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1

// Add "Speed: " to the speed column to identify this information
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive
PhysicalDisk.Discovery.Source(1).Compute(2).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=4
PhysicalDisk.Discovery.Source(1).Compute(2).String="Speed: "

// Source(2) = IBMTSDS_DiskExtent
// BlockSize,Blocks,IBMTSDS_DiskExtent
PhysicalDisk.Discovery.Source(2).Type="WBEM"
PhysicalDisk.Discovery.Source(2).WbemQuery="SELECT BlockSize,NumberOfBlocks,__Path FROM IBMTSDS_DiskExtent"
PhysicalDisk.Discovery.Source(2).WbemNameSpace="root/ibm"

// Convert Blocks to Size
// BlockSize,Size,IBMTSDS_DiskExtent
PhysicalDisk.Discovery.Source(2).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(2).Compute(1).Column=2
PhysicalDisk.Discovery.Source(2).Compute(1).MultiplyBy=Column(1)

// Source(3) = IBMTSDS_DiskDrivePackage
// Model,SerialNumber,IBMTSDS_DiskDrivePackage
PhysicalDisk.Discovery.Source(3).Type="WBEM"
PhysicalDisk.Discovery.Source(3).WbemQuery="SELECT Model,SerialNumber,__Path FROM IBMTSDS_DiskDrivePackage"
PhysicalDisk.Discovery.Source(3).WbemNameSpace="root/ibm"

// Source(4) = IBMTSDS_DiskDriveRealizes
// IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive
PhysicalDisk.Discovery.Source(4).Type="WBEM"
PhysicalDisk.Discovery.Source(4).WbemQuery="SELECT Antecedent,Dependent FROM IBMTSDS_DiskDriveRealizes"
PhysicalDisk.Discovery.Source(4).WbemNameSpace="root/ibm"

// Source(5) = IBMTSDS_DiskDrivePresent
// IBMTSDS_DiskDrive,IBMTSDS_DiskExtent
PhysicalDisk.Discovery.Source(5).Type="WBEM"
PhysicalDisk.Discovery.Source(5).WbemQuery="SELECT Antecedent,Dependent FROM IBMTSDS_DiskDrivePresent"
PhysicalDisk.Discovery.Source(5).WbemNameSpace="root/ibm"

// Source (6) = Union of IBMTSDS_DiskDrive and Association Table
// DisplayID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive
PhysicalDisk.Discovery.Source(6).Type="TableJoint"
PhysicalDisk.Discovery.Source(6).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(6).RightTable=%PhysicalDisk.Discovery.Source(4)%
PhysicalDisk.Discovery.Source(6).LeftKeyColumn=6
PhysicalDisk.Discovery.Source(6).RightKeyColumn=2
PhysicalDisk.Discovery.Source(6).KeyType="Wbem"

// Source (7) = Union of Source 6 and IBMTSDS_DiskDrivePackage
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,Model,SerialNumber,IBMTSDS_DiskDrivePackage
PhysicalDisk.Discovery.Source(7).Type="TableJoint"
PhysicalDisk.Discovery.Source(7).LeftTable=%PhysicalDisk.Discovery.Source(6)%
PhysicalDisk.Discovery.Source(7).RightTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Source(7).LeftKeyColumn=7
PhysicalDisk.Discovery.Source(7).RightKeyColumn=3
PhysicalDisk.Discovery.Source(7).KeyType="Wbem"

// Source (8) = Union of Source 7 and Association Table
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,Model,SerialNumber,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,IBMTSDS_DiskExtent
PhysicalDisk.Discovery.Source(8).Type="TableJoint"
PhysicalDisk.Discovery.Source(8).LeftTable=%PhysicalDisk.Discovery.Source(7)%
PhysicalDisk.Discovery.Source(8).RightTable=%PhysicalDisk.Discovery.Source(5)%
PhysicalDisk.Discovery.Source(8).LeftKeyColumn=6
PhysicalDisk.Discovery.Source(8).RightKeyColumn=1
PhysicalDisk.Discovery.Source(8).KeyType="Wbem"

// Source (9) = Union of Source 8 and IBMTSDS_DiskExtent
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,Model,SerialNumber,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,IBMTSDS_DiskExtent,BlockSize,Size,IBMTSDS_DiskExtent
PhysicalDisk.Discovery.Source(9).Type="TableJoint"
PhysicalDisk.Discovery.Source(9).LeftTable=%PhysicalDisk.Discovery.Source(8)%
PhysicalDisk.Discovery.Source(9).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(9).LeftKeyColumn=13
PhysicalDisk.Discovery.Source(9).RightKeyColumn=3
PhysicalDisk.Discovery.Source(9).KeyType="Wbem"

// Clean up Columns
//    1       2         3        4      5        6                   7                         8              9        10               11                    12                  13            14      15    16
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,IBMTSDS_DiskDrive,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,Model,SerialNumber,IBMTSDS_DiskDrivePackage,IBMTSDS_DiskDrive,IBMTSDS_DiskExtent,BlockSize,Size,IBMTSDS_DiskExtent
// DiskID,DiskID,AdditionalInformation,Speed,SystemName,                                                             Model,SerialNumber,                                                              BlockSize,Size
PhysicalDisk.Discovery.Source(9).Compute(1).Type="KeepColumns"
PhysicalDisk.Discovery.Source(9).Compute(1).ColumnNumbers="1,2,3,4,5,9,10,14,15"

// Fix the DisplayID with an awk script
// DiskID,DisplayID,AdditionalInformation,Speed,SystemName,Model,SerialNumber,BlockSize,Size
PhysicalDisk.Discovery.Source(9).Compute(2).Type="Awk"
PhysicalDisk.Discovery.Source(9).Compute(2).AwkScript=EmbeddedFile(1)
PhysicalDisk.Discovery.Source(9).Compute(2).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(9).Compute(2).Separators=";"
PhysicalDisk.Discovery.Source(9).Compute(2).SelectColumns="2,3,4,5,6,7,8,9,10"

// Instance Table
// DiskID,DisplayID,AdditionalInformation,Speed,SystemName,Model,SerialNumber,BlockSize,Size
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(9)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
// Removed as Addtional Information turns out to be the serial number
// PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(7)



// Collect type is multiinstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = IBMTSDS_DiskDrive
// DiskID;OperationalStatus;
PhysicalDisk.Collect.Source(1).Type="Wbem"
PhysicalDisk.Collect.Source(1).WbemQuery="SELECT Location,OperationalStatus FROM IBMTSDS_DiskDrive"
PhysicalDisk.Collect.Source(1).WbemNameSpace="root/ibm"

// Duplicate the "OperationalStatus" column
// DiskID,OperationalStatus
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DiskID,PATROLStatusArray,OperationalStatus
PhysicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DiskID,PATROLStatusArray,StatusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
PhysicalDisk.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DiskID,PATROLStatus,StatusInformation
PhysicalDisk.Collect.Source(1).Compute(4).Type="Convert"
PhysicalDisk.Collect.Source(1).Compute(4).Column=2
PhysicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DiskID,PATROLStatus,StatusDescriptions
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
//  LogicalDisks (Raid Groups)
//

//
// Discovery

// Source(1) = IBMTSDS_PrimordialStoragePool
// Size,DeviceID,IBMTSDS_PrimordialStoragePool
LogicalDisk.Discovery.Source(1).Type="WBEM"
LogicalDisk.Discovery.Source(1).WbemQuery="SELECT TotalManagedSpace,InstanceID,__Path  FROM IBMTSDS_PrimordialStoragePool"
LogicalDisk.Discovery.Source(1).WbemNameSpace="root/ibm"

// Add ".Primordial" to the Device ID, the DisplayID of "Primordial", the LogicalDisk type of Storage Pool and a Blank Raid Level
// Size,DeviceID,DisplayID,DiskType,RaidLevel,IBMTSDS_PrimordialStoragePool
LogicalDisk.Discovery.Source(1).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(1).Compute(1).Column=2
LogicalDisk.Discovery.Source(1).Compute(1).String=";Primordial;Storage Pool;"

// Source(2) = IBMTSDS_ArrayPool
// Size,DeviceID,RAIDLevel,IBMTSDS_ArrayPool
LogicalDisk.Discovery.Source(2).Type="WBEM"
LogicalDisk.Discovery.Source(2).WbemQuery="SELECT TotalManagedSpace,InstanceID,RAIDLevel,__Path  FROM IBMTSDS_ArrayPool"
LogicalDisk.Discovery.Source(2).WbemNameSpace="root/ibm"

// Duplicate the device ID
// Size,DeviceID,DeviceID,RAIDLevel,IBMTSDS_ArrayPool
LogicalDisk.Discovery.Source(2).Compute(1).Type="DuplicateColumn"
LogicalDisk.Discovery.Source(2).Compute(1).Column=2

// Add the Disk Type
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,IBMTSDS_ArrayPool
LogicalDisk.Discovery.Source(2).Compute(2).Type="RightConcat"
LogicalDisk.Discovery.Source(2).Compute(2).Column=3
LogicalDisk.Discovery.Source(2).Compute(2).String=";Array Pool"

// Translate the RaidLevel
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,IBMTSDS_ArrayPool
LogicalDisk.Discovery.Source(2).Compute(3).Type="Translate"
LogicalDisk.Discovery.Source(2).Compute(3).Column=5
LogicalDisk.Discovery.Source(2).Compute(3).TranslationTable="LogicalDiskRaidLevel"

LogicalDiskRaidLevel(3)="JBOD"
LogicalDiskRaidLevel(4)="RAID 5"
LogicalDiskRaidLevel(5)="RAID 10"
LogicalDiskRaidLevel(6)="RAID 6"
LogicalDiskRaidLevel(Default)=""

// Source(3) = IBMTSDS_ArraySitePool
// Size,DeviceID,IBMTSDS_ArraySitePool
LogicalDisk.Discovery.Source(3).Type="WBEM"
LogicalDisk.Discovery.Source(3).WbemQuery="SELECT TotalManagedSpace,InstanceID,__Path  FROM IBMTSDS_ArraySitePool"
LogicalDisk.Discovery.Source(3).WbemNameSpace="root/ibm"

// Duplicate the DeviceID
// Size,DeviceID,DeviceID,IBMTSDS_ArraySitePool
LogicalDisk.Discovery.Source(3).Compute(1).Type="DuplicateColumn"
LogicalDisk.Discovery.Source(3).Compute(1).Column=2

// Add Disk Type and blank raid level
// Size,DeviceID,DeviceID,DiskType,RaidLevel,IBMTSDS_ArraySitePool
LogicalDisk.Discovery.Source(3).Compute(2).Type="RightConcat"
LogicalDisk.Discovery.Source(3).Compute(2).Column=3
LogicalDisk.Discovery.Source(3).Compute(2).String=";Array Site;"

// Source(4) = IBMTSDS_ExtentPool
// DeviceID,RaidLevel,IBMTSDS_ExtentPool
LogicalDisk.Discovery.Source(4).Type="WBEM"
LogicalDisk.Discovery.Source(4).WbemQuery="SELECT InstanceID,ExtentType,__Path  FROM IBMTSDS_ExtentPool"
LogicalDisk.Discovery.Source(4).WbemNameSpace="root/ibm"

//Add a blank size
// Size,DeviceID,DeviceID,RaidLevel,IBMTSDS_ExtentPool
LogicalDisk.Discovery.Source(4).Compute(1).Type="LeftConcat"
LogicalDisk.Discovery.Source(4).Compute(1).Column=1
LogicalDisk.Discovery.Source(4).Compute(1).String=";"

// Duplicate the DeviceID
// Size,DeviceID,DeviceID,RaidLevel,IBMTSDS_ExtentPool
LogicalDisk.Discovery.Source(4).Compute(2).Type="DuplicateColumn"
LogicalDisk.Discovery.Source(4).Compute(2).Column=2

// Add Disk Type
// Size,DeviceID,DeviceID,DiskType,RaidLevel,IBMTSDS_ExtentPool
LogicalDisk.Discovery.Source(4).Compute(3).Type="RightConcat"
LogicalDisk.Discovery.Source(4).Compute(3).Column=3
LogicalDisk.Discovery.Source(4).Compute(3).String=";Extent Pool"

// Translate the RaidLevel
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,IBMTSDS_ExtentPool
LogicalDisk.Discovery.Source(4).Compute(4).Type="Translate"
LogicalDisk.Discovery.Source(4).Compute(4).Column=5
LogicalDisk.Discovery.Source(4).Compute(4).TranslationTable="ExtentPoolRaidLevel"

ExtentPoolRaidLevel(3)="Fixed Block"
ExtentPoolRaidLevel(4)="Count Key Data"
ExtentPoolRaidLevel(5)="3380"
ExtentPoolRaidLevel(Default)=""

// Source(5) = IBMTSDS_RankPool
// Size,DeviceID,RAIDLevel,IBMTSDS_RankPool
LogicalDisk.Discovery.Source(5).Type="WBEM"
LogicalDisk.Discovery.Source(5).WbemQuery="SELECT TotalManagedSpace,InstanceID,RAIDLevel,__Path  FROM IBMTSDS_RankPool"
LogicalDisk.Discovery.Source(5).WbemNameSpace="root/ibm"

// Duplicate the device ID
// Size,DeviceID,DeviceID,RAIDLevel,IBMTSDS_RankPool
LogicalDisk.Discovery.Source(5).Compute(1).Type="DuplicateColumn"
LogicalDisk.Discovery.Source(5).Compute(1).Column=2

// Add the Disk Type
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,IBMTSDS_RankPool
LogicalDisk.Discovery.Source(5).Compute(2).Type="RightConcat"
LogicalDisk.Discovery.Source(5).Compute(2).Column=3
LogicalDisk.Discovery.Source(5).Compute(2).String=";Rank Pool"

// Translate the RaidLevel
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,IBMTSDS_RankPool
LogicalDisk.Discovery.Source(5).Compute(3).Type="Translate"
LogicalDisk.Discovery.Source(5).Compute(3).Column=5
LogicalDisk.Discovery.Source(5).Compute(3).TranslationTable="LogicalDiskRaidLevel"

// Union all the Logical Disks
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,__PoolPath
LogicalDisk.Discovery.Source(6).Type="TableUnion"
LogicalDisk.Discovery.Source(6).Table1=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(6).Table2=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(6).Table3=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Source(6).Table4=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Source(6).Table5=%LogicalDisk.Discovery.Source(5)%

// Get the System to Pool table
// IBMTSDS_StorageSystem,__PoolPath
LogicalDisk.Discovery.Source(7).Type="WBEM"
LogicalDisk.Discovery.Source(7).WbemQuery="SELECT GroupComponent,PartComponent FROM CIM_HostedStoragePool"
LogicalDisk.Discovery.Source(7).WbemNameSpace="root/ibm"

// Get the SystemID to System Path
// StorageSystemID,IBMTSDS_StorageSystem
LogicalDisk.Discovery.Source(8).Type="WBEM"
LogicalDisk.Discovery.Source(8).WbemQuery="SELECT Name,__Path FROM IBMTSDS_StorageSystem"
LogicalDisk.Discovery.Source(8).WbemNameSpace="root/ibm"

// Match the Pool Table to the System table
// IBMTSDS_StorageSystem,__PoolPath,StorageSystemID,IBMTSDS_StorageSystem
LogicalDisk.Discovery.Source(9).Type="TableJoint"
LogicalDisk.Discovery.Source(9).LeftTable=%LogicalDisk.Discovery.Source(7)%
LogicalDisk.Discovery.Source(9).RightTable=%LogicalDisk.Discovery.Source(8)%
LogicalDisk.Discovery.Source(9).LeftKeyColumn=1
LogicalDisk.Discovery.Source(9).RightKeyColumn=2
LogicalDisk.Discovery.Source(9).KeyType="Wbem"

// Keep only the Pool to SystemID
// IBMTSDS_StorageSystem,__PoolPath,StorageSystemID,IBMTSDS_StorageSystem
// __PoolPath,StorageSystemID
LogicalDisk.Discovery.Source(9).Compute(1).Type="KeepColumns"
LogicalDisk.Discovery.Source(9).Compute(1).ColumnNumbers="2,3"

// Link the main discovery table to the system ID table
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,__PoolPath,__PoolPath,StorageSystemID
LogicalDisk.Discovery.Source(10).Type="TableJoint"
LogicalDisk.Discovery.Source(10).LeftTable=%LogicalDisk.Discovery.Source(6)%
LogicalDisk.Discovery.Source(10).RightTable=%LogicalDisk.Discovery.Source(9)%
LogicalDisk.Discovery.Source(10).LeftKeyColumn=6
LogicalDisk.Discovery.Source(10).RightKeyColumn=1
LogicalDisk.Discovery.Source(10).KeyType="Wbem"

// Get rid of the Paths
//   1      2       3        4        5           6           7          8
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,__PoolPath,__PoolPath,StorageSystemID
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,                      StorageSystemID
LogicalDisk.Discovery.Source(10).Compute(1).Type="KeepColumns"
LogicalDisk.Discovery.Source(10).Compute(1).ColumnNumbers="1,2,3,4,5,8"

// Remove IBMTSDS: and the SystemID from the DisplayID and the dash
// Size,DeviceID,DisplayID,DiskType,RAIDLevel,StorageSystemID
LogicalDisk.Discovery.Source(10).Compute(2).Type="Replace"
LogicalDisk.Discovery.Source(10).Compute(2).Column=3
LogicalDisk.Discovery.Source(10).Compute(2).Replace="IBMTSDS:"
LogicalDisk.Discovery.Source(10).Compute(2).ReplaceBy=""

LogicalDisk.Discovery.Source(10).Compute(3).Type="Replace"
LogicalDisk.Discovery.Source(10).Compute(3).Column=3
LogicalDisk.Discovery.Source(10).Compute(3).Replace=Column(6)
LogicalDisk.Discovery.Source(10).Compute(3).ReplaceBy=""

LogicalDisk.Discovery.Source(10).Compute(4).Type="Replace"
LogicalDisk.Discovery.Source(10).Compute(4).Column=3
LogicalDisk.Discovery.Source(10).Compute(4).Replace="-"
LogicalDisk.Discovery.Source(10).Compute(4).ReplaceBy=""

// Instance Table
// Size,DeviceID,DeviceID,DiskType,RAIDLevel,StorageSystemID
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(10)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.LogicalDiskType=InstanceTable.Column(4)

// Collect type is multiinstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = CIM_StoragePool
// DiskID;OperationalStatus;
LogicalDisk.Collect.Source(1).Type="Wbem"
LogicalDisk.Collect.Source(1).WbemQuery="SELECT InstanceID,OperationalStatus FROM CIM_StoragePool"
LogicalDisk.Collect.Source(1).WbemNameSpace="root/ibm"

// Duplicate the "OperationalStatus" column
// DiskID,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DiskID,PATROLStatusArray,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DiskID,PATROLStatusArray,StatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(3).Column=3
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
LogicalDisk.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DiskID,PATROLStatus,StatusInformation
LogicalDisk.Collect.Source(1).Compute(4).Type="Convert"
LogicalDisk.Collect.Source(1).Compute(4).Column=2
LogicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DiskID,PATROLStatus,StatusDescriptions
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)



//
//  Other Devices (LPARs, SCSIProtocolController)
//

//
// Discovery

// SCSI Protocol Controllers
// DeviceID,SystemName,Status
OtherDevice.Discovery.Source(1).Type="WBEM"
OtherDevice.Discovery.Source(1).WbemQuery="SELECT DeviceID,SystemName,HealthState FROM IBMTSDS_SCSIProtocolController"
OtherDevice.Discovery.Source(1).WbemNameSpace="root/ibm"

// Exclude SCSI Controllers with a Health State of Unknown (0) - This happened on our test system, not sure why...
// DeviceID,SystemName,Status
OtherDevice.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=3
OtherDevice.Discovery.Source(1).Compute(1).ValueList="0"

// Duplicate the device ID
// DeviceID,DeviceID,SystemName,Status
OtherDevice.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Discovery.Source(1).Compute(2).Column=1

// Duplicate the SystemName
// DeviceID,DeviceID,SystemName,SystemName,Status
OtherDevice.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
OtherDevice.Discovery.Source(1).Compute(3).Column=3

// Add a Dash to the SystemName and the DeviceType
// DeviceID,DeviceID,SystemName,SystemName-,OtherDeviceType,Status
OtherDevice.Discovery.Source(1).Compute(4).Type="RightConcat"
OtherDevice.Discovery.Source(1).Compute(4).Column=4
OtherDevice.Discovery.Source(1).Compute(4).String="-;SCSI-ProtocolCtrl"

// Remove the SystemName- from the DeviceID to get the DisplayID
// DeviceID,DisplayID,SystemName,SystemName-,OtherDeviceType,Status
OtherDevice.Discovery.Source(1).Compute(5).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(5).Column=2
OtherDevice.Discovery.Source(1).Compute(5).Replace=Column(4)
OtherDevice.Discovery.Source(1).Compute(5).ReplaceBy=""

// Keep only used columns
// DeviceID,DisplayID,SystemName,OtherDeviceType
OtherDevice.Discovery.Source(1).Compute(6).Type="KeepColumns"
OtherDevice.Discovery.Source(1).Compute(6).ColumnNumbers="1,2,3,5"

// System LPARs
// DeviceID,IBMTSDS_StorageLPARSystem
OtherDevice.Discovery.Source(2).Type="WBEM"
OtherDevice.Discovery.Source(2).WbemQuery="SELECT Name,__Path FROM IBMTSDS_StorageLPARSystem"
OtherDevice.Discovery.Source(2).WbemNameSpace="root/ibm"

// Get the association LPAR to System table
//  This has got to be the weirdest bug ever.  Querying IBMTSDS_ComponentOfStorageSystem, you lose the first parameter requested?!?
// BLANK_BUG,IBMTSDS_StorageSystem,IBMTSDS_StorageLPARSystem
OtherDevice.Discovery.Source(3).Type="WBEM"
OtherDevice.Discovery.Source(3).WbemQuery="SELECT GroupComponent,PartComponent FROM IBMTSDS_ComponentOfStorageSystem"
OtherDevice.Discovery.Source(3).WbemNameSpace="root/ibm"

// Get SystemID to Path
// StorageSystemID,IBMTSDS_StorageSystem
OtherDevice.Discovery.Source(4).Type="WBEM"
OtherDevice.Discovery.Source(4).WbemQuery="SELECT Name,__Path FROM IBMTSDS_StorageSystem"
OtherDevice.Discovery.Source(4).WbemNameSpace="root/ibm"

// Add the Association table to the LPAR instance table
// DeviceID,IBMTSDS_StorageLPARSystem,IBMTSDS_StorageSystem,IBMTSDS_StorageLPARSystem
OtherDevice.Discovery.Source(5).Type="TableJoint"
OtherDevice.Discovery.Source(5).LeftTable=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(5).RightTable=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Source(5).LeftKeyColumn=2
OtherDevice.Discovery.Source(5).RightKeyColumn=2
OtherDevice.Discovery.Source(5).KeyType="Wbem"

// Add the Association table to the LPAR instance table
// DeviceID,IBMTSDS_StorageLPARSystem,IBMTSDS_StorageSystem,IBMTSDS_StorageLPARSystem,StorageSystemID,IBMTSDS_StorageSystem
OtherDevice.Discovery.Source(6).Type="TableJoint"
OtherDevice.Discovery.Source(6).LeftTable=%OtherDevice.Discovery.Source(5)%
OtherDevice.Discovery.Source(6).RightTable=%OtherDevice.Discovery.Source(4)%
OtherDevice.Discovery.Source(6).LeftKeyColumn=3
OtherDevice.Discovery.Source(6).RightKeyColumn=2
OtherDevice.Discovery.Source(6).KeyType="Wbem"

// Get Rid of all the Paths
//     1                  2                     3                      4                   5                 6
// DeviceID,IBMTSDS_StorageLPARSystem,IBMTSDS_StorageSystem,IBMTSDS_StorageLPARSystem,StorageSystemID,IBMTSDS_StorageSystem
// DeviceID,                                                                          StorageSystemID
OtherDevice.Discovery.Source(6).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(6).Compute(1).ColumnNumbers="1,5"

// Duplicate the DeviceID
// DeviceID,DeviceID,StorageSystemID
OtherDevice.Discovery.Source(6).Compute(2).Type="DuplicateColumn"
OtherDevice.Discovery.Source(6).Compute(2).Column=1

// Duplicate the StorageSystemID
// DeviceID,DeviceID,StorageSystemID,StorageSystemID
OtherDevice.Discovery.Source(6).Compute(3).Type="DuplicateColumn"
OtherDevice.Discovery.Source(6).Compute(3).Column=3

// Add a - to the Storage System ID
// DeviceID,DeviceID,StorageSystemID,StorageSystemID-,OtherDeviceType
OtherDevice.Discovery.Source(6).Compute(4).Type="RightConcat"
OtherDevice.Discovery.Source(6).Compute(4).Column=4
OtherDevice.Discovery.Source(6).Compute(4).String="-;LPAR"

// Remove the SystemName- from the DeviceID to get the DisplayID
// DeviceID,DisplayID,SystemName,SystemName-,OtherDeviceType
OtherDevice.Discovery.Source(6).Compute(5).Type="Replace"
OtherDevice.Discovery.Source(6).Compute(5).Column=2
OtherDevice.Discovery.Source(6).Compute(5).Replace=Column(4)
OtherDevice.Discovery.Source(6).Compute(5).ReplaceBy=""

// Keep only  ed columns
// DeviceID,DisplayID,SystemName,OtherDeviceType
OtherDevice.Discovery.Source(6).Compute(6).Type="KeepColumns"
OtherDevice.Discovery.Source(6).Compute(6).ColumnNumbers="1,2,3,5"

// Union of SCSI PC (1) and LPARs (6)
// DeviceID,DisplayID,SystemName,OtherDeviceType
OtherDevice.Discovery.Source(7).Type="TableUnion"
OtherDevice.Discovery.Source(7).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(7).Table2=%OtherDevice.Discovery.Source(6)%

// Instance Table
// DeviceID,DisplayID,StorageSystemName,DeviceType
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(7)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(4)

//
// Collect

// Collect type is multiinstance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = IBMTSDS_SCSIProtocolController
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(1).Type="Wbem"
OtherDevice.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM IBMTSDS_SCSIProtocolController"
OtherDevice.Collect.Source(1).WbemNameSpace="root/ibm"

// Source(2) = IBMTSDS_StorageLPARSystem
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(2).Type="Wbem"
OtherDevice.Collect.Source(2).WbemQuery="SELECT Name,OperationalStatus FROM IBMTSDS_StorageLPARSystem"
OtherDevice.Collect.Source(2).WbemNameSpace="root/ibm"

// Source 3 = union of 1 SCSI and 2 LPARs
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(3).Type="TableUnion"
OtherDevice.Collect.Source(3).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(3).Table2=%OtherDevice.Collect.Source(2)%

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
OtherDevice.Collect.Source(3).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(3).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
OtherDevice.Collect.Source(3).Compute(2).Type="ArrayTranslate"
OtherDevice.Collect.Source(3).Compute(2).Column=2
OtherDevice.Collect.Source(3).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
OtherDevice.Collect.Source(3).Compute(3).Type="ArrayTranslate"
OtherDevice.Collect.Source(3).Compute(3).Column=3
OtherDevice.Collect.Source(3).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
OtherDevice.Collect.Source(3).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
OtherDevice.Collect.Source(3).Compute(4).Type="Convert"
OtherDevice.Collect.Source(3).Compute(4).Column=2
OtherDevice.Collect.Source(3).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DeviceID,PATROLStatus,StatusDescriptions
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)


//
// Discovery

// SCSI Protocol Controllers
// DeviceID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort
NetworkCard.Discovery.Source(1).Type="WBEM"
NetworkCard.Discovery.Source(1).WbemQuery="SELECT DeviceID,Location,SystemName,PermanentAddress,__PATH FROM IBMTSDS_FCPort"
NetworkCard.Discovery.Source(1).WbemNameSpace="root/ibm"

// Duplicate the device ID
// DeviceID,DeviceID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort
NetworkCard.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
NetworkCard.Discovery.Source(1).Compute(1).Column=1

// Add an Underscore and the SystemName to the DeviceID
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort
NetworkCard.Discovery.Source(1).Compute(2).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(2).Column=1
NetworkCard.Discovery.Source(1).Compute(2).String="_"

NetworkCard.Discovery.Source(1).Compute(3).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(3).Column=1
NetworkCard.Discovery.Source(1).Compute(3).String=Column(4)

// Get the Card to System Associataton
// Weird Bug Part 2 (See Otherdevice)
// IBMTSDS_StorageSystem,IBMTSDS_StorageSystem,IBMTSDS_FCPort
NetworkCard.Discovery.Source(2).Type="WBEM"
NetworkCard.Discovery.Source(2).WbemQuery="SELECT GroupComponent,PartComponent FROM IBMTSDS_StorageSystemToFCPort"
NetworkCard.Discovery.Source(2).WbemNameSpace="root/ibm"


// Get SystemID to Path
// StorageSystemID,IBMTSDS_StorageSystem
NetworkCard.Discovery.Source(3).Type="WBEM"
NetworkCard.Discovery.Source(3).WbemQuery="SELECT Name,__Path FROM IBMTSDS_StorageSystem"
NetworkCard.Discovery.Source(3).WbemNameSpace="root/ibm"

// Add the Association table to the Card instance table
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort,IBMTSDS_StorageSystem,IBMTSDS_FCPort
NetworkCard.Discovery.Source(4).Type="TableJoint"
NetworkCard.Discovery.Source(4).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(4).RightTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(4).LeftKeyColumn=6
NetworkCard.Discovery.Source(4).RightKeyColumn=2
NetworkCard.Discovery.Source(4).KeyType="Wbem"

// Card table to the System Instance Table
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort,IBMTSDS_StorageSystem,IBMTSDS_FCPort,StorageSystemID,IBMTSDS_StorageSystem
NetworkCard.Discovery.Source(5).Type="TableJoint"
NetworkCard.Discovery.Source(5).LeftTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Source(5).RightTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Source(5).LeftKeyColumn=7
NetworkCard.Discovery.Source(5).RightKeyColumn=2
NetworkCard.Discovery.Source(5).KeyType="Wbem"

// Keep only  ed columns
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,IBMTSDS_FCPort,IBMTSDS_StorageSystem,IBMTSDS_FCPort,StorageSystemID,IBMTSDS_StorageSystem
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,                                                    StorageSystemID
NetworkCard.Discovery.Source(5).Compute(1).Type="KeepColumns"
NetworkCard.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,5,9"

NetworkCard.Discovery.Source(5).Compute(2).Type="LeftConcat"
NetworkCard.Discovery.Source(5).Compute(2).Column=3
NetworkCard.Discovery.Source(5).Compute(2).String="Location: "

// Instance Table
// DeviceID,DisplayID,Location,SystemName,PermanentAddress,StorageSystemID
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)

//
// Collect

// Collect type is multiinstance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = IBMTSDS_SCSIProtocolController
// DeviceID;SystemName;OperationalStatus;
NetworkCard.Collect.Source(1).Type="Wbem"
NetworkCard.Collect.Source(1).WbemQuery="SELECT DeviceID,SystemName,OperationalStatus FROM IBMTSDS_FCPort"
NetworkCard.Collect.Source(1).WbemNameSpace="root/ibm"

// Add an Underscore and the SystemName to the DeviceID
// DeviceID;SystemName;OperationalStatus;
NetworkCard.Collect.Source(1).Compute(1).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).String="_"

NetworkCard.Collect.Source(1).Compute(2).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(2).Column=1
NetworkCard.Collect.Source(1).Compute(2).String=Column(2)

// Duplicate the "OperationalStatus" column
// DeviceID;SystemName;OperationalStatus;
NetworkCard.Collect.Source(1).Compute(3).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(3).Column=3

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,SystemName,PATROLStatusArray,OperationalStatus
NetworkCard.Collect.Source(1).Compute(4).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(4).Column=3
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,SystemName,PATROLStatusArray,StatusInformation
NetworkCard.Collect.Source(1).Compute(5).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(5).Column=4
NetworkCard.Collect.Source(1).Compute(5).TranslationTable="DMTFOperationStatusInformationTranslationTable"
NetworkCard.Collect.Source(1).Compute(5).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,SystemName,PATROLStatus,StatusInformation
NetworkCard.Collect.Source(1).Compute(6).Type="Convert"
NetworkCard.Collect.Source(1).Compute(6).Column=3
NetworkCard.Collect.Source(1).Compute(6).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DeviceID,SystemName,PATROLStatus,StatusDescriptions
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(3)
NetworkCard.Collect.StatusInformation=ValueTable.Column(4)


// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
DMTFOperationStatusTranslationTable(6)="ALARM"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="ALARM"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="OK"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
DMTFOperationStatusInformationTranslationTable(6)="Error"
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)=""


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = Remove System Identifiers from PhysicalDisk DisplayID
///    DiskID,DisplayID,AdditionalInformation,Speed,SystemName,Model,SerialNumber,BlockSize,Size
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";";}
NF > 8 && $1 != "" {displayID = $2 ; gsub(/^.*\./,"",displayID);
                    print "MSHW;" $1 ";" displayID ";" $3 ";" $4 ";" $5 ";" $6 ";" $7 ";" $8 ";" $9 ";"
                   }
EmbeddedFile(1).End
