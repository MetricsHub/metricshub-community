//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                  XCLI connector
//
//      Supports:  IBM XIV Storage System
//
//      Connects to:  XCLI local command line utiity
//
//

//
// HEADER

hdf.DisplayName="IBM XIV (xcli)"
hdf.TypicalPlatform="IBM XiV Storage System"
hdf.ReliesOn="xcli command line utility"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring for IBM XIV Storage Systems through the xcli command line utility."
hdf.AppliesToOS="Storage"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"

// Supersedes the existing SMIS Disk Array Connector
hdf.Supersedes="MS_HW_SMISDiskArray.hdf"

// Only for type storage
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Storage"

// Checks that xcli is on the local machine - in Portal smcli is run from the RSM
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="xcli -v"
Detection.Criteria(2).ForceSerialization=1
Detection.Criteria(2).ExecuteLocally=1
Detection.Criteria(2).ExpectedResult="xcli version:"
Detection.Criteria(2).ErrorMessage="xcli not installed or not in path."

// Checks that xcli returns a system name
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all cod_list"
Detection.Criteria(3).ForceSerialization=1
Detection.Criteria(3).ExecuteLocally=1
Detection.Criteria(3).ExpectedResult="system_name"
Detection.Criteria(3).ErrorMessage="xcli could not connect or did not find a system."

//
//
// ENCLOSURES
//

//
// Discovery

// Source(1) = list of components
Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -t ""component_id"" component_list"
Enclosure.Discovery.Source(1).ExecuteLocally=1
Enclosure.Discovery.Source(1).TimeOut="60"
Enclosure.Discovery.Source(1).ForceSerialization=1

// Remove spaces
// DeviceID
Enclosure.Discovery.Source(1).Compute(1).Type="Replace"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).Replace=" "
Enclosure.Discovery.Source(1).Compute(1).ReplaceBy=""

// Exclude the header
// DeviceID
Enclosure.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(1).Compute(2).Column=1
Enclosure.Discovery.Source(1).Compute(2).ValueList="ComponentID"


// Build up all the XML needed

// Source(2) = ATS XML
Enclosure.Discovery.Source(2).Type="OsCommand"
Enclosure.Discovery.Source(2).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ats_list"
Enclosure.Discovery.Source(2).ExecuteLocally=1
Enclosure.Discovery.Source(2).TimeOut="60"
Enclosure.Discovery.Source(2).ForceSerialization=1

// Source(3) = Module XML
Enclosure.Discovery.Source(3).Type="OsCommand"
Enclosure.Discovery.Source(3).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all module_list"
Enclosure.Discovery.Source(3).ExecuteLocally=1
Enclosure.Discovery.Source(3).TimeOut="60"
Enclosure.Discovery.Source(3).ForceSerialization=1

// Source(4) = Disk XML
Enclosure.Discovery.Source(4).Type="OsCommand"
Enclosure.Discovery.Source(4).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all disk_list"
Enclosure.Discovery.Source(4).ExecuteLocally=1
Enclosure.Discovery.Source(4).TimeOut="60"
Enclosure.Discovery.Source(4).ForceSerialization=1

// Source(5) = MM XML
Enclosure.Discovery.Source(5).Type="OsCommand"
Enclosure.Discovery.Source(5).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all mm_list"
Enclosure.Discovery.Source(5).ExecuteLocally=1
Enclosure.Discovery.Source(5).TimeOut="60"
Enclosure.Discovery.Source(5).ForceSerialization=1

// Source(6) = UPS XML
Enclosure.Discovery.Source(6).Type="OsCommand"
Enclosure.Discovery.Source(6).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ups_list"
Enclosure.Discovery.Source(6).ExecuteLocally=1
Enclosure.Discovery.Source(6).TimeOut="60"
Enclosure.Discovery.Source(6).ForceSerialization=1

// Source(7) = Fan XML
Enclosure.Discovery.Source(7).Type="OsCommand"
Enclosure.Discovery.Source(7).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all fan_list"
Enclosure.Discovery.Source(7).ExecuteLocally=1
Enclosure.Discovery.Source(7).TimeOut="60"
Enclosure.Discovery.Source(7).ForceSerialization=1

// Source(8) = PSU XML
Enclosure.Discovery.Source(8).Type="OsCommand"
Enclosure.Discovery.Source(8).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all psu_list"
Enclosure.Discovery.Source(8).ExecuteLocally=1
Enclosure.Discovery.Source(8).TimeOut="60"
Enclosure.Discovery.Source(8).ForceSerialization=1

// Source(9) = DIMM XML
Enclosure.Discovery.Source(9).Type="OsCommand"
Enclosure.Discovery.Source(9).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all dimm_list"
Enclosure.Discovery.Source(9).ExecuteLocally=1
Enclosure.Discovery.Source(9).TimeOut="60"
Enclosure.Discovery.Source(9).ForceSerialization=1

// Source(10) = CF XML
Enclosure.Discovery.Source(10).Type="OsCommand"
Enclosure.Discovery.Source(10).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all cf_list"
Enclosure.Discovery.Source(10).ExecuteLocally=1
Enclosure.Discovery.Source(10).TimeOut="60"
Enclosure.Discovery.Source(10).ForceSerialization=1

// Join all the XML into one table
// XML
Enclosure.Discovery.Source(11).Type="TableUnion"
Enclosure.Discovery.Source(11).Table1=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(11).Table2=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Source(11).Table3=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Source(11).Table4=%Enclosure.Discovery.Source(5)%
Enclosure.Discovery.Source(11).Table5=%Enclosure.Discovery.Source(6)%

Enclosure.Discovery.Source(12).Type="TableUnion"
Enclosure.Discovery.Source(12).Table1=%Enclosure.Discovery.Source(11)%
Enclosure.Discovery.Source(12).Table2=%Enclosure.Discovery.Source(7)%
Enclosure.Discovery.Source(12).Table3=%Enclosure.Discovery.Source(8)%
Enclosure.Discovery.Source(12).Table4=%Enclosure.Discovery.Source(9)%
Enclosure.Discovery.Source(12).Table5=%Enclosure.Discovery.Source(10)%

// COD XML
// Source(13) = COD XML
Enclosure.Discovery.Source(13).Type="OsCommand"
Enclosure.Discovery.Source(13).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all cod_list"
Enclosure.Discovery.Source(13).ExecuteLocally=1
Enclosure.Discovery.Source(13).TimeOut="60"
Enclosure.Discovery.Source(13).ForceSerialization=1

// One final table, the System Information
// Source(13) = Switch XML
Enclosure.Discovery.Source(14).Type="OsCommand"
Enclosure.Discovery.Source(14).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all switch_list"
Enclosure.Discovery.Source(14).ExecuteLocally=1
Enclosure.Discovery.Source(14).TimeOut="60"
Enclosure.Discovery.Source(14).ForceSerialization=1

// Join union again
// XML
Enclosure.Discovery.Source(15).Type="TableUnion"
Enclosure.Discovery.Source(15).Table1=%Enclosure.Discovery.Source(12)%
Enclosure.Discovery.Source(15).Table2=%Enclosure.Discovery.Source(13)%
Enclosure.Discovery.Source(15).Table3=%Enclosure.Discovery.Source(14)%

// Run all the XML through an awk script
// MSHW...
Enclosure.Discovery.Source(15).Compute(1).Type="Awk"
Enclosure.Discovery.Source(15).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(15).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(15).Compute(1).Separators=";"

// Join the processed XML to the main component discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
Enclosure.Discovery.Source(16).Type="TableJoint"
Enclosure.Discovery.Source(16).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(16).RightTable=%Enclosure.Discovery.Source(15)%
Enclosure.Discovery.Source(16).LeftKeyColumn=1
Enclosure.Discovery.Source(16).RightKeyColumn=4
Enclosure.Discovery.Source(16).DefaultRightLine="Default;OTHER;UNKNOWN;UNKNOWN;UNKNOWN;;;;"

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DisplayID;....
Enclosure.Discovery.Source(17)=%Enclosure.Discovery.Source(16)%

// Keep Only Enclosures
// DeviceID;MSHW;ENCLOSURE;EnclosureID;DisplayID;serial;part_number;bios_version;Module Part Number;System Model;System Name/Serial Number;
Enclosure.Discovery.Source(17).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(17).Compute(1).Column=3
Enclosure.Discovery.Source(17).Compute(1).RegExp="^ENCLOSURE$"

Enclosure.Discovery.Source(17).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(17).Compute(2).Column=8
Enclosure.Discovery.Source(17).Compute(2).String="FirmwareVersion: "

//  1        2         3       4             5     6            7           8             9                10          11
// DeviceID;MSHW;ENCLOSURE;EnclosureID;DisplayID;serial;part_number;bios_version;Module Part Number;System Model;System Name/Serial Number;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(17)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(4)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Vendor="IBM"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(7)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Enclosure.Discovery.Instance.BIOSVersion=InstanceTable.Column(8)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(10)
Enclosure.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(11)
Enclosure.Discovery.Instance.Type="Storage"

//
// Collect

// Collect type is multi-instance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = list of components
Enclosure.Collect.Source(1).Type="OsCommand"
Enclosure.Collect.Source(1).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all component_list"
Enclosure.Collect.Source(1).ExecuteLocally=1
Enclosure.Collect.Source(1).TimeOut=60
Enclosure.Collect.Source(1).ForceSerialization=1

// Parse the XML through an awk script
// DeviceID;Status;StatusInformation;
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Collect.Source(1).Compute(1).Separators=";"
Enclosure.Collect.Source(1).Compute(1).SelectColumns="2,3,4"

// Now translate into OK/Warning/Alarm
// DeviceID;Status;StatusInformation;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="2"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The statusTranslationTable
statusTranslationTable("ok")="OK"
statusTranslationTable("failed")="ALARM"
statusTranslationTable("notok")="WARN"
statusTranslationTable(Default)="ALARM"

// Copy the table
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Keep Only Switches
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).RegExp="Module"

// Extract the enclosure number from the device ID
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.Source(2).Compute(2).Type="Extract"
Enclosure.Collect.Source(2).Compute(2).Column=1
Enclosure.Collect.Source(2).Compute(2).Subcolumn=3
Enclosure.Collect.Source(2).Compute(2).Subseparators=":"

// Copy the Table Again
Enclosure.Collect.Source(3)=%Enclosure.Collect.Source(1)%

// Keep Only Switches
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(3).Compute(1).Column=1
Enclosure.Collect.Source(3).Compute(1).RegExp="\(:Switch:\)\|\(:UPS:\)"

// Union 2 and 3
Enclosure.Collect.Source(4).Type="TableUnion"
Enclosure.Collect.Source(4).Table1=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(4).Table2=%Enclosure.Collect.Source(3)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)




// PhysicalDisks

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(16)%

// Keep Only PhysicalDisks
// DeviceID;MSHW;PHYS_DISK;enclosureID;ID;size;model;serial;firmware;part_number;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=3
PhysicalDisk.Discovery.Source(1).Compute(1).RegExp="^PHYS_DISK$"

// Convert from whatever unit IBM uses to bytes
// DeviceID;MSHW;PHYS_DISK;enclosureID;ID;size;model;serial;firmware;part_number;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=6
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1081348"

// The discovery table
// DeviceID;MSHW;PHYS_DISK;enclosureID;ID;size;model;serial;firmware;part_number;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType="Enclosure"

//
// Collect

// Collect type is multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Copy Enclosure Collect
PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


// Memorys

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(16)%

// Keep Only Memorys
// DeviceID;MSHW;MEMORY;enclosureID;ID;serial;manufacturer;part_number;location;speed;size;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).RegExp="^MEMORY$"

// The discovery table
// DeviceID;MSHW;Memory;enclosureID;ID;serial;manufacturer;part_number;location;speed;size;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Memory.Discovery.Instance.Size=InstanceTable.Column(11)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(7)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(8)
Memory.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(9)
Memory.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(10)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
Memory.Discovery.Instance.AttachedToDeviceType="Enclosure"


//
// Collect

// Collect type is multi-instance
Memory.Collect.Type="MultiInstance"

// Copy Enclosure Collect
Memory.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)


// Fans

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(16)%

// Keep Only Fans
// DeviceID;MSHW;FAN;enclosureID;ID;;;;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=3
Fan.Discovery.Source(1).Compute(1).RegExp="^FAN$"

// The discovery table
// DeviceID;MSHW;FAN;enclosureID;ID;;;;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
Fan.Discovery.Instance.AttachedToDeviceType="Enclosure"

//
// Collect

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Copy Enclosure Collect
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)



// PowerSupplys

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(16)%

// Keep Only PowerSupplys
// DeviceID;MSHW;PowerSupply;enclosureID;ID;SerialNumber;Firmware;PartNumber;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=3
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^PSU$"

// The discovery table
// DeviceID;MSHW;PowerSupply;enclosureID;ID;SerialNumber;Firmware;PartNumber;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(8)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AttachedToDeviceType="Enclosure"

//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Copy Enclosure Collect
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


// OtherDevices

// Make a copy to use for enclosure discovery
// DeviceID;MSHW;Type;EnclosureID;DeviceID;....
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(16)%

// Keep Only OtherDevices
// DeviceID;MSHW;OtherDevice;enclosureID;ID;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=3
OtherDevice.Discovery.Source(1).Compute(1).RegExp="^OTHER$"

// Copy the deviceID into the ID field
// DeviceID;MSHW;OtherDevice;enclosureID;DeviceID;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(2).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(2).Column=5
OtherDevice.Discovery.Source(1).Compute(2).Replace=column(5)
OtherDevice.Discovery.Source(1).Compute(2).ReplaceBy=column(1)

// Extract the enclosure from the deviceID
// DeviceID;MSHW;OtherDevice;enclosureID;enclosureID-Extracted;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(3).Type="Extract"
OtherDevice.Discovery.Source(1).Compute(3).Column=5
OtherDevice.Discovery.Source(1).Compute(3).Subcolumn=3
OtherDevice.Discovery.Source(1).Compute(3).Subseparators=":"

// Replace an Unknown Enclosure with the Enclosure extracted from the ID
// DeviceID;MSHW;OtherDevice;enclosureID;enclosureID-Extracted;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(4).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(4).Column=4
OtherDevice.Discovery.Source(1).Compute(4).Replace="UNKNOWN"
OtherDevice.Discovery.Source(1).Compute(4).ReplaceBy=column(5)

// Copy the deviceID into the ID field
// DeviceID;MSHW;OtherDevice;enclosureID;DeviceID;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(5).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(5).Column=5
OtherDevice.Discovery.Source(1).Compute(5).Replace=column(5)
OtherDevice.Discovery.Source(1).Compute(5).ReplaceBy=column(1)

// Extract the type from the deviceID
// DeviceID;MSHW;OtherDevice;enclosureID;Type;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(6).Type="Extract"
OtherDevice.Discovery.Source(1).Compute(6).Column=5
OtherDevice.Discovery.Source(1).Compute(6).Subcolumn=2
OtherDevice.Discovery.Source(1).Compute(6).Subseparators=":"

// Replace an Unknown type with the type extracted from the ID
// DeviceID;MSHW;OtherDevice;enclosureID;Type;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(7).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(7).Column=6
OtherDevice.Discovery.Source(1).Compute(7).Replace="UNKNOWN"
OtherDevice.Discovery.Source(1).Compute(7).ReplaceBy=column(5)

// Exclude certain classes
// DeviceID;MSHW;OtherDevice;enclosureID;ID;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.Source(1).Compute(8).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(8).Column=6
OtherDevice.Discovery.Source(1).Compute(8).ValueList="SWITCH,UPS,NIC,DIMM,PSU,FC_Port,Ethernet_Cable,MaintenanceModule,Switch,Disk,Interface,Remote,Data,Module"

// The discovery table
// DeviceID;MSHW;OtherDevice;enclosureID;ID;DeviceType;AddInfo1;AddInfo2;AddInfo3;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(6)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
OtherDevice.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(8)
OtherDevice.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceType="Enclosure"

//
// Collect

// Collect type is multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Copy Enclosure Collect
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)


// Network Cards

// List of Cards
// Source(1) = Ethernet XML
NetworkCard.Discovery.Source(1).Type="OsCommand"
NetworkCard.Discovery.Source(1).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ipinterface_list_ports"
NetworkCard.Discovery.Source(1).ExecuteLocally=1
NetworkCard.Discovery.Source(1).TimeOut="60"
NetworkCard.Discovery.Source(1).ForceSerialization=1

// Source(2) = FC XML
NetworkCard.Discovery.Source(2).Type="OsCommand"
NetworkCard.Discovery.Source(2).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all fc_port_list"
NetworkCard.Discovery.Source(2).ExecuteLocally=1
NetworkCard.Discovery.Source(2).TimeOut="60"
NetworkCard.Discovery.Source(2).ForceSerialization=1

// Source(3) = IB XML
NetworkCard.Discovery.Source(3).Type="OsCommand"
NetworkCard.Discovery.Source(3).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ib_port_list"
NetworkCard.Discovery.Source(3).ExecuteLocally=1
NetworkCard.Discovery.Source(3).TimeOut="60"
NetworkCard.Discovery.Source(3).ForceSerialization=1

// Union all the Port XML
// XML...
NetworkCard.Discovery.Source(4).Type="TableUnion"
NetworkCard.Discovery.Source(4).Table1=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(4).Table2=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(4).Table3=%NetworkCard.Discovery.Source(3)%

// Run all the XML through an awk script
// MSHW;portType;deviceID;enclosureID;speed;status;address;addressType;linkstatus;serial;model;firmware;
NetworkCard.Discovery.Source(4).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(4).Compute(1).AwkScript=EmbeddedFile(3)
NetworkCard.Discovery.Source(4).Compute(1).KeepOnlyRegExp="^MSHW"
NetworkCard.Discovery.Source(4).Compute(1).Separators=";"


// Instance Table
// MSHW;portType;deviceID;enclosureID;speed;status;address;addressType;linkstatus;serial;model;firmware;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.AttachedToDeviceType="Enclosure"
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.PhysicalAddressType=InstanceTable.Column(8)
NetworkCard.Discovery.Instance.Model=InstanceTable.Column(11)
NetworkCard.Discovery.Instance.SerialNumber=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(12)
NetworkCard.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)

//
// Collect

// Collect type is multi-instance
NetworkCard.Collect.Type="MultiInstance"

// List of Cards
// Source(1) = Ethernet XML
NetworkCard.Collect.Source(1).Type="OsCommand"
NetworkCard.Collect.Source(1).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ipinterface_list_ports"
NetworkCard.Collect.Source(1).ExecuteLocally=1
NetworkCard.Collect.Source(1).TimeOut="60"
NetworkCard.Collect.Source(1).ForceSerialization=1

// Source(2) = FC XML
NetworkCard.Collect.Source(2).Type="OsCommand"
NetworkCard.Collect.Source(2).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all fc_port_list"
NetworkCard.Collect.Source(2).ExecuteLocally=1
NetworkCard.Collect.Source(2).TimeOut="60"
NetworkCard.Collect.Source(2).ForceSerialization=1

// Source(3) = IB XML
NetworkCard.Collect.Source(3).Type="OsCommand"
NetworkCard.Collect.Source(3).CommandLine="xcli -u %{USERNAME} -p %{PASSWORD} -m %{HOSTNAME} -x -t all ib_port_list"
NetworkCard.Collect.Source(3).ExecuteLocally=1
NetworkCard.Collect.Source(3).TimeOut="60"
NetworkCard.Collect.Source(3).ForceSerialization=1

// Union all the Port XML
// XML...
NetworkCard.Collect.Source(4).Type="TableUnion"
NetworkCard.Collect.Source(4).Table1=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(4).Table2=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(4).Table3=%NetworkCard.Collect.Source(3)%

// Parse the XML through an awk script
// MSHW;portType;deviceID;enclosureID;speed;status;address;addressType;linkstatus;serial;model;firmware;
//               deviceID;            speed;status;                    linkstatus;
NetworkCard.Collect.Source(4).Compute(1).Type="Awk"
NetworkCard.Collect.Source(4).Compute(1).AwkScript=EmbeddedFile(3)
NetworkCard.Collect.Source(4).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(4).Compute(1).Separators=";"
NetworkCard.Collect.Source(4).Compute(1).SelectColumns="3,5,6,9"

// Now translate into OK/Warning/Alarm
// DeviceID;Speed;Status;LinkStatus;
NetworkCard.Collect.Source(4).Compute(2).Type="Translate"
NetworkCard.Collect.Source(4).Compute(2).Column=3
NetworkCard.Collect.Source(4).Compute(2).TranslationTable="statusTranslationTable"

// Now translate linkStatus
// DeviceID;Speed;Status;LinkStatus;
NetworkCard.Collect.Source(4).Compute(3).Type="Translate"
NetworkCard.Collect.Source(4).Compute(3).Column=4
NetworkCard.Collect.Source(4).Compute(3).TranslationTable="linkStatusTranslationTable"

// The linkStatusTranslationTable
linkStatusTranslationTable("online")="OK"
linkStatusTranslationTable("yes")="OK"
linkStatusTranslationTable(Default)="WARN"

// ValueTable = Source(1)
// DeviceID;Speed;Status;LinkStatus;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(3)
NetworkCard.Collect.LinkStatus=ValueTable.Column(4)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(2)


////////////////////////////////////////////////////////
///    E M B E D D E D   F I L E ! ! !
///    EmbeddedFile = awk script that parse the discovery xml
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
$1 ~ /</ && $2 ~ /id=/ {
    type=$1
    gsub(/</,"",type)
    }

$1 ~ /</ && $2 ~ /value=/ {
    field= $1
    gsub(/</,"",field)
    value = $0
    gsub(/.*value="/,"",value)
    gsub(/".>/,"",value)
    if ($1 ~ /component_id/) {
        ID = value
        typeArray[ID] = type
        }
    if ($1 ~ /name/ && type == "config") {
        typeArray["system"] = type
        ID = "system"
        }
    if (ID != "") {
        fullArray[ID,field] = value
        }
    # Override if in config section
    if (type == "config") {
        name = fullArray["system","name"]
        fullArray["system",name] = value
        }
    }

END {


    for (ID in typeArray) {
        split(ID,enclosureArray,":")
        enclosureID = enclosureArray[3]
        if (tolower(typeArray[ID]) == "ats") {
            print "MSHW;OTHER;" enclosureID ";" ID ";ATS; Model: " fullArray[ID,"model"] ";" ";" ";"
            }
        if (tolower(typeArray[ID]) == "module") {
            print "MSHW;ENCLOSURE;" enclosureID ";" ID ";" fullArray[ID,"serial"] ";" fullArray[ID,"part_number"] ";" fullArray[ID,"bios_version"] ";Module Part Number: " fullArray[ID,"part_number"] ";System Model: " fullArray["system","machine_type"] fullArray["system","machine_model"] ";System Name: " fullArray["system","system_name"] ";"
            }
        if (tolower(typeArray[ID]) == "ups") {
            print "MSHW;ENCLOSURE;" ID ";" ID ";" fullArray[ID,"serial"] ";"                             ";AOS Version: " fullArray[ID,"aos_version"] ";"                                     ";"                                                                                          ";"                                                                                                                        ";"
        # UPS-NMC No useful info, but need to attach it to the UPS, print one for each UPS found
            print "MSHW;OTHER;" ID ";" "1:UPS_NMC: " enclosureID ";UPS_NMC" ";" ";" ";" ";"
            }
		# Physical Disks - Part Number Often Missing
        if (tolower(typeArray[ID]) == "disk") {
            print "MSHW;PHYS_DISK;" enclosureID ";" ID ";" fullArray[ID,"size"] ";" fullArray[ID,"model"] ";" fullArray[ID,"serial"] ";" fullArray[ID,"firmware"] ";" fullArray[ID,"part_number"] ";"
            }
        if (tolower(typeArray[ID]) == "switch") {
            print "MSHW;ENCLOSURE;" ID ";" ID ";" fullArray[ID,"serial"] ";" ";" fullArray[ID,"current_active_version"] ";" ";" ";" ";"
            }
        # Management Modules - Part and Serial often missing
        if (tolower(typeArray[ID]) == "mm") {
            print "MSHW;OTHER;" enclosureID ";" ID ";MM;Part Number: " fullArray[ID,"part_number"] ";Serial Number: " fullArray[ID,"serial"] ";IP: " fullArray[ID,"ip_1"] " / " fullArray[ID,"ip_2"] ";"
            }
        # Fans (no useful info for now)
        if (tolower(typeArray[ID]) == "fan") {
            print "MSHW;FAN;" enclosureID ";" ID ";" ";" ";" ";"
            }
        # ATS (no useful info - will default to other)
        # Ethernet-Cables (exclude - network discovery will be done seperately)
        # PSU - FRU information often missing
        if (tolower(typeArray[ID]) == "psu") {
            print "MSHW;PSU;" enclosureID ";" ID "; " "Serial Number: " fullArray[ID,"serial"] ";" "Firmware: " fullArray[ID,"firmware_version"] ";"  "Part Number: " fullArray[ID,"part_number"] ";"
            }
        if (tolower(typeArray[ID]) == "dimm") {
            print "MSHW;MEMORY;" enclosureID ";" ID "; " fullArray[ID,"serial"] ";" fullArray[ID,"manufacturer"] ";Part Number: " fullArray[ID,"part_number"] ";" "Channel: "fullArray[ID,"channel"] " - Bank: "fullArray[ID,"bank"] ";" "Speed: "fullArray[ID,"speed"] ";" fullArray[ID,"size"] ";"
            }
        if (tolower(typeArray[ID]) == "cf") {
            print "MSHW;OTHER;" enclosureID ";" ID ";CompactFlash;Device Name: " fullArray[ID,"device_name"] ";Serial Number: " fullArray[ID,"serial"] ";Part Number: " fullArray[ID,"part_number"] ";"
            }
        }
    }
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
///    E M B E D D E D   F I L E ! ! !
///    EmbeddedFile = awk script that parse the collect xml
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
$1 ~ /</ && $2 ~ /value=/ {
    value = $0
    gsub(/.*value="/,"",value)
    gsub(/".>/,"",value)
    if ($1 ~ /component_id/) { ID = value }
    if ($1 ~ /status/) { status[ID] = value }
    if ($1 ~ /currently_functioning/) { currentFunctioning[ID] = value }
    if ($1 ~ /requires_service/) { requiresService[ID] = value }
    if ($1 ~ /service_reason/) { serviceReason[ID] = value }
    }

END {
    for (ID in status) {
        statusInformation = ""
        if (currentFunctioning[ID] == "no") { statusInformation = "Not Currently Functioning" }
        if (requiresService[ID] != "") {
            if (statusInformation != "") {statusInformation=statusInformation " - " }
            statusInformation = statusInformation "Requires Service: " requiresService[ID]
            }
        if (serviceReason[ID] != "") {
            if (statusInformation != "") {statusInformation=statusInformation " - " }
            statusInformation = statusInformation "Service Reason: " serviceReason[ID]
            }
        print "MSHW;" ID ";" status[ID] ";" statusInformation ";"
        }
    }
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///    E M B E D D E D   F I L E ! ! !
///    EmbeddedFile = awk script that parse the network xml
///
/////////////////////////////////////////////////////////
EmbeddedFile(3):
$1 ~ /</ && $2 ~ /id=/ {
    type=$1
    gsub(/</,"",type)
    ID = $0
    gsub(/.*id="/,"",ID)
    gsub(/">/,"",ID )
    typeArray[ID] = type
    }
$1 ~ /</ && $2 ~ /value=/ {
    field= $1
    gsub(/</,"",field)
    value = $0
    gsub(/.*value="/,"",value)
    gsub(/".>/,"",value)
    fullArray[ID,field] = value
    }
END {
    for (ID in typeArray) {
        enclosureID = ""; speed = ""; status = ""; address = ""; linkstatus = ""; serial = ""; model = ""; firmware = "" ; deviceID = ""; addressType =""; portType =""
        if (tolower(typeArray[ID]) == "fc_port") {
            module = fullArray[ID,"module"] ; split(module,enclosureArray,":") ; enclosureID = enclosureArray[3] ;
            speed = fullArray[ID,"current_rate"] * 1000
            status = fullArray[ID,"status"]
            address = fullArray[ID,"wwpn"]
            linkstatus = fullArray[ID,"port_state"]
            serial = fullArray[ID,"serial"]
            model = fullArray[ID,"model"]
            firmware = fullArray[ID,"active_firmware"]
            deviceID = fullArray[ID,"component_id"]
            addressType = "WWN"
            portType = "FC"
            }
        if (tolower(typeArray[ID]) == "ib_port") {
        # No available output, so guessing
            switch = fullArray[ID,"component_id"]
            split(switch ,enclosureArray,":")
            enclosureID = enclosureArray[1] ":" enclosureArray[2] ":" enclosureArray[3]
            status = fullArray[ID,"status"]
            deviceID = fullArray[ID,"component_id"]
            portType = "IB"
            }
        if (tolower(typeArray[ID]) == "ethernet_port") {
            if ( fullArray[ID,"role"] == "Internal" ) {
                switch = fullArray[ID,"connected_component"]
                split(switch ,enclosureArray,":")
                enclosureID = enclosureArray[1] ":" enclosureArray[2] ":" enclosureArray[3]
                deviceID = fullArray[ID,"connected_component"]
                }
            else if ( fullArray[ID,"role"] == "iSCSI" ) {
                module = fullArray[ID,"module_id"]
                split(module,enclosureArray,":")
                enclosureID = enclosureArray[3]
                deviceID = fullArray[ID,"ip_interface_name"]
                }
            else if ( fullArray[ID,"role"] == "Component" ) {
                module = fullArray[ID,"module_id"]
                split(module,enclosureArray,":")
                enclosureID = enclosureArray[3]
                deviceID = fullArray[ID,"connected_component"]
                }
            else if ( fullArray[ID,"role"] != "NONE" ) {
                module = fullArray[ID,"module_id"]
                split(module,enclosureArray,":")
                enclosureID = enclosureArray[3]
                deviceID = fullArray[ID,"module_id"] ":" fullArray[ID,"role"]
                }
            portType = "Ethernet"
            speed = fullArray[ID,"negotiated_speed_Mbs"]
            linkstatus = fullArray[ID,"is_link_up"]
            }
        if ( deviceID != "" ) {
            print "MSHW;" portType ";" deviceID ";" enclosureID ";" speed ";" status ";" address ";" addressType ";" linkstatus ";" serial ";" model ";Firmware: " firmware ";"
            }
        }
    }
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////////////
