////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//
//      Supports: DataDirect Networks (DDN) disk arrays
//                Connects to DDN's SNMP Agent
//


//
// Header
//

hdf.DisplayName="DataDirect Networks (DDN) Disk Array (SNMP)"
hdf.TypicalPlatform="DataDirect Networks (DDN)"
hdf.ReliesOn="DDN SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector discovers the enclosure and the disks of DDN (DataDirect Networks) disk arrays as well as the various environment sensors (temperatures, fans, power supplies). It relies on the SNMP protocol."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

//
// Detection
//

// Verify that the DDN SNMP agent responds to our requests
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.6894.1"


//
// Enclosure
//

//
// Discovery

// Source(1) = Hardcoded table
// DeviceID;Vendor;model;
Enclosure.Discovery.Source(1)="DDN;Data Direct Networks;Disk Array"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="Storage"



//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = tierTable SNMP Table
// TierID;diskA;diskB;diskC;diskD;diskE;diskF;diskG;diskH;diskP;diskS
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.7.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,4,5,6,7,8,9,10,11"

// Process that crap through an AWK script that will generate one line per disk
// DiskID;DiskType;Status;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
PhysicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(1).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// Exclude "missing" disks
PhysicalDisk.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=3
PhysicalDisk.Discovery.Source(1).Compute(2).ValueList="3"

// InstanceTable = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID="DDN"


//
// Collect

// Collect type is multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = tierTable SNMP Table
// TierID;diskA;diskB;diskC;diskD;diskE;diskF;diskG;diskH;diskP;diskS
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.7.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="1,2,3,4,5,6,7,8,9,10,11"

// Process that crap through an AWK script that will generate one line per disk
// DiskID;Status;
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"
PhysicalDisk.Collect.Source(1).Compute(1).SelectColumns="2,4"

// Duplicate the Status column
// DiskID;Status;Status;
PhysicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2

// Translate the first status column into a PATROLStatus
// DiskID;PATROLStatus;Status;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=2
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="diskStatusTranslationTable"

// The diskStatusTranslationTable
diskStatusTranslationTable(1)="OK"
diskStatusTranslationTable(2)="ALARM"
diskStatusTranslationTable(3)="ALARM"
diskStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// DiskID;PATROLStatus;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=3
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="diskStatusInformationTranslationTable"

// The diskStatusInformationTranslationTable
diskStatusInformationTranslationTable(1)="Healthy"
diskStatusInformationTranslationTable(2)="Failed"
diskStatusInformationTranslationTable(3)="Missing"
diskStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// Power supplies
//

//
// Discovery

// Source(1) = powerTable SNMP table
// powerSupplyID;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.5.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="1"

// Instance Table = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="DDN"

//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = powerTable SNMP table (like discovery)
// powerSupplyID;Status:
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.5.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="1,2"

// Duplicate the status column
// powerSupplyID;Status:Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate the first status column into a PATROL Status
// powerSupplyID;PATROLStatus:Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(1)="OK"
PowerSupplyStatusTranslationTable(2)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// powerSupplyID;PATROLStatus:StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(1)="Healthy"
PowerSupplyStatusInformationTranslationTable(2)="Failed"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
// Fans
//

//
// Discovery

// Source(1) = powerTable SNMP table
// FanID;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.3.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="1"

// Instance Table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.AttachedToDeviceID="DDN"

//
// Collect

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = powerTable SNMP table (like discovery)
// FanID;Status:
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.6894.1.3.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="1,2"

// Duplicate the status column
// FanID;Status:Status;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate the first status column into a PATROL Status
// FanID;PATROLStatus:Status;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// The FanStatusTranslationTable
FanStatusTranslationTable(1)="OK"
FanStatusTranslationTable(2)="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// FanID;PATROLStatus:StatusInformation;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(1)="Healthy"
FanStatusInformationTranslationTable(2)="Failed"
FanStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


//
// Temperatures
//

//
// Discovery

// Source(1) = Hardcoded table
// TemperatureID;Location;
Temperature.Discovery.Source(1)="General;General;"

// Instance Table = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.AttachedToDeviceID="DDN"

//
// Collect

// Collect type is mono-instance
Temperature.Collect.Type="MonoInstance"

// Source(1) = tempLevel OID
// Status;
Temperature.Collect.Source(1).Type="SnmpGet"
Temperature.Collect.Source(1).SnmpOid="1.3.6.1.4.1.6894.1.1.0"

// Duplicate the status column
// Status:Status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=1

// Translate the first status column into a PATROL Status
// PATROLStatus:Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=1
Temperature.Collect.Source(1).Compute(2).TranslationTable="TemperatureStatusTranslationTable"

// The TemperatureStatusTranslationTable
TemperatureStatusTranslationTable(1)="OK"
TemperatureStatusTranslationTable(2)="WARN"
TemperatureStatusTranslationTable(3)="ALARM"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// PATROLStatus:StatusInformation;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=2
Temperature.Collect.Source(1).Compute(3).TranslationTable="TemperatureStatusInformationTranslationTable"

// The TemperatureStatusInformationTranslationTable
TemperatureStatusInformationTranslationTable(1)="Normal"
TemperatureStatusInformationTranslationTable(2)="Warning"
TemperatureStatusInformationTranslationTable(3)="Critical"
TemperatureStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.Status=ValueTable.Column(1)
Temperature.Collect.StatusInformation=ValueTable.Column(2)



/////////////////////////////////////////////////////////////
//
//   EmbeddedFile(1)
//
//   Awk script that takes the one-line-says-all thing about disks and convert
//   that into a normal regular table (one line per instance, you know)
//
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN { FS = ";" }
{
	tierID = $1

	diskA = $2
	diskB = $3
	diskC = $4
	diskD = $5
	diskE = $6
	diskF = $7
	diskG = $8
	diskH = $9
	diskP = $10
	diskS = $11

	print "MSHW;Tier " tierID " Disk A;Data;" diskA
	print "MSHW;Tier " tierID " Disk B;Data;" diskB
	print "MSHW;Tier " tierID " Disk C;Data;" diskC
	print "MSHW;Tier " tierID " Disk D;Data;" diskD
	print "MSHW;Tier " tierID " Disk E;Data;" diskE
	print "MSHW;Tier " tierID " Disk F;Data;" diskF
	print "MSHW;Tier " tierID " Disk G;Data;" diskG
	print "MSHW;Tier " tierID " Disk H;Data;" diskH
	print "MSHW;Tier " tierID " Disk P;Parity;" diskP
	print "MSHW;Tier " tierID " Disk S;Spare;" diskS

}
EmbeddedFile(1).End

