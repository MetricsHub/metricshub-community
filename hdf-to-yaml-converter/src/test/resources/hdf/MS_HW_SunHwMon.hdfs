//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_SunHwMon
//
//      Supports: HP Insight Manager (Server Agent)
//
//

//
// HEADER
//

hdf.DisplayName="Oracle Hardware Management Agent"
hdf.TypicalPlatform="Oracle/Sun"
hdf.ReliesOn="Oracle Hardware Management Pack"
hdf.Version="1.1"
hdf.Comments="This connector provides hardware monitoring through the Oracle Hardware Management Pack which is pre-installed with Solaris and can be installed on Linux / Windows."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux,Solaris"
hdf.Supersedes="MS_HW_IpmiTool.hdf,MS_HW_Director52ServeRAIDLinux.hdf,MS_HW_Director52ServeRAIDNT.hdf,MS_HW_SunFmadm.hdf,MS_HW_SunIostat.hdf,MS_HW_SunIostatNonSun.hdf,MS_HW_SunNetwork.hdf,MS_HW_SunPrtdiag.hdf,MS_HW_SunPrtpicl.hdf,MS_HW_SunPsrinfo.hdf,MS_HW_SunPsrinfoT1.hdf,MS_HW_SunScSnapshot.hdf,MS_HW_WBEMGenDiskNT.hdf,MS_HW_SmartMonLinux.hdf"

//
// DETECTION
//

// Check that there is an enclosure
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.42.2.2.6.1.1.1"

//
// Enclosure: computer
//

// Get the model name
// Model;PartNumber;SerialNumber;Manufacturer;SlotNumber;BiosVersion;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,3,4,5,6,8"

// Add a server ID
// ServerID;Model;PartNumber;SerialNumber;Manufacturer;SlotNumber;BiosVersion;
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="Server;"

// Add slot:
// ServerID;Model;PartNumber;SerialNumber;Manufacturer;SlotNumber;BiosVersion;
Enclosure.Discovery.Source(1).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=6
Enclosure.Discovery.Source(1).Compute(2).String="Location: "

// Source(2) = sunHwMonTotalPowerConsumption SNMP Table
// CurrentReading;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.9"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="6"

// Keep only if CurrentReading is not -1 or 0
// CurrentReading;
Enclosure.Discovery.Source(2).Compute(1).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).ValueList="-1,0"

// Add a server ID
// ServerID;CurrentReading;
Enclosure.Discovery.Source(2).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(2).Column=1
Enclosure.Discovery.Source(2).Compute(2).String="Server;"

// Source(3) = Table joint between Source(1) and Source(2)
// ServerID;Model;PartNumber;SerialNumber;Manufacturer;SlotNumber;BiosVersion;ServerID;CurrentReading;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;"

Enclosure.Discovery.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(1).Column=3
Enclosure.Discovery.Source(3).Compute(1).String="Part Number: "

// InstanceTable
// ServerID;Model;PartNumber;SerialNumber;Manufacturer;SlotNumber;BiosVersion;ServerID;CurrentReading;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(6)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(9)
Enclosure.Discovery.Instance.BiosVersion=InstanceTable.Column(7)


//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MultiInstance"

// Get a list of Enclosures
// FruType,FruStatus
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="3,8"

// Keep only hostSystem fans
// FruType,FruStatus
Enclosure.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).ValueList="49"

// Add a server ID
// ServerID,FruType,FruStatus
Enclosure.Collect.Source(1).Compute(2).Type="LeftConcat"
Enclosure.Collect.Source(1).Compute(2).Column=1
Enclosure.Collect.Source(1).Compute(2).String="Server;"

// Duplicate the Status
// ServerID,FruType,FruStatus,FruStatus
Enclosure.Collect.Source(1).Compute(3).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(3).Column=3

// Translate the first Status code into a PATROLStatus
// ServerID;FruType;PATROLStatus;FruStatus
Enclosure.Collect.Source(1).Compute(4).Type="Translate"
Enclosure.Collect.Source(1).Compute(4).Column=3
Enclosure.Collect.Source(1).Compute(4).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// ServerID;FruType;PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(5).Type="Translate"
Enclosure.Collect.Source(1).Compute(5).Column=4
Enclosure.Collect.Source(1).Compute(5).TranslationTable="FRUStatusInformationTranslationTable"

// Source(2) = sunHwMonTotalPowerConsumption SNMP Table
// CurrentReading;
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.9"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="6"

// Keep only if CurrentReading is not -1 or 0
// CurrentReading;
Enclosure.Collect.Source(2).Compute(1).Type="ExcludeMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).ValueList="-1,0"

// Add a server ID
// ServerID;CurrentReading;
Enclosure.Collect.Source(2).Compute(2).Type="LeftConcat"
Enclosure.Collect.Source(2).Compute(2).Column=1
Enclosure.Collect.Source(2).Compute(2).String="Server;"

// Source(3) = Table joint between Source(1) and Source(2)
// This is because the PowerMeter Table does not exist in early versions of the HP agent, so we collect a list of IDs from the main table to avoid "no collect value errors"
// ServerID;FruType;PATROLStatus;StatusInformation;ServerID;CurrentReading;
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";;"

// ValueTable = Source(3)
// ServerID;FruType;PATROLStatus;StatusInformation;ServerID;CurrentReading;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(3)
Enclosure.Collect.StatusInformation=ValueTable.Column(4)
Enclosure.Collect.PowerConsumption=ValueTable.Column(6)

// The FRUStatusTranslationTable
FRUStatusTranslationTable(1)="OK"
FRUStatusTranslationTable(2)="ALARM"
FRUStatusTranslationTable(3)="ALARM"
FRUStatusTranslationTable(4)="WARN"
FRUStatusTranslationTable(5)="WARN"
FRUStatusTranslationTable(6)="WARN"
FRUStatusTranslationTable(7)="OK"
FRUStatusTranslationTable(8)="WARN"
FRUStatusTranslationTable(Default)="UNKNOWN"

// The FRUStatusInformationTranslationTable
FRUStatusInformationTranslationTable(1)=""
FRUStatusInformationTranslationTable(2)="Critical"
FRUStatusInformationTranslationTable(3)="Major Fault"
FRUStatusInformationTranslationTable(4)="Minor Fault"
FRUStatusInformationTranslationTable(5)="Warning"
FRUStatusInformationTranslationTable(6)="Indeterminate Status"
FRUStatusInformationTranslationTable(7)="Informational Status"
FRUStatusInformationTranslationTable(8)="Status Pending"
FRUStatusInformationTranslationTable(Default)="Unknown Status"

//
// CPUs
//

// Get a list of FRUs
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4"

// Make a copy to find suitable FRUs
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(2)=%CPU.Discovery.Source(1)%

// Keep only Processors (105)
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(2).Compute(1).Column=3
CPU.Discovery.Source(2).Compute(1).ValueList="105"

// Make a copy to find suitable FRUs from tyep Unknown
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(3)=%CPU.Discovery.Source(1)%

// Keep only Processors (105)
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(3).Compute(1).Column=3
CPU.Discovery.Source(3).Compute(1).ValueList="1"

// Keep only known Processors
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(3).Compute(2).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(3).Compute(2).Column=2
CPU.Discovery.Source(3).Compute(2).RegExp="^/SYS/MB/CM[0-9]+$"

// Union 2 + 3
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(4).Type="TableUnion"
CPU.Discovery.Source(4).Table1=%CPU.Discovery.Source(2)%
CPU.Discovery.Source(4).Table2=%CPU.Discovery.Source(3)%

// Remove (R)
// ID;FruName;FruType;FruDescription
CPU.Discovery.Source(4).Compute(1).Type="Replace"
CPU.Discovery.Source(4).Compute(1).Column=4
CPU.Discovery.Source(4).Compute(1).Replace="(R)"
CPU.Discovery.Source(4).Compute(1).ReplaceBy=""

// Instance Table
// ID;FruName;FruType;FruDescription
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(4)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(2)
CPU.Discovery.Instance.Model=InstanceTable.Column(4)

//
// CPU collect

// Collect type is mono-instance
CPU.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// FruStatus
CPU.Collect.Source(1).Type="SnmpGet"
CPU.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1.8.%CPU.Collect.DeviceID%"

// Duplicate the Status
// FruStatus,FruStatus
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;FruStatus
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column=1
CPU.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=2
CPU.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.Status=ValueTable.Column(1)
CPU.Collect.StatusInformation=ValueTable.Column(2)

//
// Memory
//

// Get a list of FRUs
// ID;FruName;FruType;FruDescription;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4"

// Keep only Memory (24)
// ID;FruName;FruType;FruDescription;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).ValueList="24"

// Duplicate the Description
// ID;FruName;FruType;FruDescription;FruDescription;
Memory.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Memory.Discovery.Source(1).Compute(2).Column=4

// Remove MB from the second description to try and get the memory size
// ID;FruName;FruType;FruDescription;SizeMB;
Memory.Discovery.Source(1).Compute(3).Type="Extract"
Memory.Discovery.Source(1).Compute(3).Column=5
Memory.Discovery.Source(1).Compute(3).Subcolumn=1
Memory.Discovery.Source(1).Compute(3).Subseparators=" "

// Remove MB from the second description to try and get the memory size
// ID;FruName;FruType;FruDescription;SizeMB;
Memory.Discovery.Source(1).Compute(4).Type="Replace"
Memory.Discovery.Source(1).Compute(4).Column=5
Memory.Discovery.Source(1).Compute(4).Replace="MB"
Memory.Discovery.Source(1).Compute(4).ReplaceBy=""

// Instance Table
// ID;FruName;FruType;FruDescription;SizeMB;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Memory.Discovery.Instance.Model=InstanceTable.Column(4)
Memory.Discovery.Instance.Size=InstanceTable.Column(5)

//
// Memory collect

// Collect type is mono-instance
Memory.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// FruStatus
Memory.Collect.Source(1).Type="SnmpGet"
Memory.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1.8.%Memory.Collect.DeviceID%"

// Duplicate the Status
// FruStatus,FruStatus
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;FruStatus
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=1
Memory.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=2
Memory.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.Status=ValueTable.Column(1)
Memory.Collect.StatusInformation=ValueTable.Column(2)



//
// Disk controllers
//

//
// Discovery

// Source(1) = the sunStorageControllerTable
// ID;Name;PartNumber;SerialNumber;Manufacturer;Firmware;Status;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.2.1.3.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5,8,20"

// The InstanceTable
// ID;Name;PartNumber;SerialNumber;Manufacturer;Firmware;Status;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(2)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(2)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(5)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(6)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(4)




// Collect type is multi-instance
DiskController.Collect.Type="MultiInstance"

// Do an SNMP get directly on the status
// FruStatus
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.2.1.3.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="2,20"

// Duplicate the Status
// DeviceID,FruStatus,FruStatus
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column=2

// Translate the first Status code into a PATROLStatus
// DeviceID,PATROLStatus;FruStatus
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column=2
DiskController.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// DeviceID,PATROLStatus;StatusInformation;
DiskController.Collect.Source(1).Compute(3).Type="Translate"
DiskController.Collect.Source(1).Compute(3).Column=3
DiskController.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)


//
// PhysicalDisk
//

//
// Discovery

// Source(1) = the sunStorageControllerTable
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityUnits;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.2.1.4.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,6,7,8,12,13"

// Translate the Capacity Units to a multiplier
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityMultiplier;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=8
PhysicalDisk.Discovery.Source(1).Compute(1).TranslationTable="DiskCapacityUnitTranslationTable"

DiskCapacityUnitTranslationTable(1)="1048576"
DiskCapacityUnitTranslationTable(2)="1073741824"
DiskCapacityUnitTranslationTable(3)="1099511627776"
DiskCapacityUnitTranslationTable(Default)="1"

// Convert Capacity to Bytes
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityMultiplier;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=7
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=Column(8)

// Translate the Disk Type
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityMultiplier;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=6
PhysicalDisk.Discovery.Source(1).Compute(3).TranslationTable="DiskTypeTranslationTable"

DiskTypeTranslationTable(1)="HDD"
DiskTypeTranslationTable(2)="SDD"
DiskTypeTranslationTable(Default)=""


// Get a list of FRUs
// ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.Source(2).Type="SnmpTable"
PhysicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
PhysicalDisk.Discovery.Source(2).SnmpTableSelectColumns="ID,2,3,5,6,7"

// Keep only PhysicalDisk (47)
// ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(2).Compute(1).Column=3
PhysicalDisk.Discovery.Source(2).Compute(1).ValueList="47"

// Join the Storage to the FRU
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityUnits;ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(3).RightKeyColumn=1
PhysicalDisk.Discovery.Source(3).DefaultRightLine=";;;;;;"

// Add OS Name
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityUnits;ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.Source(3).Compute(1).Type="LeftConcat"
PhysicalDisk.Discovery.Source(3).Compute(1).Column=3
PhysicalDisk.Discovery.Source(3).Compute(1).String="OS Name: "

// Add Slot Number
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityUnits;ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.Source(3).Compute(2).Type="LeftConcat"
PhysicalDisk.Discovery.Source(3).Compute(2).Column=5
PhysicalDisk.Discovery.Source(3).Compute(2).String="Location: "

PhysicalDisk.Discovery.Source(3).Compute(3).Type="LeftConcat"
PhysicalDisk.Discovery.Source(3).Compute(3).Column=6
PhysicalDisk.Discovery.Source(3).Compute(3).String="Type: "

// The InstanceTable
//  1   2    3         4               5          6        7        8          9   10       11      12              13              14
// ID;Name;OSname;ControllerNumber;SlotNumber;DiskType;Capacity;CapacityUnits;ID;FruName;FruType;FruPartNumber;FruSerialNumber;FruManufacturer;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(14)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(12)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(13)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(6)


//
// Memory collect

// Collect type is mono-instance
PhysicalDisk.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// FruStatus
PhysicalDisk.Collect.Source(1).Type="SnmpGet"
PhysicalDisk.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.2.1.4.1.16.%PhysicalDisk.Collect.DeviceID%"

// Duplicate the Status
// FruStatus,FruStatus
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;FruStatus
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=1
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=2
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.Status=ValueTable.Column(1)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(2)


//
// PowerSupply
//

// Get a list of FRUs
// ID;FruName;FruType;FruDescription;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4"

// Keep only PowerSupply (99)
// ID;FruName;FruType;FruDescription;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=3
PowerSupply.Discovery.Source(1).Compute(1).ValueList="99"


// Instance Table
// ID;FruName;FruType;FruDescription;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(4)

//
// PowerSupply collect

// Collect type is mono-instance
PowerSupply.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// FruStatus
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1.8.%PowerSupply.Collect.DeviceID%"

// Duplicate the Status
// FruStatus,FruStatus
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;FruStatus
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=1
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=2
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)


//
// OtherDevice
//

// Get a list of FRUs
// ID;FruName;FruType;FruDescription;FruStatus;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,8"

// Translate the FruType
// ID;FruName;FruType;FruDescription;FruStatus;
OtherDevice.Discovery.Source(1).Compute(1).Type="Translate"
OtherDevice.Discovery.Source(1).Compute(1).Column=3
OtherDevice.Discovery.Source(1).Compute(1).TranslationTable="OtherDeviceTypeTranslationTable"

OtherDeviceTypeTranslationTable(2)="Other"
OtherDeviceTypeTranslationTable(7)="Bios"
OtherDeviceTypeTranslationTable(8)="Blade"
OtherDeviceTypeTranslationTable(15)="CpuBoardMemoryBranch"
OtherDeviceTypeTranslationTable(16)="CpuBoardMemoryChannel"
OtherDeviceTypeTranslationTable(17)="CpuCMP"
OtherDeviceTypeTranslationTable(19)="CpuMemoryControllerChannel"
OtherDeviceTypeTranslationTable(20)="CpuThread"
OtherDeviceTypeTranslationTable(22)="DataMMU"
OtherDeviceTypeTranslationTable(23)="DCache"
OtherDeviceTypeTranslationTable(25)="DiskBackplane"
OtherDeviceTypeTranslationTable(26)="Display"
OtherDeviceTypeTranslationTable(27)="DriveSlot"
OtherDeviceTypeTranslationTable(29)="Dvrm1V5Converter"
OtherDeviceTypeTranslationTable(30)="Dvrm3V3Converter"
OtherDeviceTypeTranslationTable(31)="DvrmCoreConverter"
OtherDeviceTypeTranslationTable(32)="DvrmFBDIMMConverter"
OtherDeviceTypeTranslationTable(33)="DvrmPLXConverter"
OtherDeviceTypeTranslationTable(34)="DvrmZambeziConverter"
OtherDeviceTypeTranslationTable(35)="DvrmZambeziPLXConverter"
OtherDeviceTypeTranslationTable(37)="ExpressModule"
OtherDeviceTypeTranslationTable(38)="FabricExpansionModule"
OtherDeviceTypeTranslationTable(39)="Fan"
OtherDeviceTypeTranslationTable(40)="FanModule"
OtherDeviceTypeTranslationTable(41)="FanTray"
OtherDeviceTypeTranslationTable(43)="FloatingPointUnit"
OtherDeviceTypeTranslationTable(44)="FrontFan"
OtherDeviceTypeTranslationTable(45)="FrontFanBoard"
OtherDeviceTypeTranslationTable(46)="FrontLEDBoard"
OtherDeviceTypeTranslationTable(48)="HddFan"
OtherDeviceTypeTranslationTable(50)="HotswapController"
OtherDeviceTypeTranslationTable(52)="iCache"
OtherDeviceTypeTranslationTable(55)="InfrastructureManager"
OtherDeviceTypeTranslationTable(57)="instructionMMU"
OtherDeviceTypeTranslationTable(58)="IoBoard"
OtherDeviceTypeTranslationTable(59)="IoBoat"
OtherDeviceTypeTranslationTable(60)="IoExpansionUnit"
OtherDeviceTypeTranslationTable(61)="L2bank"
OtherDeviceTypeTranslationTable(62)="L3bank"
OtherDeviceTypeTranslationTable(63)="LinkCard"
OtherDeviceTypeTranslationTable(64)="Memory"
OtherDeviceTypeTranslationTable(65)="MemoryBoard"
OtherDeviceTypeTranslationTable(66)="MemoryBoardMemoryBranch"
OtherDeviceTypeTranslationTable(67)="MemoryBoardMemoryChannel"
OtherDeviceTypeTranslationTable(68)="MemoryBranch"
OtherDeviceTypeTranslationTable(69)="MemoryBranchOnMemoryRiser"
OtherDeviceTypeTranslationTable(70)="MemoryChannelOnMemoryRiser"
OtherDeviceTypeTranslationTable(71)="MemoryCMP"
OtherDeviceTypeTranslationTable(72)="MemoryController"
OtherDeviceTypeTranslationTable(73)="MemoryRank"
OtherDeviceTypeTranslationTable(74)="MemoryRiser"
OtherDeviceTypeTranslationTable(75)="MicroCore"
OtherDeviceTypeTranslationTable(76)="MotherBoard"
OtherDeviceTypeTranslationTable(77)="NemState"
OtherDeviceTypeTranslationTable(78)="NetworkConfiguration"
OtherDeviceTypeTranslationTable(79)="NetworkExpressModule"
OtherDeviceTypeTranslationTable(85)="Nvram"
OtherDeviceTypeTranslationTable(86)="Output"
OtherDeviceTypeTranslationTable(87)="PciExpansionBoard"
OtherDeviceTypeTranslationTable(88)="PciExpressInterface"
OtherDeviceTypeTranslationTable(89)="PciSwitch"
OtherDeviceTypeTranslationTable(90)="PciTray"
OtherDeviceTypeTranslationTable(91)="PciXModule"
OtherDeviceTypeTranslationTable(92)="PdbFan"
OtherDeviceTypeTranslationTable(93)="PhysicalSecurity"
OtherDeviceTypeTranslationTable(94)="PowerConditions"
OtherDeviceTypeTranslationTable(95)="PowerDistributionBoard"
OtherDeviceTypeTranslationTable(97)="PowerPCCPU"
OtherDeviceTypeTranslationTable(98)="PowerState"
OtherDeviceTypeTranslationTable(100)="PowerSupplyExternalConditions"
OtherDeviceTypeTranslationTable(101)="PowerSupplyInternalSide"
OtherDeviceTypeTranslationTable(102)="PowerSupplyStatus"
OtherDeviceTypeTranslationTable(103)="PowerUnit"
OtherDeviceTypeTranslationTable(104)="Presence"
OtherDeviceTypeTranslationTable(106)="ProcessorBoard"
OtherDeviceTypeTranslationTable(107)="Prom"
OtherDeviceTypeTranslationTable(108)="PushButton"
OtherDeviceTypeTranslationTable(109)="RaidExpansionModule"
OtherDeviceTypeTranslationTable(110)="Ready"
OtherDeviceTypeTranslationTable(111)="RearFan"
OtherDeviceTypeTranslationTable(112)="RearFanBoard"
OtherDeviceTypeTranslationTable(113)="RearLEDBoard"
OtherDeviceTypeTranslationTable(114)="RiserBoard"
OtherDeviceTypeTranslationTable(115)="SasController"
OtherDeviceTypeTranslationTable(116)="SerialConnector"
OtherDeviceTypeTranslationTable(117)="ServiceProcessor"
OtherDeviceTypeTranslationTable(118)="Slot"
OtherDeviceTypeTranslationTable(119)="SlotId"
OtherDeviceTypeTranslationTable(120)="SpBoardModule"
OtherDeviceTypeTranslationTable(122)="StreamingProcessorUnit"
OtherDeviceTypeTranslationTable(123)="SystemFan"
OtherDeviceTypeTranslationTable(124)="Temperature"
OtherDeviceTypeTranslationTable(125)="ThermalConditions"
OtherDeviceTypeTranslationTable(126)="ToggleSwitch"
OtherDeviceTypeTranslationTable(127)="Tty"
OtherDeviceTypeTranslationTable(128)="UsbBoard"
OtherDeviceTypeTranslationTable(129)="UsbConnector"
OtherDeviceTypeTranslationTable(130)="UsbPort"
OtherDeviceTypeTranslationTable(131)="Vibration"
OtherDeviceTypeTranslationTable(132)="Video"
OtherDeviceTypeTranslationTable(133)="Voltage"
OtherDeviceTypeTranslationTable(134)="XauiBoard"
OtherDeviceTypeTranslationTable(Default)=""

// Keep only Known/Translated"OtherDevices"
// ID;FruName;FruType;FruDescription;FruStatus;
OtherDevice.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=3
OtherDevice.Discovery.Source(1).Compute(2).RegExp="."

// Exclude components with Indeterminate Status
// ID;FruName;FruType;FruDescription;FruStatus;
OtherDevice.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(3).Column=5
OtherDevice.Discovery.Source(1).Compute(3).ValueList="6"

// Instance Table
// ID;FruName;FruType;FruDescription;FruStatus;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(3)

//
// OtherDevice collect

// Collect type is mono-instance
OtherDevice.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// FruStatus
OtherDevice.Collect.Source(1).Type="SnmpGet"
OtherDevice.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.1.1.6.1.1.8.%OtherDevice.Collect.DeviceID%"

// Duplicate the Status
// FruStatus,FruStatus
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;FruStatus
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=1
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=2
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = Source(1)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Status=ValueTable.Column(1)
OtherDevice.Collect.StatusInformation=ValueTable.Column(2)


//
// VOLTAGES
//

// Voltage discovery

// Source(1) = voltageProbeTable SNMP Table
// ID;SensorName;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.2.1.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,3"

// InstanceTable = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)


// Voltage collect

// Collect type = mono-instance
Voltage.Collect.Type="MultiInstance"

// Source(1) = the voltageProbeTable
// ID;Status;VoltageReading;Exponent;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.2.1.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,6,8,10"

// Duplicate the status column
// ID;Status;Status;VoltageReading;Exponent;
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL Status
// ID;PATROLStatus;Status;VoltageReading;Exponent;
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="2"
Voltage.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PATROLStatus;statusInformation;VoltageReading;Exponent;
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// Translate the exponent
// ID;PATROLStatus;statusInformation;VoltageReading;Exponent;
Voltage.Collect.Source(1).Compute(4).Type="Translate"
Voltage.Collect.Source(1).Compute(4).Column=5
Voltage.Collect.Source(1).Compute(4).TranslationTable="VoltageUnitTranslationTable"

VoltageUnitTranslationTable(0)="1000"
VoltageUnitTranslationTable(-1)="100"
VoltageUnitTranslationTable(-2)="10"
VoltageUnitTranslationTable(-3)="1"
VoltageUnitTranslationTable(Default)="1000"

// Convert Voltage to Millivolts
// ID;PATROLStatus;statusInformation;VoltageReading;Exponent;
Voltage.Collect.Source(1).Compute(5).Type="Multiply"
Voltage.Collect.Source(1).Compute(5).Column=4
Voltage.Collect.Source(1).Compute(5).MultiplyBy=Column(5)

// ValueTable = source(1)
// ID;PATROLStatus;statusInformation;VoltageReading;Exponent;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(4)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)


//
// FanS
//

// Fan discovery

// Source(1) = FanProbeTable SNMP Table
// ID;SensorName;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.5.1.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,3"

// InstanceTable = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)


// Fan collect

// Collect type = mono-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = the FanProbeTable
// ID;Status;FanReading;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.5.1.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,6,8"

// Duplicate the status column
// ID;Status;Status;FanReading;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL Status
// ID;PATROLStatus;Status;FanReading;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PATROLStatus;statusInformation;FanReading;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = source(1)
// ID;PATROLStatus;statusInformation;FanReading;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(4)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)

//
// TemperatureS
//

// Temperature discovery

// Source(1) = TemperatureProbeTable SNMP Table
// ID;SensorName;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.6.1.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,3"

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)


// Temperature collect

// Collect type = mono-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = the TemperatureProbeTable
// ID;Status;TemperatureReading;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.7.6.1.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,6,8"

// Duplicate the status column
// ID;Status;Status;TemperatureReading;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL Status
// ID;PATROLStatus;Status;TemperatureReading;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column="2"
Temperature.Collect.Source(1).Compute(2).TranslationTable="FRUStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PATROLStatus;statusInformation;TemperatureReading;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column="3"
Temperature.Collect.Source(1).Compute(3).TranslationTable="FRUStatusInformationTranslationTable"

// ValueTable = source(1)
// ID;PATROLStatus;statusInformation;TemperatureReading;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(4)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)


//
// LEDS
//

// Temperature discovery

// Source(1) = TemperatureProbeTable SNMP Table
// ID;SensorName;
LED.Discovery.Source(1).Type="SnmpTable"
LED.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.1.1.8.3.1.1"
LED.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Duplicate the LED Table
// ID;SensorName;
LED.Discovery.Source(2)=%LED.Discovery.Source(1)%

// Keep only sensors where ON is FAULTY
// ID;SensorName;
LED.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
LED.Discovery.Source(2).Compute(1).Column=2
LED.Discovery.Source(2).Compute(1).RegExp="\(FAULT\)\|\(SERVICE\)$"

// Set On;Blinking;Off;
// ID;SensorName;On;Blinking;Off;
LED.Discovery.Source(2).Compute(2).Type="RightConcat"
LED.Discovery.Source(2).Compute(2).Column=2
LED.Discovery.Source(2).Compute(2).String=";ALARM;ALARM;OK"

// Duplicate the LED Table
// ID;SensorName;
LED.Discovery.Source(3)=%LED.Discovery.Source(1)%

// Keep only sensors where ON is OK
// ID;SensorName;
LED.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
LED.Discovery.Source(3).Compute(1).Column=2
LED.Discovery.Source(3).Compute(1).RegExp="OK$"

// Set On;Blinking;Off;
// ID;SensorName;On;Blinking;Off;
LED.Discovery.Source(3).Compute(2).Type="RightConcat"
LED.Discovery.Source(3).Compute(2).Column=2
LED.Discovery.Source(3).Compute(2).String=";OK;OK;ALARM"

// Duplicate the LED Table
// ID;SensorName;
LED.Discovery.Source(4)=%LED.Discovery.Source(1)%

// Keep only indicator sensors (Exclude sensors from 2 and 3)
// ID;SensorName;
LED.Discovery.Source(4).Compute(1).Type="ExcludeMatchingLines"
LED.Discovery.Source(4).Compute(1).Column=2
LED.Discovery.Source(4).Compute(1).RegExp="\(FAULT\)\|\(SERVICE\)\|\(OK\)$"

// Set On;Blinking;Off;
// ID;SensorName;On;Blinking;Off;
LED.Discovery.Source(4).Compute(2).Type="RightConcat"
LED.Discovery.Source(4).Compute(2).Column=2
LED.Discovery.Source(4).Compute(2).String=";OK;OK;OK"

// Union 2, 3 and 4
// ID;SensorName;On;Blinking;Off;
LED.Discovery.Source(5).Type="TableUnion"
LED.Discovery.Source(5).Table1=%LED.Discovery.Source(2)%
LED.Discovery.Source(5).Table2=%LED.Discovery.Source(3)%
LED.Discovery.Source(5).Table3=%LED.Discovery.Source(4)%

// InstanceTable = Source(5)
// ID;SensorName;On;Blinking;Off;
LED.Discovery.InstanceTable=%LED.Discovery.Source(5)%
LED.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LED.Discovery.Instance.DisplayID=InstanceTable.Column(2)
LED.Discovery.Instance.OnStatus=InstanceTable.Column(3)
LED.Discovery.Instance.BlinkingStatus=InstanceTable.Column(4)
LED.Discovery.Instance.OffStatus=InstanceTable.Column(5)



//
// LED collect

// Collect type is mono-instance
LED.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// LedState
LED.Collect.Source(1).Type="SnmpGet"
LED.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.1.1.8.3.1.1.4.%LED.Collect.DeviceID%"

// Duplicate the LedState
// LedState,LedState
LED.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LED.Collect.Source(1).Compute(1).Column=1

// Translate the first LedState to Status
// Status;LedState;
LED.Collect.Source(1).Compute(2).Type="Translate"
LED.Collect.Source(1).Compute(2).Column=1
LED.Collect.Source(1).Compute(2).TranslationTable="LEDStateTranslationTable"

// The LEDStateTranslationTable
LEDStateTranslationTable(1)="UNKNOWN"
LEDStateTranslationTable(2)="UNKNOWN"
LEDStateTranslationTable(3)="Off"
LEDStateTranslationTable(4)="On"
LEDStateTranslationTable(5)="UNKNOWN"
LEDStateTranslationTable(6)="Blinking"
LEDStateTranslationTable(7)="Blinking"

// Translate the Second LedState to Status
// Status;SatusInformation;
LED.Collect.Source(1).Compute(3).Type="Translate"
LED.Collect.Source(1).Compute(3).Column=2
LED.Collect.Source(1).Compute(3).TranslationTable="LEDStateInformationTranslationTable"

// The LEDStateTranslationTable
LEDStateInformationTranslationTable(1)="Unknown"
LEDStateInformationTranslationTable(2)="Other"
LEDStateInformationTranslationTable(3)="Off"
LEDStateInformationTranslationTable(4)="On"
LEDStateInformationTranslationTable(5)="Standby"
LEDStateInformationTranslationTable(6)="Slow Blinking"
LEDStateInformationTranslationTable(7)="Fast Blinking"

// ValueTable = Source(1)
LED.Collect.ValueTable=%LED.Collect.Source(1)%
LED.Collect.Status=ValueTable.Column(1)
LED.Collect.StatusInformation=ValueTable.Column(2)



//
// LogicalDisk
//

// Get a list of Raid Volumes
// ID;Name;ControllerNumber;DiskCapacity;DiskUnits;RaidLevel;
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.2.6.2.1.5.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,7,10,11,12"


// Translate the DiskUnits to a Multiplier
// ID;Name;ControllerNumber;DiskCapacity;DiskUnits;RaidLevel;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(1).Column=5
LogicalDisk.Discovery.Source(1).Compute(1).TranslationTable="DiskUnitsTranslationTable"

// The DiskUnitsTranslationTable
DiskUnitsTranslationTable(1)="1048576"
DiskUnitsTranslationTable(2)="1073741824"
DiskUnitsTranslationTable(3)="1099511627776"

// Multiply the Capacity by the Units Multiplier
// ID;Name;ControllerNumber;DiskCapacity;DiskUnits;RaidLevel;
LogicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(2).Column=4
LogicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=Column(5)

// Instance Table
// ID;Name;ControllerNumber;DiskCapacity;DiskUnits;RaidLevel;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(6)


//
// LogicalDisk collect

// Collect type is mono-instance
LogicalDisk.Collect.Type="MonoInstance"

// Do an SNMP get directly on the status
// RaidStatus
LogicalDisk.Collect.Source(1).Type="SnmpGet"
LogicalDisk.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.2.6.2.1.5.1.21.%LogicalDisk.Collect.DeviceID%"

// Duplicate the Status
// RaidStatus,RaidStatus
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=1

// Translate the first Status code into a PATROLStatus
// PATROLStatus;RaidStatus
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=1
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// Translate the first Status code into a Status Information
// PATROLStatus;StatusInformation;
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column=2
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Status=ValueTable.Column(1)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(2)


// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable(1)="OK"
LogicalDiskStatusTranslationTable(2)="WARN"
LogicalDiskStatusTranslationTable(3)="ALARM"
LogicalDiskStatusTranslationTable(4)="ALARM"
LogicalDiskStatusTranslationTable(5)="ALARM"
LogicalDiskStatusTranslationTable(6)="ALARM"
LogicalDiskStatusTranslationTable(7)="OK"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable(1)=""
LogicalDiskStatusInformationTranslationTable(2)="Degraded"
LogicalDiskStatusInformationTranslationTable(3)="Failed"
LogicalDiskStatusInformationTranslationTable(4)="Missing"
LogicalDiskStatusInformationTranslationTable(5)="Offline"
LogicalDiskStatusInformationTranslationTable(6)="Init"
LogicalDiskStatusInformationTranslationTable(7)="Spare"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"
