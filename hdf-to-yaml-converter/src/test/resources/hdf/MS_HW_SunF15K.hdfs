//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                  MS_HW_SunF15K.hdf
//
//      Supports: Sun Fire F12K, F15K, F20K and F25K through their SC (System Controller) card
//		Monitors: Almost everything except memory modules (like usual) and network cards -- OPERATES LOCALLY ON THE SYSTEM CONTROLLER (SC)
//      Connects to: The SMS utilities that are installed on the SC
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun Fire F12K/F15K/F20K/F25K (SMS)"
hdf.TypicalPlatform="Oracle/Sun Fire F15K"
hdf.ReliesOn="Sun SMS utilities installed on the System Controller (SC on F15K, etc.)"
hdf.Comments="Gives environmental information (temperatures, fans, etc.) and boards status on Sun Fire F12K, F15K, F20K and F25K servers."
hdf.Version="1.1"
hdf.RemoteSupport="true"
hdf.LocalSupport="true"
hdf.AppliesToOS="Solaris,OOB"

// SUDO-ABLE COMMANDS
// None.

//
// DETECTION
//

// Must be running on the SC (Solaris machine)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="SunOS,Solaris,OOB"

// Must find the showplatform utility (meaning that SMS is installed)
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;which showplatform"
Detection.Criteria(2).ExpectedResult="/showplatform$"
Detection.Criteria(2).ErrorMessage="Unable to find the platform program"

// showplatform must return platform's type
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform"
Detection.Criteria(3).ErrorMessage="This System Controller does not appear to be connected to a Sun Fire system"
Detection.Criteria(3).ExpectedResult="^Platform Type: Sun Fire"

//
// COMPUTER
//

//
// Discovery

// Source(1) = Output of the showplatform command
// ComputerModel;
Enclosure.Discovery.Source(1).Type="OSCommand"
Enclosure.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform"
Enclosure.Discovery.Source(1).KeepOnlyRegExp="^Platform Type: Sun Fire"
Enclosure.Discovery.Source(1).Separators=" "
Enclosure.Discovery.Source(1).SelectColumns="5"

// Add "Fire" to the model
// ComputerModel
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="Fire "

// The discovery table
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="SunF15K"
Enclosure.Discovery.Instance.Vendor="Sun"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"

//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MonoInstance"

// Source(1) = output of showenvironment
Enclosure.Collect.Source(1).Type="OSCommand"
Enclosure.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Enclosure.Collect.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// PowerConsumption;
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;PowerConsumption;"
Enclosure.Collect.Source(1).Compute(1).Separators=";"
Enclosure.Collect.Source(1).Compute(1).SelectColumns="3"

// ValueTable = Source(1)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.PowerConsumption=ValueTable.Column(1)


//
// FANS
//

//
// Discovery

// Source(1) = output of showenvironment
Fan.Discovery.Source(1).Type="OSCommand"
Fan.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Fan.Discovery.Source(1).TimeOut="90"

// Send showenvironnment's output into the %EmbeddedFile(2)% awk script
// DeviceID;
Fan.Discovery.Source(1).Compute(1).Type="Awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Fan.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Fan;"
Fan.Discovery.Source(1).Compute(1).Separators=";"
Fan.Discovery.Source(1).Compute(1).SelectColumns="3"

// Instance Table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(1)
Fan.Discovery.Instance.AttachedToDeviceID="SunF15K"

//
// Collect

// Collect type is "all instances in one shot"
Fan.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
Fan.Collect.Source(1).Type="OSCommand"
Fan.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Fan.Collect.Source(1).TimeOut="90"

// Pipe the output of showenvironment into the %EmbeddedFile(2)% awk script
// DeviceID;Status
Fan.Collect.Source(1).Compute(1).Type="Awk"
Fan.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Fan.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Fan;"
Fan.Collect.Source(1).Compute(1).Separators=";"
Fan.Collect.Source(1).Compute(1).SelectColumns="3,4"

// Duplicate the status column
// DeviceID;status;status
Fan.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(2).Column="2"

// Translate the first column into a PATROL Status
// DeviceID;PATROLStatus;status
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="ShowEnvironmentStatusTranslationTable"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


//
// TEMPERATURES
//

//
// Discovery

// Source(1) = output of showenvironment
Temperature.Discovery.Source(1).Type="OSCommand"
Temperature.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Temperature.Discovery.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// DeviceID;
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Temperature;"
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="3"

// Instance Table = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(1)
Temperature.Discovery.Instance.AttachedToDeviceID="SunF15K"

//
// Collect

// Collect type is "all instances in one shot"
Temperature.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
Temperature.Collect.Source(1).Type="OSCommand"
Temperature.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Temperature.Collect.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// DeviceID;Temperature;Status
Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Temperature;"
Temperature.Collect.Source(1).Compute(1).Separators=";"
Temperature.Collect.Source(1).Compute(1).SelectColumns="3,4,5"

// Duplicate the status column
// DeviceID;Temperature;status;status
Temperature.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(2).Column="3"

// Translate the first column into a PATROL Status
// DeviceID;Temperature;PATROLStatus;status
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column="3"
Temperature.Collect.Source(1).Compute(3).TranslationTable="ShowEnvironmentStatusTranslationTable"

// The ShowEnvironmentStatusTranslationTable
ShowEnvironmentStatusTranslationTable("OK")="OK"
ShowEnvironmentStatusTranslationTable("OVERLIMIT")="ALARM"
ShowEnvironmentStatusTranslationTable("HIGH_CRIT")="ALARM"
ShowEnvironmentStatusTranslationTable("HIGH_WARN")="WARN"
ShowEnvironmentStatusTranslationTable("LOW_CRIT")="ALARM"
ShowEnvironmentStatusTranslationTable("LOW_WARN")="WARN"
ShowEnvironmentStatusTranslationTable("INVALID")="OK"
ShowEnvironmentStatusTranslationTable("HIGH_MAX")="ALARM"
ShowEnvironmentStatusTranslationTable("LOW_MIN")="ALARM"
ShowEnvironmentStatusTranslationTable("BAD")="ALARM"
ShowEnvironmentStatusTranslationTable("FAIL")="ALARM"
ShowEnvironmentStatusTranslationTable(Default)="ALARM"

// ValueTable = Source(3)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)
Temperature.Collect.Temperature=ValueTable.Column(2)


//
// VOLTAGES
//

//
// Discovery

// Source(1) = output of showenvironment
Voltage.Discovery.Source(1).Type="OSCommand"
Voltage.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Voltage.Discovery.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// DeviceID;
Voltage.Discovery.Source(1).Compute(1).Type="Awk"
Voltage.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Voltage.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Voltage;"
Voltage.Discovery.Source(1).Compute(1).Separators=";"
Voltage.Discovery.Source(1).Compute(1).SelectColumns="3"

// Instance Table = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(1)
Voltage.Discovery.Instance.AttachedToDeviceID="SunF15K"


//
// Collect

// Collect type is "all instances in one shot"
Voltage.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
Voltage.Collect.Source(1).Type="OSCommand"
Voltage.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
Voltage.Collect.Source(1).TimeOut="90"

// Piped showenvironment's output into the %EmbeddedFile(1)% awk script
// DeviceID;Voltage;Status
Voltage.Collect.Source(1).Compute(1).Type="Awk"
Voltage.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Voltage.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Voltage;"
Voltage.Collect.Source(1).Compute(1).Separators=";"
Voltage.Collect.Source(1).Compute(1).SelectColumns="3,4,5"

// Duplicate the status column
// DeviceID;Voltage;Status;Status
Voltage.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(2).Column="3"

// Translate the first column into a PATROL Status
// DeviceID;Voltage;PATROLStatus;Status
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="ShowEnvironmentStatusTranslationTable"

// Multiply voltage value by 1000 (convert from V to mV)
// DeviceID;VoltageMilliVolts;PATROLstatus;status
Voltage.Collect.Source(1).Compute(4).Type="Multiply"
Voltage.Collect.Source(1).Compute(4).Column="2"
Voltage.Collect.Source(1).Compute(4).MultiplyBy="1000"

// ValueTable = Source(3)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Status=ValueTable.Column(3)
Voltage.Collect.StatusInformation=ValueTable.Column(4)
Voltage.Collect.Voltage=ValueTable.Column(2)



//
// POWER SUPPLIES
//

//
// Discovery

// Source(1) = output of showenvironment piped into the %EmbeddedFile(3)% awk script
// DeviceID
PowerSupply.Discovery.Source(1).Type="OSCommand"
PowerSupply.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
PowerSupply.Discovery.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(3)% awk script
// DeviceID
PowerSupply.Discovery.Source(1).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
PowerSupply.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;PowerSupply;"
PowerSupply.Discovery.Source(1).Compute(1).Separators=";"
PowerSupply.Discovery.Source(1).Compute(1).SelectColumns="3"

// Instance Table = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="SunF15K"

//
// Collect

// Collect type is "all instances in one shot"
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
PowerSupply.Collect.Source(1).Type="OSCommand"
PowerSupply.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
PowerSupply.Collect.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(3)% awk script
// DeviceID;Status
PowerSupply.Collect.Source(1).Compute(1).Type="Awk"
PowerSupply.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
PowerSupply.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;PowerSupply;"
PowerSupply.Collect.Source(1).Compute(1).Separators=";"
PowerSupply.Collect.Source(1).Compute(1).SelectColumns="3,4"

// Duplicate the status column
// DeviceID;Status;Status
PowerSupply.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(2).Column="2"

// Translate the first column into a PATROL Status
// DeviceID;Current;PATROLStatus;Status
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="2"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="ShowEnvironmentStatusTranslationTable"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)



//
// OTHER DEVICES (Currents and domains)
//

//
// Discovery

// Source(1) = output of showenvironment
OtherDevice.Discovery.Source(1).Type="OSCommand"
OtherDevice.Discovery.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
OtherDevice.Discovery.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// Source(1) is the list of currents
// DeviceType;DeviceID;
OtherDevice.Discovery.Source(1).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
OtherDevice.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Current;"
OtherDevice.Discovery.Source(1).Compute(1).Separators=";"
OtherDevice.Discovery.Source(1).Compute(1).SelectColumns="2,3"

// Duplicate DeviceID because it will be used as AdditionalLabel
// DeviceType;DeviceID;DeviceID
OtherDevice.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Discovery.Source(1).Compute(2).Column="2"

// Source(2) = output of showplatform
OtherDevice.Discovery.Source(2).Type="OSCommand"
OtherDevice.Discovery.Source(2).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform"
OtherDevice.Discovery.Source(2).TimeOut="90"

// Pipe showplatform's output into the %EmbeddedFile(4)% awk script
// Source(2) is the list of domains
// DeviceType;DeviceID;AdditionalLabel
OtherDevice.Discovery.Source(2).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(4)
OtherDevice.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;Domain;"
OtherDevice.Discovery.Source(2).Compute(1).Separators=";"
OtherDevice.Discovery.Source(2).Compute(1).SelectColumns="2,3,4"

// Source(3) = output of showboards
OtherDevice.Discovery.Source(3).Type="OSCommand"
OtherDevice.Discovery.Source(3).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showboards"
OtherDevice.Discovery.Source(3).TimeOut="90"

// Pipe showboards' output into the %EmbeddedFile(5)% awk script
// Source(3) is the list of boards
// DeviceType;DeviceID;AdditionalLabel
OtherDevice.Discovery.Source(3).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(5)
OtherDevice.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Discovery.Source(3).Compute(1).Separators=";"
OtherDevice.Discovery.Source(3).Compute(1).SelectColumns="2,3,4"

// Source(4) = union of Source(1), Source(2) and Source(3)
// DeviceType;DeviceID;AdditionalLabel
OtherDevice.Discovery.Source(4).Type="TableUnion"
OtherDevice.Discovery.Source(4).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(4).Table2=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(4).Table3=%OtherDevice.Discovery.Source(3)%

// Instance Table = Source(1)
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(4)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AdditionalLabel=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AttachedToDeviceID="SunF15K"

//
// Collect

// Collect type is "all instances in one shot"
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = output of showenvironment
OtherDevice.Collect.Source(1).Type="OSCommand"
OtherDevice.Collect.Source(1).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showenvironment"
OtherDevice.Collect.Source(1).TimeOut="90"

// Pipe showenvironment's output into the %EmbeddedFile(1)% awk script
// DeviceID;Status
OtherDevice.Collect.Source(1).Compute(1).Type="Awk"
OtherDevice.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
OtherDevice.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;Current;"
OtherDevice.Collect.Source(1).Compute(1).Separators=";"
OtherDevice.Collect.Source(1).Compute(1).SelectColumns="3,5"

// Duplicate the status column
// DeviceID;Status;Status
OtherDevice.Collect.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(2).Column="2"

// Translate the first column into a PATROL Status
// DeviceID;Current;PATROLStatus;Status
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column="2"
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="ShowEnvironmentStatusTranslationTable"

// Source(2) = output of showplatform
OtherDevice.Collect.Source(2).Type="OSCommand"
OtherDevice.Collect.Source(2).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showplatform"
OtherDevice.Collect.Source(2).TimeOut="90"

// Pipe showplatform's output into the %EmbeddedFile(4)% awk script
// Source(2) is the list of domains
// DeviceID;Status
OtherDevice.Collect.Source(2).Compute(1).Type="Awk"
OtherDevice.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(4)
OtherDevice.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;Domain;"
OtherDevice.Collect.Source(2).Compute(1).Separators=";"
OtherDevice.Collect.Source(2).Compute(1).SelectColumns="3,5"

// Duplicate the status column
// DeviceID;Status;Status
OtherDevice.Collect.Source(2).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(2).Compute(2).Column="2"

// Translate the first column into a PATROL Status
// DeviceID;PATROLStatus;Status
OtherDevice.Collect.Source(2).Compute(3).Type="Translate"
OtherDevice.Collect.Source(2).Compute(3).Column="2"
OtherDevice.Collect.Source(2).Compute(3).TranslationTable="DomainStatusTranslationTable"


// The DomainStatusTranslationTable
DomainStatusTranslationTable("Booting OBP")="OK"
DomainStatusTranslationTable("Booting Solaris")="OK"
DomainStatusTranslationTable("Keyswitch Standby")="OK"
DomainStatusTranslationTable("Loading OBP")="OK"
DomainStatusTranslationTable("Loading Solaris")="OK"
DomainStatusTranslationTable("Powered Off")="OK"
DomainStatusTranslationTable("Running Domain POST")="OK"
DomainStatusTranslationTable("Running OBP")="OK"
DomainStatusTranslationTable("Running Solaris")="OK"
DomainStatusTranslationTable("Solaris Quiesce In-progress")="OK"
DomainStatusTranslationTable("Solaris Quiesced")="OK"

DomainStatusTranslationTable("Debugging Solaris")="WARN"
DomainStatusTranslationTable("Domain Exited OBP")="WARN"
DomainStatusTranslationTable("Exited OBP")="WARN"
DomainStatusTranslationTable("In OBP Callback")="WARN"
DomainStatusTranslationTable("OBP Debugging")="WARN"
DomainStatusTranslationTable("OBP in sync Callback to OS")="WARN"
DomainStatusTranslationTable("Solaris Halt")="WARN"
DomainStatusTranslationTable("Solaris Halted, in OBP")="WARN"
DomainStatusTranslationTable("Solaris Resume In-progress")="WARN"

DomainStatusTranslationTable("Domain Down")="ALARM"
DomainStatusTranslationTable("In Recovery")="ALARM"
DomainStatusTranslationTable("Solaris Exited")="ALARM"
DomainStatusTranslationTable("Solaris Panic")="ALARM"
DomainStatusTranslationTable("Solaris Panic Continue")="ALARM"
DomainStatusTranslationTable("Solaris Panic Debug")="ALARM"
DomainStatusTranslationTable("Solaris Panic Dump")="ALARM"
DomainStatusTranslationTable("Solaris Panic Exit")="ALARM"

DomainStatusTranslationTable("Booting Solaris Failed")="ALARM"
DomainStatusTranslationTable("Environmental Domain Halt")="ALARM"
DomainStatusTranslationTable("Environmental Emergency")="ALARM"
DomainStatusTranslationTable("In OBP Error Reset")="ALARM"
DomainStatusTranslationTable("Loading Solaris Failed")="ALARM"
DomainStatusTranslationTable("OBP Failed")="ALARM"
DomainStatusTranslationTable("Unknown")="ALARM"

DomainStatusTranslationTable(Default)="UNKNOWN"

// Source(3) = output of showboards
OtherDevice.Collect.Source(3).Type="OSCommand"
OtherDevice.Collect.Source(3).CommandLine="LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/SUNWSMS/lib;export LD_LIBRARY_PATH;PATH=$PATH:/opt/SUNWSMS/bin;export PATH;showboards"
OtherDevice.Collect.Source(3).TimeOut="90"

// Pipe showboards' output into the %EmbeddedFile(5)% awk script
// Source(3) is the list of boards
// DeviceID;Status
OtherDevice.Collect.Source(3).Compute(1).Type="Awk"
OtherDevice.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(5)
OtherDevice.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Collect.Source(3).Compute(1).Separators=";"
OtherDevice.Collect.Source(3).Compute(1).SelectColumns="3,5"

// Duplicate the status column
// DeviceID;Status;Status
OtherDevice.Collect.Source(3).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(3).Compute(2).Column="2"

// Translate the first column into a PATROL Status
// DeviceID;PATROLStatus;Status
OtherDevice.Collect.Source(3).Compute(3).Type="Translate"
OtherDevice.Collect.Source(3).Compute(3).Column="2"
OtherDevice.Collect.Source(3).Compute(3).TranslationTable="BoardStatusTranslationTable"

// The BoardStatusTranslationTable
BoardStatusTranslationTable("iPOST")="WARN"
BoardStatusTranslationTable("PASSED")="OK"
BoardStatusTranslationTable("FAILED")="ALARM"
BoardStatusTranslationTable("DEGRADED")="WARN"
BoardStatusTranslationTable(Default)="UNKNOWN"

// Source(4) = union of Source(1), Source(2) and Source(3)
// DeviceType;DeviceID;AdditionalLabel
OtherDevice.Collect.Source(4).Type="TableUnion"
OtherDevice.Collect.Source(4).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(4).Table2=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(4).Table3=%OtherDevice.Collect.Source(3)%

// ValueTable = Source(3)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(4)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)



/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes showenvironment as stdin
///    and returns a table with all the environment information
///	   MSHW;DeviceType;DeviceID;Value;Status
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
(NF > 4) {
	if ($(NF-3) ~ /^[ACV]$/)
	{
		unit = $(NF-3)
		value = $(NF-4)
		status = $NF

		if (unit == "A")
		{
			deviceType = "Current"
		}
		else if (unit == "C")
		{
			deviceType = "Temperature"
		}
		else if (unit == "V")
		{
			deviceType = "Voltage"
		}
		else
		{
			deviceType = ""
		}

		if (value == "--")
		{
			value = ""
		}

		DeviceID = $1 " " $2 " " $3 " / " $4 " /"
		for (i = 5 ; i<=NF - 5 ; i++)
		{
			if ($i != "Temp" && $i != "Volt" && $i != "VDC")
			{
				DeviceID = DeviceID " " $i
			}
		}

		print "MSHW;" deviceType ";" DeviceID ";" value ";" status
	}
}

/^PS[0-9] +/ {
	if (NF == 8)
	{
		print "MSHW;Current;" $1 " / AC0;;" $3
		print "MSHW;Current;" $1 " / AC1;;" $4
	}
}

($2 == "at" && $3 ~ /^PS[0-9]+/) {
	if (NF == 10)
	{
		print "MSHW;Current;" $3 " / AC0;;" $5
		print "MSHW;Current;" $3 " / AC1;;" $6
	}
}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///    AWK script that takes showenvironment as stdin
///    and returns a table with all the fan information
///	   MSHW;Fan;DeviceID;Status
///
/////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN { fanCountPerTray = 0 }
/^FANTRAY +POWER +SPEED +FAN0/ {
	fanCountPerTray = NF - 3
}

/^FT[0-9] +/ {
	for (i=0 ; i<fanCountPerTray ; i++)
	{
		print "MSHW;Fan;Tray " substr($0, 3, 1) " / Fan " i ";" $(i+4)
	}
}

/^PS[0-9] +/ {
	if (NF == 8)
	{
		print "MSHW;Fan;" $1 " / Fan 0;" $7
		print "MSHW;Fan;" $1 " / Fan 1;" $8
	}

}

($2 == "at" && $3 ~ /^PS[0-9]+/) {
	if (NF == 10)
	{
		print "MSHW;Fan;" $3 " / Fan 0;" $9
		print "MSHW;Fan;" $3 " / Fan 1;" $10
	}
}
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///    AWK script that takes showenvironment as stdin
///    and returns a table with all the power supply information
///	   MSHW;Fan;DeviceID;Status
///
/////////////////////////////////////////////////////////////
EmbeddedFile(3):
/^PS[0-9] +/ {
	if (NF == 8)
	{
		print "MSHW;PowerSupply;" $1 ";" $2
	}
}
($2 == "at" && $3 ~ /^PS[0-9]+/) {
	if (NF == 10)
	{
		print "MSHW;PowerSupply;" $3 ";" $4
	}
}
EmbeddedFile(3).End
///////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////
///
///    Embedded File 4
///
///    AWK script that takes showplatform as stdin
///    and returns a table with all the domain information
///	   MSHW;Domain;DomainID;DomainTag;Status
///
/////////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN { capture = 0 }
{
	if ($1 == "Domain" && $2 == "Configurations:")
	{
		capture = 1
	}

	if (NF == 0)
	{
		capture = 0
	}

	if (capture == 1 && substr($0, 1, 2) ~ /^[A-Z] $/)
	{
		domainTag = $2
		if (domainTag == "-")
		{
			domainTag = ""
		}

		nodeName = $3
		if (nodeName == "-")
		{
			nodeName = ""
		}

		if (domainTag != "" && nodeName != "")
		{
			label = domainTag " - " nodeName
		}
		else if (domainTag != "" && nodeName == "")
		{
			label = domainTag
		}
		else if (domainTag == "" && nodeName != "")
		{
			label = nodeName
		}
		else
		{
			label = ""
		}

		status = $4
		for (i=5 ; i<=NF ; i++)
		{
			status = status " " $i
		}
		print "MSHW;Domain;" $1 ";" label ";" status
	}
}
EmbeddedFile(4).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 5
///
///    AWK script that takes showboards as stdin
///    and returns a table with all the boards information
///	   MSHW;BoardType;DeviceID;AdditionalLabel;Status
///
/////////////////////////////////////////////////////////////
EmbeddedFile(5):
/^SB[0-9]+|^IO[0-9]+/ {
	if ($3 != "Empty" && $4 != "Slot" && NF > 3)
	{
		domain = $NF
		boardType = $3 " Board"
		boardID = $1
		status = $(NF-1)
		active = $(NF-2)
		onOff = $2

		if (domain == "Isolated")
		{
			additionalLabel = onOff " - " active
		}
		else
		{
			if (active == "Assigned")
			{
				additionalLabel = onOff " - " active " to domain " domain
			}
			else if (active == "Active")
			{
				additionalLabel = onOff " - " active " in domain " domain
			}
			else
			{
				additionalLabel = onOff " - " active
			}
		}

		print "MSHW;" boardType ";" boardID ";" additionalLabel ";" status
	}
}
EmbeddedFile(5).End
///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////
///
///    Embedded File 6
///
///    AWK script that takes showenvironment as stdin
///    and returns the power consumption of the system
///	   MSHW;PowerConsumtion;PowerInWatts
///
/////////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN { totalPower = 0; }
($1 == "Current0") { current0 = $2; }
($1 == "Current1") { current1 = $2; }
($1 == "48VDC") {
	if (current0 != "" && current1 != "")
	{
		vdc = $2;
		totalPower = totalPower + (current0 + current1) * vdc;
	}
	current0 = "";
	current1 = "";
}
END { print "MSHW;PowerConsumption;" totalPower }
EmbeddedFile(6).End
///////////////////////////////////////////////////////////////
