////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//



//
// DETECTION
// Test if we can connect to the service and get a token
Detection.Criteria(1).Type="HTTP"
Detection.Criteria(1).Method="POST"
Detection.Criteria(1).URL="/api/rest/ApiConnection/Login"
Detection.Criteria(1).Header=EmbeddedFile(1)
// Expected Result is needed to fix Automatic Dectection for other connectors.
Detection.Criteria(1).ExpectedResult="sessionKey"

//
// Enclosure
//

// Eclosure Discovery
Enclosure.Discovery.Source(1).Type="HTTP"
Enclosure.Discovery.Source(1).Method="POST"
Enclosure.Discovery.Source(1).URL="/api/rest/ApiConnection/Login"
Enclosure.Discovery.Source(1).Header=EmbeddedFile(1)
Enclosure.Discovery.Source(1).ResultContent="all"

//collect AuthenticationToken
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)

//Now we have the token let's perform the StorageCenter Discovery
Enclosure.Discovery.Source(2).Type="HTTP"
Enclosure.Discovery.Source(2).Method="GET"
Enclosure.Discovery.Source(2).URL="/api/rest/StorageCenter/StorageCenter"
Enclosure.Discovery.Source(2).Header=EmbeddedFile(3)
Enclosure.Discovery.Source(2).ResultContent="Body"
Enclosure.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;serialNumber;model
Enclosure.Discovery.Source(2).Compute(1).Type="Json2Csv"
Enclosure.Discovery.Source(2).Compute(1).EntryKey="/"
Enclosure.Discovery.Source(2).Compute(1).Properties="instanceId;instanceName;serialNumber;hostOrIpAddress;modelSeries"
Enclosure.Discovery.Source(2).Compute(1).Separator=";"

//remove empty result to avoid phantoms objects
//tableID;ID;DisplayName;serialNumber;deviceHostname;model
Enclosure.Discovery.Source(2).Compute(2).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(2).Compute(2).Column=1
Enclosure.Discovery.Source(2).Compute(2).ValueList="/"

// Enclosure
//tableID;ID;DisplayName;serialNumber;deviceHostname;model
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Vendor="Dell"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(6)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Storage"
Enclosure.Discovery.Instance.DeviceHostname=InstanceTable.Column(5)


// Collect

// Collect type = multi-instance
Enclosure.Collect.Type="MultiInstance"

//
Enclosure.Collect.Source(1).Type="HTTP"
Enclosure.Collect.Source(1).Method="GET"
Enclosure.Collect.Source(1).URL="/api/rest/StorageCenter/StorageCenter"
Enclosure.Collect.Source(1).Header=EmbeddedFile(3)
Enclosure.Collect.Source(1).ResultContent="Body"
Enclosure.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
Enclosure.Collect.Source(1).Compute(1).Type="Json2Csv"
Enclosure.Collect.Source(1).Compute(1).EntryKey="/"
Enclosure.Collect.Source(1).Compute(1).Properties="instanceId;status;status"
Enclosure.Collect.Source(1).Compute(1).Separator=";"

Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="3"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

statusTranslationTable("Up")="OK"
statusTranslationTable("Down")="ALARM"
statusTranslationTable("Degraded")="WARN"
statusTranslationTable(Default)="UNKNOWN"


// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)
Enclosure.Collect.Status=ValueTable.Column(3)
Enclosure.Collect.StatusInformation=ValueTable.Column(4)

//
// Blade
//


//Now we have the token let's perform the controller's Discovery
Blade.Discovery.Source(1).Type="HTTP"
Blade.Discovery.Source(1).Method="GET"
Blade.Discovery.Source(1).URL="/api/rest/StorageCenter/ScController"
Blade.Discovery.Source(1).Header=EmbeddedFile(3)
Blade.Discovery.Source(1).ResultContent="Body"
Blade.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;serialNumber;model;enclosureID;serviceTag
Blade.Discovery.Source(1).Compute(1).Type="Json2Csv"
Blade.Discovery.Source(1).Compute(1).EntryKey="/"
Blade.Discovery.Source(1).Compute(1).Properties="instanceId;name;hardwareSerialNumber;model;scSerialNumber;serviceTag"
Blade.Discovery.Source(1).Compute(1).Separator=";"

//add additionnal information type
//tableID;ID;DisplayName;serialNumber;model;enclosureID;serviceTag
Blade.Discovery.Source(1).Compute(2).Type="LeftConcat"
Blade.Discovery.Source(1).Compute(2).Column=7
Blade.Discovery.Source(1).Compute(2).String="Alternative Serial Number: "

//remove empty output
//tableID;ID;DisplayName;serialNumber;model;enclosureID;serviceTag
Blade.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Blade.Discovery.Source(1).Compute(3).Column=1
Blade.Discovery.Source(1).Compute(3).ValueList="/"

//tableID;ID;DisplayName;serialNumber;model;enclosureID;serviceTag
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Blade.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(5)
Blade.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Blade.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)
Blade.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)

// Collect

// Collect type = multi-instance
Blade.Collect.Type="MultiInstance"

//
Blade.Collect.Source(1).Type="HTTP"
Blade.Collect.Source(1).Method="GET"
Blade.Collect.Source(1).URL="/api/rest/StorageCenter/ScController"
Blade.Collect.Source(1).Header=EmbeddedFile(3)
Blade.Collect.Source(1).ResultContent="Body"
Blade.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
Blade.Collect.Source(1).Compute(1).Type="Json2Csv"
Blade.Collect.Source(1).Compute(1).EntryKey="/"
Blade.Collect.Source(1).Compute(1).Properties="instanceId;status;status"
Blade.Collect.Source(1).Compute(1).Separator=";"

// ID;PatrolStatus;Value;
Blade.Collect.Source(1).Compute(2).Type="Translate"
Blade.Collect.Source(1).Compute(2).Column="3"
Blade.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(2)
Blade.Collect.Status=ValueTable.Column(3)
Blade.Collect.StatusInformation=ValueTable.Column(4)

//
// PhysicalDisk
//


//Now we have the token let's perform the PhysicalDisk's Discovery
PhysicalDisk.Discovery.Source(1).Type="HTTP"
PhysicalDisk.Discovery.Source(1).Method="GET"
PhysicalDisk.Discovery.Source(1).URL="/api/rest/StorageCenter/ScDisk"
PhysicalDisk.Discovery.Source(1).Header=EmbeddedFile(3)
PhysicalDisk.Discovery.Source(1).ResultContent="Body"
PhysicalDisk.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;size;enclosureID
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Discovery.Source(1).Compute(1).EntryKey="/"
PhysicalDisk.Discovery.Source(1).Compute(1).Properties="instanceId;instanceName;size;scSerialNumber"
PhysicalDisk.Discovery.Source(1).Compute(1).Separator=";"

//size is returned in format size bytes
//so lets remove " bytes" from the size field
//tableID;ID;DisplayName;size;enclosureID
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=4
PhysicalDisk.Discovery.Source(1).Compute(2).Replace=" Bytes"
PhysicalDisk.Discovery.Source(1).Compute(2).ReplaceBy=""

//let's collect serialnumber vendor
PhysicalDisk.Discovery.Source(2).Type="HTTP"
PhysicalDisk.Discovery.Source(2).Method="GET"
PhysicalDisk.Discovery.Source(2).URL="/api/rest/StorageCenter/ScDiskConfiguration"
PhysicalDisk.Discovery.Source(2).Header=EmbeddedFile(3)
PhysicalDisk.Discovery.Source(2).ResultContent="Body"
PhysicalDisk.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;serialNumber;vendor;product
PhysicalDisk.Discovery.Source(2).Compute(1).Type="Json2Csv"
PhysicalDisk.Discovery.Source(2).Compute(1).EntryKey="/"
PhysicalDisk.Discovery.Source(2).Compute(1).Properties="instanceId;serialNumber;vendor;product"
PhysicalDisk.Discovery.Source(2).Compute(1).Separator=";"

//now joint both
// Source(3) = TableJoint of Source(1) and Source(2)
//tableID;ID;DisplayName;size;enclosureID;tableID;ID;serialNumber;vendor;product
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=2
PhysicalDisk.Discovery.Source(3).RightKeyColumn=2
PhysicalDisk.Discovery.Source(3).DefaultRightLine=;;;;


//remove empty output
//tableID;ID;DisplayName;size;enclosureID;tableID;ID;serialNumber;vendor;product
PhysicalDisk.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(3).Compute(1).Column=1
PhysicalDisk.Discovery.Source(3).Compute(1).ValueList="/"


// PhysicalDisk
//tableID;ID;DisplayName;size;enclosureID;tableID;ID;serialNumber;vendor;product
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(10)


// Collect

// Collect type = multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

//
PhysicalDisk.Collect.Source(1).Type="HTTP"
PhysicalDisk.Collect.Source(1).Method="GET"
PhysicalDisk.Collect.Source(1).URL="/api/rest/StorageCenter/ScDisk"
PhysicalDisk.Collect.Source(1).Header=EmbeddedFile(3)
PhysicalDisk.Collect.Source(1).ResultContent="Body"
PhysicalDisk.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
PhysicalDisk.Collect.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Collect.Source(1).Compute(1).EntryKey="/"
PhysicalDisk.Collect.Source(1).Compute(1).Properties="instanceId;status;status"
PhysicalDisk.Collect.Source(1).Compute(1).Separator=";"

// tableid;ID;PatrolStatus;Value;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="3"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(3)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(4)

//
// PowerSupply
//


//Now we have the token let's perform the PowerSupplies' Discovery
//source 1 is the enclosure power supplies
PowerSupply.Discovery.Source(1).Type="HTTP"
PowerSupply.Discovery.Source(1).Method="GET"
PowerSupply.Discovery.Source(1).URL="/api/rest/StorageCenter/ScEnclosurePowerSupply"
PowerSupply.Discovery.Source(1).Header=EmbeddedFile(3)
PowerSupply.Discovery.Source(1).ResultContent="Body"
PowerSupply.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
PowerSupply.Discovery.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Discovery.Source(1).Compute(1).EntryKey="/"
PowerSupply.Discovery.Source(1).Compute(1).Properties="instanceId;name;objectType"
PowerSupply.Discovery.Source(1).Compute(1).Separator=";"

//source 2 is the controllers powersupplies.
PowerSupply.Discovery.Source(2).Type="HTTP"
PowerSupply.Discovery.Source(2).Method="GET"
PowerSupply.Discovery.Source(2).URL="/api/rest/StorageCenter/ScControllerPowerSupply"
PowerSupply.Discovery.Source(2).Header=EmbeddedFile(3)
PowerSupply.Discovery.Source(2).ResultContent="Body"
PowerSupply.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
PowerSupply.Discovery.Source(2).Compute(1).Type="Json2Csv"
PowerSupply.Discovery.Source(2).Compute(1).EntryKey="/"
PowerSupply.Discovery.Source(2).Compute(1).Properties="instanceId;name;objectType"
PowerSupply.Discovery.Source(2).Compute(1).Separator=";"

PowerSupply.Discovery.Source(3).Type="HTTP"
PowerSupply.Discovery.Source(3).Method="GET"
PowerSupply.Discovery.Source(3).ExecuteForEachEntryOf=%Enclosure.Discovery.Source(2)%
PowerSupply.Discovery.Source(3).Url="/api/rest/StorageCenter/ScChassis/%Entry.Column(2)%/PowerSupplyList"
PowerSupply.Discovery.Source(3).Header=EmbeddedFile(3)
PowerSupply.Discovery.Source(3).ResultContent="body"
PowerSupply.Discovery.Source(3).EntryConcatMethod="List"
PowerSupply.Discovery.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
PowerSupply.Discovery.Source(3).Compute(1).Type="Json2Csv"
PowerSupply.Discovery.Source(3).Compute(1).EntryKey="/"
PowerSupply.Discovery.Source(3).Compute(1).Properties="instanceId;name;objectType"
PowerSupply.Discovery.Source(3).Compute(1).Separator=";"

//let's merge both sources.

// Source(3) = Union of Source(1) and Source(2) and "3"
//tableID;ID;DisplayName;objectType
PowerSupply.Discovery.Source(4).Type="TableUnion"
PowerSupply.Discovery.Source(4).Table1=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Source(4).Table2=%PowerSupply.Discovery.Source(2)%
PowerSupply.Discovery.Source(4).Table3=%PowerSupply.Discovery.Source(3)%

//remove empty output
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
PowerSupply.Discovery.Source(4).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(4).Compute(1).Column=1
PowerSupply.Discovery.Source(4).Compute(1).ValueList="/"

//Now pass everything through an awk to attach the powersupply to the correct device
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
PowerSupply.Discovery.Source(4).Compute(2).Type="Awk"
PowerSupply.Discovery.Source(4).Compute(2).AwkScript=EmbeddedFile(4)


//remove phantoms
PowerSupply.Discovery.Source(4).Compute(3).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(4).Compute(3).Column=2
PowerSupply.Discovery.Source(4).Compute(3).RegExp="."



// PowerSupply
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(4)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
PowerSupply.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(6)

// Collect

// Collect type = multi-instance
PowerSupply.Collect.Type="MultiInstance"

//collect enclosure's power supplies
PowerSupply.Collect.Source(1).Type="HTTP"
PowerSupply.Collect.Source(1).Method="GET"
PowerSupply.Collect.Source(1).URL="/api/rest/StorageCenter/ScEnclosurePowerSupply"
PowerSupply.Collect.Source(1).Header=EmbeddedFile(3)
PowerSupply.Collect.Source(1).ResultContent="Body"
PowerSupply.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
PowerSupply.Collect.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Collect.Source(1).Compute(1).EntryKey="/"
PowerSupply.Collect.Source(1).Compute(1).Properties="instanceId;status;status"
PowerSupply.Collect.Source(1).Compute(1).Separator=";"


//collect controllers' power supplies
PowerSupply.Collect.Source(2).Type="HTTP"
PowerSupply.Collect.Source(2).Method="GET"
PowerSupply.Collect.Source(2).URL="/api/rest/StorageCenter/ScControllerPowerSupply"
PowerSupply.Collect.Source(2).Header=EmbeddedFile(3)
PowerSupply.Collect.Source(2).ResultContent="Body"
PowerSupply.Collect.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
PowerSupply.Collect.Source(2).Compute(1).Type="Json2Csv"
PowerSupply.Collect.Source(2).Compute(1).EntryKey="/"
PowerSupply.Collect.Source(2).Compute(1).Properties="instanceId;status;status"
PowerSupply.Collect.Source(2).Compute(1).Separator=";"


PowerSupply.Collect.Source(3).Type="HTTP"
PowerSupply.Collect.Source(3).Method="GET"
PowerSupply.Collect.Source(3).ExecuteForEachEntryOf=%Enclosure.Discovery.Source(2)%
PowerSupply.Collect.Source(3).Url="/api/rest/StorageCenter/ScChassis/%Entry.Column(2)%/PowerSupplyList"
PowerSupply.Collect.Source(3).Header=EmbeddedFile(3)
PowerSupply.Collect.Source(3).ResultContent="body"
PowerSupply.Collect.Source(3).EntryConcatMethod="List"
PowerSupply.Collect.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
PowerSupply.Collect.Source(3).Compute(1).Type="Json2Csv"
PowerSupply.Collect.Source(3).Compute(1).EntryKey="/"
PowerSupply.Collect.Source(3).Compute(1).Properties="instanceId;status;status"
PowerSupply.Collect.Source(3).Compute(1).Separator=";"

//now union all

PowerSupply.Collect.Source(4).Type="TableUnion"
PowerSupply.Collect.Source(4).Table1=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Source(4).Table2=%PowerSupply.Collect.Source(2)%
PowerSupply.Collect.Source(4).Table3=%PowerSupply.Collect.Source(3)%

// tableid;ID;PatrolStatus;Value;
PowerSupply.Collect.Source(4).Compute(1).Type="Translate"
PowerSupply.Collect.Source(4).Compute(1).Column="3"
PowerSupply.Collect.Source(4).Compute(1).TranslationTable="statusTranslationTable"

// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(4)%
PowerSupply.Collect.DeviceID=ValueTable.Column(2)
PowerSupply.Collect.Status=ValueTable.Column(3)
PowerSupply.Collect.StatusInformation=ValueTable.Column(4)

//
// Fan
//


//Now we have the token let's perform the PowerSupplies' Discovery
//source 1 is the enclosure fans
Fan.Discovery.Source(1).Type="HTTP"
Fan.Discovery.Source(1).Method="GET"
Fan.Discovery.Source(1).URL="/api/rest/StorageCenter/ScEnclosureCoolingFanSensor"
Fan.Discovery.Source(1).Header=EmbeddedFile(3)
Fan.Discovery.Source(1).ResultContent="Body"
Fan.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold
Fan.Discovery.Source(1).Compute(1).Type="Json2Csv"
Fan.Discovery.Source(1).Compute(1).EntryKey="/"
Fan.Discovery.Source(1).Compute(1).Properties="instanceId;name;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold"
Fan.Discovery.Source(1).Compute(1).Separator=";"

//source 2 is the controllers fans
Fan.Discovery.Source(2).Type="HTTP"
Fan.Discovery.Source(2).Method="GET"
Fan.Discovery.Source(2).URL="/api/rest/StorageCenter/ScControllerFanSensor"
Fan.Discovery.Source(2).Header=EmbeddedFile(3)
Fan.Discovery.Source(2).ResultContent="Body"
Fan.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold
Fan.Discovery.Source(2).Compute(1).Type="Json2Csv"
Fan.Discovery.Source(2).Compute(1).EntryKey="/"
Fan.Discovery.Source(2).Compute(1).Properties="instanceId;name;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold"
Fan.Discovery.Source(2).Compute(1).Separator=";"

//now collect from new source
Fan.Discovery.Source(3).Type="HTTP"
Fan.Discovery.Source(3).Method="GET"
Fan.Discovery.Source(3).ExecuteForEachEntryOf=%Enclosure.Discovery.Source(2)%
Fan.Discovery.Source(3).Url="/api/rest/StorageCenter/ScChassis/%Entry.Column(2)%/FanSensorList"
Fan.Discovery.Source(3).Header=EmbeddedFile(3)
Fan.Discovery.Source(3).ResultContent="body"
Fan.Discovery.Source(3).EntryConcatMethod="List"
Fan.Discovery.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold
Fan.Discovery.Source(3).Compute(1).Type="Json2Csv"
Fan.Discovery.Source(3).Compute(1).EntryKey="/"
Fan.Discovery.Source(3).Compute(1).Properties="instanceId;name;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold"
Fan.Discovery.Source(3).Compute(1).Separator=";"

// Source(4) = Union of Source(1) and Source(2) and source 3
//tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold
Fan.Discovery.Source(4).Type="TableUnion"
Fan.Discovery.Source(4).Table1=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(4).Table2=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(4).Table3=%Fan.Discovery.Source(3)%


//remove empty output
//tableID;ID;DisplayName;objectType;enclosure/controllerID;devicetype
Fan.Discovery.Source(4).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(4).Compute(1).Column=1
Fan.Discovery.Source(4).Compute(1).ValueList="/"

//Now pass everything through an awk to attach the Fan to the correct device
// and activate status or fan speed parameter
//tableID;ID;DisplayName;objectType;enclosure/controllerID;devicetype
Fan.Discovery.Source(4).Compute(2).Type="Awk"
Fan.Discovery.Source(4).Compute(2).AwkScript=EmbeddedFile(8)

//remove phantoms
Fan.Discovery.Source(4).Compute(3).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(4).Compute(3).Column=2
Fan.Discovery.Source(4).Compute(3).RegExp="."

// Fan
//tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold;statusactivation;controllerID;devicetype
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(4)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(6)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(7)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(8)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)
Fan.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(10)


// Collect

// Collect type = multi-instance
Fan.Collect.Type="MultiInstance"

//collect enclosure's fans
Fan.Collect.Source(1).Type="HTTP"
Fan.Collect.Source(1).Method="GET"
Fan.Collect.Source(1).URL="/api/rest/StorageCenter/ScEnclosureCoolingFanSensor"
Fan.Collect.Source(1).Header=EmbeddedFile(3)
Fan.Collect.Source(1).ResultContent="Body"
Fan.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status;speed
Fan.Collect.Source(1).Compute(1).Type="Json2Csv"
Fan.Collect.Source(1).Compute(1).EntryKey="/"
Fan.Collect.Source(1).Compute(1).Properties="instanceId;status;status;currentRpm"
Fan.Collect.Source(1).Compute(1).Separator=";"


//collect controllers' fans
Fan.Collect.Source(2).Type="HTTP"
Fan.Collect.Source(2).Method="GET"
Fan.Collect.Source(2).URL="/api/rest/StorageCenter/ScControllerFanSensor"
Fan.Collect.Source(2).Header=EmbeddedFile(3)
Fan.Collect.Source(2).ResultContent="Body"
Fan.Collect.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status;speed
Fan.Collect.Source(2).Compute(1).Type="Json2Csv"
Fan.Collect.Source(2).Compute(1).EntryKey="/"
Fan.Collect.Source(2).Compute(1).Properties="instanceId;status;status;currentRpm"
Fan.Collect.Source(2).Compute(1).Separator=";"

// now collect from new source
Fan.Collect.Source(3).Type="HTTP"
Fan.Collect.Source(3).Method="GET"
Fan.Collect.Source(3).ExecuteForEachEntryOf=%Enclosure.Discovery.Source(2)%
Fan.Collect.Source(3).Url="/api/rest/StorageCenter/ScChassis/%Entry.Column(2)%/FanSensorList"
Fan.Collect.Source(3).Header=EmbeddedFile(3)
Fan.Collect.Source(3).ResultContent="body"
Fan.Collect.Source(3).EntryConcatMethod="List"
Fan.Collect.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status;speed
Fan.Collect.Source(3).Compute(1).Type="Json2Csv"
Fan.Collect.Source(3).Compute(1).EntryKey="/"
Fan.Collect.Source(3).Compute(1).Properties="instanceId;status;status;currentRpm"
Fan.Collect.Source(3).Compute(1).Separator=";"

//now join all

Fan.Collect.Source(4).Type="TableUnion"
Fan.Collect.Source(4).Table1=%Fan.Collect.Source(1)%
Fan.Collect.Source(4).Table2=%Fan.Collect.Source(2)%
Fan.Collect.Source(4).Table3=%Fan.Collect.Source(3)%

// tableid;ID;PatrolStatus;Value;speed
Fan.Collect.Source(4).Compute(1).Type="Translate"
Fan.Collect.Source(4).Compute(1).Column="3"
Fan.Collect.Source(4).Compute(1).TranslationTable="statusTranslationTable"

// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;Speed
Fan.Collect.ValueTable=%Fan.Collect.Source(4)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)
Fan.Collect.Speed=ValueTable.Column(5)

//
// Temperature
//


//Now we have the token let's perform the PowerSupplies' Discovery
//source 1 is the enclosure temperatures
Temperature.Discovery.Source(1).Type="HTTP"
Temperature.Discovery.Source(1).Method="GET"
Temperature.Discovery.Source(1).URL="/api/rest/StorageCenter/ScEnclosureTemperatureSensor"
Temperature.Discovery.Source(1).Header=EmbeddedFile(3)
Temperature.Discovery.Source(1).ResultContent="Body"
Temperature.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//we use upperCriticalThreshold and upper warning for enclosure as we don't have upperNormalThreshold as for controllers.
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warn;alarm
Temperature.Discovery.Source(1).Compute(1).Type="Json2Csv"
Temperature.Discovery.Source(1).Compute(1).EntryKey="/"
Temperature.Discovery.Source(1).Compute(1).Properties="instanceId;name;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperWarningThreshold;upperCriticalThreshold"
Temperature.Discovery.Source(1).Compute(1).Separator=";"

//source 2 is the controllers temperature sensors.
Temperature.Discovery.Source(2).Type="HTTP"
Temperature.Discovery.Source(2).Method="GET"
Temperature.Discovery.Source(2).URL="/api/rest/StorageCenter/ScControllerTemperatureSensor"
Temperature.Discovery.Source(2).Header=EmbeddedFile(3)
Temperature.Discovery.Source(2).ResultContent="Body"
Temperature.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warn;alarm
Temperature.Discovery.Source(2).Compute(1).Type="Json2Csv"
Temperature.Discovery.Source(2).Compute(1).EntryKey="/"
Temperature.Discovery.Source(2).Compute(1).Properties="instanceId;name;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThreshold"
Temperature.Discovery.Source(2).Compute(1).Separator=";"

//let's merge both sources.
// Source(3) = Union of Source(1) and Source(2)
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThreshold
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%

//Now pass everything through an awk to attach the Temperature to the correct device
//and extract the correct temperature
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warning;alarm;enclosure/controllerID;devicetype
Temperature.Discovery.Source(3).Compute(1).Type="Awk"
Temperature.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(5)

//remove empty output
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warning;alarm;enclosure/controllerID;devicetype
Temperature.Discovery.Source(3).Compute(2).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(3).Compute(2).Column=1
Temperature.Discovery.Source(3).Compute(2).ValueList="/"

// Temperature
//
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warning;alarm;deviceType
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(6)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(11)
Temperature.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(12)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(10)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(9)


// Collect

// Collect type = multi-instance
Temperature.Collect.Type="MultiInstance"

//collect enclosure's temperature
Temperature.Collect.Source(1).Type="HTTP"
Temperature.Collect.Source(1).Method="GET"
Temperature.Collect.Source(1).URL="/api/rest/StorageCenter/ScEnclosureTemperatureSensor"
Temperature.Collect.Source(1).Header=EmbeddedFile(3)
Temperature.Collect.Source(1).ResultContent="Body"
Temperature.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD
Temperature.Collect.Source(1).Compute(1).Type="Json2Csv"
Temperature.Collect.Source(1).Compute(1).EntryKey="/"
Temperature.Collect.Source(1).Compute(1).Properties="instanceId;name;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThreshold"
Temperature.Collect.Source(1).Compute(1).Separator=";"


//collect controllers' temperature sensors
Temperature.Collect.Source(2).Type="HTTP"
Temperature.Collect.Source(2).Method="GET"
Temperature.Collect.Source(2).URL="/api/rest/StorageCenter/ScControllerTemperatureSensor"
Temperature.Collect.Source(2).Header=EmbeddedFile(3)
Temperature.Collect.Source(2).ResultContent="Body"
Temperature.Collect.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD
Temperature.Collect.Source(2).Compute(1).Type="Json2Csv"
Temperature.Collect.Source(2).Compute(1).EntryKey="/"
Temperature.Collect.Source(2).Compute(1).Properties="instanceId;name;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThreshold"
Temperature.Collect.Source(2).Compute(1).Separator=";"

//now join both
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%

//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD
Temperature.Collect.Source(3).Compute(1).Type="Awk"
Temperature.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(5)

// ValueTable = Source(1)
//tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(5)

//
// Voltage
//


//Now we have the token let's perform the Volage sensors' Discovery
//source 1 is the controllers voltage sensors
Voltage.Discovery.Source(1).Type="HTTP"
Voltage.Discovery.Source(1).Method="GET"
Voltage.Discovery.Source(1).URL="/api/rest/StorageCenter/ScControllerVoltageSensor"
Voltage.Discovery.Source(1).Header=EmbeddedFile(3)
Voltage.Discovery.Source(1).ResultContent="Body"
Voltage.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerNormalThreshold
Voltage.Discovery.Source(1).Compute(1).Type="Json2Csv"
Voltage.Discovery.Source(1).Compute(1).EntryKey="/"
Voltage.Discovery.Source(1).Compute(1).Properties="instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerNormalThreshold"
Voltage.Discovery.Source(1).Compute(1).Separator=";"

//awk everything to have status activated if sensors!=null and deduct controller id
//tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerCriticalThreshold;controllerID;devicetype
Voltage.Discovery.Source(1).Compute(2).Type="Awk"
Voltage.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(6)

//remove empty output
//tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerCriticalThreshold;controllerID;devicetype
Voltage.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(1).Compute(3).Column=1
Voltage.Discovery.Source(1).Compute(3).ValueList="/"

//tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerNormalThreshold;controllerID;devicetype
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(8)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(5)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)
Voltage.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(10)

// Collect

// Collect type = multi-instance
Voltage.Collect.Type="MultiInstance"

//source 1 is controller voltage sensors
Voltage.Collect.Source(1).Type="HTTP"
Voltage.Collect.Source(1).Method="GET"
Voltage.Collect.Source(1).URL="/api/rest/StorageCenter/ScControllerVoltageSensor"
Voltage.Collect.Source(1).Header=EmbeddedFile(3)
Voltage.Collect.Source(1).ResultContent="Body"
Voltage.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;instanceId;status;status;currentVoltage
Voltage.Collect.Source(1).Compute(1).Type="Json2Csv"
Voltage.Collect.Source(1).Compute(1).EntryKey="/"
Voltage.Collect.Source(1).Compute(1).Properties="instanceId;status;status;currentVoltage"
Voltage.Collect.Source(1).Compute(1).Separator=";"

// tableid;ID;PatrolStatus;Value;currentVoltage
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="3"
Voltage.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

//pass the value from volt to mv
// tableid;ID;PatrolStatus;Value;currentVoltage
Voltage.Collect.Source(1).Compute(3).Type="Multiply"
Voltage.Collect.Source(1).Compute(3).Column="5"
Voltage.Collect.Source(1).Compute(3).MultiplyBy="1000"

// ValueTable = Source(1)
// tableid;ID;PatrolStatus;Value;currentVoltage
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Status=ValueTable.Column(3)
Voltage.Collect.StatusInformation=ValueTable.Column(4)
Voltage.Collect.Voltage=ValueTable.Column(5)

//
//OtherDevice
//


//Now we have the token let's perform the Cache cards and IoModules Discovery
//source 1 is the enclosure IO Modules
OtherDevice.Discovery.Source(1).Type="HTTP"
OtherDevice.Discovery.Source(1).Method="GET"
OtherDevice.Discovery.Source(1).URL="/api/rest/StorageCenter/ScEnclosureIoModule"
OtherDevice.Discovery.Source(1).Header=EmbeddedFile(3)
OtherDevice.Discovery.Source(1).ResultContent="Body"
OtherDevice.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
OtherDevice.Discovery.Source(1).Compute(1).Type="Json2Csv"
OtherDevice.Discovery.Source(1).Compute(1).EntryKey="/"
OtherDevice.Discovery.Source(1).Compute(1).Properties="instanceId;name;objectType"
OtherDevice.Discovery.Source(1).Compute(1).Separator=";"

//source 2 is the controllers cache cards
OtherDevice.Discovery.Source(2).Type="HTTP"
OtherDevice.Discovery.Source(2).Method="GET"
OtherDevice.Discovery.Source(2).URL="/api/rest/StorageCenter/ScControllerCacheCard"
OtherDevice.Discovery.Source(2).Header=EmbeddedFile(3)
OtherDevice.Discovery.Source(2).ResultContent="Body"
OtherDevice.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
OtherDevice.Discovery.Source(2).Compute(1).Type="Json2Csv"
OtherDevice.Discovery.Source(2).Compute(1).EntryKey="/"
OtherDevice.Discovery.Source(2).Compute(1).Properties="instanceId;name;objectType"
OtherDevice.Discovery.Source(2).Compute(1).Separator=";"


//source 2 is the enclosure audible alarms
OtherDevice.Discovery.Source(3).Type="HTTP"
OtherDevice.Discovery.Source(3).Method="GET"
OtherDevice.Discovery.Source(3).URL="/api/rest/StorageCenter/ScEnclosureAudibleAlarm"
OtherDevice.Discovery.Source(3).Header=EmbeddedFile(3)
OtherDevice.Discovery.Source(3).ResultContent="Body"
OtherDevice.Discovery.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType
OtherDevice.Discovery.Source(3).Compute(1).Type="Json2Csv"
OtherDevice.Discovery.Source(3).Compute(1).EntryKey="/"
OtherDevice.Discovery.Source(3).Compute(1).Properties="instanceId;name;objectType"
OtherDevice.Discovery.Source(3).Compute(1).Separator=";"

//let's merge both sources.

// Source(3) = Union of Source(1) and Source(2)
//tableID;ID;DisplayName;objectType
OtherDevice.Discovery.Source(4).Type="TableUnion"
OtherDevice.Discovery.Source(4).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(4).Table2=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(4).Table3=%OtherDevice.Discovery.Source(3)%

//Now pass everything through an awk to attach theOtherDevice to the correct device
//tableID;ID;DisplayName;objectType;enclosure/controllerID;devicetype
OtherDevice.Discovery.Source(4).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(4).Compute(1).AwkScript=EmbeddedFile(4)

//remove empty output
//tableID;ID;DisplayName;objectType;enclosure/controllerID;devicetype
OtherDevice.Discovery.Source(4).Compute(2).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(4).Compute(2).Column=1
OtherDevice.Discovery.Source(4).Compute(2).ValueList="/"


//OtherDevice
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(4)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.instance.DeviceType=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(6)

// Collect

// Collect type = multi-instance
OtherDevice.Collect.Type="MultiInstance"

//collect enclosure's IoModules
OtherDevice.Collect.Source(1).Type="HTTP"
OtherDevice.Collect.Source(1).Method="GET"
OtherDevice.Collect.Source(1).URL="/api/rest/StorageCenter/ScEnclosureIoModule"
OtherDevice.Collect.Source(1).Header=EmbeddedFile(3)
OtherDevice.Collect.Source(1).ResultContent="Body"
OtherDevice.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
OtherDevice.Collect.Source(1).Compute(1).Type="Json2Csv"
OtherDevice.Collect.Source(1).Compute(1).EntryKey="/"
OtherDevice.Collect.Source(1).Compute(1).Properties="instanceId;status;status"
OtherDevice.Collect.Source(1).Compute(1).Separator=";"

//collect controllers' Cache cards
OtherDevice.Collect.Source(2).Type="HTTP"
OtherDevice.Collect.Source(2).Method="GET"
OtherDevice.Collect.Source(2).URL="/api/rest/StorageCenter/ScControllerCacheCard"
OtherDevice.Collect.Source(2).Header=EmbeddedFile(3)
OtherDevice.Collect.Source(2).ResultContent="Body"
OtherDevice.Collect.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status
OtherDevice.Collect.Source(2).Compute(1).Type="Json2Csv"
OtherDevice.Collect.Source(2).Compute(1).EntryKey="/"
OtherDevice.Collect.Source(2).Compute(1).Properties="instanceId;status;status"
OtherDevice.Collect.Source(2).Compute(1).Separator=";"

//collect audible alarms
OtherDevice.Collect.Source(3).Type="HTTP"
OtherDevice.Collect.Source(3).Method="GET"
OtherDevice.Collect.Source(3).URL="/api/rest/StorageCenter/ScEnclosureAudibleAlarm"
OtherDevice.Collect.Source(3).Header=EmbeddedFile(3)
OtherDevice.Collect.Source(3).ResultContent="Body"
OtherDevice.Collect.Source(3).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status;mutedvalue
OtherDevice.Collect.Source(3).Compute(1).Type="Json2Csv"
OtherDevice.Collect.Source(3).Compute(1).EntryKey="/"
OtherDevice.Collect.Source(3).Compute(1).Properties="instanceId;status;status;muted"
OtherDevice.Collect.Source(3).Compute(1).Separator=";"

//add the device type to make sure we have a unique ID
//tableID;ID;status;status;mutedvalue
OtherDevice.Collect.Source(3).Compute(2).Type="LeftConcat"
OtherDevice.Collect.Source(3).Compute(2).Column=2
OtherDevice.Collect.Source(3).Compute(2).String="ScEnclosureAudibleAlarm"

//add the muted state to the status information
//tableID;ID;status;status;mutedvalue
OtherDevice.Collect.Source(3).Compute(3).Type="RightConcat"
OtherDevice.Collect.Source(3).Compute(3).Column=4
OtherDevice.Collect.Source(3).Compute(3).String="-"

//tableID;ID;status;status;mutedvalue
OtherDevice.Collect.Source(3).Compute(4).Type="RightConcat"
OtherDevice.Collect.Source(3).Compute(4).Column=4
OtherDevice.Collect.Source(3).Compute(4).String=Column(5)


//now join 3 sources
OtherDevice.Collect.Source(4).Type="TableUnion"
OtherDevice.Collect.Source(4).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(4).Table2=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(4).Table3=%OtherDevice.Collect.Source(3)%

// tableid;ID;PatrolStatus;Value;
OtherDevice.Collect.Source(4).Compute(1).Type="Translate"
OtherDevice.Collect.Source(4).Compute(1).Column="3"
OtherDevice.Collect.Source(4).Compute(1).TranslationTable="statusTranslationTable"

// ValueTable = Source(4)
// tableID;ID;PatrolStatus;Value;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(4)%
OtherDevice.Collect.DeviceID=ValueTable.Column(2)
OtherDevice.Collect.Status=ValueTable.Column(3)
OtherDevice.Collect.StatusInformation=ValueTable.Column(4)


//
// NetworkCards
//

//Now we have the token let's perform the Networkcards' Discovery
//source 1 is the controllers ports
NetworkCard.Discovery.Source(1).Type="HTTP"
NetworkCard.Discovery.Source(1).Method="GET"
NetworkCard.Discovery.Source(1).URL="/api/rest/StorageCenter/ScControllerPort"
NetworkCard.Discovery.Source(1).Header=EmbeddedFile(3)
NetworkCard.Discovery.Source(1).ResultContent="Body"
NetworkCard.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId;
NetworkCard.Discovery.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Discovery.Source(1).Compute(1).EntryKey="/"
NetworkCard.Discovery.Source(1).Compute(1).Properties="instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId"
NetworkCard.Discovery.Source(1).Compute(1).Separator=";"

//source 2 for port speed

//Now we have the token let's perform the Networkcards' Discovery
//source 1 is the controllers ports
NetworkCard.Discovery.Source(2).Type="HTTP"
NetworkCard.Discovery.Source(2).Method="GET"
NetworkCard.Discovery.Source(2).URL="/api/rest/StorageCenter/ScControllerPortConfiguration"
NetworkCard.Discovery.Source(2).Header=EmbeddedFile(3)
NetworkCard.Discovery.Source(2).ResultContent="Body"
NetworkCard.Discovery.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;instanceId;speed;description;objectType
NetworkCard.Discovery.Source(2).Compute(1).Type="Json2Csv"
NetworkCard.Discovery.Source(2).Compute(1).EntryKey="/"
NetworkCard.Discovery.Source(2).Compute(1).Properties="instanceId;speed;description;objectType"
NetworkCard.Discovery.Source(2).Compute(1).Separator=";"


//Now pass everything through an awk to determine the port speed.
//tableID;instanceId;speed;description;
NetworkCard.Discovery.Source(2).Compute(2).Type="Awk"
NetworkCard.Discovery.Source(2).Compute(2).AwkScript=EmbeddedFile(7)

// Source(3) = TableJoint of Source(1) and Source(2)
///tableID;instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId;tableID;instanceId;speed
NetworkCard.Discovery.Source(3).Type="TableJoint"
NetworkCard.Discovery.Source(3).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(3).RightTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(3).LeftKeyColumn=2
NetworkCard.Discovery.Source(3).RightKeyColumn=2
NetworkCard.Discovery.Source(3).DefaultRightLine=;;;;

//Exclude virtual cards
 ///tableID;instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId;tableID;instanceId;speed
NetworkCard.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(3).Compute(1).Column=5
NetworkCard.Discovery.Source(3).Compute(1).ValueList="TRUE"

//Exclude empty outputs
 ///tableID;instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId;tableID;instanceId;speed
NetworkCard.Discovery.Source(3).Compute(2).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(3).Compute(2).Column=1
NetworkCard.Discovery.Source(3).Compute(2).ValueList="/"

//tableID;instanceId;name;transportType;virtual;wwn;cabled;controller/instanceId;tableID;instanceId;speed;description
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.Model=InstanceTable.Column(12)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)
NetworkCard.Discovery.Instance.AttachedToDeviceType="Blade"


//
// Collect
//

NetworkCard.Collect.Type="MultiInstance"

NetworkCard.Collect.Source(1).Type="HTTP"
NetworkCard.Collect.Source(1).Method="GET"
NetworkCard.Collect.Source(1).URL="/api/rest/StorageCenter/ScControllerPort"
NetworkCard.Collect.Source(1).Header=EmbeddedFile(3)
NetworkCard.Collect.Source(1).ResultContent="Body"
NetworkCard.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;instanceId;cabled;status;statusMessage;
NetworkCard.Collect.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Collect.Source(1).Compute(1).EntryKey="/"
NetworkCard.Collect.Source(1).Compute(1).Properties="instanceId;cabled;status;statusMessage"
NetworkCard.Collect.Source(1).Compute(1).Separator=";"

//source 2 for port speed

//Now we have the token let's perform the Networkcards' Collect
//source 1 is the controllers ports
NetworkCard.Collect.Source(2).Type="HTTP"
NetworkCard.Collect.Source(2).Method="GET"
NetworkCard.Collect.Source(2).URL="/api/rest/StorageCenter/ScControllerPortConfiguration"
NetworkCard.Collect.Source(2).Header=EmbeddedFile(3)
NetworkCard.Collect.Source(2).ResultContent="Body"
NetworkCard.Collect.Source(2).AuthenticationToken=%Enclosure.Discovery.Source(1)%


//convert from json to Json2Csv
//tableID;instanceId;speed;description;objectType
NetworkCard.Collect.Source(2).Compute(1).Type="Json2Csv"
NetworkCard.Collect.Source(2).Compute(1).EntryKey="/"
NetworkCard.Collect.Source(2).Compute(1).Properties="instanceId;speed;description;objectType"
NetworkCard.Collect.Source(2).Compute(1).Separator=";"


//Now pass everything through an awk to determine the port speed.
//tableID;instanceId;speed;description;
NetworkCard.Collect.Source(2).Compute(2).Type="Awk"
NetworkCard.Collect.Source(2).Compute(2).AwkScript=EmbeddedFile(7)

// Source(3) = Union of Source(1) and Source(2)
//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.Source(3).Type="TableJoint"
NetworkCard.Collect.Source(3).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(3).LeftKeyColumn=2
NetworkCard.Collect.Source(3).RightKeyColumn=2
NetworkCard.Collect.Source(3).DefaultRightLine=;;;;

//now translate cabled from a boolean to a readable linkstatus
//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.Source(3).Compute(1).Type="Replace"
NetworkCard.Collect.Source(3).Compute(1).Column=3
NetworkCard.Collect.Source(3).Compute(1).Replace="TRUE"
NetworkCard.Collect.Source(3).Compute(1).ReplaceBy="OK"
NetworkCard.Collect.Source(3).Compute(2).Type="Replace"
NetworkCard.Collect.Source(3).Compute(2).Column=3
NetworkCard.Collect.Source(3).Compute(2).Replace="FALSE"
NetworkCard.Collect.Source(3).Compute(2).ReplaceBy="WARN"

//translate the status
//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.Source(3).Compute(3).Type="Translate"
NetworkCard.Collect.Source(3).Compute(3).Column="4"
NetworkCard.Collect.Source(3).Compute(3).TranslationTable="statusTranslationTable"

//Now take source 3 keep unplugged,  and if status is down and cabled is unplugged then replace status down to OK as we don't want to generate alarm

NetworkCard.Collect.Source(4)=%NetworkCard.Collect.Source(3)%

//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(4).Compute(1).Column=3
NetworkCard.Collect.Source(4).Compute(1).ValueList="WARN"

NetworkCard.Collect.Source(4).Compute(2).Type="Replace"
NetworkCard.Collect.Source(4).Compute(2).Column=4
NetworkCard.Collect.Source(4).Compute(2).Replace=Column(4)
NetworkCard.Collect.Source(4).Compute(2).ReplaceBy="OK"


//now we take the status and we keep plugged, and let it as it is

NetworkCard.Collect.Source(5)=%NetworkCard.Collect.Source(3)%

//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(5).Compute(1).Column=3
NetworkCard.Collect.Source(5).Compute(1).ValueList="OK"

//and finaly we merge both sources

NetworkCard.Collect.Source(6).Type="TableUnion"
NetworkCard.Collect.Source(6).Table1 = %NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(6).Table2 = %NetworkCard.Collect.Source(5)%




// ValueTable = Source(1)
//tableID;instanceId;cabled;status;statusMessage;tableID;instanceId;speed;description;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(6)%
NetworkCard.Collect.DeviceID=ValueTable.Column(2)
NetworkCard.Collect.Status=ValueTable.Column(4)
NetworkCard.Collect.StatusInformation=ValueTable.Column(5)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(8)
NetworkCard.Collect.LinkStatus=ValueTable.Column(3)

////////////
// UPS
///////////

//Now we have the token let's perform the UPS' Discovery
Battery.Discovery.Source(1).Type="HTTP"
Battery.Discovery.Source(1).Method="GET"
Battery.Discovery.Source(1).URL="/api/rest/StorageCenter/ScUps"
Battery.Discovery.Source(1).Header=EmbeddedFile(3)
Battery.Discovery.Source(1).ResultContent="Body"
Battery.Discovery.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

//convert from json to Json2Csv
//tableID;ID;DisplayName;objectType;enclosure/controllerID;
Battery.Discovery.Source(1).Compute(1).Type="Json2Csv"
Battery.Discovery.Source(1).Compute(1).EntryKey="/"
Battery.Discovery.Source(1).Compute(1).Properties="instanceId;name;Type;scSerialNumber"
Battery.Discovery.Source(1).Compute(1).Separator=";"

//add device type
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
Battery.Discovery.Source(1).Compute(2).Type="RightConcat"
Battery.Discovery.Source(1).Compute(2).Column=5
Battery.Discovery.Source(1).Compute(2).String="Enclosure"

//Exclude Empty IDs
Battery.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(3).Column=1
Battery.Discovery.Source(1).Compute(3).ValueList="/"

// PowerSupply
//tableID;ID;DisplayName;objectType;enclosure/controllerID;deviceType
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
Battery.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(6)

//Collect UPS

Battery.Collect.Type="MultiInstance"

//collect UPS
Battery.Collect.Source(1).Type="HTTP"
Battery.Collect.Source(1).Method="GET"
Battery.Collect.Source(1).URL="/api/rest/StorageCenter/ScUps"
Battery.Collect.Source(1).Header=EmbeddedFile(1)
Battery.Collect.Source(1).ResultContent="Body"
Battery.Collect.Source(1).AuthenticationToken=%Enclosure.Discovery.Source(1)%

// JSON Status
//tableID;ID;status;status;BatteryLife
Battery.Collect.Source(1).Compute(1).Type="Json2Csv"
Battery.Collect.Source(1).Compute(1).EntryKey="/"
Battery.Collect.Source(1).Compute(1).Properties="instanceId;status;status;BatteryLife"
Battery.Collect.Source(1).Compute(1).Separator=";"

// ValueTable = Source(1)
// tableID;ID;PatrolStatus;Value;BatteryLife
Battery.Collect.ValueTable=%Battery.Collect.Source(3)%
Battery.Collect.DeviceID=ValueTable.Column(2)
Battery.Collect.Status=ValueTable.Column(3)
Battery.Collect.StatusInformation=ValueTable.Column(4)
Battery.Collect.TimeLeft=ValueTable.Column(5)


////////////////////////////////////
////  AWK Scripts
///////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = AuthenticationToken parsing
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS=":";}
{
if ($1 == "Set-Cookie")
    {
	     split($2,outputarray,";")
	     AuthenticationToken=outputarray[1]
	     print AuthenticationToken
    }
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = check the data source to deduct enclosure ID
///   Input tableID;ID;DisplayName;objectType
///   output //tableID;ID;DisplayName;objectType;enclosure/controllerID;devicetype
// if it's a fan attached to a controller let's check if we have a valid rp
/////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN {FS=";";}
{
if ($4 ~ /^ScEnclosure/)
    {
	     split($2,outputarray,".")
	     enclosureID=outputarray[1]
         if ($4  ~ /^ScEnclosureAudibleAlarm/)
         {
           print $1";ScEnclosureAudibleAlarm"$2";"$3";"$4";"enclosureID ";Enclosure"
         }
         else
         {
           	     print $0 enclosureID ";Enclosure"
         }
    }
else
        {
    	     split($2,outputarray,".")
    	     controllerID=outputarray[1]"."outputarray[2]
           print $0 controllerID";Blade"
         }
}
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = check the data source to deduct enclosure ID and removes  for temp
//    Input tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;warning;alarm
//    OUtput: tableID;ID;DisplayName;objectType;currentTemperature;location;lowerCriticalThreshold;lowerWarningThreshold;upperNormalThreshold;upperWarningThresholdD;enclosureID;deviceType
/////////////////////////////////////////////////////////
EmbeddedFile(5):
BEGIN {FS=";";}
{
if ($4 ~ /^ScEnclosure/)
    {
	     split($2,outputarray,".")
	     enclosureID=outputarray[1]
       currentTemperature=$5*1
       lowerCriticalThreshold=$7*1
       lowerWarningThreshold=$8*1
       warning=$9*1
       alarm=$10*1
	     print $1";"$2";"$3";"$4";"currentTemperature";"$6";"lowerCriticalThreshold";"lowerWarningThreshold";"warning";"alarm";"enclosureID";Enclosure"
    }
else
    {
 	      split($2,outputarray,".")
 	      enclosureID=outputarray[1]"."outputarray[2]
        currentTemperature=$5*1
        lowerCriticalThreshold=$7*1
        lowerWarningThreshold=$8*1
        warning=$9*1
        alarm=$10*1
  	    print $1";"$2";"$3";"$4";"currentTemperature";"$6";"lowerCriticalThreshold";"lowerWarningThreshold";"warning";"alarm";"enclosureID";Blade"
      }
  }
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = activate status if voltage = 0 or use voltage threshold instead and return the controller or enclosure id
//    Input tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerNormalThreshold
//    Output tableID;instanceId;name;objectType;currentVoltage;status;upperNormalThreshold;lowerNormalThreshold;controllerID;devicetype
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN {FS=";";}
{
       gsub("0.0","",$0)
       split($2,outputarray,".")
       controllerID=outputarray[1]"."outputarray[2]
       if ($5 == "")
       {
         print $0 controllerID ";Blade"
       }
       else
       {
         currentVoltage = $5 * 1000
         upperNormalThreshold = $7 * 1000
         lowerCriticalThreshold = $8 * 1000
        print $1";"$2";"$3";"$4";"$5";;"upperNormalThreshold";"lowerCriticalThreshold";"controllerID";Blade"
       }

}
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(7) = awk to convert the speed into a km readable value.
//   SAS port speed is returned like the following 4 x 12 Gbps
//   input:tableID;instanceId;speed;description;objectType
//   input:tableID;instanceId;speed;description;
/////////////////////////////////////////////////////////
EmbeddedFile(7):
BEGIN {FS=";";}
{


    if ($5 ~ /^ScControllerPortSasConfiguration/)
      {
        split($3,outputarray," ")
        if (outputarray[4] == "Gbps")
          {
            speed = outputarray[3] * 1000
          }
        else
          {
            speed = outputarray[3]
          }
        print $1";"$2";"speed";"$4
      }
    else
    {
        split($3,outputarray," ")
        if (outputarray[2] == "Gbps")
          {
            speed = outputarray[1] * 1000
          }
        else
          {
            speed = outputarray[1]
          }
        print $1";"$2";"speed";"$4
    }

}
EmbeddedFile(7).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(8) = activate status if RMP = 0 or use Speed threshold instead and return the controller or enclosure id
//    Input:  tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;upperWarningThreshold
//    Output: tableID;ID;DisplayName;objectType;currentRpm;lowerNormalThreshold;lowerWarningThreshold;statusactivation;controllerID;devicetype
/////////////////////////////////////////////////////////

EmbeddedFile(8):
BEGIN {FS=";";}
{
if ($4 ~ /^ScEnclosure/)
    {
	     split($2,outputarray,".")
	     enclosureID=outputarray[1]
	     print $0 "true;"enclosureID ";Enclosure"
    }
else
        {
    	     split($2,outputarray,".")
    	     controllerID=outputarray[1]"."outputarray[2]
           if ( $5 == 0 || $5 == "")
           {
             gsub("0","",$5)
             print $0 "true;"controllerID";Blade"
           }
           else
           {
             print $0 ";"controllerID";Blade"
           }

         }
}
EmbeddedFile(8).End
