////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: IBM Director Agents version 5.20.x / 6.10.x
//                ServeRAID Manager Agent 9.x
//

//
// Header
//

hdf.DisplayName="SMI-S Compliant RAID Controller - Linux"
hdf.TypicalPlatform="Any system with RAID Controller"
hdf.ReliesOn="SMI-S Compliant WBEM Provider"
hdf.Version="1.2"
hdf.Comments="This connector provides disk controller monitoring through any SMI-S compliant WBEM provider."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux,OOB"
hdf.Supersedes="MS_HW_SMISDiskArray.hdf,MS_HW_VMwareESXiDisksStorage.hdf,MS_HW_VMwareESXiDisksIPMI.hdf,MS_HW_LSIMegaRaidSAS5.hdf,MS_HW_LSIMegaRaidSAS.hdf,MS_HW_LSIUtilUNIX.hdf"

//
// Detection
//

// OS must be Linux
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Linux,OOB"

// Removing this detection criteria as it stops the connector working on ESX with the PM
// The WBEM layer (cimserver) must be running
// Detection.Criteria(2).Type="Process"
// Detection.Criteria(2).ProcessCommandLine="cimserver"

// Verify that there is a WBEM namespace with a CIM_ComputerSystem.Dedicated == 3
Detection.Criteria(2).Type="Wbem"
Detection.Criteria(2).WbemNameSpace=Automatic
Detection.Criteria(2).WbemQuery="SELECT Dedicated FROM CIM_ComputerSystem"
Detection.Criteria(2).ExpectedResult="\(^30|\)\|\(|30|\)\|\(^3|\)\|\(|3|\)\|\(^2|\)\|\(|2|\)"

// There must be disk drives declared int he root/LSI_IR_1_2_0 namespace
Detection.Criteria(3).Type="Wbem"
Detection.Criteria(3).WbemQuery="SELECT Name FROM CIM_DiskDrive"
Detection.Criteria(3).WbemNameSpace=Automatic




//
// Disk controllers
//

// Source(1) = CIM_ComputerSystem
// This class is linked to many useful information and actually represents the RAID controller
// ComputerSystemID;Dedicated;Name;
DiskController.Discovery.Source(1).Type="Wbem"
DiskController.Discovery.Source(1).WbemQuery="SELECT __PATH,Dedicated,Name FROM CIM_ComputerSystem"
DiskController.Discovery.Source(1).WbemNameSpace=Automatic

// Keep only CIM_ComputerSystems that are RAID controllers
// ComputerSystemID;Dedicated;Name;
DiskController.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(1).Compute(1).Column=2
DiskController.Discovery.Source(1).Compute(1).RegExp="\(^30|\)\|\(|30|\)\|\(^3|\)\|\(|3|\)\|\(^2|\)\|\(|2|\)"

// This is bad, but I can't find another way to exclude "enclosure" instances, which I can't care less in this case
// ComputerSystemID;Dedicated;Name;
DiskController.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
DiskController.Discovery.Source(1).Compute(2).Column=1
DiskController.Discovery.Source(1).Compute(2).RegExp="[Ee]nclosure"

// Source(2) = CIM_LogicalIdentity
// This is the link between CIM_ComputerSystem and CIM_PortController
// SameElement;SystemElement;
DiskController.Discovery.Source(2).Type="Wbem"
DiskController.Discovery.Source(2).WbemQuery="SELECT SameElement,SystemElement FROM CIM_LogicalIdentity"
DiskController.Discovery.Source(2).WbemNameSpace=Automatic

// Source(3) = CIM_Realizes
// Makes the link between CIM_PortController and CIM_Card
// PhysicalPackageID;LogicalElementID;
DiskController.Discovery.Source(3).Type="Wbem"
DiskController.Discovery.Source(3).WbemQuery="SELECT Antecedent,Dependent FROM CIM_Realizes"
DiskController.Discovery.Source(3).WbemNameSpace=Automatic

// Source(4) = CIM_Card
// CardTag;Manufacturer;Model;SerialNumber;
DiskController.Discovery.Source(4).Type="Wbem"
DiskController.Discovery.Source(4).WbemQuery="SELECT __PATH,Manufacturer,Model,SerialNumber FROM CIM_Card"
DiskController.Discovery.Source(4).WbemNameSpace=Automatic

// Source(5) = CIM_ElementSoftwareIdentity
// Makes the link between CIM_SoftwareIdentity and CIM_ComputerSystem
// SoftwareID;ComputerSystemID;
DiskController.Discovery.Source(5).Type="Wbem"
DiskController.Discovery.Source(5).WbemQuery="SELECT Antecedent,Dependent FROM CIM_ElementSoftwareIdentity"
DiskController.Discovery.Source(5).WbemNameSpace=Automatic

// Source(6) = CIM_SoftwareIdentity
// SoftwareID;Classifications;VersionString
DiskController.Discovery.Source(6).Type="Wbem"
DiskController.Discovery.Source(6).WbemQuery="SELECT __PATH,Classifications,VersionString FROM CIM_SoftwareIdentity"
DiskController.Discovery.Source(6).WbemNameSpace=Automatic

// Take the first classification item from the "Classifications" column, which actually is an array
// SoftwareID;Classification;VersionString
DiskController.Discovery.Source(6).Compute(1).Type="Extract"
DiskController.Discovery.Source(6).Compute(1).Column=2
DiskController.Discovery.Source(6).Compute(1).Subcolumn="1"
DiskController.Discovery.Source(6).Compute(1).Subseparators="|"

// Source(7) = Copy of Source(6) [CIM_SoftwareIdentity], but with only where Classifications == 11, i.e. BIOS
// SoftwareID;Classifications;BIOSVersion;
DiskController.Discovery.Source(7)=%DiskController.Discovery.Source(6)%
DiskController.Discovery.Source(7).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(7).Compute(1).Column=2
DiskController.Discovery.Source(7).Compute(1).ValueList="11"

// Source(8) = Copy of Source(6) [CIM_SoftwareIdentity], but with only where Classifications == 10, i.e. Firmware
// SoftwareID;Classifications;FirmwareVersion
DiskController.Discovery.Source(8)=%DiskController.Discovery.Source(6)%
DiskController.Discovery.Source(8).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(8).Compute(1).Column=2
DiskController.Discovery.Source(8).Compute(1).ValueList="10"

// Source(9) = Copy of Source(6) [CIM_SoftwareIdentity], but with only where Classifications == 2, i.e. Driver
// SoftwareID;Classifications;DriverVersion
DiskController.Discovery.Source(9)=%DiskController.Discovery.Source(6)%
DiskController.Discovery.Source(9).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(9).Compute(1).Column=2
DiskController.Discovery.Source(9).Compute(1).ValueList="2"

// Okay, now here's the funny part
// We need to join all of these tables together to build the instance table
// Lots of fun, I tell ya

// Source(10) = Table joint between Source(1) and Source(2)
// ComputerSystemID;Dedicated;Name;SameElement;SystemElement;
DiskController.Discovery.Source(10).Type="TableJoint"
DiskController.Discovery.Source(10).LeftTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(10).RightTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(10).LeftKeyColumn=1
DiskController.Discovery.Source(10).RightKeyColumn=2
DiskController.Discovery.Source(10).KeyType="Wbem"
DiskController.Discovery.Source(10).DefaultRightLine="RemoveMe;;"

// Source(11) = Table joint between Source(3) and Source(4)
// PhysicalPackageID;LogicalElementID;CardTag;Manufacturer;Model;SerialNumber;
DiskController.Discovery.Source(11).Type="TableJoint"
DiskController.Discovery.Source(11).LeftTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Source(11).RightTable=%DiskController.Discovery.Source(4)%
DiskController.Discovery.Source(11).LeftKeyColumn=1
DiskController.Discovery.Source(11).RightKeyColumn=1
DiskController.Discovery.Source(11).KeyType="Wbem"
DiskController.Discovery.Source(11).DefaultRightLine=";;;;"

// Source(12) = Table joint between Source(10) and Source(11)
// ComputerSystemID;Dedicated;Name;SameElement;SystemElement;PhysicalPackageID;LogicalElementID;CardTag;Manufacturer;Model;SerialNumber;
DiskController.Discovery.Source(12).Type="TableJoint"
DiskController.Discovery.Source(12).LeftTable=%DiskController.Discovery.Source(10)%
DiskController.Discovery.Source(12).RightTable=%DiskController.Discovery.Source(11)%
DiskController.Discovery.Source(12).LeftKeyColumn=4
DiskController.Discovery.Source(12).RightKeyColumn=2
DiskController.Discovery.Source(12).KeyType="Wbem"
DiskController.Discovery.Source(12).DefaultRightLine=";;;;;;"

// Keep only useful columns
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;
DiskController.Discovery.Source(12).Compute(1).Type="KeepColumns"
DiskController.Discovery.Source(12).Compute(1).ColumnNumbers="1,3,9,10,11"

// Source(13) = Table joint between Source(5) and Source(7)
// SoftwareID;ComputerSystemID;SoftwareID;Classifications;BIOSVersion;
DiskController.Discovery.Source(13).Type="TableJoint"
DiskController.Discovery.Source(13).LeftTable=%DiskController.Discovery.Source(5)%
DiskController.Discovery.Source(13).RightTable=%DiskController.Discovery.Source(7)%
DiskController.Discovery.Source(13).LeftKeyColumn=1
DiskController.Discovery.Source(13).RightKeyColumn=1
DiskController.Discovery.Source(13).KeyType="Wbem"
//DiskController.Discovery.Source(13).DefaultRightLine=";;;"

// Source(14) = Table joint between Source(5) and Source(8)
// SoftwareID;ComputerSystemID;SoftwareID;Classifications;FirmwareVersion;
DiskController.Discovery.Source(14).Type="TableJoint"
DiskController.Discovery.Source(14).LeftTable=%DiskController.Discovery.Source(5)%
DiskController.Discovery.Source(14).RightTable=%DiskController.Discovery.Source(8)%
DiskController.Discovery.Source(14).LeftKeyColumn=1
DiskController.Discovery.Source(14).RightKeyColumn=1
DiskController.Discovery.Source(14).KeyType="Wbem"
//DiskController.Discovery.Source(14).DefaultRightLine=";;;"

// Source(15) = Table joint between Source(5) and Source(9)
// SoftwareID;ComputerSystemID;SoftwareID;Classifications;DriverVersion;
DiskController.Discovery.Source(15).Type="TableJoint"
DiskController.Discovery.Source(15).LeftTable=%DiskController.Discovery.Source(5)%
DiskController.Discovery.Source(15).RightTable=%DiskController.Discovery.Source(9)%
DiskController.Discovery.Source(15).LeftKeyColumn=1
DiskController.Discovery.Source(15).RightKeyColumn=1
DiskController.Discovery.Source(15).KeyType="Wbem"
//DiskController.Discovery.Source(15).DefaultRightLine=";;;"

// Source(16) = Table joint between Source(12) and Source(13)
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;SoftwareID;ComputerSystemID;SoftwareID;Classifications;BIOSVersion;
DiskController.Discovery.Source(16).Type="TableJoint"
DiskController.Discovery.Source(16).LeftTable=%DiskController.Discovery.Source(12)%
DiskController.Discovery.Source(16).RightTable=%DiskController.Discovery.Source(13)%
DiskController.Discovery.Source(16).LeftKeyColumn=1
DiskController.Discovery.Source(16).RightKeyColumn=2
DiskController.Discovery.Source(16).KeyType="Wbem"
DiskController.Discovery.Source(16).DefaultRightLine=";;;;;"

// Source(17) = Table joint between Source(14) and Source(15)
// SoftwareID;ComputerSystemID;SoftwareID;Classifications;FirmwareVersion;SoftwareID;ComputerSystemID;SoftwareID;Classifications;DriverVersion;
DiskController.Discovery.Source(17).Type="TableJoint"
DiskController.Discovery.Source(17).LeftTable=%DiskController.Discovery.Source(14)%
DiskController.Discovery.Source(17).RightTable=%DiskController.Discovery.Source(15)%
DiskController.Discovery.Source(17).LeftKeyColumn=2
DiskController.Discovery.Source(17).RightKeyColumn=2
DiskController.Discovery.Source(17).KeyType="Wbem"
DiskController.Discovery.Source(17).DefaultRightLine=";;;;;"

// Source(18) = Table joint between Source(16) and Source(17)
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;SoftwareID;ComputerSystemID;SoftwareID;Classifications;BIOSVersion;SoftwareID;ComputerSystemID;SoftwareID;Classifications;FirmwareVersion;SoftwareID;ComputerSystemID;SoftwareID;Classifications;DriverVersion;
DiskController.Discovery.Source(18).Type="TableJoint"
DiskController.Discovery.Source(18).LeftTable=%DiskController.Discovery.Source(16)%
DiskController.Discovery.Source(18).RightTable=%DiskController.Discovery.Source(17)%
DiskController.Discovery.Source(18).LeftKeyColumn=1
DiskController.Discovery.Source(18).RightKeyColumn=2
DiskController.Discovery.Source(18).KeyType="Wbem"
DiskController.Discovery.Source(18).DefaultRightLine=";;;;;;;;;;"

// Keep only useful columns (makes things clearer)
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;
DiskController.Discovery.Source(18).Compute(1).Type="KeepColumns"
DiskController.Discovery.Source(18).Compute(1).ColumnNumbers="1,2,3,4,5,10,15,20"

// Exclude any PartComponents (DeviceIDs) of "Empty" that have made it this far
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;
DiskController.Discovery.Source(18).Compute(2).Type="ExcludeMatchingLines"
DiskController.Discovery.Source(18).Compute(2).Column=1
DiskController.Discovery.Source(18).Compute(2).RegExp="^$"

// Source(19) = CIM_SystemDevice
// Will be useful for physical and logical disks discovery (to attach them to the controller)
// GroupComponent;PartComponent
DiskController.Discovery.Source(19).Type="Wbem"
DiskController.Discovery.Source(19).WbemQuery="SELECT GroupComponent,PartComponent FROM CIM_SystemDevice"
DiskController.Discovery.Source(19).WbemNameSpace=Automatic

// Source(20) = table joint of source(19) and source(18)
// This is just to keep only cim_systemdevice instances that correspond to the RAID controller, and not to other painfully useless other objects
// GroupComponent;PartComponent;ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;
DiskController.Discovery.Source(20).Type="TableJoint"
DiskController.Discovery.Source(20).LeftTable=%DiskController.Discovery.Source(19)%
DiskController.Discovery.Source(20).RightTable=%DiskController.Discovery.Source(18)%
DiskController.Discovery.Source(20).LeftKeyColumn=1
DiskController.Discovery.Source(20).RightKeyColumn=1
DiskController.Discovery.Source(20).KeyType="Wbem"

// Now, keep only the PartComponent and ComputerSystemID columns

// Little trick here: remember that GroupComponent and ComputerSystemID from the table joint above are
// supposed to be identical, which is not stricly the same. They are identical WBEM IDs, but can be
// presented in different ways. So, instead of keeping the GroupComponent field, I'll take the
// ComputerSystemID field, to make sure that I have the real disk controller ID (thas was used to create
// the disk controller icon), so that I'll be able to attach physical and logical disks icons to
// the disk controller ID. If I had kept the GroupComponent field, I would have had orphean disk icons,
// because Hardware Sentry would have not been able to match the parent ID from the GroupComponent field.
// Well, I don't know if you understand what I mean, but keep it this way, otherwise it doesn't work...

// PartComponent;DiskControllerID;Name;
DiskController.Discovery.Source(20).Compute(1).Type="KeepColumns"
DiskController.Discovery.Source(20).Compute(1).ColumnNumbers="2,3,4"

// Let's see if there's a computer system with a controller battery.
// Name,BatteryStatus
DiskController.Discovery.Source(21).Type="Wbem"
DiskController.Discovery.Source(21).WbemQuery="SELECT Name,BatteryStatus FROM CIM_ComputerSystem"
DiskController.Discovery.Source(21).WbemNameSpace=Automatic

// Keep only instances with valid Battery Status
// Name;BatteryStatus;
DiskController.Discovery.Source(21).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(21).Compute(1).Column=2
DiskController.Discovery.Source(21).Compute(1).ValueList="1,2,3"

// Join the original discovery with the batteries (linking the system to the controller)
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;Name;BatteryStatus;
DiskController.Discovery.Source(22).Type="TableJoint"
DiskController.Discovery.Source(22).LeftTable=%DiskController.Discovery.Source(18)%
DiskController.Discovery.Source(22).RightTable=%DiskController.Discovery.Source(21)%
DiskController.Discovery.Source(22).LeftKeyColumn=2
DiskController.Discovery.Source(22).RightKeyColumn=1
DiskController.Discovery.Source(22).DefaultRightLine=";;"

// Get a list of Physical Disks
// CIM_DiskDrive;
DiskController.Discovery.Source(23).Type="Wbem"
DiskController.Discovery.Source(23).WbemQuery="SELECT __PATH FROM CIM_DiskDrive"
DiskController.Discovery.Source(23).WbemNameSpace=Automatic

// Match these disks with the PartComponent to GroupComponent table we built
// CIM_DiskDrive;PartComponent;DiskControllerID;
DiskController.Discovery.Source(24).Type="TableJoint"
DiskController.Discovery.Source(24).LeftTable=%DiskController.Discovery.Source(23)%
DiskController.Discovery.Source(24).RightTable=%DiskController.Discovery.Source(20)%
DiskController.Discovery.Source(24).LeftKeyColumn=1
DiskController.Discovery.Source(24).RightKeyColumn=1
DiskController.Discovery.Source(24).KeyType="Wbem"
DiskController.Discovery.Source(24).DefaultRightLine=";;"

// Take Disk Controller instance table and make sure that each controller matches one of the discovered physical disks (all controllers must have and associated physical disk)
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;Name;BatteryStatus;CIM_DiskDrive;PartComponent;DiskControllerID;
DiskController.Discovery.Source(25).Type="TableJoint"
DiskController.Discovery.Source(25).LeftTable=%DiskController.Discovery.Source(22)%
DiskController.Discovery.Source(25).RightTable=%DiskController.Discovery.Source(24)%
DiskController.Discovery.Source(25).LeftKeyColumn=1
DiskController.Discovery.Source(25).RightKeyColumn=3
DiskController.Discovery.Source(25).KeyType="Wbem"

// The Instance table
// ComputerSystemID;Name;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;Name;BatteryStatus;CIM_DiskDrive;PartComponent;DiskControllerID;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(25)%
// DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(2)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(2)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(3)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
DiskController.Discovery.Instance.BiosVersion=InstanceTable.Column(6)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(7)
DiskController.Discovery.Instance.DriverVersion=InstanceTable.Column(8)
DiskController.Discovery.Instance.ParameterActivation.BatteryStatus=InstanceTable.Column(10)


//
// Collect

// The DiskController collect is a "MultiInstance" collect
// Only ONE WBEM query will be done in order to get the information for all disk controllers
// Less WBEM queries gives faster results
DiskController.Collect.Type="MultiInstance"

// Source(1) = CIM_ComputerSystem
// ComputerID;OperationalStatus;
DiskController.Collect.Source(1).Type="Wbem"
DiskController.Collect.Source(1).WbemQuery="SELECT Name,OperationalStatus FROM CIM_ComputerSystem"
DiskController.Collect.Source(1).WbemNamespace=Automatic

// Duplicate the "OperationalStatusArray" column
// ComputerID;OperationalStatusArray;OperationalStatusArray;
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// ComputerID;PATROLStatusArray;Status
DiskController.Collect.Source(1).Compute(2).Type="ArrayTranslate"
DiskController.Collect.Source(1).Compute(2).Column=2
DiskController.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// ComputerID;PATROLStatusArray;StatusInformation
DiskController.Collect.Source(1).Compute(3).Type="ArrayTranslate"
DiskController.Collect.Source(1).Compute(3).Column=3
DiskController.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
DiskController.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// ComputerID;PATROLStatus;StatusInformation
DiskController.Collect.Source(1).Compute(4).Type="Convert"
DiskController.Collect.Source(1).Compute(4).Column=2
DiskController.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// Let's see if there's a computer system with a controller battery.
// Name,BatteryStatus
DiskController.Collect.Source(2).Type="Wbem"
DiskController.Collect.Source(2).WbemQuery="SELECT Name,BatteryStatus FROM CIM_ComputerSystem"
DiskController.Collect.Source(2).WbemNameSpace=Automatic

// Keep only Computer Systems with a Battery Status
// Name,BatteryStatus
DiskController.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Collect.Source(2).Compute(1).Column=2
DiskController.Collect.Source(2).Compute(1).RegExp="."

// Translate the Battery Status
// Name,BatteryStatus
DiskController.Collect.Source(2).Compute(2).Type="Translate"
DiskController.Collect.Source(2).Compute(2).Column=2
DiskController.Collect.Source(2).Compute(2).TranslationTable="BatteryStatusTranslationTable"

// Join the original discovery with the batteries (linking the system to the controller)
// ComputerID;PATROLStatus;StatusInformation;Name;BatteryStatus;
DiskController.Collect.Source(3).Type="TableJoint"
DiskController.Collect.Source(3).LeftTable=%DiskController.Collect.Source(1)%
DiskController.Collect.Source(3).RightTable=%DiskController.Collect.Source(2)%
DiskController.Collect.Source(3).LeftKeyColumn=1
DiskController.Collect.Source(3).RightKeyColumn=1
DiskController.Collect.Source(3).DefaultRightLine=";;"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(3)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)
DiskController.Collect.BatteryStatus=ValueTable.Column(5)

// Battery Status
BatteryStatusTranslationTable(1)="OK"
BatteryStatusTranslationTable(2)="ALARM"
BatteryStatusTranslationTable(3)="WARN"
BatteryStatusTranslationTable(Default)="UNKNOWN"

// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
DMTFOperationStatusTranslationTable(6)="ALARM"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="ALARM"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="WARN"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
DMTFOperationStatusInformationTranslationTable(6)="Error"
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)=""


//
//  Physical disks
//

//
// Discovery

// Source(1) = CIM_DiskDrive
// CIM_DiskDrive;SizeK;DeviceID;ElementName;
PhysicalDisk.Discovery.Source(1).Type="Wbem"
PhysicalDisk.Discovery.Source(1).WbemQuery="SELECT __PATH,MaxMediaSize,DeviceID,ElementName FROM CIM_DiskDrive"
PhysicalDisk.Discovery.Source(1).WbemNameSpace=Automatic

// Convert SizeK from 1000 of bytes to bytes
// CIM_DiskDrive;Size;DeviceID;ElementName;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(1).MultiplyBy=1000

// Use DeviceID as ElementName if Element Name not available
// CIM_DiskDrive;Size;DeviceID;ElementName;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=4
PhysicalDisk.Discovery.Source(1).Compute(2).String="_MSHW_"

PhysicalDisk.Discovery.Source(1).Compute(3).Type="RightConcat"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=4
PhysicalDisk.Discovery.Source(1).Compute(3).String="_MSHW_"

// Replace the Blank Value with Column 3
// CIM_DiskDrive;Size;DeviceID;ElementName;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=4
PhysicalDisk.Discovery.Source(1).Compute(4).Replace="_MSHW__MSHW_"
PhysicalDisk.Discovery.Source(1).Compute(4).ReplaceBy=Column(3)

// Remove the unwanted _MSHW_
// CIM_DiskDrive;Size;DeviceID;ElementName;
PhysicalDisk.Discovery.Source(1).Compute(5).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(5).Column=4
PhysicalDisk.Discovery.Source(1).Compute(5).Replace="_MSHW_"
PhysicalDisk.Discovery.Source(1).Compute(5).ReplaceBy=""

// Source(2) = CIM_PhysicalPackage
// CIM_PhysicalPackage;Model;SerialNumber;
PhysicalDisk.Discovery.Source(2).Type="Wbem"
PhysicalDisk.Discovery.Source(2).WbemQuery="SELECT __PATH,Model,SerialNumber FROM CIM_PhysicalPackage"
PhysicalDisk.Discovery.Source(2).WbemNameSpace=Automatic

// Source(3) = Table joint of Source(1) and DiskController.Discovery.Source(3)
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(3)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(3).RightKeyColumn=2
PhysicalDisk.Discovery.Source(3).KeyType="Wbem"
PhysicalDisk.Discovery.Source(3).DefaultRightLine=";;"

// Source(4) = Table joint of Source(3) and Source(2)
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;CIM_PhysicalPackage;Model;SerialNumber;
PhysicalDisk.Discovery.Source(4).Type="TableJoint"
PhysicalDisk.Discovery.Source(4).LeftTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Source(4).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(4).LeftKeyColumn=5
PhysicalDisk.Discovery.Source(4).RightKeyColumn=1
PhysicalDisk.Discovery.Source(4).KeyType="Wbem"
PhysicalDisk.Discovery.Source(4).DefaultRightLine=";;;"

// Source(5) = Table joint of Source(4) and DiskController.Discovery.Source(20)
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;CIM_PhysicalPackage;Model;SerialNumber;PartComponent;DiskControllerID;
PhysicalDisk.Discovery.Source(5).Type="TableJoint"
PhysicalDisk.Discovery.Source(5).LeftTable=%PhysicalDisk.Discovery.Source(4)%
PhysicalDisk.Discovery.Source(5).RightTable=%DiskController.Discovery.Source(20)%
PhysicalDisk.Discovery.Source(5).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(5).RightKeyColumn=1
PhysicalDisk.Discovery.Source(5).KeyType="Wbem"
PhysicalDisk.Discovery.Source(5).DefaultRightLine=";;"

// Exclude any PartComponents (DeviceIDs) of "Empty" that have made it this far
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;CIM_PhysicalPackage;Model;SerialNumber;PartComponent;DiskControllerID;
PhysicalDisk.Discovery.Source(5).Compute(1).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(5).Compute(1).Column=1
PhysicalDisk.Discovery.Source(5).Compute(1).RegExp="^$"

// Now let's see if there's a size in the Storage Extent
// CIM_StorageExtent,BlockSize,NumberofBlocks
PhysicalDisk.Discovery.Source(6).Type="Wbem"
PhysicalDisk.Discovery.Source(6).WbemQuery="SELECT __PATH,BlockSize,NumberofBlocks FROM CIM_StorageExtent"
PhysicalDisk.Discovery.Source(6).WbemNameSpace=Automatic

// Multiply blocksize by number of blocks to get size
// CIM_StorageExtent,Size,NumberofBlocks
PhysicalDisk.Discovery.Source(6).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(6).Compute(1).Column=2
PhysicalDisk.Discovery.Source(6).Compute(1).MultiplyBy=Column(3)

// Select Columns
// CIM_StorageExtent,Size
PhysicalDisk.Discovery.Source(6).Compute(2).Type="KeepColumns"
PhysicalDisk.Discovery.Source(6).Compute(2).ColumnNumbers="1,2"

// Get Link Disk Drive to Storage Extent
// CIM_DiskDrive,CIM_StorageExtent
PhysicalDisk.Discovery.Source(7).Type="Wbem"
PhysicalDisk.Discovery.Source(7).WbemQuery="SELECT Antecedent,Dependent FROM CIM_MediaPresent"
PhysicalDisk.Discovery.Source(7).WbemNameSpace=Automatic

// Link Disk Drive to Storage Extent
// CIM_DiskDrive,CIM_StorageExtent,CIM_StorageExtent,Size
PhysicalDisk.Discovery.Source(8).Type="TableJoint"
PhysicalDisk.Discovery.Source(8).LeftTable=%PhysicalDisk.Discovery.Source(7)%
PhysicalDisk.Discovery.Source(8).RightTable=%PhysicalDisk.Discovery.Source(6)%
PhysicalDisk.Discovery.Source(8).LeftKeyColumn=2
PhysicalDisk.Discovery.Source(8).RightKeyColumn=1
PhysicalDisk.Discovery.Source(8).KeyType="Wbem"

// Select Columns
// CIM_DiskDrive,Size
PhysicalDisk.Discovery.Source(8).Compute(1).Type="KeepColumns"
PhysicalDisk.Discovery.Source(8).Compute(1).ColumnNumbers="1,4"

// Link Main Table with Size from Storage Extent
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;CIM_PhysicalPackage;Model;SerialNumber;PartComponent;DiskControllerID;CIM_DiskDrive;Size;
PhysicalDisk.Discovery.Source(9).Type="TableJoint"
PhysicalDisk.Discovery.Source(9).LeftTable=%PhysicalDisk.Discovery.Source(5)%
PhysicalDisk.Discovery.Source(9).RightTable=%PhysicalDisk.Discovery.Source(8)%
PhysicalDisk.Discovery.Source(9).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(9).RightKeyColumn=1
PhysicalDisk.Discovery.Source(9).KeyType="Wbem"
PhysicalDisk.Discovery.Source(9).DefaultRightLine=";;"

// Use StorageExtentSize as Size if DiskDriveDize not available
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;CIM_PhysicalPackage;Model;SerialNumber;PartComponent;DiskControllerID;CIM_DiskDrive;Size;
PhysicalDisk.Discovery.Source(9).Compute(1).Type="LeftConcat"
PhysicalDisk.Discovery.Source(9).Compute(1).Column=2
PhysicalDisk.Discovery.Source(9).Compute(1).String="_MSHW_"

PhysicalDisk.Discovery.Source(9).Compute(2).Type="RightConcat"
PhysicalDisk.Discovery.Source(9).Compute(2).Column=2
PhysicalDisk.Discovery.Source(9).Compute(2).String="_MSHW_"

// Replace the Blank Value with Column 13
PhysicalDisk.Discovery.Source(9).Compute(3).Type="Replace"
PhysicalDisk.Discovery.Source(9).Compute(3).Column=2
PhysicalDisk.Discovery.Source(9).Compute(3).Replace="_MSHW__MSHW_"
PhysicalDisk.Discovery.Source(9).Compute(3).ReplaceBy=Column(14)

// Replace the zero Value with Column 13
PhysicalDisk.Discovery.Source(9).Compute(4).Type="Replace"
PhysicalDisk.Discovery.Source(9).Compute(4).Column=2
PhysicalDisk.Discovery.Source(9).Compute(4).Replace="_MSHW_0_MSHW_"
PhysicalDisk.Discovery.Source(9).Compute(4).ReplaceBy=Column(14)

// Remove the unwanted _MSHW_
PhysicalDisk.Discovery.Source(9).Compute(5).Type="Replace"
PhysicalDisk.Discovery.Source(9).Compute(5).Column=2
PhysicalDisk.Discovery.Source(9).Compute(5).Replace="_MSHW_"
PhysicalDisk.Discovery.Source(9).Compute(5).ReplaceBy=""

// Finally here is the instance table...
// CIM_DiskDrive;Size;DeviceID;ElementName;PhysicalPackageID;LogicalElementID;Tag;Model;SerialNumber;PartComponent;DiskControllerID;DiskControllerName;CIM_DiskDrive;Size;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(9)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(11)
// Removed for connectorStandardization compatibility
// PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)

//
// Collect

// The physical disk collect is a "MultiInstance" collect
// Only ONE WBEM query will be done in order to get the information for all physical disks
// Less WBEM queries gives faster results
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = the only source = CIM_DiskDrive
// DeviceID;OperationalStatusArray
PhysicalDisk.Collect.Source(1).Type="Wbem"
PhysicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM CIM_DiskDrive"
PhysicalDisk.Collect.Source(1).WbemNameSpace=Automatic

// Duplicate the "OperationalStatusArray" column
// ComputerID;OperationalStatusArray;OperationalStatusArray;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// ComputerID;PATROLStatusArray;Status
PhysicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// ComputerID;PATROLStatusArray;StatusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
PhysicalDisk.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// ComputerID;PATROLStatus;StatusInformation
PhysicalDisk.Collect.Source(1).Compute(4).Type="Convert"
PhysicalDisk.Collect.Source(1).Compute(4).Column=2
PhysicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// Logical disks
//

//
// Discovery

// Source(1) = CIM_StorageVolume
// CIM_StorageVolume;BlockSize;SizeInBlocks;DeviceID;ElementName;SystemName;
LogicalDisk.Discovery.Source(1).Type="Wbem"
LogicalDisk.Discovery.Source(1).WbemQuery="SELECT __PATH,BlockSize,NumberOfBlocks,DeviceID,ElementName,SystemName FROM CIM_StorageVolume"
LogicalDisk.Discovery.Source(1).WbemNameSpace=Automatic

// Compute the real size of the volumes (SizeInBlocks * BlockSize)
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;SystemName;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column=3
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy=Column(2)

// Add an Underscore to the System Name
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;SystemName;
LogicalDisk.Discovery.Source(1).Compute(2).Type="RightConcat"
LogicalDisk.Discovery.Source(1).Compute(2).Column=6
LogicalDisk.Discovery.Source(1).Compute(2).String="_"

// Remove the SystemName from the DeviceID
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;SystemName;
LogicalDisk.Discovery.Source(1).Compute(3).Type="Replace"
LogicalDisk.Discovery.Source(1).Compute(3).Column=4
LogicalDisk.Discovery.Source(1).Compute(3).Replace=Column(6)
LogicalDisk.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove the System Name Column
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;
LogicalDisk.Discovery.Source(1).Compute(4).Type="KeepColumns"
LogicalDisk.Discovery.Source(1).Compute(4).ColumnNumbers="1,2,3,4,5"

// Use DeviceID as ElementName if Element Name not available
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;
LogicalDisk.Discovery.Source(1).Compute(5).Type="LeftConcat"
LogicalDisk.Discovery.Source(1).Compute(5).Column=5
LogicalDisk.Discovery.Source(1).Compute(5).String="_MSHW_"

LogicalDisk.Discovery.Source(1).Compute(6).Type="RightConcat"
LogicalDisk.Discovery.Source(1).Compute(6).Column=5
LogicalDisk.Discovery.Source(1).Compute(6).String="_MSHW_"

// Replace the Blank Value with Column 4
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;
LogicalDisk.Discovery.Source(1).Compute(7).Type="Replace"
LogicalDisk.Discovery.Source(1).Compute(7).Column=5
LogicalDisk.Discovery.Source(1).Compute(7).Replace="_MSHW__MSHW_"
LogicalDisk.Discovery.Source(1).Compute(7).ReplaceBy=Column(4)

// Remove the unwanted _MSHW_
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;
LogicalDisk.Discovery.Source(1).Compute(8).Type="Replace"
LogicalDisk.Discovery.Source(1).Compute(8).Column=5
LogicalDisk.Discovery.Source(1).Compute(8).Replace="_MSHW_"
LogicalDisk.Discovery.Source(1).Compute(8).ReplaceBy=""

// Source(2) = CIM_StorageSetting
// StorageSettingInstanceID;Description;
LogicalDisk.Discovery.Source(2).Type="Wbem"
LogicalDisk.Discovery.Source(2).WbemQuery="SELECT __PATH,Description FROM CIM_StorageSetting"
LogicalDisk.Discovery.Source(2).WbemNameSpace=Automatic

// Source(3) = CIM_ElementSettingData
// This is the link between CIM_StorageSetting and CIM_StorageVolumne
// ManagedElement;SettingData
LogicalDisk.Discovery.Source(3).Type="Wbem"
LogicalDisk.Discovery.Source(3).WbemQuery="SELECT ManagedElement,SettingData FROM CIM_ElementSettingData"
LogicalDisk.Discovery.Source(3).WbemNameSpace=Automatic

// Source(4) = Table joint of  Source(1) and Source(3)
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;ManagedElement;SettingData;
LogicalDisk.Discovery.Source(4).Type="TableJoint"
LogicalDisk.Discovery.Source(4).LeftTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(4).RightTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Source(4).LeftKeyColumn=1
LogicalDisk.Discovery.Source(4).RightKeyColumn=1
LogicalDisk.Discovery.Source(4).KeyType="Wbem"
LogicalDisk.Discovery.Source(4).DefaultRightLine=";;"

// Source(5) = Table joint of Source(4) and Source(2)
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;ManagedElement;SettingData;StorageSettingInstanceID;Description;
LogicalDisk.Discovery.Source(5).Type="TableJoint"
LogicalDisk.Discovery.Source(5).LeftTable=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Source(5).RightTable=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(5).LeftKeyColumn=7
LogicalDisk.Discovery.Source(5).RightKeyColumn=1
LogicalDisk.Discovery.Source(5).KeyType="Wbem"
LogicalDisk.Discovery.Source(5).DefaultRightLine=";;"

// Source(6) = Table joint of Source(5) and DiskController.Discovery.Source(20)
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;ManagedElement;SettingData;StorageSettingInstanceID;Description;PartComponent;DiskControllerID;
LogicalDisk.Discovery.Source(6).Type="TableJoint"
LogicalDisk.Discovery.Source(6).LeftTable=%LogicalDisk.Discovery.Source(5)%
LogicalDisk.Discovery.Source(6).RightTable=%DiskController.Discovery.Source(20)%
LogicalDisk.Discovery.Source(6).LeftKeyColumn=1
LogicalDisk.Discovery.Source(6).RightKeyColumn=1
LogicalDisk.Discovery.Source(6).KeyType="Wbem"
LogicalDisk.Discovery.Source(6).DefaultRightLine=";;"

// Exclude any PartComponents (DeviceIDs) of "Empty" that have made it this far
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;ManagedElement;SettingData;StorageSettingInstanceID;Description;PartComponent;DiskControllerID;
LogicalDisk.Discovery.Source(6).Compute(1).Type="ExcludeMatchingLines"
LogicalDisk.Discovery.Source(6).Compute(1).Column=1
LogicalDisk.Discovery.Source(6).Compute(1).RegExp="^$"

// Here is the instance table
// CIM_StorageVolume;BlockSize;SizeBytes;DeviceID;ElementName;ManagedElement;SettingData;StorageSettingInstanceID;Description;PartComponent;DiskControllerID;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(6)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(9)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(11)


//
// Collect

// The physical disk collect is a "MultiInstance" collect
// Only ONE WBEM query will be done in order to get the information for all physical disks
// Less WBEM queries gives faster results
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = the only source = CIM_StorageVolume
// DeviceID;OperationalStatusArray
LogicalDisk.Collect.Source(1).Type="Wbem"
LogicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus,SystemName FROM CIM_StorageVolume"
LogicalDisk.Collect.Source(1).WbemNameSpace=Automatic

// Add an Underscore to the System Name
// DeviceID;OperationalStatusArray;SystemName;
LogicalDisk.Collect.Source(1).Compute(1).Type="RightConcat"
LogicalDisk.Collect.Source(1).Compute(1).Column=3
LogicalDisk.Collect.Source(1).Compute(1).String="_"

// Remove the SystemName from the DeviceID
// DeviceID;OperationalStatusArray;SystemName;
LogicalDisk.Collect.Source(1).Compute(2).Type="Replace"
LogicalDisk.Collect.Source(1).Compute(2).Column=1
LogicalDisk.Collect.Source(1).Compute(2).Replace=Column(3)
LogicalDisk.Collect.Source(1).Compute(2).ReplaceBy=""

// Remove the System Name Column
// DeviceID;OperationalStatusArray;
LogicalDisk.Collect.Source(1).Compute(3).Type="KeepColumns"
LogicalDisk.Collect.Source(1).Compute(3).ColumnNumbers="1,2"

// Duplicate the "OperationalStatusArray" column
// ComputerID;OperationalStatusArray;OperationalStatusArray;
LogicalDisk.Collect.Source(1).Compute(4).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(4).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// ComputerID;PATROLStatusArray;Status
LogicalDisk.Collect.Source(1).Compute(5).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(5).Column=2
LogicalDisk.Collect.Source(1).Compute(5).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// ComputerID;PATROLStatusArray;StatusInformation
LogicalDisk.Collect.Source(1).Compute(6).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(6).Column=3
LogicalDisk.Collect.Source(1).Compute(6).TranslationTable="DMTFOperationStatusInformationTranslationTable"
LogicalDisk.Collect.Source(1).Compute(6).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// ComputerID;PATROLStatus;StatusInformation
LogicalDisk.Collect.Source(1).Compute(7).Type="Convert"
LogicalDisk.Collect.Source(1).Compute(7).Column=2
LogicalDisk.Collect.Source(1).Compute(7).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)





//
// Batteries
//

//
// Discovery

// Source(1) = CIM_Battery
// CIM_Battery;DeviceID;OperationalStatus;
Battery.Discovery.Source(1).Type="WBEM"
Battery.Discovery.Source(1).WbemQuery="SELECT __PATH,DeviceID,OperationalStatus FROM CIM_Battery"
Battery.Discovery.Source(1).WbemNameSpace=Automatic

// Exclude Batteries that have a Status of "12", i.e. no contact (not present)
// CIM_Battery;DeviceID;OperationalStatus;
Battery.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=3
Battery.Discovery.Source(1).Compute(1).RegExp="12|"

// Get the association table between Battery and Controller.  We have to use quite a generic association class.
// Cim_ComputerSystem;CIM_Battery
Battery.Discovery.Source(2).Type="WBEM"
Battery.Discovery.Source(2).WbemQuery="SELECT GroupComponent,PartComponent FROM CIM_Component"
Battery.Discovery.Source(2).WbemNameSpace=Automatic

// Associate the Disk Controller with the Association Table to ensure that we have the Group Component we associate the Battery to is in fact the Disk Controller.
// Cim_ComputerSystem;CIM_Battery;ComputerSystemID;Manufacturer;Model;SerialNumber;BIOSVersion;FirmwareVersion;DriverVersion;Cim_ComputerSystem;CIM_Battery;
Battery.Discovery.Source(3).Type="TableJoint"
Battery.Discovery.Source(3).LeftTable=%Battery.Discovery.Source(2)%
Battery.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(18)%
Battery.Discovery.Source(3).LeftKeyColumn=1
Battery.Discovery.Source(3).RightKeyColumn=1
Battery.Discovery.Source(3).KeyType="Wbem"

// Keep only the Computer System and Battery paths.
// Cim_ComputerSystem;CIM_Battery
Battery.Discovery.Source(3).Compute(1).Type="KeepColumns"
Battery.Discovery.Source(3).Compute(1).ColumnNumbers="1,2"

// Attach the discovered batteries to the assocation table
// CIM_Battery;DeviceID;OperationalStatus;Cim_ComputerSystem;CIM_Battery
Battery.Discovery.Source(4).Type="TableJoint"
Battery.Discovery.Source(4).LeftTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Source(4).RightTable=%Battery.Discovery.Source(3)%
Battery.Discovery.Source(4).LeftKeyColumn=1
Battery.Discovery.Source(4).RightKeyColumn=2
Battery.Discovery.Source(4).KeyType="Wbem"

// As we've modified the Disk Controller's device id from its path to its name, we need to table join the controllers name
// CIM_Battery;DeviceID;OperationalStatus;Cim_ComputerSystem;CIM_Battery;ComputerSystemID;Dedicated;Name;
Battery.Discovery.Source(5).Type="TableJoint"
Battery.Discovery.Source(5).LeftTable=%Battery.Discovery.Source(4)%
Battery.Discovery.Source(5).RightTable=%DiskController.Discovery.Source(1)%
Battery.Discovery.Source(5).LeftKeyColumn=4
Battery.Discovery.Source(5).RightKeyColumn=1
Battery.Discovery.Source(5).KeyType="Wbem"

// Keep only the Computer System and Battery paths.
//      1           2           3                  4               5            6               7     8
// CIM_Battery;DeviceID;OperationalStatus;Cim_ComputerSystem;CIM_Battery;ComputerSystemID;Dedicated;Name;
// CIM_Battery;DeviceID;                                                                            ComputerSystemName;
Battery.Discovery.Source(5).Compute(1).Type="KeepColumns"
Battery.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,8"

// The Instance table
// CIM_Battery;DeviceID;ComputerSystemName;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(5)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceType="DiskController"

//
// Collect

// The physical disk collect is a "MultiInstance" collect
// Only ONE WBEM query will be done in order to get the information for all physical disks
// Less WBEM queries gives faster results
Battery.Collect.Type="MultiInstance"

// Source(1) = the only source = CIM_StorageVolume
// DeviceID;OperationalStatusArray;
Battery.Collect.Source(1).Type="WBEM"
Battery.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM CIM_Battery"
Battery.Collect.Source(1).WbemNameSpace=Automatic

// Duplicate the "OperationalStatusArray" column
// DeviceID;OperationalStatusArray;OperationalStatusArray;
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// We use a battery-specific translation table here because the '11' code should be WARN (as per DMTF) while in the real life, it's OK.
// DeviceID;PATROLStatusArray;Status
Battery.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="BatteryDMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID;PATROLStatusArray;StatusInformation
Battery.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Battery.Collect.Source(1).Compute(3).Column=3
Battery.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Battery.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID;PATROLStatus;StatusInformation
Battery.Collect.Source(1).Compute(4).Type="Convert"
Battery.Collect.Source(1).Compute(4).Column=2
Battery.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

// The BatteryDMTFOperationStatusTranslationTable
BatteryDMTFOperationStatusTranslationTable(2)="OK"
BatteryDMTFOperationStatusTranslationTable(3)="WARN"
BatteryDMTFOperationStatusTranslationTable(4)="WARN"
BatteryDMTFOperationStatusTranslationTable(5)="WARN"
BatteryDMTFOperationStatusTranslationTable(6)="ALARM"
BatteryDMTFOperationStatusTranslationTable(7)="ALARM"
BatteryDMTFOperationStatusTranslationTable(8)="WARN"
BatteryDMTFOperationStatusTranslationTable(9)="WARN"
BatteryDMTFOperationStatusTranslationTable(10)="ALARM"
BatteryDMTFOperationStatusTranslationTable(11)="OK"
BatteryDMTFOperationStatusTranslationTable(12)="ALARM"
BatteryDMTFOperationStatusTranslationTable(13)="ALARM"
BatteryDMTFOperationStatusTranslationTable(14)="ALARM"
BatteryDMTFOperationStatusTranslationTable(15)="WARN"
BatteryDMTFOperationStatusTranslationTable(16)="WARN"
BatteryDMTFOperationStatusTranslationTable(17)="OK"
BatteryDMTFOperationStatusTranslationTable(18)="OK"
BatteryDMTFOperationStatusTranslationTable(Default)="UNKNOWN"
