//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                MS_HW_PureStorage.hdf
//
//      Supports:  Pure Storage FA Series
//
//      Connects to:  The Pure Storage Management Card
//
//

//
// HEADER

hdf.DisplayName="Pure Storage FA Series (SSH)"
hdf.TypicalPlatform="Pure Storage"
hdf.ReliesOn="Pure Storage Management Card"
hdf.Version="1.0"
hdf.Comments="This connector discovers the environmental, physical disks, management network cards and fiber ports on Pure Storage FA Series arrays."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

// Test the  command
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="puredrive list"
Detection.Criteria(1).ExpectedResult="BAY"

//
// Enclosures
//

//
// Discovery

// Get the list of Hardware Components
//
Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="purehw list"

// Run this through awk EF2
// All         MSHW_Type;ID;Status;Status;CurrentReading;
// OtherDevice/Enc MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Discovery.Source(1).Compute(1).Separators=";"
Enclosure.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"

// Make a copy of Table 1 so that a clean copy can be used by other discoveries
// MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).RegExp="^MSHW_Enclosure$"


//as this command will be used for otherdevices and physical disks we run it during the enclosure discovery
Enclosure.Discovery.Source(3).Type="OsCommand"
Enclosure.Discovery.Source(3).CommandLine="puredrive list"

// Run this through awk EF1
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
Enclosure.Discovery.Source(3).Compute(1).Type="Awk"
Enclosure.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(3).Compute(1).Separators=";"
Enclosure.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW"

// Instances
// MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(8)
Enclosure.Discovery.Instance.Vendor="Pure Storage"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)


// Collect

// MultiInstance
Enclosure.Collect.Type="MultiInstance"

// Get the list of Hardware Components
//
Enclosure.Collect.Source(1).Type="OsCommand"
Enclosure.Collect.Source(1).CommandLine="purehw list"

// Run this through awk EF2
// All         MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
// OtherDevice/Enc MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Collect.Source(1).Compute(1).Separators=";"
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"

// Make a copy of Table 1 so that a clean copy can be used by other collects
// MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).RegExp="^MSHW_Enclosure$"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;DeviceType;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.Source(2).Compute(2).Type="Translate"
Enclosure.Collect.Source(2).Compute(2).Column=4
Enclosure.Collect.Source(2).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;DeviceType;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.Source(2).Compute(3).Type="Translate"
Enclosure.Collect.Source(2).Compute(3).Column=5
Enclosure.Collect.Source(2).Compute(3).TranslationTable="statusInformationTranslationTable"


//we run the command for other devices and physical disks collect
Enclosure.Collect.Source(3).Type="OsCommand"
Enclosure.Collect.Source(3).CommandLine="puredrive list"

// Run this through awk EF1
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
Enclosure.Collect.Source(3).Compute(1).Type="Awk"
Enclosure.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(3).Compute(1).Separators=";"
Enclosure.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW"

// Now translate  into OK/Warning/Alarm
// MSHW;ID;Type;PatrolStatus;Status;Capacity;Enclosure;DisplayID;
Enclosure.Collect.Source(3).Compute(2).Type="Translate"
Enclosure.Collect.Source(3).Compute(2).Column=4
Enclosure.Collect.Source(3).Compute(2).TranslationTable="driveTranslationTable"

// Translate Status Information
// MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
Enclosure.Collect.Source(3).Compute(3).Type="Translate"
Enclosure.Collect.Source(3).Compute(3).Column=5
Enclosure.Collect.Source(3).Compute(3).TranslationTable="driveInformationTranslationTable"


// Value Table
// MSHW_Type;DeviceType;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.DeviceID=ValueTable.Column(3)
Enclosure.Collect.Status=ValueTable.Column(4)
Enclosure.Collect.StatusInformation=ValueTable.Column(5)

// The status translation table
statusTranslationTable("ok")="OK"
statusTranslationTable("degraded")="WARN"
statusTranslationTable("failed")="ALARM"
statusTranslationTable("not_installed")="ALARM"
statusTranslationTable(Default)="ALARM"

// The status translation table
statusInformationTranslationTable("ok")=""
statusInformationTranslationTable("degraded")="Degraded"
statusInformationTranslationTable("failed")="Failed"
statusInformationTranslationTable("not_installed")="Missing"
// statusInformationTranslationTable(Default)=""

//
// Temperature

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).RegExp="^MSHW_Temperature$"

// InstanceTable = Source(1)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(7)
// Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(5)
// Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

//
//
// Collect

// Collect type is multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).RegExp="^MSHW_Temperature$"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=4
Temperature.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(5)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)

//
// Fan

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).RegExp="^MSHW_Fan$"

// InstanceTable = Source(1)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(7)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

//
//
// Collect

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).RegExp="^MSHW_Fan$"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=3
Fan.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=4
Fan.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)

//
// PowerSupply

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^MSHW_PSU$"

// InstanceTable = Source(1)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(7)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

//
//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=1
PowerSupply.Collect.Source(1).Compute(1).RegExp="^MSHW_PSU$"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=3
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=4
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(2)
PowerSupply.Collect.Status=ValueTable.Column(3)
PowerSupply.Collect.StatusInformation=ValueTable.Column(4)

//
// NetworkCard

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
NetworkCard.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
NetworkCard.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).RegExp="^MSHW_NetworkCard"

// InstanceTable = Source(1)
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

//
//
// Collect

// Collect type is multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
NetworkCard.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;LinkStatus
NetworkCard.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).RegExp="^MSHW_NetworkCard"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;LinkStatus
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=3
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=4
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"


// Translate Speed into Link
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=8
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="linkTranslationTable"

// ValueTable = Source(1)
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;LinkStatus
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(2)
NetworkCard.Collect.Status=ValueTable.Column(3)
NetworkCard.Collect.StatusInformation=ValueTable.Column(4)
NetworkCard.Collect.LinkStatus=ValueTable.Column(8)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(5)


// The drive translation table
linkTranslationTable(0)="WARN"
linkTranslationTable(Default)="OK"

//
// PhysicalDisk
//

//
// Discovery

// Get the list of Disk Components
//
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%


// Convert the size into bytes
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=6
PhysicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1073741824"


// Remove Nvram
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=3
PhysicalDisk.Discovery.Source(1).Compute(2).ValueList="NVRAM"

// Remove unused slots
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=4
PhysicalDisk.Discovery.Source(1).Compute(3).ValueList="unused"

// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(6)

//
// Collect

// Collect type is multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Get the list of Disk Components
//
PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(3)%


// ValueTable = Source(1)
// MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(4)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(5)


// The drive translation table
driveTranslationTable("healthy")="OK"
driveTranslationTable("foreign")="WARN"
driveTranslationTable("reachable")="WARN"
driveTranslationTable("failed")="ALARM"
driveTranslationTable("missing")="ALARM"
driveTranslationTable(Default)="ALARM"

// The drive translation table
driveInformationTranslationTable("healthy")="healthy"
driveInformationTranslationTable("foreign")="Drive is foreign to the array - "
driveInformationTranslationTable("reachable")="Reachable but not initialized - "
driveInformationTranslationTable("failed")="Failed - "
driveInformationTranslationTable("missing")="Missing - "
// driveInformationTranslationTable(Default)=""


//
// OtherDevices will contain IOM and NVRAM
//

//
// Discovery

//discover NVRAMs
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

//keeponly nvram
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=3
OtherDevice.Discovery.Source(1).Compute(1).ValueList="NVRAM"

//keeponly nvram
// MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
OtherDevice.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=4
OtherDevice.Discovery.Source(1).Compute(2).ValueList="unused"


//copy enclosure table to keep only otherdevice
OtherDevice.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only OtherDevice
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(2).Compute(1).Column=1
OtherDevice.Discovery.Source(2).Compute(1).ValueList="MSHW_OtherDevice"

//standardize both sources
// MSHW_Type;ID;IOM;Status;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Discovery.Source(2).Compute(2).Type="RightConcat"
OtherDevice.Discovery.Source(2).Compute(2).Column=2
OtherDevice.Discovery.Source(2).Compute(2).String=";IOM"


//tableunion of otherdevice.disco(1) and 2
OtherDevice.Discovery.Source(3).Type="TableUnion"
OtherDevice.Discovery.Source(3).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(3).Table2=%OtherDevice.Discovery.Source(2)%

//value table = source(3)
//MSHW_Type;ID;Type;Status;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(8)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(7)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(3)





//
//Collect


// Collect type is multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only components of basetype "system"
// MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).RegExp="^MSHW_OtherDevice"

// Now translate  into OK/Warning/Alarm
// MSHW_Type;ID;PatrolStatus;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=3
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Translate Status Information
// MSHW_Type;ID;PatrolStatus;StatusInformation;CurrentReading;Enclosure;DisplayID;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=4
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"

//standardize both sources
// MSHW_Type;ID;IOM;Status;Status;CurrentReading;Enclosure;DisplayID;
OtherDevice.Collect.Source(1).Compute(4).Type="RightConcat"
OtherDevice.Collect.Source(1).Compute(4).Column=2
OtherDevice.Collect.Source(1).Compute(4).String=";IOM"


/// Get the list of Disk Components
//
OtherDevice.Collect.Source(2)=%Enclosure.Collect.Source(3)%

//tableunion of otherdevice.collect(1) and 2
OtherDevice.Collect.Source(3).Type="TableUnion"
OtherDevice.Collect.Source(3).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(3).Table2=%OtherDevice.Collect.Source(2)%

// ValueTable = Source(3)
// MSHW;ID;Type;PatrolStatus;StatusInformation;Capacity;Enclosure;DisplayID;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.DeviceID=ValueTable.Column(2)
OtherDevice.Collect.Status=ValueTable.Column(4)
OtherDevice.Collect.StatusInformation=ValueTable.Column(5)


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parse the output of puredrive list
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {outputMatch = 0}
$1 ~ /[Nn]ame/ && $2 ~ /[Tt]ype/ && $3 ~ /[Ss]tatus/ && $4 ~ /[Cc]apacity/ {outputMatch = 1}
outputMatch == 1 && $4 ~ /^[0-9.]+/ {
      enclosure = $1 ; gsub ("[.].+","",enclosure);
      displayID = $1 ; gsub ("^.+[.]","",displayID);
      size = $4 ;
      if (size ~ /[Gg]/) {gsub(/[Gg]/,"",size) }
      if (size ~ /[Mm]/) {gsub(/[Mm]/,"",size); size = size / 1024}
      if (size ~ /[Tt]/) {gsub(/[Tt]/,"",size); size = size * 1024}
#            MSHW;ID;Type;Status;Status;Capacity;Enclosure;DisplayID;
      print "MSHW;" $1 ";" $2 ";" $3 ";" $3 ";" size ";" enclosure ";" displayID ";"
    }
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parse the output of purehw list
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {outputMatch = 0}
$1 ~ /[Nn]ame/ && $2 ~ /[Ss]tatus/ && $3 ~ /[Ii]dentify/ {outputMatch = 1}
outputMatch == 1 && $1 ~ /^[SC][HT][0-9]/ {
      type = $1 ;
      enclosure = $1 ; gsub ("[.].+","",enclosure);
      displayID = $1 ; gsub ("^.+[.]","",displayID);
      if ($2 ~ /not_installed/) {next}
      if (type ~ /^[SC][HT][0-9]+\.BAY/) {next}
      if (type ~ /^[SC][HT][0-9]+\.DRV/) {next}
     	if (type ~ /^CT[0-9]+$/) {type = "MSHW_Enclosure;Controller" }
     	if (type ~ /^[SC][HT][0-9]+\.FAN/) {type = "MSHW_Fan" ;
     		                             CurrentReading = $6 ; gsub (/rpm/,"",CurrentReading);
     		                            }
      if (type ~ /^[SC][HT][0-9]+\.PWR/) {type = "MSHW_PSU" }
      if (type ~ /^[SC][HT][0-9]+\.ETH/ || type ~ /^[SC][HT][0-9]+\.FC/ || type ~ /^[SC][HT][0-9]+\.SAS/ || type ~ /^[SC][HT][0-9]+\.IB/) {
      	                            type = "MSHW_NetworkCard"
      	      	                    CurrentReading = $6
      	      	                    LinkStatus = 1
      	      	                    if ($7 ~ /Gb/) {
      	      	                    	                            CurrentReading = CurrentReading * 1000
      	      	                    	                           }
      	                            if (CurrentReading == 0) {
      	                            	CurrentReading = ""
      	                            	LinkStatus = 0
      	                            	}
      	                           }
      if (type ~ /^SH[0-9]+$/) {type = "MSHW_Enclosure;Disk Shelf" }
      if (type ~ /^CH[0-9]+$/) {type = "MSHW_Enclosure;Chassis" }
      if (type ~ /^[SC][HT][0-9]+\.IOM/) {type = "MSHW_OtherDevice" }
#All         MSHW_Type;ID;Status;Status;CurrentReading;Enclosure;DisplayID;
#OtherDevice/Controller/Shelf MSHW_Type;DeviceType;ID;Status;Status;CurrentReading;Enclosure;DisplayID;LinkStatus;
      print type ";" $1 ";" $2 ";" $2";" CurrentReading ";" enclosure ";" displayID ";" LinkStatus ";"
     }
EmbeddedFile(2).End
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
