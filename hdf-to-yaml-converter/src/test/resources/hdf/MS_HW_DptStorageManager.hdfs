//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//              MS_HW_DptStorageManager.hdf
//
//      Supports: Adaptec RAID disk controllers (through the Adaptec Storage Manager SNMP sub-agent)
//
//

// HEADER

hdf.DisplayName="Adaptec Storage Manager (DPT)"
hdf.TypicalPlatform="Fujitsu-Siemens PRIMERGY"
hdf.ReliesOn="Adaptec Storage Manager"
hdf.Version="1.0"
hdf.Comments="This connector provides disk monitoring through the Adaptec Storage Manager SNMP sub-agent which supports all DPT-based Adaptec RAID controllers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.1597.1.2.1"

//
// DISK CONTROLLERS
//

//
// Discovery

// Source(1) = dptScsiHba SNMP table
// deviceID;ControllerNumber;Vendor;Model;Firmware;BiosSignature
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1597.1.2.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,3,4,32"

// InstanceTable = Source(1)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(3)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(5)
DiskController.Discovery.Instance.BIOSVersion=InstanceTable.Column(6)

//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = dptScsiDevTable
// ID;DeviceLevel;Vendor;Model;SerialNumber;Capacity;deviceType
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1597.1.4.1.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,3,4,5,7,10,35"

// Duplicate the ID column, with this column, we will try to retrieve the
// controller number. In fact, ID is like this: "0.0.1.0.0", and the first
// 0 represents (I guess) the controller number, and the 2nd 0 represents
// the bus number.
// ID;ID;DeviceLevel;Vendor;Model;SerialNumber;Capacity;deviceType
PhysicalDisk.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="1"

// Extract the first number, considering that it is just before a dot
// ID;ControllerNumber;DeviceLevel;Vendor;Model;SerialNumber;Capacity;deviceType
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Extract"
PhysicalDisk.Discovery.Source(1).Compute(2).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(2).SubColumn="1"
PhysicalDisk.Discovery.Source(1).Compute(2).SubSeparators="."

// Keep only device type = 1 (disk)
PhysicalDisk.Discovery.Source(1).Compute(3).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(3).Column="8"
PhysicalDisk.Discovery.Source(1).Compute(3).ValueList="1"

// Keep only device level 0 (= physical disks, not logical)
PhysicalDisk.Discovery.Source(1).Compute(4).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(4).Column="3"
PhysicalDisk.Discovery.Source(1).Compute(4).ValueList="0"

// Multiply the capacity column (in MB) by 1048576 to obtain the disk size in bytes
// ID;ControllerNumber;DeviceLevel;Vendor;Model;SerialNumber;CapacityInBytes;deviceType
PhysicalDisk.Discovery.Source(1).Compute(5).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(5).Column="7"
PhysicalDisk.Discovery.Source(1).Compute(5).MultiplyBy="1048576"

// Instance Table = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(6)

//
// Collect

// Collect type is: multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = the dptScsiDevTable
// DeviceID;Status;SmartStatus
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1597.1.4.1.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8,34"

// Duplicate the Status column
// DeviceID;Status;Status;SMARTStatus
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the first status value into a PATROL Status
// DeviceID;PATROLStatus;Status;SMARTStatus
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="2"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DiskStatusTranslationTable"

// Translate the second status value into a more readable information
// DeviceID;PATROLStatus;InformationStatus;SMARTStatus
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column="3"
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="DiskStatusInformationTranslationTable"

// Translate the original SMARTStatus into a true/false value that says if a failure is predicted
// DeviceID;PATROLStatus;InformationStatus;PredictedFailure
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column="4"
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskSMARTTranslationTable"

// The PhysicalDiskSMARTTranslationTable
PhysicalDiskSMARTTranslationTable(1)="false"
PhysicalDiskSMARTTranslationTable(2)="false"
PhysicalDiskSMARTTranslationTable(3)="false"
PhysicalDiskSMARTTranslationTable(4)="false"
PhysicalDiskSMARTTranslationTable(5)="true"

// The collect table = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(4)


//
// LOGICAL DISKS
//

//
// Discovery

// Source(1) = dptScsiDevTable
// ID;DeviceLevel;Capacity;deviceType
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1597.1.4.1.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,3,10,35"

// Duplicate the ID column, with this column, we will try to retrieve the
// controller number. In fact, ID is like this: "0.0.1.0.0", and the first
// 0 represents (I guess) the controller number, and the 2nd 0 represents
// the bus number.
// ID;ID;DeviceLevel;Capacity;deviceType
LogicalDisk.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Discovery.Source(1).Compute(1).Column="1"

// Extract the first number, considering that it is just before a dot
// ID;ControllerNumber;DeviceLevel;Capacity;deviceType
LogicalDisk.Discovery.Source(1).Compute(2).Type="Extract"
LogicalDisk.Discovery.Source(1).Compute(2).Column="2"
LogicalDisk.Discovery.Source(1).Compute(2).SubColumn="1"
LogicalDisk.Discovery.Source(1).Compute(2).SubSeparators="."

// Keep only device type = 1 (disk)
LogicalDisk.Discovery.Source(1).Compute(3).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(1).Compute(3).Column="5"
LogicalDisk.Discovery.Source(1).Compute(3).ValueList="1"

// Keep only device level 1 and 2 (= logical disks, not physical)
LogicalDisk.Discovery.Source(1).Compute(4).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(1).Compute(4).Column="3"
LogicalDisk.Discovery.Source(1).Compute(4).ValueList="1,2"

// Multiply the capacity column (in MB) by 1048576 to obtain the disk size in bytes
// ID;ControllerNumber;DeviceLevel;CapacityInBytes;deviceType
LogicalDisk.Discovery.Source(1).Compute(5).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(5).Column="4"
LogicalDisk.Discovery.Source(1).Compute(5).MultiplyBy="1048576"

// Source(2) = dptScsiArrTable
// DeviceID;RAIDType
LogicalDisk.Discovery.Source(2).Type="SnmpTable"
LogicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.1597.1.5.1.1"
LogicalDisk.Discovery.Source(2).SnmpTableSelectColumns="ID,1"

// Keep only valid RAIDType values
LogicalDisk.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(2).Compute(1).Column="2"
LogicalDisk.Discovery.Source(2).Compute(1).ValueList="3,4,5,6,7,8"

// Translate the RAIDType into a RAID Level number
LogicalDisk.Discovery.Source(2).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(2).Compute(2).Column="2"
LogicalDisk.Discovery.Source(2).Compute(2).TranslationTable="RAIDLevelTranslationTable"

// The RAIDLevelTranslationTable
RAIDLevelTranslationTable(3)="0"
RAIDLevelTranslationTable(4)="1"
RAIDLevelTranslationTable(5)="5"
RAIDLevelTranslationTable(6)="Redirected"
RAIDLevelTranslationTable(7)="Hot-spare"
RAIDLevelTranslationTable(8)="jbod"
RAIDLevelTranslationTable(Default)="Unknown"

// Source(3) = joint between source(1) (left) and source(2) (right)
// ID;ControllerNumber;DeviceLevel;CapacityInBytes;deviceType;DeviceID;RAIDLevel
LogicalDisk.Discovery.Source(3).Type="TableJoint"
LogicalDisk.Discovery.Source(3).LeftTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).RightTable=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(3).LeftKeyColumn="1"
LogicalDisk.Discovery.Source(3).RightKeyColumn="1"

// Instance Table = Source(3)
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(7)


// Collect
//

// Collect type is: multi-instance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = the dptScsiDevTable
// DeviceID;Status
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1597.1.4.1.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8"

// Duplicate the Status column
// DeviceID;Status;Status
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the first status value into a PATROL Status
// DeviceID;PATROLStatus;Status
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="2"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="DiskStatusTranslationTable"

// Translate the second status value into a more readable information
// DeviceID;PATROLStatus;InformationStatus
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="3"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="DiskStatusInformationTranslationTable"

// The collect table = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


// The DiskStatusTranslationTable (for physical AND logical disks)
DiskStatusTranslationTable(1)="OK"
DiskStatusTranslationTable(2)="OK"
DiskStatusTranslationTable(3)="OK"
DiskStatusTranslationTable(4)="ALARM"
DiskStatusTranslationTable(5)="WARN"
DiskStatusTranslationTable(6)="OK"
DiskStatusTranslationTable(7)="OK"
DiskStatusTranslationTable(8)="ALARM"
DiskStatusTranslationTable(9)="OK"
DiskStatusTranslationTable(10)="WARN"
DiskStatusTranslationTable(11)="OK"
DiskStatusTranslationTable(12)="WARN"
DiskStatusTranslationTable(13)="OK"
DiskStatusTranslationTable(14)="OK"
DiskStatusTranslationTable(Default)="UNKNOWN"

// The DiskStatusInformationTranslationTable (for physical AND logical disks)
DiskStatusInformationTranslationTable(1)="Invalid"
DiskStatusInformationTranslationTable(2)=""
DiskStatusInformationTranslationTable(3)="Verifying"
DiskStatusInformationTranslationTable(4)="Failed"
DiskStatusInformationTranslationTable(5)="Warning"
DiskStatusInformationTranslationTable(6)="Formatting"
DiskStatusInformationTranslationTable(7)="Format certifying"
DiskStatusInformationTranslationTable(8)="Missing"
DiskStatusInformationTranslationTable(9)="Not created yet"
DiskStatusInformationTranslationTable(10)="Degraded"
DiskStatusInformationTranslationTable(11)="Building"
DiskStatusInformationTranslationTable(12)="Rebuilding"
DiskStatusInformationTranslationTable(13)="Verify fixing"
DiskStatusInformationTranslationTable(14)="Abort activity"
DiskStatusInformationTranslationTable(Default)="Unknown Status"

