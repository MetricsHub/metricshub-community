//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                MS_HW_SunPrtpicl.hdf
//
//      Supports: Sun SPARC machines running Solaris 10
//		Monitors: environment (temperatures, fans, power supplies and voltages)
//      Connects to: prtpicl
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun Solaris - Environment (prtpicl)"
hdf.TypicalPlatform="Oracle/Sun"
hdf.ReliesOn="Sun Solaris system commands (prtpicl, etc.)"
hdf.Comments="Gives environmental information (temperatures, fans, etc.) on several Sun platforms through the prtpicl utility. This connector is mainly to be used on Solaris 10 systems."
hdf.Version="1.4"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Solaris"
hdf.Supersedes="MS_HW_SunScSnapshot.hdf,MS_HW_IpmiTool.hdf"

//
// DETECTION
//

// OS should be SunOS or Solaris
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="SunOS,Solaris"

// Only on sun4u systems
//Detection.Criteria(2).Type="OSCommand"
//Detection.Criteria(2).CommandLine="/bin/uname -m"
//Detection.Criteria(2).ExpectedResult="^sun4u$"

// we should find the prtpicl utility
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="/bin/ls /usr/sbin/prtpicl"
Detection.Criteria(2).ExpectedResult="^/usr/sbin/prtpicl$"

// prtpicl should return something when asked for temperatures
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="/usr/sbin/prtpicl -v -c temperature-sensor;/usr/sbin/prtpicl -v -c temperature-indicator"
Detection.Criteria(3).ExpectedResult="\(Temperature[ \t]+[0-9]\)\|\(Condition[ \t]+[A-Za-z]\)"

// check that prtld hasn't failed
Detection.Criteria(4).Type="OSCommand"
Detection.Criteria(4).CommandLine="PRTPICLCOUNT=`pgrep prtpicl|wc -l` ; if /bin/test $PRTPICLCOUNT -lt 30; then echo MSHW_prtld_OK; else echo $PRTPICLCOUNT prtpicl processes running - suspect prtld service failure; fi"
Detection.Criteria(4).ExpectedResult="MSHW_prtld_OK"

//
// COMPUTER
//

//
// Discovery

// Source(1) = the output of /usr/sbin/prtpicl -v|awk '/:PlatformName/ { print $0; exit; }'
// ModelString
Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="/usr/sbin/prtpicl -v|/usr/bin/awk '/:PlatformName/ { print $0; exit; }'"
Enclosure.Discovery.Source(1).TimeOut=90
Enclosure.Discovery.Source(1).KeepOnlyRegExp=":PlatformName"
Enclosure.Discovery.Source(1).Separators=" "
Enclosure.Discovery.Source(1).SelectColumns="2"

// Extract what is after the comma
// ModelString is originally like SUNW,Sun-Fire-240
// We just want Sun-Fire-240
Enclosure.Discovery.Source(1).Compute(1).Type="Extract"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).SubSeparators=","
Enclosure.Discovery.Source(1).Compute(1).SubColumn=2

// Replace dashes with spaces
Enclosure.Discovery.Source(1).Compute(2).Type="Replace"
Enclosure.Discovery.Source(1).Compute(2).Column=1
Enclosure.Discovery.Source(1).Compute(2).Replace="-"
Enclosure.Discovery.Source(1).Compute(2).ReplaceBy=" "

// Replace GPUS with "Fujitsu PRIMEPOWER"
Enclosure.Discovery.Source(1).Compute(3).Type="Replace"
Enclosure.Discovery.Source(1).Compute(3).Column=1
Enclosure.Discovery.Source(1).Compute(3).Replace="GPUS"
Enclosure.Discovery.Source(1).Compute(3).ReplaceBy="Fujitsu PRIMEPOWER"


// Source(2) = output of prtpicl
Enclosure.Discovery.Source(2).Type="OsCommand"
Enclosure.Discovery.Source(2).CommandLine="/usr/sbin/prtpicl"

// Parse the output of prtpicl with an AWK script to get the path of each devices
// DeviceID;Class;DevicePath;DisplayID;
Enclosure.Discovery.Source(2).Compute(1).Type="Awk"
Enclosure.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(6)
Enclosure.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Discovery.Source(2).Compute(1).Separators=";"
Enclosure.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5"


// The discovery table
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="SUN"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"

//
// FANS
//

//
// Discovery

// Source(1) = the output of "/usr/sbin/prtpicl -v -c fan;/usr/sbin/prtpicl -v -c rpm-sensor"
// prtpicl line
Fan.Discovery.Source(1).Type="OsCommand"
Fan.Discovery.Source(1).CommandLine="/usr/sbin/prtpicl -v -c fan;/usr/sbin/prtpicl -v -c rpm-sensor"

// Send prtpicl's output to awk and get a beautiful table of fans
// DeviceID;Description;WarningThreshold;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;WarningThresholdHex;
Fan.Discovery.Source(1).Compute(1).Type="Awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Fan.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Discovery.Source(1).Compute(1).Separators=";"
Fan.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6,7,8,9,10"

// Convert WarningThresholdHex from hex2dec
// DeviceID;Description;WarningThreshold;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;WarningThresholdHex;
Fan.Discovery.Source(1).Compute(2).Type="Convert"
Fan.Discovery.Source(1).Compute(2).Column=9
Fan.Discovery.Source(1).Compute(2).ConversionType="hex2dec"

// Left Concat the Hex Value to the Dec Value (One of the two should be empty) for all three values
// DeviceID;Description;WarningThreshold;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;WarningThresholdHex;
Fan.Discovery.Source(1).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).String=Column(9)

Fan.Discovery.Source(1).Compute(4).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(4).Column=4
Fan.Discovery.Source(1).Compute(4).String=Column(7)

Fan.Discovery.Source(1).Compute(5).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(5).Column=5
Fan.Discovery.Source(1).Compute(5).String=Column(8)

// Table joint with Enclosure.discovery.source(2)
// DeviceID;Description;WarningThreshold;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;WarningThresholdHex;DeviceID;Class;DevicePath;DisplayID;
Fan.Discovery.Source(2).Type="TableJoint"
Fan.Discovery.Source(2).LeftTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(2)%
Fan.Discovery.Source(2).LeftKeyColumn=1
Fan.Discovery.Source(2).RightKeyColumn=1
// Removed as this causes devices with no device ID to be created and later missing.
// Fan.Discovery.Source(2).DefaultRightLine=";;;"

Fan.Discovery.Source(2).Compute(1).Type="DuplicateColumn"
Fan.Discovery.Source(2).Compute(1).Column=12

Fan.Discovery.Source(2).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(2).Compute(2).Column=13
Fan.Discovery.Source(2).Compute(2).String="Device Path: "

// The instance table
// DeviceID;Description;WarningThreshold;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;WarningThresholdHex;DeviceID;Class;DevicePath;DisplayID;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(2)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(12)
// Fan.Discovery.Instance.FanType=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(14)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Fan.Discovery.Instance.PercentWarningThreshold=10
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(4)
Fan.Discovery.Instance.ParameterActivation.SpeedPercent=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(13)

//
// Collect

// Collect type is "all instances in one shot"
Fan.Collect.Type="MultiInstance"

// Source(1) = the output of "/usr/sbin/prtpicl -v -c fan;/usr/sbin/prtpicl -v -c rpm-sensor"
// prtpicl line
Fan.Collect.Source(1).Type="OsCommand"
Fan.Collect.Source(1).CommandLine="/usr/sbin/prtpicl -v -c fan;/usr/sbin/prtpicl -v -c rpm-sensor"

// Send prtpicl's output to awk and get a beautiful table of fans
// DeviceID;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(1).Type="Awk"
Fan.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Fan.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Collect.Source(1).Compute(1).Separators=";"
Fan.Collect.Source(1).Compute(1).SelectColumns="2,5,6,7,8,9"


// Convert SpeedHex from hex2dec
// DeviceID;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(2).Type="Convert"
Fan.Collect.Source(1).Compute(2).Column=5
Fan.Collect.Source(1).Compute(2).ConversionType="hex2dec"

// Convert SpeedPercentHex from hex2dec
// DeviceID;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(3).Type="Convert"
Fan.Collect.Source(1).Compute(3).Column=6
Fan.Collect.Source(1).Compute(3).ConversionType="hex2dec"

// Left Concat the Hex Value to the Dec Value (One of the two should be empty) for all three values
// DeviceID;Speed;SpeedPercent;Status;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(4).Type="LeftConcat"
Fan.Collect.Source(1).Compute(4).Column=2
Fan.Collect.Source(1).Compute(4).String=Column(5)

Fan.Collect.Source(1).Compute(5).Type="LeftConcat"
Fan.Collect.Source(1).Compute(5).Column=3
Fan.Collect.Source(1).Compute(5).String=Column(6)


// Duplicate the status column
// DeviceID;Speed;SpeedPercent;Status;StatusInformation;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(6).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(6).Column=4

// Translate the status
// DeviceID;Speed;SpeedPercent;PATROLStatus;StatusInformation;SpeedHex;SpeedPercentHex;
Fan.Collect.Source(1).Compute(7).Type="Translate"
Fan.Collect.Source(1).Compute(7).Column=4
Fan.Collect.Source(1).Compute(7).TranslationTable="PrtDiagStatusTranslationTable"

// The PrtDiagStatusTranslationTable
PrtDiagStatusTranslationTable(Default)="ALARM"
PrtDiagStatusTranslationTable("unknown")="UNKNOWN"
PrtDiagStatusTranslationTable("Normal")="OK"
PrtDiagStatusTranslationTable("[NO_FAULT]")="OK"
PrtDiagStatusTranslationTable("[NO_FAULT")="OK"
PrtDiagStatusTranslationTable("NO_FAULT")="OK"
PrtDiagStatusTranslationTable("(OK)")="OK"
PrtDiagStatusTranslationTable("Green")="OK"
PrtDiagStatusTranslationTable("OK")="OK"
PrtDiagStatusTranslationTable("[OK")="OK"
PrtDiagStatusTranslationTable("okay")="OK"
PrtDiagStatusTranslationTable("self-regulating")="OK"
PrtDiagStatusTranslationTable("self")="OK"
PrtDiagStatusTranslationTable("GOOD")="OK"
PrtDiagStatusTranslationTable("UNPLUGGED")="OK"
PrtDiagStatusTranslationTable("pass")="OK"
PrtDiagStatusTranslationTable("no_status")="OK"
PrtDiagStatusTranslationTable("")="OK"
PrtDiagStatusTranslationTable("TooSlow")="WARN"


// Table joint with Enclosure.discovery.source(2)
// DeviceID;Speed;SpeedPercent;PATROLStatus;StatusInformation;SpeedHex;SpeedPercentHex;DeviceID;Class;DevicePath;
Fan.Collect.Source(2).Type="TableJoint"
Fan.Collect.Source(2).LeftTable=%Fan.Collect.Source(1)%
Fan.Collect.Source(2).RightTable=%Enclosure.Discovery.Source(2)%
Fan.Collect.Source(2).LeftKeyColumn=1
Fan.Collect.Source(2).RightKeyColumn=1
// Fan.Collect.Source(2).DefaultRightLine=";;;"

// CollectTable = Source(1)
// DeviceID;Speed;SpeedPercent;PATROLStatus;StatusInformation;SpeedHex;SpeedPercentHex;DeviceID;Class;DevicePath;
Fan.Collect.ValueTable=%Fan.Collect.Source(2)%
Fan.Collect.DeviceID=ValueTable.Column(10)
Fan.Collect.Speed=ValueTable.Column(2)
Fan.Collect.SpeedPercent=ValueTable.Column(3)
Fan.Collect.Status=ValueTable.Column(4)
Fan.Collect.StatusInformation=ValueTable.Column(5)


//
// TEMPERATURES
//

//
// Discovery

// Source(1) = the output of "/usr/sbin/prtpicl -v -c temperature-sensor"
// prtpicl line
Temperature.Discovery.Source(1).Type="OsCommand"
Temperature.Discovery.Source(1).CommandLine="/usr/sbin/prtpicl -v -c temperature-sensor"

// Send prtpicl's output to awk and get a beautiful table of Temperatures
// DeviceID;Location;WarningThreshold;Temperature;EmptyStatus;
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6"


// Source(2) = the output of "/usr/sbin/prtpicl -v -c temperature-indicator"
// prtpicl line
Temperature.Discovery.Source(2).Type="OsCommand"
Temperature.Discovery.Source(2).CommandLine="/usr/sbin/prtpicl -v -c temperature-indicator"

// Send prtpicl's output to awk and get a beautiful table of Temperatures
// DeviceID;Location;WarningThreshold;Temperature;EmptyStatus;
Temperature.Discovery.Source(2).Compute(1).Type="Awk"
Temperature.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(3)
Temperature.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(2).Compute(1).Separators=";"
Temperature.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5,6"

// Source(3) = Table union of Source(1) and Source(2)
// DeviceID;Location;WarningThreshold;Temperature;EmptyStatus;
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%

// Table joint with Enclosure.discovery.source(2)
// DeviceID;Location;WarningThreshold;Temperature;EmptyStatus;DeviceID;Class;DevicePath;DisplayID;
Temperature.Discovery.Source(4).Type="TableJoint"
Temperature.Discovery.Source(4).LeftTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
Temperature.Discovery.Source(4).LeftKeyColumn=1
Temperature.Discovery.Source(4).RightKeyColumn=1
// Temperature.Discovery.Source(4).DefaultRightLine=";;;"

Temperature.Discovery.Source(4).Compute(1).Type="DuplicateColumn"
Temperature.Discovery.Source(4).Compute(1).Column=8

Temperature.Discovery.Source(4).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(4).Compute(2).Column=9
Temperature.Discovery.Source(4).Compute(2).String="Device Path: "

// InstanceTable = Source(4)
// DeviceID;Location;WarningThreshold;Temperature;EmptyStatus;DeviceID;Class;DevicePath;DisplayID;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(4)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(8)
// Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(10)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)
Temperature.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)


//
// Collect

// Collect type is all instances in one single shot
Temperature.Collect.Type="MultiInstance"

// Source(1) = the output of "/usr/sbin/prtpicl -v -c temperature-sensor"
// prtpicl line
Temperature.Collect.Source(1).Type="OsCommand"
Temperature.Collect.Source(1).CommandLine="/usr/sbin/prtpicl -v -c temperature-sensor"

// Send prtpicl's output to awk and get a beautiful table of Temperatures
// DeviceID;Temperature;EmptyStatus
Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Temperature.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Collect.Source(1).Compute(1).Separators=";"
Temperature.Collect.Source(1).Compute(1).SelectColumns="2,5,6"


// Source(2) = the output of "/usr/sbin/prtpicl -v -c temperature-indicator"
// prtpicl line
Temperature.Collect.Source(2).Type="OsCommand"
Temperature.Collect.Source(2).CommandLine="/usr/sbin/prtpicl -v -c temperature-indicator"

// Send prtpicl's output to awk and get a beautiful table of Temperatures
// DeviceID;EmptyTemperature;Status
Temperature.Collect.Source(2).Compute(1).Type="Awk"
Temperature.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(3)
Temperature.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Collect.Source(2).Compute(1).Separators=";"
Temperature.Collect.Source(2).Compute(1).SelectColumns="2,5,6"


// Source(3) = Table union of Source(1) and Source(2)
// DeviceID;Temperature;Status
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%

// Duplicate the Status column
// DeviceID;Temperature;Status;StatusInformation
Temperature.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(3).Compute(1).Column=3

// Translate the first Status column into a PATROL Status
// DeviceID;CurrentValue;PATROLStatus;StatusInformation
Temperature.Collect.Source(3).Compute(2).Type="Translate"
Temperature.Collect.Source(3).Compute(2).Column=3
Temperature.Collect.Source(3).Compute(2).TranslationTable="PrtDiagStatusTranslationTable"

// Table joint with Enclosure.discovery.source(2)
// DeviceID;CurrentValue;PATROLStatus;StatusInformation;DeviceID;Class;DevicePath;
Temperature.Collect.Source(4).Type="TableJoint"
Temperature.Collect.Source(4).LeftTable=%Temperature.Collect.Source(3)%
Temperature.Collect.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
Temperature.Collect.Source(4).LeftKeyColumn=1
Temperature.Collect.Source(4).RightKeyColumn=1
// Temperature.Collect.Source(4).DefaultRightLine=";;;"

// Collect table = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(4)%
Temperature.Collect.DeviceID=ValueTable.Column(7)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)


//
// VOLTAGE
//

//
// Discovery

// Source(1) = the output of "/usr/sbin/prtpicl -v -c voltage-sensor"
// prtpicl line
Voltage.Discovery.Source(1).Type="OsCommand"
Voltage.Discovery.Source(1).CommandLine="/usr/sbin/prtpicl -v -c voltage-sensor"

// Send prtpicl's output to awk and get a beautiful table of Voltages
// DeviceID;VoltageName;LowerThreshold;UpperThreshold;Voltage;Status;
Voltage.Discovery.Source(1).Compute(1).Type="Awk"
Voltage.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
Voltage.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Discovery.Source(1).Compute(1).Separators=";"
Voltage.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6,7"

// Convert LowerThreshold from V to mV
// DeviceID;VoltageName;LowerThresholdmV;UpperThreshold;Voltage;Status;
Voltage.Discovery.Source(1).Compute(2).Type="Multiply"
Voltage.Discovery.Source(1).Compute(2).Column=3
Voltage.Discovery.Source(1).Compute(2).MultiplyBy=1000

// Convert UpperThreshold from V to mV
// DeviceID;VoltageName;LowerThresholdmV;UpperThresholdmV;Voltage;Status;
Voltage.Discovery.Source(1).Compute(3).Type="Multiply"
Voltage.Discovery.Source(1).Compute(3).Column=4
Voltage.Discovery.Source(1).Compute(3).MultiplyBy=1000

// Source(2) = the output of "/usr/sbin/prtpicl -v -c voltage-indicator"
// prtpicl line
Voltage.Discovery.Source(2).Type="OsCommand"
Voltage.Discovery.Source(2).CommandLine="/usr/sbin/prtpicl -v -c voltage-indicator"

// Send prtpicl's output to awk and get a beautiful table of Voltages
// DeviceID;VoltageName;EmptyLowerThreshold;EmptyUpperThreshold;Voltage;Status;
Voltage.Discovery.Source(2).Compute(1).Type="Awk"
Voltage.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(5)
Voltage.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Discovery.Source(2).Compute(1).Separators=";"
Voltage.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5,6,7"


// Source(3) = Table union of Source(1) and Source(2)
// DeviceID;VoltageName;LowerThreshold;UpperThreshold;Voltage;Status;
Voltage.Discovery.Source(3).Type="TableUnion"
Voltage.Discovery.Source(3).Table1=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Source(3).Table2=%Voltage.Discovery.Source(2)%

// Table joint with Enclosure.discovery.source(2)
// DeviceID;VoltageName;LowerThreshold;UpperThreshold;Voltage;Status;DeviceID;Class;DevicePath;DisplayID;
Voltage.Discovery.Source(4).Type="TableJoint"
Voltage.Discovery.Source(4).LeftTable=%Voltage.Discovery.Source(3)%
Voltage.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
Voltage.Discovery.Source(4).LeftKeyColumn=1
Voltage.Discovery.Source(4).RightKeyColumn=1
// Voltage.Discovery.Source(4).DefaultRightLine=";;;"

Voltage.Discovery.Source(4).Compute(1).Type="DuplicateColumn"
Voltage.Discovery.Source(4).Compute(1).Column=9

Voltage.Discovery.Source(4).Compute(2).Type="LeftConcat"
Voltage.Discovery.Source(4).Compute(2).Column=10
Voltage.Discovery.Source(4).Compute(2).String="Device Path: "

// InstanceTable = Source(3)
// DeviceID;VoltageName;LowerThreshold;UpperThreshold;Voltage;Status;DeviceID;Class;DevicePath;DisplayID;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(4)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(9)
// Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(11)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(5)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Voltage.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)

//
// Collect

// Collect type is all instances in one single shot
Voltage.Collect.Type="MultiInstance"

// Source(1) = the output of "/usr/sbin/prtpicl -v -c voltage-sensor"
// prtpicl line
Voltage.Collect.Source(1).Type="OsCommand"
Voltage.Collect.Source(1).CommandLine="/usr/sbin/prtpicl -v -c voltage-sensor"

// Send prtpicl's output to awk and get a beautiful table of Voltages
// DeviceID;Voltage;EmptyStatus
Voltage.Collect.Source(1).Compute(1).Type="Awk"
Voltage.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
Voltage.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Collect.Source(1).Compute(1).Separators=";"
Voltage.Collect.Source(1).Compute(1).SelectColumns="2,6,7"

// Convert LowerThreshold from V to mV
// DeviceID;VoltagemV;EmptyStatus
Voltage.Collect.Source(1).Compute(2).Type="Multiply"
Voltage.Collect.Source(1).Compute(2).Column=2
Voltage.Collect.Source(1).Compute(2).MultiplyBy=1000

// Source(2) = the output of "/usr/sbin/prtpicl -v -c voltage-indicator"
// prtpicl line
Voltage.Collect.Source(2).Type="OsCommand"
Voltage.Collect.Source(2).CommandLine="/usr/sbin/prtpicl -v -c voltage-indicator"

// Send prtpicl's output to awk and get a beautiful table of Temperatures
// DeviceID;EmptyVoltage;Status
Voltage.Collect.Source(2).Compute(1).Type="Awk"
Voltage.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(5)
Voltage.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
Voltage.Collect.Source(2).Compute(1).Separators=";"
Voltage.Collect.Source(2).Compute(1).SelectColumns="2,6,7"


// Source(3) = Table union of Source(1) and Source(2)
// DeviceID;Voltage;Status
Voltage.Collect.Source(3).Type="TableUnion"
Voltage.Collect.Source(3).Table1=%Voltage.Collect.Source(1)%
Voltage.Collect.Source(3).Table2=%Voltage.Collect.Source(2)%

// Duplicate the Status column
// DeviceID;Voltage;Status;StatusInformation
Voltage.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(3).Compute(1).Column=3

// Translate the first Status column into a PATROL Status
// DeviceID;Voltage;PATROLStatus;StatusInformation
Voltage.Collect.Source(3).Compute(2).Type="Translate"
Voltage.Collect.Source(3).Compute(2).Column=3
Voltage.Collect.Source(3).Compute(2).TranslationTable="PrtDiagStatusTranslationTable"

// Table joint with Enclosure.discovery.source(2)
// DeviceID;Voltage;PATROLStatus;StatusInformation;DeviceID;Class;DevicePath;
Voltage.Collect.Source(4).Type="TableJoint"
Voltage.Collect.Source(4).LeftTable=%Voltage.Collect.Source(3)%
Voltage.Collect.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
Voltage.Collect.Source(4).LeftKeyColumn=1
Voltage.Collect.Source(4).RightKeyColumn=1
// Voltage.Collect.Source(4).DefaultRightLine=";;;"

// Collect table = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(4)%
Voltage.Collect.DeviceID=ValueTable.Column(7)
Voltage.Collect.Voltage=ValueTable.Column(2)
Voltage.Collect.Status=ValueTable.Column(3)
Voltage.Collect.StatusInformation=ValueTable.Column(4)


//
// LEDs (The first connector to explore this mysterious area)
//

//
// Discovery

// Source(1) = the output of "/usr/sbin/prtpicl -v -c led"
// prtpicl line
LED.Discovery.Source(1).Type="OsCommand"
LED.Discovery.Source(1).CommandLine="/usr/sbin/prtpicl -v -c led"

// Send prtpicl's output to awk and get a beautiful table of LEDs
// DeviceID;Description;Color/Name;
LED.Discovery.Source(1).Compute(1).Type="Awk"
LED.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
LED.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LED.Discovery.Source(1).Compute(1).Separators=";"
LED.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// Duplicate the Color column
// DeviceID;Description;Color/Name;Color/Name;Color/Name;Color/Name;
LED.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
LED.Discovery.Source(1).Compute(2).Column=3
LED.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
LED.Discovery.Source(1).Compute(3).Column=3
LED.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
LED.Discovery.Source(1).Compute(4).Column=3

// Translate the second Color column into a OnStatus
// DeviceID;Description;Color/Name;OnStatus;Color/Name;Color/Name;
LED.Discovery.Source(1).Compute(5).Type="Translate"
LED.Discovery.Source(1).Compute(5).Column=4
LED.Discovery.Source(1).Compute(5).TranslationTable="LEDColor2OnStatusTranslationTable"

// LEDColor2OnStatusTranslationTable
// The Awk Script will first take the color if available, if not translate on the description
LEDColor2OnStatusTranslationTable("amber")="ALARM"
LEDColor2OnStatusTranslationTable("red")="ALARM"
LEDColor2OnStatusTranslationTable("blue")="OK"
LEDColor2OnStatusTranslationTable("white")="OK"
LEDColor2OnStatusTranslationTable("green")="OK"
LEDColor2OnStatusTranslationTable("orange")="OK"

LEDColor2OnStatusTranslationTable("SERVICE")="ALARM"
LEDColor2OnStatusTranslationTable("FAULT")="ALARM"
LEDColor2OnStatusTranslationTable("LOCATE")="OK"
LEDColor2OnStatusTranslationTable("ACTIVITY")="OK"
LEDColor2OnStatusTranslationTable("OK")="OK"
LEDColor2OnStatusTranslationTable(Default)="OK"

// Translate the third Color column into a BlinkingStatus
// DeviceID;Description;Color/Name;OnStatus;BlinkingStatus;Color/Name;
LED.Discovery.Source(1).Compute(6).Type="Translate"
LED.Discovery.Source(1).Compute(6).Column=5
LED.Discovery.Source(1).Compute(6).TranslationTable="LEDColor2BlinkingStatusTranslationTable"

// The LEDColor2BlinkingStatusTranslationTable
LEDColor2BlinkingStatusTranslationTable("amber")="WARN"
LEDColor2BlinkingStatusTranslationTable("red")="WARN"
LEDColor2BlinkingStatusTranslationTable("blue")="OK"
LEDColor2BlinkingStatusTranslationTable("white")="OK"
LEDColor2BlinkingStatusTranslationTable("green")="OK"
LEDColor2BlinkingStatusTranslationTable("orange")="OK"

LEDColor2BlinkingStatusTranslationTable("SERVICE")="ALARM"
LEDColor2BlinkingStatusTranslationTable("FAULT")="ALARM"
LEDColor2BlinkingStatusTranslationTable("LOCATE")="OK"
LEDColor2BlinkingStatusTranslationTable("ACTIVITY")="OK"
LEDColor2BlinkingStatusTranslationTable("OK")="OK"
LEDColor2BlinkingStatusTranslationTable(Default)="WARN"

// Translate the fourth Color column into a OffStatus
// DeviceID;Description;Color/Name;OnStatus;BlinkingStatus;OffStatus;
LED.Discovery.Source(1).Compute(7).Type="Translate"
LED.Discovery.Source(1).Compute(7).Column=6
LED.Discovery.Source(1).Compute(7).TranslationTable="LEDColor2OffStatusTranslationTable"

// The LEDColor2OffStatusTranslationTable
LEDColor2OffStatusTranslationTable("amber")="OK"
LEDColor2OffStatusTranslationTable("red")="OK"
LEDColor2OffStatusTranslationTable("blue")="OK"
LEDColor2OffStatusTranslationTable("white")="OK"
LEDColor2OffStatusTranslationTable("green")="OK"
LEDColor2OffStatusTranslationTable("orange")="OK"

LEDColor2OffStatusTranslationTable("SERVICE")="OK"
LEDColor2OffStatusTranslationTable("FAULT")="OK"
LEDColor2OffStatusTranslationTable("LOCATE")="OK"
LEDColor2OffStatusTranslationTable("ACTIVITY")="OK"
LEDColor2OffStatusTranslationTable("OK")="OK"
LEDColor2OffStatusTranslationTable(Default)="OK"

// Table joint with Enclosure.discovery.source(2)
// DeviceID;Description;Color;OnStatus;BlinkingStatus;OffStatus;DeviceID;Class;DevicePath;DisplayID;
LED.Discovery.Source(2).Type="TableJoint"
LED.Discovery.Source(2).LeftTable=%LED.Discovery.Source(1)%
LED.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(2)%
LED.Discovery.Source(2).LeftKeyColumn=1
LED.Discovery.Source(2).RightKeyColumn=1
// LED.Discovery.Source(2).DefaultRightLine=";;;"

LED.Discovery.Source(2).Compute(1).Type="DuplicateColumn"
LED.Discovery.Source(2).Compute(1).Column=9

LED.Discovery.Source(2).Compute(2).Type="LeftConcat"
LED.Discovery.Source(2).Compute(2).Column=10
LED.Discovery.Source(2).Compute(2).String="Device Path: "

// The instance table
// DeviceID;Description;Color;OnStatus;BlinkingStatus;OffStatus;DeviceID;Class;DevicePath;DisplayID;
LED.Discovery.InstanceTable=%LED.Discovery.Source(2)%
LED.Discovery.Instance.DeviceID=InstanceTable.Column(9)
// LED.Discovery.Instance.Name=InstanceTable.Column(2)
LED.Discovery.Instance.DisplayID=InstanceTable.Column(11)
LED.Discovery.Instance.Color=InstanceTable.Column(3)
LED.Discovery.Instance.OnStatus=InstanceTable.Column(4)
LED.Discovery.Instance.BlinkingStatus=InstanceTable.Column(5)
LED.Discovery.Instance.OffStatus=InstanceTable.Column(6)
LED.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)


//
// Collect

// Collect type is multi-instance
LED.Collect.Type="MultiInstance"

// Source(1) = the output of "/usr/sbin/prtpicl -v -c led"
// prtpicl line
LED.Collect.Source(1).Type="OsCommand"
LED.Collect.Source(1).CommandLine="/usr/sbin/prtpicl -v -c led"

// Send prtpicl's output to awk and get a beautiful table of fans
// DeviceID;State;
LED.Collect.Source(1).Compute(1).Type="Awk"
LED.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
LED.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LED.Collect.Source(1).Compute(1).Separators=";"
LED.Collect.Source(1).Compute(1).SelectColumns="2,5"

// Duplicate State column
// DeviceID;State;State;
LED.Collect.Source(1).Compute(2).Type="DuplicateColumn"
LED.Collect.Source(1).Compute(2).Column=2

// Translate first State column into 0 (for Off), 1 (for Blinking) and 2 (for On)
// DeviceID;Status;State;
LED.Collect.Source(1).Compute(3).Type="Translate"
LED.Collect.Source(1).Compute(3).Column=2
LED.Collect.Source(1).Compute(3).TranslationTable="LEDStateTranslationTable"

// The LEDStateTranslationTable
LEDStateTranslationTable("on")="On"
LEDStateTranslationTable("off")="Off"
LEDStateTranslationTable("blinking")="Blinking"
LEDStateTranslationTable("flashing")="Blinking"
LEDStateTranslationTable("steady")="On"

// Table joint with Enclosure.discovery.source(2)
// DeviceID;Status;State;DeviceID;Class;DevicePath;
LED.Collect.Source(2).Type="TableJoint"
LED.Collect.Source(2).LeftTable=%LED.Collect.Source(1)%
LED.Collect.Source(2).RightTable=%Enclosure.Discovery.Source(2)%
LED.Collect.Source(2).LeftKeyColumn=1
LED.Collect.Source(2).RightKeyColumn=1
// LED.Collect.Source(2).DefaultRightLine=";;;"

// ValueTable = Source(1)
LED.Collect.ValueTable=%LED.Collect.Source(2)%
LED.Collect.DeviceID=ValueTable.Column(6)
LED.Collect.Status=ValueTable.Column(2)
LED.Collect.StatusInformation=ValueTable.Column(3)



////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parse the prtpicl -v -c fan
///                      and prtpicl -v -c rpm-sensor output
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {
	DeviceID = "";
	WarningThreshold = "" ;
	OperationalStatus="" ;
	Speed = "" ;
	Status = "" ;
	SpeedPercent = "" ;
	Switch = "" ;
	Description = "";
}
($2 == "(rpm-sensor," || $2 == "(fan,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":SpeedUnit") { SpeedUnit = $2 }
($1 == ":BaseUnits") { SpeedUnit = $2 }
($1 == ":Description") { Description = $2; for (i=3 ; i<=NF ; i++) { Description = Description " " $i; } }
($1 == ":LowWarningThreshold") { WarningThreshold = $2 }
($1 == ":LowPowerOffThreshold") { PowerOffThreshold = $2 }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":Speed") { Speed = $2 }
($1 == ":Fan-speed") { Speed = $2 }
($1 == ":Fan-switch") { Switch = $2 }
($1 == ":State") { Status = $2 }
($1 == ":name") {

	if (Description == "")
	{
		Description = $2
	}

	if (Speed == "<ERROR:")
	{
		Speed = "UNKNOWN";
	}

	if (Status == "<ERROR:")
	{
		Status = "UNKNOWN";
	}

	if (Speed != "")
	{
		if (Speed ~ /^[0-9]+$/)
		{
			SpeedHex = "";
		}
		else if (substr(Speed, 1, 2) != "0x")
		{
			Speed = "UNKNOWN";
			SpeedHex = "";
		}
		else {
			    SpeedHex = Speed ;
			    Speed = "" ;
			   }
	}

	if (WarningThreshold == "" && PowerOffThreshold != "")
	{
	WarningThreshold = PowerOffThreshold
	}

	if (WarningThreshold != "")
	{
		if (substr(WarningThreshold, 1, 2) != "0x")
		{
			WarningThresholdHex = "";
		}
		else
	  {
	 	  WarningThresholdHex = WarningThreshold ;
	 	  WarningThreshold = "" ;
	  }
	}

	if (SpeedUnit == "%")
	{
		SpeedPercent = Speed;
		SpeedPercentHex = SpeedHex;
		Speed = "";
		SpeedHex = "" ;
		WarningThreshold = "";
		WarningThresholdHex = "";
	}

	if (Status == "" && SpeedUnit != "%" && SpeedUnit != "rpm")
	{
		Status = SpeedUnit;
	}

	if (Switch == "OFF")
	{
		WarningThreshold = "";
		Speed = "";
	}

	if (((SpeedHex != "") || (SpeedPercentHex != "") || (Speed != "") || (Status != "") || (SpeedPercent != "")) && (OperationalStatus != "disabled"))
	{
		print "MSHW;" DeviceID ";" Description ";" WarningThreshold ";" Speed ";" SpeedPercent ";" Status ";" SpeedHex ";" SpeedPercentHex ";" WarningThresholdHex ";"
	}

	SpeedUnit = "";
	Speed = "";
	SpeedHex = "" ;
	SpeedPercent = "";
	SpeedPercentHex = "";
	WarningThreshold = "";
    PowerOffThreshold = "";
	WarningThresholdHex = "";
	OperationalStatus="";
	Status = "";
	Switch = "";
	Description = "";
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parse the prtpicl -v -c temperature-sensor
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
function power(x, n) {
	r = 1;
	#Convert n to integer because if it's a negative value, java considere it as a string (I think :-) )
	n=n*1
	if (n > 0) { for (i = 0; i < n; i++) { r = r * x; } }
	if (n < 0) { for (i = 0; i > n; i--) { r = r / x; } }
	return r;
}

BEGIN { DeviceID = ""; WarningThreshold = ""; OperationalStatus=""; Temperature = ""; Name = ""; }
($2 == "(temperature-sensor,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":HighWarningThreshold") { WarningThreshold = $2 }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":Temperature") { Temperature = $2 }
($1 == ":Exponent") { Exponent = $2 }
($1 == ":name") {
	Name = $2;

	if (Temperature == "<ERROR:")
	{
		Temperature = "UNKNOWN";
	}

	if (WarningThreshold == "<ERROR:")
	{
		WarningThreshold = "";
	}
	if (Exponent ~ /^-?[0-9]+$/)
	{
		if (Temperature ~ /^-?[0-9]+$/) { Temperature = Temperature * power(10,Exponent); }
		if (WarningThreshold ~ /^-?[0-9]+$/) { WarningThreshold = WarningThreshold * power(10,Exponent); }
	}

	if ((DeviceID != "") && (OperationalStatus != "disabled")) {print "MSHW;" DeviceID ";" Name ";" WarningThreshold ";" Temperature ";"}

	DeviceID = ""; WarningThreshold = ""; OperationalStatus=""; Temperature = ""; Name = "";
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = awk script that parse the prtpicl -v -c temperature-indicator
///
/////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN { DeviceID = ""; Status = ""; OperationalStatus=""; Name = ""; }
($2 == "(temperature-indicator,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":Condition") { Status = $2; }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":name") {
	Name = $2;

	if (Status == "<ERROR:")
	{
		Status = "UNKNOWN";
	}

	if ((DeviceID != "") && (OperationalStatus != "disabled")) {print "MSHW;" DeviceID ";" Name ";;;" Status}

	DeviceID = ""; Status = ""; Name = ""; OperationalStatus="";
}
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = awk script that parse the prtpicl -v -c voltage-sensor
///
/////////////////////////////////////////////////////////
EmbeddedFile(4):
function power(x, n) {
	r = 1;
	#Convert n to integer because if it's a negative value, java considere it as a string  (I think :-) )
	n=n*1
	if (n > 0) { for (i = 0; i < n; i++) { r = r * x; } }
	if (n < 0) { for (i = 0; i > n; i--) { r = r / x; } }
	return r;
}


BEGIN { DeviceID = ""; LowerThreshold = "" ; UpperThreshold = "" ; Voltage = ""; Exponent = ""; OperationalStatus=""; Name = ""; }
($2 == "(voltage-sensor,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":LowWarningThreshold") { LowerThreshold = $2 }
($1 == ":HighWarningThreshold") { UpperThreshold = $2 }
($1 == ":Voltage") { Voltage = $2 }
($1 == ":Exponent") { Exponent = $2 }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":name") {
	Name = $2;

	if (Voltage == "<ERROR:")
	{
		Voltage = "UNKNOWN";
	}
	if (LowerThreshold == "<ERROR:")
	{
		LowerThreshold = "";
	}
	if (UpperThreshold == "<ERROR:")
	{
		UpperThreshold = "";
	}

	if (Exponent ~ /^-?[0-9]+$/)
	{
		if (Voltage != "") { Voltage = Voltage * power(10,Exponent); }
		if (LowerThreshold != "") { LowerThreshold = LowerThreshold * power(10,Exponent); }
		if (UpperThreshold != "") { UpperThreshold = UpperThreshold * power(10,Exponent); }
	}

	if ((DeviceID != "") && (OperationalStatus != "disabled")) {print "MSHW;" DeviceID ";" Name ";" LowerThreshold ";" UpperThreshold ";" Voltage ";"}

	DeviceID = ""; LowerThreshold = "" ; UpperThreshold = "" ; Voltage = ""; Exponent = ""; OperationalStatus=""; Name = "";
}
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = awk script that parse the prtpicl -v -c voltage-indicator
///
/////////////////////////////////////////////////////////

EmbeddedFile(5):
BEGIN { DeviceID = ""; Status = ""; OperationalStatus=""; Name = ""; }
($2 == "(voltage-indicator,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":Condition") { Status = $2 }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":name") {
	Name = $2

	if (Status == "<ERROR:")
	{
		Status = "UNKNOWN";
	}

	if ((DeviceID != "") && (OperationalStatus != "disabled")) {print "MSHW;" DeviceID ";" Name ";;;;" Status}

	DeviceID = ""; Status = ""; OperationalStatus=""; Name = "";
}
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = awk script that parse the prtpicl output and
///                      returns DeviceID;class;DevicePath
///
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN {
	path = "";
      }
{
	name = $1;
	ID = substr($3, 1, length($3) - 1);
	className = substr($2, 2, length($2) - 2);

	depth = (index($0, name) - 1) / 4;
	if (depth < 0) { indent = 0; }

	split(path, pathArray, "/");
	path = "";
	for (i=1 ; i<depth ; i++)
	{
		path = path pathArray[i] "/";
	}
	path = path name;
	Output[path] = "MSHW;" ID ";" className ";" path ";"
        classNameArray[path] = className
        # Now build the rootpath for each class (but ensure that we have at least two strings and one slash in the eventual path).
        if ( rootpathindex[className] == "" ) {
                                               initialrootpath = path ; gsub("[^/]+/[^/]+$","",initialrootpath);
                                               rootpathindex[className] = length(initialrootpath);
                                               rootpath[className] = substr(path,1,rootpathindex[className]);
                                              }
                                         else { while ( substr(path,rootpathindex[className],1) != substr(rootpath[className],rootpathindex[className],1) ) {
                                                        rootpathindex[className] = rootpathindex[className] - 1
                                                        }
                                              }

}

END {
     for (path in Output) {
                           className=classNameArray[path];
                           displayID = substr(path,rootpathindex[className]+1);
                           print Output[path] displayID ";"
                          }
    }
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(7) = awk script that parse the prtpicl -v -c led
///
/////////////////////////////////////////////////////////
EmbeddedFile(7):
BEGIN { DeviceID = ""; Status = ""; Name = ""; ModelName = ""; Color = ""; Description = ""; OperationalStatus=""; Status = ""; }
($2 == "(led,") { DeviceID = substr($3, 1, length($3) - 1); }
($1 == ":Color") { Color = $2 }
($1 == ":ModelName") { ModelName = $2 }
($1 == ":Description") { Description = $2; for (i=3 ; i<=NF ; i++) { Description = Description " " $i; } }
($1 == ":OperationalStatus") { OperationalStatus = $2 }
($1 == ":State") { Status = $2; }
($1 == ":name") {
	Name = $2;

	if (Color == "<ERROR:")
	{
		Color = "";
	}
	if (Status == "<ERROR:")
	{
		Status = "UNKNOWN";
	}

	if (Color == "")
	{
		if (ModelName != "")
		{
			Color = ModelName;
		}
		else
		{
			Color = Name;
		}
	}
	if (Color ~ /FAULT/ || Color ~ /FAIL/) { Color = "FAULT"; }
	else if (Color ~ /ACT$/) { Color = "ACTIVITY"; }
	else if (Color ~ /LOCATE/) { Color = "LOCATE"; }
	else if (Color ~ /SERVICE/) { Color = "SERVICE"; }
	else if (Color ~ /OK/) { Color = "OK"; }

	if (Description == "" || Description ~ /Indicator/)
	{
		Description = Name;
	}

	if ((Status != "") && (DeviceID != "") && (OperationalStatus != "disabled"))
	{
		print "MSHW;" DeviceID ";" Description ";" Color ";" Status;
	}

	DeviceID = ""; Status = ""; Name = ""; ModelName = ""; Color = ""; Description = ""; OperationalStatus=""; Status = "";
}
EmbeddedFile(7).End
/////////////////////////////////////////////////////////////////////
