//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//               MS_HW_LSI1030.hdf
//
//      Supports: LSI c1030-based disk controllers (supposedly through a new version of the Mylex GAM Server SNMP agent)
//
//

// HEADER

hdf.DisplayName="LSI 1030-based GAM Server"
hdf.TypicalPlatform="Fujitsu-Siemens PRIMERGY"
hdf.ReliesOn="LSI GAM Server"
hdf.Version="1.0"
hdf.Comments="This connector provides disk monitoring for LSI c1030-based disk controllers (also known as LSI Integrated Mirroring) through the LSI1030 SNMP sub-agent."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.674.1.2.1.2.1"


// DISK CONTROLLERS

// Source(1) = The adapterTable SNMP table
// ID;controllerIndex;firmwareVersion;biosVersion;productName;driverVersion
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.1.2.1.2.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,1,4,5,8,9"

// InstanceTable = Source(1)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
DiskController.Discovery.Instance.Vendor="LSI"
DiskController.Discovery.Instance.Model=InstanceTable.Column(5)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(3)
DiskController.Discovery.Instance.BiosVersion=InstanceTable.Column(4)
DiskController.Discovery.Instance.DriverVersion=InstanceTable.Column(6)


// PHYSICAL DISKS

//
// Discovery

// Source(1) = deviceTable SNMP table
// ID;ControllerIndex;sizeMB;deviceType;Vendor
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.1.2.3.2.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,8,9,15"

// Keep only the disks (exclude CDROMs, tapes, etc.)
// ID;ControllerIndex;sizeMB;deviceType;Vendor
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="4"
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="9"

// Convert size from megabytes to bytes
// ID;ControllerIndex;size;deviceType;Vendor
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column="3"
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1048576"

// InstanceTable = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)

//
// Collect

// Collect type = mono-instance (one polling per instance)
PhysicalDisk.Collect.Type="MonoInstance"

// Source(1) = Snmp Get on the state OID of the deviceTable
// state
PhysicalDisk.Collect.Source(1).Type="SnmpGet"
PhysicalDisk.Collect.Source(1).SnmpOid="1.3.6.1.4.1.674.1.2.3.2.1.7.%PhysicalDisk.Collect.DeviceID%"

// Duplicate the state column
// state;state
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column="1"

// Translate the first state column into a PATROLStatus
// PATROLStatus;state
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="1"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// Translate the second state column into a more readable string
// PATROLStatus;statusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column="2"
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.Status=ValueTable.Column(1)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(2)

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable(1)="OK"
PhysicalDiskStatusTranslationTable(2)="ALARM"
PhysicalDiskStatusTranslationTable(3)="ALARM"
PhysicalDiskStatusTranslationTable(4)="ALARM"
PhysicalDiskStatusTranslationTable(5)="OK"
PhysicalDiskStatusTranslationTable(6)="WARN"
PhysicalDiskStatusTranslationTable(7)="WARN"
PhysicalDiskStatusTranslationTable(256)="WARN"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable(1)=""
PhysicalDiskStatusInformationTranslationTable(2)="Not responding"
PhysicalDiskStatusInformationTranslationTable(3)="Not compatible!"
PhysicalDiskStatusInformationTranslationTable(4)="Failed"
PhysicalDiskStatusInformationTranslationTable(5)="Initializing"
PhysicalDiskStatusInformationTranslationTable(6)="Offline requested"
PhysicalDiskStatusInformationTranslationTable(7)="Failed requested"
PhysicalDiskStatusInformationTranslationTable(256)="Offline"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"


// LOGICAL DISKS

//
// Discovery

// Source(1) = logicalDrive SNMP table
// ID;ControllerIndex;sizeMB;RAIDLevelCode
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.1.2.2.2.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,5,6"

// Translate the RAID Level Code into a real RAIDLevel
// ID;ControllerIndex;sizeMB;RAIDLevel
LogicalDisk.Discovery.Source(1).Compute(1).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(1).Column="4"
LogicalDisk.Discovery.Source(1).Compute(1).TranslationTable="RAIDLevelTranslationTable"

// The RAIDLevelTranslationTable
RAIDLevelTranslationTable(1)="0"
RAIDLevelTranslationTable(2)="0+1"
RAIDLevelTranslationTable(3)="1"
RAIDLevelTranslationTable(Default)=""

// Convert SizeMB into bytes
// ID;ControllerIndex;size;RAIDLevel
LogicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(2).Column="3"
LogicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1048576"

// Instance Table = Source(1)
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)

//
// Collect

// Collect type: MonoInstance
LogicalDisk.Collect.Type="MonoInstance"

// Source(1) = the state column of the logicalDrive SNMP table
// state
LogicalDisk.Collect.Source(1).Type="SnmpGet"
LogicalDisk.Collect.Source(1).SnmpOid="1.3.6.1.4.1.674.1.2.2.2.1.3.%LogicalDisk.Collect.DeviceID%"

// Duplicate the state column
// state;state
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="1"

// translate the state into a PATROL status
// PATROLStatus;state
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="1"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// translate the second state column into a more readable string
// PATROLStatus;statusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="2"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// The value table = source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Status=ValueTable.Column(1)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(2)

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable(1)="OK"
LogicalDiskStatusTranslationTable(2)="WARN"
LogicalDiskStatusTranslationTable(3)="ALARM"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable(1)="Optimal"
LogicalDiskStatusInformationTranslationTable(2)="Degraded"
LogicalDiskStatusInformationTranslationTable(3)="Failed"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"


