////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: APC UPS
//                Connects to a SNMP agent
//
//


//
// Header
//

hdf.DisplayName="APC UPS"
hdf.TypicalPlatform="APC UPS"
hdf.ReliesOn="UPS SNMP Enabled"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through APC UPS SNMP interface."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"
hdf.Supersedes="MS_HW_GenericUPS.hdf"

//
// DETECTION
// Does a SnmpGet to see if this device is an APC UPS device
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGet="1.3.6.1.4.1.318.1.1.1.1.1.1.0"
Detection.Criteria(1).ExpectedResult="UPS"

//
// Enclosure
//

// Source(1)
// Model;
Enclosure.Discovery.Source(1).Type="SnmpGet"
Enclosure.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.1.1.1.0"

// Add an "fake" identifier to enable table Joins later
// DeviceID;ModelNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="ups;"

// Source(2)
// FirmwareRevision;DateOfManufacture;SerialNumber;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.318.1.1.1.1.2"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="1,2,3"

// Add an identifier to enable table Joints
// DeviceID;FirmwareRevision;DateOfManufacture;SerialNumber;
Enclosure.Discovery.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).String="ups;"

// Join the Battery ID with the collected data
// DeviceID;ModelNumber;DeviceID;FirmwareRevision;DateOfManufacture;SerialNumber;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1

// Add "Date of Manufacture: " to AdditionalInformation1
Enclosure.Discovery.Source(3).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(1).Column=5
Enclosure.Discovery.Source(3).Compute(1).String="Date of Manufacture: "

// Add "Firmware Revision: " to AdditionalInformation2
Enclosure.Discovery.Source(3).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(3).Compute(2).Column=4
Enclosure.Discovery.Source(3).Compute(2).String="Firmware Revision: "

// InstanceTable = Source(1)
// MSHW;ModelNumber;ID;MSHW;FirmwareRevision;DateOfManufacture;SerialNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="APC"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Type="UPS"

//
// Collect
Enclosure.Collect.Type=MonoInstance

// Status;
Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.7.2.3.0"

// Duplicate Status
// Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type=DuplicateColumn
Enclosure.Collect.Source(1).Compute(1).Column=1

// Translate Status of the UPS
// Status;
Enclosure.Collect.Source(1).Compute(1).Type="Translate"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).TranslationTable="EnclosureStatusTranslationTable"

// The EnclosureStatusTranslationTable
EnclosureStatusTranslationTable(1)="OK"
EnclosureStatusTranslationTable(2)="ALARM"
EnclosureStatusTranslationTable(3)="OK"
EnclosureStatusTranslationTable(4)="OK"
EnclosureStatusTranslationTable(Default)="UNKNOWN"

// Translate 2nd Status to a more readaly string
// Status;StatusInformation;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="EnclosureStatusInformationTranslationTable"

// The EnclosureStatusTranslationTable
EnclosureStatusInformationTranslationTable(1)=""
EnclosureStatusInformationTranslationTable(2)="Failed"
EnclosureStatusInformationTranslationTable(3)="Invalid test"
EnclosureStatusInformationTranslationTable(4)="In progress"
EnclosureStatusInformationTranslationTable(Default)="Unknown"

// ValueTable = Source(1)
// Status;StatusInformation;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)

//
// Battery
//

//
// Discovery

// Source(1) = Battery Table
// Model;
Battery.Discovery.Source(1).Type="SnmpGet"
Battery.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.1.1.1.0"

// InstanceTable = Source(1)
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID="bat"
Battery.Discovery.Instance.Model=InstanceTable.Column(1)
Battery.Discovery.Instance.Vendor="APC"
Battery.Discovery.Instance.Type="UPS"

//
// Collect

// Collect type: MultiInstance
Battery.Collect.Type=MultiInstance

// Capacity;RuntimeRemaining_100th_s;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.318.1.1.1.2.2"
Battery.Collect.Source(1).SnmpTableSelectColumns="1,3,4"

// Add an identifier to enable table Joints
// DeviceID;Capacity;RuntimeRemaining_100th_s;Status;
Battery.Collect.Source(1).Compute(1).Type="LeftConcat"
Battery.Collect.Source(1).Compute(1).Column=1
Battery.Collect.Source(1).Compute(1).String="bat;"

// Duplicate status column
// DeviceID;Capacity;RuntimeRemaining_100th_s;Status;Status;
Battery.Collect.Source(1).Compute(2).Type=DuplicateColumn
Battery.Collect.Source(1).Compute(2).Column=4

// Translate Status of the Battery
// DeviceID;Capacity;RuntimeRemaining_100th_s;Status;Status;
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column=4
Battery.Collect.Source(1).Compute(3).TranslationTable="BatteryStatusTranslationTable"

// Translation Table1
BatteryStatusTranslationTable(1)="OK"
BatteryStatusTranslationTable(2)="ALARM"
BatteryStatusTranslationTable(Default)="UNKNOWN"

// Translate 2nd Status of the Battery into more readable information
// DeviceID;Capacity;RuntimeRemaining_100th_s;Status;StatusInformation;
Battery.Collect.Source(1).Compute(4).Type="Translate"
Battery.Collect.Source(1).Compute(4).Column=5
Battery.Collect.Source(1).Compute(4).TranslationTable="BatteryStatusInformationTranslationTable"

// Translation Table1
BatteryStatusInformationTranslationTable(1)=""
BatteryStatusInformationTranslationTable(2)="Needs replacing"
BatteryStatusInformationTranslationTable(Default)="UNKNOWN"

// Convert the 100th_s into minutes
// DeviceID;Capacity;RuntimeRemaining_minutes;Status;StatusInformation;
Battery.Collect.Source(1).Compute(5).Type="Divide"
Battery.Collect.Source(1).Compute(5).Column=3
Battery.Collect.Source(1).Compute(5).DivideBy="6000"

// ValueTable = Source(1)
// DeviceID;Capacity;RuntimeRemaining_minutes;Status;StatusInformation;
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.TimeLeft=ValueTable.Column(3)
Battery.Collect.Charge=ValueTable.Column(2)
Battery.Collect.Status=ValueTable.Column(4)
Battery.Collect.StatusInformation=ValueTable.Column(5)

//
// PowerSupply
//

// Source(1) hardcoded
// DeviceID;Type;
PowerSupply.Discovery.Source(1)="ps-out;Output;"

// InstanceTable = Source(1)
// DeviceID;Type;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(2)

//
// Collect

// Collect type: MonoInstance
PowerSupply.Collect.Type=MonoInstance

// Collect of PowerSupply current Load
// UsedPercent;
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.4.2.3.0"

// ValueTable = Source(1)
// UsedPercent;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.UsedPercent=ValueTable.Column(1)

//
// Voltage
//

// Source(1) = Hardcoded
// ID;Type;SensorLocation;
Voltage.Discovery.Source(1).Type=TableUnion
Voltage.Discovery.Source(1).Table1="in;ac;AC Input;"
Voltage.Discovery.Source(1).Table2="out;ac;AC Output;"

// Source(2) = SNMP Get 1.3.6.1.4.1.318.1.1.1.5.2.3.0 (voltage lower threshold)
// LowerThreshold_V
Voltage.Discovery.Source(2).Type=SnmpGet
Voltage.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.318.1.1.1.5.2.3.0"

// Add "ac" type
// Type;LowerThreshold_V
Voltage.Discovery.Source(2).Compute(1).Type=LeftConcat
Voltage.Discovery.Source(2).Compute(1).Column=1
Voltage.Discovery.Source(2).Compute(1).String="ac;"

// Convert V to mV
// Type;LowerThreshold_mV
Voltage.Discovery.Source(2).Compute(2).Type=Multiply
Voltage.Discovery.Source(2).Compute(2).Column=2
Voltage.Discovery.Source(2).Compute(2).MultiplyBy=1000

// Source(3) = SNMP Get 1.3.6.1.4.1.318.1.1.1.5.2.2.0 (voltage upper threshold)
// UpperThreshold_V
Voltage.Discovery.Source(3).Type=SnmpGet
Voltage.Discovery.Source(3).SnmpOid="1.3.6.1.4.1.318.1.1.1.5.2.2.0"

// Add "ac" type
// Type;UpperThreshold_V
Voltage.Discovery.Source(3).Compute(1).Type=LeftConcat
Voltage.Discovery.Source(3).Compute(1).Column=1
Voltage.Discovery.Source(3).Compute(1).String="ac;"

// Convert V to mV
// Type;UpperThreshold_mV
Voltage.Discovery.Source(3).Compute(2).Type=Multiply
Voltage.Discovery.Source(3).Compute(2).Column=2
Voltage.Discovery.Source(3).Compute(2).MultiplyBy=1000

// Source(4) = Table Join of Source(2) and Source(3)
// Type;LowerThreshold_mV;Type;UpperThreshold_mV
Voltage.Discovery.Source(4).Type=TableJoint
Voltage.Discovery.Source(4).LeftTable=%Voltage.Discovery.Source(2)%
Voltage.Discovery.Source(4).RightTable=%Voltage.Discovery.Source(3)%
Voltage.Discovery.Source(4).LeftKeyColumn=1
Voltage.Discovery.Source(4).RightKeyColumn=1

// Source(5) = Table Join of Source(1) and Source(4)
// ID;Type;SensorLocation;Type;LowerThreshold_mV;Type;UpperThreshold_mV
Voltage.Discovery.Source(5).Type=TableJoint
Voltage.Discovery.Source(5).LeftTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Source(5).RightTable=%Voltage.Discovery.Source(4)%
Voltage.Discovery.Source(5).LeftKeyColumn=2
Voltage.Discovery.Source(5).RightKeyColumn=1
Voltage.Discovery.Source(5).DefaultRightLine=";;;;"

// Mapping to Instance table for source(6)
// ID;Type;SensorLocation;Type;LowerThreshold_mV;Type;UpperThreshold_mV
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(5)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)

//
// Collect

// Collect type: Multi-Instance
Voltage.Collect.Type=MultiInstance

// Source(1) = SNMP Get of voltage in
// Voltage_10th_V
Voltage.Collect.Source(1).Type="SnmpGet"
Voltage.Collect.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.3.3.1.0"

// Add the "in" ID
// DeviceID;Voltage_10th_V
Voltage.Collect.Source(1).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(1).Compute(1).Column=1
Voltage.Collect.Source(1).Compute(1).String="in;"

// Source(1) = SNMP Get of voltage out
// Voltage_10th_V
Voltage.Collect.Source(2).Type="SnmpGet"
Voltage.Collect.Source(2).SnmpOid="1.3.6.1.4.1.318.1.1.1.4.3.1.0"

// Add the "out" ID
// DeviceID;Voltage_10th_V
Voltage.Collect.Source(2).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(2).Compute(1).Column=1
Voltage.Collect.Source(2).Compute(1).String="out;"

// Source(3) = TableUnion for source(1) and source(2)
// DeviceID;Voltage_10th_V
Voltage.Collect.Source(3).Type="TableUnion"
Voltage.Collect.Source(3).Table1=%Voltage.Collect.source(1)%
Voltage.Collect.Source(3).Table2=%Voltage.Collect.source(2)%

// Convert 10th_V to mV
// DeviceID;Voltage_mV
Voltage.Collect.Source(3).Compute(1).Type=Multiply
Voltage.Collect.Source(3).Compute(1).Column=2
Voltage.Collect.Source(3).Compute(1).MultiplyBy=100

// ValueTable = Source(3)
// DeviceID;Voltage_mV
Voltage.Collect.ValueTable=%Voltage.Collect.Source(3)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)

//
// Temperature
//

// Source(1) hardcoded
// DeviceID;SensorLocation;
Temperature.Discovery.Source(1)="bat;Battery"

// For thresholds, see https://www.linkedin.com/pulse/operating-temperature-range-ups-battery-sarah-gui/
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold=35
Temperature.Discovery.Instance.AlarmThreshold=45

//
// Collect

// Collect Type: MultiInstance
Temperature.Collect.Type=MultiInstance

// Temperature_10th_C
Temperature.Collect.Source(1).Type="SnmpGet"
Temperature.Collect.Source(1).SnmpOid="1.3.6.1.4.1.318.1.1.1.2.3.2.0"

// Add the "bat" ID
// DeviceID;Temperature_10th_C;
Temperature.Collect.Source(1).Compute(1).Type=LeftConcat
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).String="bat;"

// Convert 10th_C to degrees C
// DeviceID;Temperature
Temperature.Collect.Source(1).Compute(2).Type=Divide
Temperature.Collect.Source(1).Compute(2).Column=2
Temperature.Collect.Source(1).Compute(2).DivideBy=10

// ValueTable = Source(3)
// DeviceID;Temperature
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
