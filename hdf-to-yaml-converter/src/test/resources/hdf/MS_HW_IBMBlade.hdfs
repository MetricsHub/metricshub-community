//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_IBMBlade.hdf
//
//      Supports: the IBM BladeCenter Management Module
//
//

// HEADER

hdf.DisplayName="IBM BladeCenter Management Module"
hdf.TypicalPlatform="IBM BladeCenter"
hdf.ReliesOn="IBM BladeCenter Management Module"
hdf.Version="1.1"
hdf.Comments="This connector provides hardware monitoring of the IBM BladeCenter chassis through the IBM BladeCenter Management Module (SNMP-based). Needs to run remotely."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2.3.51.2.2.1.1.2"


// ENCLOSURE: blades system


// Get the model name and manufacturer of the blade server
// Model;ModelSuffix;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.21.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,5,7,9"

// Assume that if the vendor is SLRM (?), it is an IBM BladeCenter, in fact
// Model;ModelSuffix;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="Replace"
Enclosure.Discovery.Source(1).Compute(1).Column="4"
Enclosure.Discovery.Source(1).Compute(1).Replace="SLRM"
Enclosure.Discovery.Source(1).Compute(1).ReplaceBy="IBM BladeCenter"

// RightConcat the Model Suffix
// Model;ModelSuffix;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(2).Column="1"
Enclosure.Discovery.Source(1).Compute(2).String="-"

Enclosure.Discovery.Source(1).Compute(3).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(3).Column="1"
Enclosure.Discovery.Source(1).Compute(3).String=Column(2)

// Identify the FRU and Part Number
Enclosure.Discovery.Source(1).Compute(4).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(4).Column="5"
Enclosure.Discovery.Source(1).Compute(4).String="Alternate Part Number: "

Enclosure.Discovery.Source(1).Compute(5).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(5).Column="6"
Enclosure.Discovery.Source(1).Compute(5).String="Part Number: "

// Instance Table
// Model;ModelSuffix;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="BladeCenter"
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Type="Chassis"

// Collect
Enclosure.Collect.Type="MultiInstance"



// Get a list of Enclosures
// ServerID
Enclosure.Collect.Source(1)="BladeCenter;"

// Get the Power Consumption
// PowerConsumption
Enclosure.Collect.Source(2).Type="SnmpGet"
Enclosure.Collect.Source(2).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.10.5.1.2.0"

// Add the Server ID
// ServerID;PowerConsumption;
Enclosure.Collect.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).String="BladeCenter;"

// Keep only the first column
// ServerID;PowerConsumption;
Enclosure.Collect.Source(2).Compute(2).Type="Extract"
Enclosure.Collect.Source(2).Compute(2).Column=2
Enclosure.Collect.Source(2).Compute(2).Subcolumn="1"
Enclosure.Collect.Source(2).Compute(2).Subseparators=" "

// Remove the "W"
// ServerID;PowerConsumption;
Enclosure.Collect.Source(2).Compute(3).Type="Replace"
Enclosure.Collect.Source(2).Compute(3).Column=2
Enclosure.Collect.Source(2).Compute(3).Replace="W"
Enclosure.Collect.Source(2).Compute(3).ReplaceBy=""

// Source(3) = Table joint between Source(1) and Source(2)
// This is because the PowerMeter Table does not exist in early versions of the chassis, so we collect a list of IDs from the main table to avoid "no collect value errors"
// ServerID;ServerID;Power Consumption;
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";;"


// Value Table
// ServerID;ServerID;Power Consumption;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID="BladeCenter"
Enclosure.Collect.PowerConsumption=ValueTable.Column(3)


// TEMPERATURES


// Temperature discovery

// Source(1) = mmTemp
// Temperature
Temperature.Discovery.Source(1).Type="SnmpGet"
Temperature.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.1.2.0"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(1).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).String="ManagementModule;Management Module;65;75;;"

// Source(2) = frontPanelTemp
// Temperature
Temperature.Discovery.Source(2).Type="SnmpGet"
Temperature.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(2).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(2).Compute(1).Column=1
Temperature.Discovery.Source(2).Compute(1).String="FrontPanel;Front Panel;45;55;;"

// Source(3) = frontPanel2Temp (only for for BladeCenter HT)
// Temperature
Temperature.Discovery.Source(3).Type="SnmpTable"
Temperature.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.1.5"
Temperature.Discovery.Source(3).SnmpTableSelectColumns="2"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(3).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(3).Compute(1).Column=1
Temperature.Discovery.Source(3).Compute(1).String="FrontPanel2;Front Panel 2;45;55;;"

// Source(4) = rearLEDCardTempMax (only for Pureflex?)
// Temperature
Temperature.Discovery.Source(4).Type="SnmpTable"
Temperature.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.1.5"
Temperature.Discovery.Source(4).SnmpTableSelectColumns="3"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(4).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(4).Compute(1).Column=1
Temperature.Discovery.Source(4).Compute(1).String="RearLEDCard;Rear LED Card;45;55;;"

// Source(5) = hotAirRecircStatus Table(only for Pureflex)
// ID;DisplayID;Status;Temperature;
Temperature.Discovery.Source(5).Type="SnmpTable"
Temperature.Discovery.Source(5).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.1.9.7.1"
Temperature.Discovery.Source(5).SnmpTableSelectColumns="2,4,7,6"

// Add empty thresholds
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(5).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(5).Compute(1).Column=3
Temperature.Discovery.Source(5).Compute(1).String=";;"

// Union the three sensor tables together
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(6).Type="TableUnion"
Temperature.Discovery.Source(6).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(6).Table2=%Temperature.Discovery.Source(2)%
Temperature.Discovery.Source(6).Table3=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Source(6).Table4=%Temperature.Discovery.Source(4)%
Temperature.Discovery.Source(6).Table5=%Temperature.Discovery.Source(5)%

// Keep only sensors with a valid temperature
// ID;DisplayID;WarningThreshold;AlarmThreshold;Status;Temperature;
Temperature.Discovery.Source(6).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(6).Compute(1).Column=6
Temperature.Discovery.Source(6).Compute(1).RegExp="^[0-9]"

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(6)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)
Temperature.Discovery.Instance.AttachedToDeviceID="BladeCenter"
Temperature.Discovery.Instance.AttachedToDeviceType="Computer"

// Temperature collect

Temperature.Collect.Type="MultiInstance"

// Source(1) = mmTemp
// Temperature
Temperature.Collect.Source(1).Type="SnmpGet"
Temperature.Collect.Source(1).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.1.2.0"

// Add an identifier and thresholds
// ID;Status;Temperature;
Temperature.Collect.Source(1).Compute(1).Type="LeftConcat"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).String="ManagementModule;;"

// Source(2) = frontPanelTemp
// Temperature;
Temperature.Collect.Source(2).Type="SnmpGet"
Temperature.Collect.Source(2).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"

// Add an identifier and thresholds
// ID;Status;Temperature;
Temperature.Collect.Source(2).Compute(1).Type="LeftConcat"
Temperature.Collect.Source(2).Compute(1).Column=1
Temperature.Collect.Source(2).Compute(1).String="FrontPanel;;"

// Source(3) = frontPanel2Temp (only for for BladeCenter HT)
// Temperature
Temperature.Collect.Source(3).Type="SnmpGet"
Temperature.Collect.Source(3).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.5.2.0"

// Add an identifier and thresholds
// ID;Status;Temperature;
Temperature.Collect.Source(3).Compute(1).Type="LeftConcat"
Temperature.Collect.Source(3).Compute(1).Column=1
Temperature.Collect.Source(3).Compute(1).String="FrontPanel2;;"

// Source(4) = rearLEDCardTempMax (only for pureflex?)
// Temperature
Temperature.Collect.Source(4).Type="SnmpGet"
Temperature.Collect.Source(4).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.1.5.3.0"

// Add an identifier and thresholds
// ID;Status;Temperature;
Temperature.Collect.Source(4).Compute(1).Type="LeftConcat"
Temperature.Collect.Source(4).Compute(1).Column=1
Temperature.Collect.Source(4).Compute(1).String="RearLEDCard;;"

// Source(5) = hotAirRecircStatus Table(only for Pureflex)
// ID;Status;Temperature;
Temperature.Collect.Source(5).Type="SnmpTable"
Temperature.Collect.Source(5).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.1.9.7.1"
Temperature.Collect.Source(5).SnmpTableSelectColumns="2,7,6"

// Now translate the Status to a PATROL Status
// ID;PatrolStatus;Temperature;
Temperature.Collect.Source(5).Compute(1).Type="Translate"
Temperature.Collect.Source(5).Compute(1).Column=2
Temperature.Collect.Source(5).Compute(1).TranslationTable="TemperatureStatusTranslationTable"

TemperatureStatusTranslationTable(0)="OK"
TemperatureStatusTranslationTable(1)="ALARM"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// Union the three sensor tables together
// ID;PatrolStatus;Temperature;
Temperature.Collect.Source(6).Type="TableUnion"
Temperature.Collect.Source(6).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(6).Table2=%Temperature.Collect.Source(2)%
Temperature.Collect.Source(6).Table3=%Temperature.Collect.Source(3)%
Temperature.Collect.Source(6).Table4=%Temperature.Collect.Source(4)%
Temperature.Collect.Source(6).Table5=%Temperature.Collect.Source(5)%

// Take only the first value (ignore the Degrees C string)
// ID;PatrolStatus;Temperature;
Temperature.Collect.Source(6).Compute(1).Type="Extract"
Temperature.Collect.Source(6).Compute(1).Column="3"
Temperature.Collect.Source(6).Compute(1).Subcolumn="1"
Temperature.Collect.Source(6).Compute(1).Subseparators=" "

// Instance Table
// ID;PatrolStatus;Temperature;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(6)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(3)
Temperature.Collect.Status=ValueTable.Column(2)


// FANS

// Fan discovery

// Source(1) = blower1speed
// FanSpeed;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(1).SnmpTableSelectColumns="1"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(1).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).String="Blower1;Blower 1;10;"

// Source(2) = blower2speed
// FanSpeed;
Fan.Discovery.Source(2).Type="SnmpTable"
Fan.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(2).SnmpTableSelectColumns="2"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(2).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(2).Compute(1).Column=1
Fan.Discovery.Source(2).Compute(1).String="Blower2;Blower 2;10;"

// Source(3) = blower3speed
// FanSpeed
Fan.Discovery.Source(3).Type="SnmpTable"
Fan.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(3).SnmpTableSelectColumns="3"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(3).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(1).Column=1
Fan.Discovery.Source(3).Compute(1).String="Blower3;Blower 3;10;"

// Source(4) = blower4speed
// FanSpeed;
Fan.Discovery.Source(4).Type="SnmpTable"
Fan.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(4).SnmpTableSelectColumns="4"

// Add an identifier and thresholds
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(4).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(4).Compute(1).Column=1
Fan.Discovery.Source(4).Compute(1).String="Blower4;Blower 4;10;"

// Union the four sensor tables together
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(5).Type="TableUnion"
Fan.Discovery.Source(5).Table1=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(5).Table2=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(5).Table3=%Fan.Discovery.Source(3)%
Fan.Discovery.Source(5).Table4=%Fan.Discovery.Source(4)%

// Keep only sensors with a valid Fan Speed Percent
// ID;DisplayID;WarningThreshold;FanSpeed;
Fan.Discovery.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(5).Compute(1).Column=4
Fan.Discovery.Source(5).Compute(1).RegExp="^[0-9]"

// Source(6) = blower1State
// FanState;
Fan.Discovery.Source(6).Type="SnmpTable"
Fan.Discovery.Source(6).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(6).SnmpTableSelectColumns="10"

// Add an identifier and thresholds
// ID;FanState;
Fan.Discovery.Source(6).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(6).Compute(1).Column=1
Fan.Discovery.Source(6).Compute(1).String="Blower1;"

// Source(7) = blower2State
// FanState;
Fan.Discovery.Source(7).Type="SnmpTable"
Fan.Discovery.Source(7).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(7).SnmpTableSelectColumns="11"

// Add an identifier and thresholds
// ID;FanState;
Fan.Discovery.Source(7).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(7).Compute(1).Column=1
Fan.Discovery.Source(7).Compute(1).String="Blower2;"

// Source(8) = blower3State
// FanState
Fan.Discovery.Source(8).Type="SnmpTable"
Fan.Discovery.Source(8).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(8).SnmpTableSelectColumns="12"

// Add an identifier and thresholds
// ID;FanState;
Fan.Discovery.Source(8).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(8).Compute(1).Column=1
Fan.Discovery.Source(8).Compute(1).String="Blower3;"

// Source(9) = blower4State
// FanState;
Fan.Discovery.Source(9).Type="SnmpTable"
Fan.Discovery.Source(9).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Discovery.Source(9).SnmpTableSelectColumns="13"

// Add an identifier and thresholds
// ID;FanState;
Fan.Discovery.Source(9).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(9).Compute(1).Column=1
Fan.Discovery.Source(9).Compute(1).String="Blower4;"

// Source(10) = Union the four sensor tables together
// ID;FanState;
Fan.Discovery.Source(10).Type="TableUnion"
Fan.Discovery.Source(10).Table1=%Fan.Discovery.Source(6)%
Fan.Discovery.Source(10).Table2=%Fan.Discovery.Source(7)%
Fan.Discovery.Source(10).Table3=%Fan.Discovery.Source(8)%
Fan.Discovery.Source(10).Table4=%Fan.Discovery.Source(9)%

// Keep only sensors with a valid Fan State
// ID;FanState;
Fan.Discovery.Source(10).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(10).Compute(1).Column=2
Fan.Discovery.Source(10).Compute(1).RegExp="^[013]"

// Source(11) = snmp get on the bistBlowersFunctional
// which gives something like "11" where each digit represents a blower
// and "1" means functional and "0" failed
Fan.Discovery.Source(11).Type="SnmpTable"
Fan.Discovery.Source(11).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.5.2"
Fan.Discovery.Source(11).SnmpTableSelectColumns="73"

// Copy Source (11) to get Blower 1
Fan.Discovery.Source(12)=%Fan.Discovery.Source(11)%

// Add an identifier
Fan.Discovery.Source(12).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(12).Compute(1).Column=1
Fan.Discovery.Source(12).Compute(1).String="Blower1;"

// Extract the digit which we are interested in
Fan.Discovery.Source(12).Compute(2).Type="Substring"
Fan.Discovery.Source(12).Compute(2).Column="2"
Fan.Discovery.Source(12).Compute(2).Start="1"
Fan.Discovery.Source(12).Compute(2).Length="1"

// Copy Source (11) to get Blower 2
Fan.Discovery.Source(13)=%Fan.Discovery.Source(11)%

// Add an identifier
Fan.Discovery.Source(13).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(13).Compute(1).Column=1
Fan.Discovery.Source(13).Compute(1).String="Blower2;"

// Extract the digit which we are interested in
Fan.Discovery.Source(13).Compute(2).Type="Substring"
Fan.Discovery.Source(13).Compute(2).Column="2"
Fan.Discovery.Source(13).Compute(2).Start="2"
Fan.Discovery.Source(13).Compute(2).Length="1"

// Copy Source (11) to get Blower 3
Fan.Discovery.Source(14)=%Fan.Discovery.Source(11)%

// Add an identifier
Fan.Discovery.Source(14).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(14).Compute(1).Column=1
Fan.Discovery.Source(14).Compute(1).String="Blower3;"

// Extract the digit which we are interested in
Fan.Discovery.Source(14).Compute(2).Type="Substring"
Fan.Discovery.Source(14).Compute(2).Column="2"
Fan.Discovery.Source(14).Compute(2).Start="3"
Fan.Discovery.Source(14).Compute(2).Length="1"

// Copy Source (11) to get Blower 4
Fan.Discovery.Source(15)=%Fan.Discovery.Source(11)%

// Add an identifier
Fan.Discovery.Source(15).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(15).Compute(1).Column=1
Fan.Discovery.Source(15).Compute(1).String="Blower4;"

// Extract the digit which we are interested in
Fan.Discovery.Source(15).Compute(2).Type="Substring"
Fan.Discovery.Source(15).Compute(2).Column="2"
Fan.Discovery.Source(15).Compute(2).Start="4"
Fan.Discovery.Source(15).Compute(2).Length="1"

// Source(16) = Union the four sensor tables together
// ID;FanState;
Fan.Discovery.Source(16).Type="TableUnion"
Fan.Discovery.Source(16).Table1=%Fan.Discovery.Source(12)%
Fan.Discovery.Source(16).Table2=%Fan.Discovery.Source(13)%
Fan.Discovery.Source(16).Table3=%Fan.Discovery.Source(14)%
Fan.Discovery.Source(16).Table4=%Fan.Discovery.Source(15)%

// Keep only Fans with a valid state
// ID;FanState;
Fan.Discovery.Source(16).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(16).Compute(1).Column=2
Fan.Discovery.Source(16).Compute(1).RegExp="^[0-1]"

// Source(17) = Union of Controller Status Tables Source 11 and bistBlowersFunctional tables Source (16)
// ID;FanState;
Fan.Discovery.Source(17).Type="TableUnion"
Fan.Discovery.Source(17).Table1=%Fan.Discovery.Source(10)%
Fan.Discovery.Source(17).Table2=%Fan.Discovery.Source(16)%

// Source 18 = Union of Fan Percent Speed and Fan Status tables
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Discovery.Source(18).Type="TableJoint"
Fan.Discovery.Source(18).LeftTable=%Fan.Discovery.Source(5)%
Fan.Discovery.Source(18).RightTable=%Fan.Discovery.Source(17)%
Fan.Discovery.Source(18).LeftKeyColumn=1
Fan.Discovery.Source(18).RightKeyColumn=1
Fan.Discovery.Source(18).DefaultRightLine=";;"

// Now we move onto the PureFlex Fans
// ID;DisplayID;FanSpeed;FanState;
Fan.Discovery.Source(19).Type="SnmpTable"
Fan.Discovery.Source(19).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3.50.1"
Fan.Discovery.Source(19).SnmpTableSelectColumns="1,2,5,6"

// Add a WarningThreshold
// ID;DisplayID;WarningThreshold;FanSpeed;FanState;
Fan.Discovery.Source(19).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(19).Compute(1).Column=3
Fan.Discovery.Source(19).Compute(1).String="10;"

// Add a blank second ID to match the tables
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Discovery.Source(19).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(19).Compute(2).Column=5
Fan.Discovery.Source(19).Compute(2).String=";"

// Add "Chassis Fan" to the Display ID
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Discovery.Source(19).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(19).Compute(3).Column=2
Fan.Discovery.Source(19).Compute(3).String="Chassis Fan "

// Keep Only Controllers with a valid controller status
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Discovery.Source(19).Compute(4).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(19).Compute(4).Column=6
Fan.Discovery.Source(19).Compute(4).ValueList="0,1,2,3"

// Source(20) = Union of BladeChassis Fans and PureFlex Fans
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Discovery.Source(20).Type="TableUnion"
Fan.Discovery.Source(20).Table1=%Fan.Discovery.Source(18)%
Fan.Discovery.Source(20).Table2=%Fan.Discovery.Source(19)%

// Now we're going to do a quick trick to deactivate state and activate numeric if state is not valid
// ID;DisplayID;WarningThreshold;FanSpeed;ID;FanState;

Fan.Discovery.Source(20).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(20).Compute(1).Column=6
Fan.Discovery.Source(20).Compute(1).String="MSHW"

Fan.Discovery.Source(20).Compute(2).Type="RightConcat"
Fan.Discovery.Source(20).Compute(2).Column=6
Fan.Discovery.Source(20).Compute(2).String="MSHW"

Fan.Discovery.Source(20).Compute(3).Type="DuplicateColumn"
Fan.Discovery.Source(20).Compute(3).Column=6

// If the Column is Blank, 255 or Zero, then blank status
Fan.Discovery.Source(20).Compute(4).Type="Replace"
Fan.Discovery.Source(20).Compute(4).Column=6
Fan.Discovery.Source(20).Compute(4).Replace="MSHW0MSHW"
Fan.Discovery.Source(20).Compute(4).ReplaceBy=""

Fan.Discovery.Source(20).Compute(5).Type="Replace"
Fan.Discovery.Source(20).Compute(5).Column=6
Fan.Discovery.Source(20).Compute(5).Replace="MSHW255MSHW"
Fan.Discovery.Source(20).Compute(5).ReplaceBy=""

Fan.Discovery.Source(20).Compute(6).Type="Replace"
Fan.Discovery.Source(20).Compute(6).Column=6
Fan.Discovery.Source(20).Compute(6).Replace="MSHWMSHW"
Fan.Discovery.Source(20).Compute(6).ReplaceBy=""

// If 6 is still populated, blank 7
Fan.Discovery.Source(20).Compute(7).Type="Replace"
Fan.Discovery.Source(20).Compute(7).Column=7
Fan.Discovery.Source(20).Compute(7).Replace=Column(6)
Fan.Discovery.Source(20).Compute(7).ReplaceBy=""

// Instance Table
// ID;DisplayID;WarningThreshold(NoActivation);FanSpeed;ID;FanState;WarningThreshold(withActivation);
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(20)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.PercentWarningThreshold=InstanceTable.Column(7)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Fan.Discovery.Instance.AttachedToDeviceID="BladeCenter"
Fan.Discovery.Instance.AttachedToDeviceType="Computer"

// Fan collect

// Collect-type
Fan.Collect.Type="MultiInstance"

// Source(1) = blower1speed
// FanSpeed;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(1).SnmpTableSelectColumns="1"

// Add an identifier and thresholds
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(1).Compute(1).Type="LeftConcat"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).String="Blower1;10;"

// Source(2) = blower2speed
// FanSpeed;
Fan.Collect.Source(2).Type="SnmpTable"
Fan.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(2).SnmpTableSelectColumns="2"

// Add an identifier and thresholds
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(2).Compute(1).Type="LeftConcat"
Fan.Collect.Source(2).Compute(1).Column=1
Fan.Collect.Source(2).Compute(1).String="Blower2;10;"

// Source(3) = blower3speed
// FanSpeed
Fan.Collect.Source(3).Type="SnmpTable"
Fan.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(3).SnmpTableSelectColumns="3"

// Add an identifier and thresholds
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(3).Compute(1).Type="LeftConcat"
Fan.Collect.Source(3).Compute(1).Column=1
Fan.Collect.Source(3).Compute(1).String="Blower3;10;"

// Source(4) = blower4speed
// FanSpeed;
Fan.Collect.Source(4).Type="SnmpTable"
Fan.Collect.Source(4).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(4).SnmpTableSelectColumns="4"

// Add an identifier and thresholds
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(4).Compute(1).Type="LeftConcat"
Fan.Collect.Source(4).Compute(1).Column=1
Fan.Collect.Source(4).Compute(1).String="Blower4;10;"

// Union the four sensor tables together
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(5).Type="TableUnion"
Fan.Collect.Source(5).Table1=%Fan.Collect.Source(1)%
Fan.Collect.Source(5).Table2=%Fan.Collect.Source(2)%
Fan.Collect.Source(5).Table3=%Fan.Collect.Source(3)%
Fan.Collect.Source(5).Table4=%Fan.Collect.Source(4)%

// Keep only sensors with a valid Fan Speed Percent
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(5).Compute(1).Column=3
Fan.Collect.Source(5).Compute(1).RegExp="^[0-9]"

// Keep only the number (the OID gives someting like " xx% of maximum")
// ID;WarningThreshold;FanSpeed;
Fan.Collect.Source(5).Compute(2).Type="Extract"
Fan.Collect.Source(5).Compute(2).Column=3
Fan.Collect.Source(5).Compute(2).SubColumn="1"
Fan.Collect.Source(5).Compute(2).SubSeparators="%%"

// Remove unneeded spaces
Fan.Collect.Source(5).Compute(3).Type="Replace"
Fan.Collect.Source(5).Compute(3).Column=3
Fan.Collect.Source(5).Compute(3).Replace=" "
Fan.Collect.Source(5).Compute(3).ReplaceBy=""

// Source(6) = blower1State
// FanState;
Fan.Collect.Source(6).Type="SnmpTable"
Fan.Collect.Source(6).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(6).SnmpTableSelectColumns="10"

// Add an identifier and thresholds
// ID;FanState;
Fan.Collect.Source(6).Compute(1).Type="LeftConcat"
Fan.Collect.Source(6).Compute(1).Column=1
Fan.Collect.Source(6).Compute(1).String="Blower1;"

// Source(7) = blower2State
// FanState;
Fan.Collect.Source(7).Type="SnmpTable"
Fan.Collect.Source(7).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(7).SnmpTableSelectColumns="11"

// Add an identifier and thresholds
// ID;FanState;
Fan.Collect.Source(7).Compute(1).Type="LeftConcat"
Fan.Collect.Source(7).Compute(1).Column=1
Fan.Collect.Source(7).Compute(1).String="Blower2;"

// Source(8) = blower3State
// FanState
Fan.Collect.Source(8).Type="SnmpTable"
Fan.Collect.Source(8).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(8).SnmpTableSelectColumns="12"

// Add an identifier and thresholds
// ID;FanState;
Fan.Collect.Source(8).Compute(1).Type="LeftConcat"
Fan.Collect.Source(8).Compute(1).Column=1
Fan.Collect.Source(8).Compute(1).String="Blower3;"

// Source(9) = blower4State
// FanState;
Fan.Collect.Source(9).Type="SnmpTable"
Fan.Collect.Source(9).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3"
Fan.Collect.Source(9).SnmpTableSelectColumns="13"

// Add an identifier and thresholds
// ID;FanState;
Fan.Collect.Source(9).Compute(1).Type="LeftConcat"
Fan.Collect.Source(9).Compute(1).Column=1
Fan.Collect.Source(9).Compute(1).String="Blower4;"

// Source(10) = Union the four sensor tables together
// ID;FanState;
Fan.Collect.Source(10).Type="TableUnion"
Fan.Collect.Source(10).Table1=%Fan.Collect.Source(6)%
Fan.Collect.Source(10).Table2=%Fan.Collect.Source(7)%
Fan.Collect.Source(10).Table3=%Fan.Collect.Source(8)%
Fan.Collect.Source(10).Table4=%Fan.Collect.Source(9)%

// Now translate this digit to a PATROL Status
// ID;FanState;
Fan.Collect.Source(10).Compute(1).Type="Translate"
Fan.Collect.Source(10).Compute(1).Column=2
Fan.Collect.Source(10).Compute(1).TranslationTable="FanControllerStatusTranslationTable"

FanControllerStatusTranslationTable(0)="UNKNOWN"
FanControllerStatusTranslationTable(1)="OK"
FanControllerStatusTranslationTable(2)="WARN"
FanControllerStatusTranslationTable(3)="ALARM"
FanControllerStatusTranslationTable(Default)="UNKNOWN"

// Source(11) = snmp get on the bistBlowersFunctional
// which gives something like "11" where each digit represents a blower
// and "1" means functional and "0" failed
Fan.Collect.Source(11).Type="SnmpTable"
Fan.Collect.Source(11).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.5.2"
Fan.Collect.Source(11).SnmpTableSelectColumns="72"

// Copy Source (11) to get Blower 1
Fan.Collect.Source(12)=%Fan.Collect.Source(11)%

// Add an identifier
Fan.Collect.Source(12).Compute(1).Type="LeftConcat"
Fan.Collect.Source(12).Compute(1).Column=1
Fan.Collect.Source(12).Compute(1).String="Blower1;"

// Extract the digit which we are interested in
Fan.Collect.Source(12).Compute(2).Type="Substring"
Fan.Collect.Source(12).Compute(2).Column="2"
Fan.Collect.Source(12).Compute(2).Start="1"
Fan.Collect.Source(12).Compute(2).Length="1"

// Copy Source (11) to get Blower 2
Fan.Collect.Source(13)=%Fan.Collect.Source(11)%

// Add an identifier
Fan.Collect.Source(13).Compute(1).Type="LeftConcat"
Fan.Collect.Source(13).Compute(1).Column=1
Fan.Collect.Source(13).Compute(1).String="Blower2;"

// Extract the digit which we are interested in
Fan.Collect.Source(13).Compute(2).Type="Substring"
Fan.Collect.Source(13).Compute(2).Column="2"
Fan.Collect.Source(13).Compute(2).Start="2"
Fan.Collect.Source(13).Compute(2).Length="1"

// Copy Source (11) to get Blower 3
Fan.Collect.Source(14)=%Fan.Collect.Source(11)%

// Add an identifier
Fan.Collect.Source(14).Compute(1).Type="LeftConcat"
Fan.Collect.Source(14).Compute(1).Column=1
Fan.Collect.Source(14).Compute(1).String="Blower3;"

// Extract the digit which we are interested in
Fan.Collect.Source(14).Compute(2).Type="Substring"
Fan.Collect.Source(14).Compute(2).Column="2"
Fan.Collect.Source(14).Compute(2).Start="3"
Fan.Collect.Source(14).Compute(2).Length="1"

// Copy Source (11) to get Blower 4
Fan.Collect.Source(15)=%Fan.Collect.Source(11)%

// Add an identifier
Fan.Collect.Source(15).Compute(1).Type="LeftConcat"
Fan.Collect.Source(15).Compute(1).Column=1
Fan.Collect.Source(15).Compute(1).String="Blower4;"

// Extract the digit which we are interested in
Fan.Collect.Source(15).Compute(2).Type="Substring"
Fan.Collect.Source(15).Compute(2).Column="2"
Fan.Collect.Source(15).Compute(2).Start="4"
Fan.Collect.Source(15).Compute(2).Length="1"

// Source(16) = Union the four sensor tables together
// ID;FanState;
Fan.Collect.Source(16).Type="TableUnion"
Fan.Collect.Source(16).Table1=%Fan.Collect.Source(12)%
Fan.Collect.Source(16).Table2=%Fan.Collect.Source(13)%
Fan.Collect.Source(16).Table3=%Fan.Collect.Source(14)%
Fan.Collect.Source(16).Table4=%Fan.Collect.Source(15)%

// Now translate this digit to a PATROL Status
// ID;FanState;
Fan.Collect.Source(16).Compute(1).Type="Translate"
Fan.Collect.Source(16).Compute(1).Column=2
Fan.Collect.Source(16).Compute(1).TranslationTable="FanStatusTranslationTable"

FanStatusTranslationTable(0)="ALARM"
FanStatusTranslationTable(1)="OK"
FanStatusTranslationTable(Default)="UNKNOWN"

// Source(17) = Union of Fan Percent Table (5) with First Status Table (16)
// ID;WarningThreshold;FanSpeed;ID;FanState;
Fan.Collect.Source(17).Type="TableJoint"
Fan.Collect.Source(17).LeftTable=%Fan.Collect.Source(5)%
Fan.Collect.Source(17).RightTable=%Fan.Collect.Source(16)%
Fan.Collect.Source(17).LeftKeyColumn=1
Fan.Collect.Source(17).RightKeyColumn=1
Fan.Collect.Source(17).DefaultRightLine=";;"

// Source(17) = Union of (Fan Percent Table and First Status Table (17) with Second Status Table)
// ID;WarningThreshold;FanSpeed;ID;FanState1;ID;FanState2;
Fan.Collect.Source(18).Type="TableJoint"
Fan.Collect.Source(18).LeftTable=%Fan.Collect.Source(17)%
Fan.Collect.Source(18).RightTable=%Fan.Collect.Source(10)%
Fan.Collect.Source(18).LeftKeyColumn=1
Fan.Collect.Source(18).RightKeyColumn=1
Fan.Collect.Source(18).DefaultRightLine=";;"

// Add an array Separator to FanState1
// ID;WarningThreshold;FanSpeed;ID;FanState1;ID;FanState2;
Fan.Collect.Source(18).Compute(1).Type="RightConcat"
Fan.Collect.Source(18).Compute(1).Column=5
Fan.Collect.Source(18).Compute(1).String="|"

// Add FanState2 to FanState1 to create an array
// ID;WarningThreshold;FanSpeed;ID;FanState1;ID;FanState2;
Fan.Collect.Source(18).Compute(2).Type="RightConcat"
Fan.Collect.Source(18).Compute(2).Column=5
Fan.Collect.Source(18).Compute(2).String=Column(7)

// Simplify the Array
// ID;WarningThreshold;FanSpeed;ID;FanState1;ID;FanState2;
Fan.Collect.Source(18).Compute(3).Type="Convert"
Fan.Collect.Source(18).Compute(3).Column=5
Fan.Collect.Source(18).Compute(3).ConversionType="Array2SimpleStatus"

// Now we move onto the PureFlex Fans
// ID;FanSpeed;FanState;
Fan.Collect.Source(19).Type="SnmpTable"
Fan.Collect.Source(19).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.3.50.1"
Fan.Collect.Source(19).SnmpTableSelectColumns="1,3,4"

// Translate the Fanstate
// ID;FanSpeed;PatrolStatus;
Fan.Collect.Source(19).Compute(1).Type="Translate"
Fan.Collect.Source(19).Compute(1).Column=3
Fan.Collect.Source(19).Compute(1).TranslationTable="FanStatusTranslationTable"

// Add a WarningThreshold
// ID;WarningThreshold;FanSpeed;PatrolStatus;
Fan.Collect.Source(19).Compute(2).Type="LeftConcat"
Fan.Collect.Source(19).Compute(2).Column=2
Fan.Collect.Source(19).Compute(2).String="10;"

// Add a blank second ID to match the tables
// ID;WarningThreshold;FanSpeed;ID;PatrolStatus;
Fan.Collect.Source(19).Compute(3).Type="LeftConcat"
Fan.Collect.Source(19).Compute(3).Column=4
Fan.Collect.Source(19).Compute(3).String=";"

// Add blank "ID;Fanstate2" to the Display ID
// ID;WarningThreshold;FanSpeed;ID;PatrolStatus;ID;FanState2;
Fan.Collect.Source(19).Compute(4).Type="RightConcat"
Fan.Collect.Source(19).Compute(4).Column=5
Fan.Collect.Source(19).Compute(4).String=";;"

// Keep only the number (the OID gives someting like " xx% of maximum")
// ID;WarningThreshold;FanSpeed;ID;PatrolStatus;ID;FanState2;
Fan.Collect.Source(19).Compute(5).Type="Extract"
Fan.Collect.Source(19).Compute(5).Column=3
Fan.Collect.Source(19).Compute(5).SubColumn="1"
Fan.Collect.Source(19).Compute(5).SubSeparators="%%"

// Source(20) = Union of BladeChassis Fans and PureFlex Fans
// ID;WarningThreshold;FanSpeed;ID;PatrolStatus;ID;FanState2;
Fan.Collect.Source(20).Type="TableUnion"
Fan.Collect.Source(20).Table1=%Fan.Collect.Source(18)%
Fan.Collect.Source(20).Table2=%Fan.Collect.Source(19)%

// ValueTable = Source(20)
Fan.Collect.ValueTable=%Fan.Collect.Source(20)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.SpeedPercent=ValueTable.Column(3)
Fan.Collect.Status=ValueTable.Column(5)


// VOLTAGES

// Voltage discovery

// Source(1) = the voltageThresholdsTable of the IBM-BLADE MIB
// ID;VoltageType;UpperThreshold;LowerThreshold
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.20.2.1.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,2,6,10"

// Remove the " Volts" stenza from the Lower and UpperTreshold columns
Voltage.Discovery.Source(1).Compute(1).Type="Replace"
Voltage.Discovery.Source(1).Compute(1).Column="3"
Voltage.Discovery.Source(1).Compute(1).Replace=" Volts"
Voltage.Discovery.Source(1).Compute(1).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(2).Type="Replace"
Voltage.Discovery.Source(1).Compute(2).Column="4"
Voltage.Discovery.Source(1).Compute(2).Replace=" Volts"
Voltage.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove the remaining blanks
// Remove the " Volts" stenza from the Lower and UpperTreshold columns
Voltage.Discovery.Source(1).Compute(3).Type="Replace"
Voltage.Discovery.Source(1).Compute(3).Column="3"
Voltage.Discovery.Source(1).Compute(3).Replace=" "
Voltage.Discovery.Source(1).Compute(3).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(4).Type="Replace"
Voltage.Discovery.Source(1).Compute(4).Column="4"
Voltage.Discovery.Source(1).Compute(4).Replace=" "
Voltage.Discovery.Source(1).Compute(4).ReplaceBy=""

// Remove the unnedded '+' char
Voltage.Discovery.Source(1).Compute(5).Type="Replace"
Voltage.Discovery.Source(1).Compute(5).Column="3"
Voltage.Discovery.Source(1).Compute(5).Replace="+"
Voltage.Discovery.Source(1).Compute(5).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(6).Type="Replace"
Voltage.Discovery.Source(1).Compute(6).Column="4"
Voltage.Discovery.Source(1).Compute(6).Replace="+"
Voltage.Discovery.Source(1).Compute(6).ReplaceBy=""

// Convert the volt values to milliVolts
Voltage.Discovery.Source(1).Compute(7).Type="Multiply"
Voltage.Discovery.Source(1).Compute(7).Column="3"
Voltage.Discovery.Source(1).Compute(7).MultiplyBy="1000"

Voltage.Discovery.Source(1).Compute(8).Type="Multiply"
Voltage.Discovery.Source(1).Compute(8).Column="4"
Voltage.Discovery.Source(1).Compute(8).MultiplyBy="1000"

// InstanceTable = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.AttachedToDeviceID="BladeCenter"
Voltage.Discovery.Instance.AttachedToDeviceType="Computer"

// Voltage Collect

// Collect type is: Mono-Instance, i.e.: one collect for each instance
Voltage.Collect.Type="MonoInstance"

// Source(1) = SNMP Get on the voltageThresholdsEntryCurrentValue OID
Voltage.Collect.Source(1).Type="SnmpGet"
Voltage.Collect.Source(1).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.20.2.1.1.3.%Voltage.Collect.DeviceID%"

// Remove the " Volts" stanza
Voltage.Collect.Source(1).Compute(1).Type="Replace"
Voltage.Collect.Source(1).Compute(1).Column="1"
Voltage.Collect.Source(1).Compute(1).Replace=" Volts"
Voltage.Collect.Source(1).Compute(1).ReplaceBy=""

// Remove the remaining spaces
Voltage.Collect.Source(1).Compute(2).Type="Replace"
Voltage.Collect.Source(1).Compute(2).Column="1"
Voltage.Collect.Source(1).Compute(2).Replace=" "
Voltage.Collect.Source(1).Compute(2).ReplaceBy=""

// Remove the unneeded '+' char
Voltage.Collect.Source(1).Compute(3).Type="Replace"
Voltage.Collect.Source(1).Compute(3).Column="1"
Voltage.Collect.Source(1).Compute(3).Replace="+"
Voltage.Collect.Source(1).Compute(3).ReplaceBy=""

// Convert V to mV
Voltage.Collect.Source(1).Compute(4).Type="Multiply"
Voltage.Collect.Source(1).Compute(4).Column="1"
Voltage.Collect.Source(1).Compute(4).MultiplyBy="1000"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.Voltage=ValueTable.Column(1)


// POWER SUPPLIES

// Power Supply discovery

// Source(1) = the pmHardwareVpdTable SNMP table of the IBM-BLADE MIB
// DeviceID;Manufacturer;FRUNumber;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.21.8.1.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="1,3,4"

// Remove "Not available" instances
PowerSupply.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column="2"
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^Not [Aa]vailable$"

PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=3
PowerSupply.Discovery.Source(1).Compute(2).String="Part Number: "

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AttachedToDeviceID="BladeCenter"
PowerSupply.Discovery.Instance.AttachedToDeviceType="Computer"

// Power Supply collect

// Collect type = Mono-Instance (one collect for each instance)
PowerSupply.Collect.Type="MonoInstance"

// Source(1) = Snmp Get on the bistPowerModulesFunctional OID in the IBM-BLADE MIB
// This is formatted as 1101, with each digit representing one power module
// and with '1' meaning functional and '0' failed
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.2.3.51.2.2.5.2.89.0"

// Extract the digit that concerns our power module
PowerSupply.Collect.Source(1).Compute(1).Type="Substring"
PowerSupply.Collect.Source(1).Compute(1).Column="1"
PowerSupply.Collect.Source(1).Compute(1).Start=%PowerSupply.Collect.DeviceID%
PowerSupply.Collect.Source(1).Compute(1).Length="1"

// Duplicate this digit column
PowerSupply.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(2).Column="1"

// Now translate this digit to a PATROL Status
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="1"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusTranslationTable"

PowerSupply.Collect.Source(1).Compute(4).Type="Translate"
PowerSupply.Collect.Source(1).Compute(4).Column="2"
PowerSupply.Collect.Source(1).Compute(4).TranslationTable="PowerSupplyStatusInformationTranslationTable"

PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)

PowerSupplyStatusTranslationTable(0)="ALARM"
PowerSupplyStatusTranslationTable(1)="OK"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

PowerSupplyStatusInformationTranslationTable(0)="Not functional"
PowerSupplyStatusInformationTranslationTable(1)=""
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

//
//  BLADES: blades themselves
//

//
// Discovery

// Source(1) = SNMP bladeSystemStatusTable
// ID;Exists;Name
Blade.Discovery.Source(1).Type="SnmpTable"
Blade.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.1.5.1.1"
Blade.Discovery.Source(1).SnmpTableSelectColumns="ID,3,6"

// Keep only present blades
Blade.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(1).Compute(1).Column="2"
Blade.Discovery.Source(1).Compute(1).ValueList="1"

// Because Pureflex doesn't use the bladeSystemStatusTable, we're going to also query the LED table
// Hopefully all blades will be in one of the two tables (The IDs are the same)
// Source(2) = SNMP bladeLEDsTable
// ID;Exists;Name
Blade.Discovery.Source(2).Type="SnmpTable"
Blade.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.8.2.1.1"
Blade.Discovery.Source(2).SnmpTableSelectColumns="ID,3,6"

// Keep only present blades
Blade.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(2).Compute(1).Column="2"
Blade.Discovery.Source(2).Compute(1).ValueList="1"

// Union 1 & 2... There might be duplicates, but the KM/PM can deal with this.
// ID;Exists;Name
Blade.Discovery.Source(3).Type="TableUnion"
Blade.Discovery.Source(3).Table1=%Blade.Discovery.Source(1)%
Blade.Discovery.Source(3).Table2=%Blade.Discovery.Source(2)%

// Source(4) = SNMP bladeHardwareVpdTable
// ID;Model;ModelSuffix;SerialNumber;FRU;PartNumber;
Blade.Discovery.Source(4).Type="SnmpTable"
Blade.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.21.4.1.1"
Blade.Discovery.Source(4).SnmpTableSelectColumns="ID,7,12,11,4,10"

// RightConcat the Model Suffix
// ID;Model;ModelSuffix;SerialNumber;FRU;PartNumber;
Blade.Discovery.Source(4).Compute(1).Type="RightConcat"
Blade.Discovery.Source(4).Compute(1).Column="2"
Blade.Discovery.Source(4).Compute(1).String="-"

Blade.Discovery.Source(4).Compute(2).Type="RightConcat"
Blade.Discovery.Source(4).Compute(2).Column="2"
Blade.Discovery.Source(4).Compute(2).String=Column(3)

// Identify the FRU and Part Number
Blade.Discovery.Source(4).Compute(3).Type="LeftConcat"
Blade.Discovery.Source(4).Compute(3).Column="5"
Blade.Discovery.Source(4).Compute(3).String="Alternate Part Number: "

Blade.Discovery.Source(4).Compute(4).Type="LeftConcat"
Blade.Discovery.Source(4).Compute(4).Column="6"
Blade.Discovery.Source(4).Compute(4).String="Part Number: "

// Source(3) = table joint of Source(3) and Source(4)
// ID;Exists;Name;ID;Model;ModelSuffix;SerialNumber;FRU;PartNumber;
Blade.Discovery.Source(5).Type="TableJoint"
Blade.Discovery.Source(5).LeftTable=%Blade.Discovery.Source(3)%
Blade.Discovery.Source(5).RightTable=%Blade.Discovery.Source(4)%
Blade.Discovery.Source(5).LeftKeyColumn="1"
Blade.Discovery.Source(5).RightKeyColumn="1"

// InstanceTable = Source(1)
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(5)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Blade.Discovery.Instance.BladeName=InstanceTable.Column(3)
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(5)
Blade.Discovery.Instance.SerialNumber=InstanceTable.Column(7)
Blade.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(8)
Blade.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)
Blade.Discovery.Instance.AttachedToDeviceID="BladeCenter"
Blade.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance" (one collect for all instances)
Blade.Collect.Type="MultiInstance"

// Source(1) = SNMP bladeSystemStatusTable
// ID;PowerState;HealthState
Blade.Collect.Source(1).Type="SnmpTable"
Blade.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.1.5.1.1"
Blade.Collect.Source(1).SnmpTableSelectColumns="ID,4,5"

// Because Pureflex doesn't use the bladeSystemStatusTable, we're going to also query the LED table
// Hopefully all blades will be in one of the two tables (The IDs are the same)
// Source(2) = SNMP bladeLEDsTable
// ID;PowerState;Name;
Blade.Collect.Source(2).Type="SnmpTable"
Blade.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.8.2.1.1"
Blade.Collect.Source(2).SnmpTableSelectColumns="ID,4,5"

// Union 1 & 2... There might be duplicates, but the KM/PM can deal with this.
// ID;PowerState;Name
Blade.Collect.Source(3).Type="TableUnion"
Blade.Collect.Source(3).Table1=%Blade.Collect.Source(1)%
Blade.Collect.Source(3).Table2=%Blade.Collect.Source(2)%

// Add an underscore right to the PowerState column
// ID;PowerState;_HealthState_;
Blade.Collect.Source(3).Compute(1).Type="LeftConcat"
Blade.Collect.Source(3).Compute(1).Column="3"
Blade.Collect.Source(3).Compute(1).String="_"

// Concatene the PowerState and HealthState columns
// ID;PowerState;PowerState_HealthState;
Blade.Collect.Source(3).Compute(2).Type="LeftConcat"
Blade.Collect.Source(3).Compute(2).Column="3"
Blade.Collect.Source(3).Compute(2).String=Column(2)

// Duplicate this Power&Health column
// ID;PowerState;PowerState_HealthState;PowerState_HealthState;
Blade.Collect.Source(3).Compute(3).Type="DuplicateColumn"
Blade.Collect.Source(3).Compute(3).Column="3"

// Translate the first Power&Health column into a PATROL Status
// ID;PowerState;PATROLStatus;PowerState_HealthState;
Blade.Collect.Source(3).Compute(4).Type="Translate"
Blade.Collect.Source(3).Compute(4).Column="3"
Blade.Collect.Source(3).Compute(4).TranslationTable="BladeStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PowerState;PATROLStatus;StatusInformation;
Blade.Collect.Source(3).Compute(5).Type="Translate"
Blade.Collect.Source(3).Compute(5).Column="4"
Blade.Collect.Source(3).Compute(5).TranslationTable="BladeStatusInformationTranslationTable"

// The BladeStatusTranslationTable
BladeStatusTranslationTable("0_0")="OK"
BladeStatusTranslationTable("0_1")="OK"
BladeStatusTranslationTable("0_2")="WARN"
BladeStatusTranslationTable("0_3")="WARN"
BladeStatusTranslationTable("1_1")="OK"
BladeStatusTranslationTable("1_2")="WARN"
BladeStatusTranslationTable("1_3")="ALARM"
BladeStatusTranslationTable(Default)="UNKNOWN"

// The BladeStatusInformationTranslationTable
BladeStatusInformationTranslationTable("0_0")="Spare - Unknown"
BladeStatusInformationTranslationTable("0_1")="Spare"
BladeStatusInformationTranslationTable("0_2")="Spare - Warning"
BladeStatusInformationTranslationTable("0_3")="Spare - Bad"
BladeStatusInformationTranslationTable("1_1")=""
BladeStatusInformationTranslationTable("1_2")="Warning"
BladeStatusInformationTranslationTable("1_3")="Bad"
BladeStatusInformationTranslationTable(Default)="Unknown Status"

// Translate the PowerState
// ID;PowerState;PATROLStatus;PowerState_HealthState;
Blade.Collect.Source(3).Compute(6).Type="Translate"
Blade.Collect.Source(3).Compute(6).Column="2"
Blade.Collect.Source(3).Compute(6).TranslationTable="BladePowerStateTranslationTable"

// The BladePowerStateTranslationTable
BladePowerStateTranslationTable(0)="off"
BladePowerStateTranslationTable(1)="on"
BladePowerStateTranslationTable(3)="off"
BladePowerStateTranslationTable(4)="off"
// 255 = Blade not present
BladePowerStateTranslationTable(255)=""
BladePowerStateTranslationTable(Default)=""

// ValueTable = Source(3)
Blade.Collect.ValueTable=%Blade.Collect.Source(3)%
Blade.Collect.DeviceID=ValueTable.Column(1)
Blade.Collect.Status=ValueTable.Column(3)
Blade.Collect.StatusInformation=ValueTable.Column(4)
Blade.Collect.PowerState=ValueTable.Column(2)



//
// Management Cards and Switches (O T H E R _ D E V I C E)
//

//
// Discovery

// Source(1) = smControlEntry SNMP table
// ID;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.3.1.1.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID"

// Source(2) = smPowerRestartEntry SNMP table
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(2).Type="SnmpTable"
OtherDevice.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.3.1.7.1"
OtherDevice.Discovery.Source(2).SnmpTableSelectColumns="ID,4,5,6,22"

// Translate the SwitchType
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(2).Compute(1).Type="Translate"
OtherDevice.Discovery.Source(2).Compute(1).Column="2"
OtherDevice.Discovery.Source(2).Compute(1).TranslationTable="SwitchTypeTranslationTable"

// The BladeStatusTranslationTable
SwitchTypeTranslationTable(1)="Ethernet"
SwitchTypeTranslationTable(2)="Fibre"
SwitchTypeTranslationTable(3)="Opm"
SwitchTypeTranslationTable(4)="SerialCM"
SwitchTypeTranslationTable(5)="CopperPassThrough"
SwitchTypeTranslationTable(6)="Infiniband"
SwitchTypeTranslationTable(20)="HighSpeed"
SwitchTypeTranslationTable(30)="PassThrough"
SwitchTypeTranslationTable(40)="SAS"
SwitchTypeTranslationTable(Default)="UNKNOWN"

// Join the status table (1) with the FRU table (2)
// ID;ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(3).Type="TableJoint"
OtherDevice.Discovery.Source(3).LeftTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(3).RightTable=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(3).LeftKeyColumn=1
OtherDevice.Discovery.Source(3).RightKeyColumn=1
OtherDevice.Discovery.Source(3).DefaultRightLine=";;;;;"

// Trim unwanted columns
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(3).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(3).Compute(1).ColumnNumbers="1,3,4,5,6"

// Add "SwitchModule" before the switch ID (so that we won't get confused with switch objects)
// ID;Present;IPAddress;
OtherDevice.Discovery.Source(3).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(3).Compute(2).Column=1
OtherDevice.Discovery.Source(3).Compute(2).String="Module-"

// Source(2) = smPowerRestartEntry SNMP table
// ID;Present;IPAddress;
OtherDevice.Discovery.Source(4).Type="SnmpTable"
OtherDevice.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.5.1.1"
OtherDevice.Discovery.Source(4).SnmpTableSelectColumns="ID,2,3"

// Keep only present management modules
// ID;Present;IPAddress;
OtherDevice.Discovery.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(4).Compute(1).Column=2
OtherDevice.Discovery.Source(4).Compute(1).ValueList="1"

// Trim unwanted columns
// ID;IPAddress;
OtherDevice.Discovery.Source(4).Compute(2).Type="KeepColumns"
OtherDevice.Discovery.Source(4).Compute(2).ColumnNumbers="1,3"

// Add Columns
// ID;SwitchType;MAC;IPAddress;
OtherDevice.Discovery.Source(4).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(4).Compute(3).Column=2
OtherDevice.Discovery.Source(4).Compute(3).String="Management Module;;"

// Add Columns
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(4).Compute(4).Type="RightConcat"
OtherDevice.Discovery.Source(4).Compute(4).Column=4
OtherDevice.Discovery.Source(4).Compute(4).String=";"

// Union Switches and Management Module
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(5).Type="TableUnion"
OtherDevice.Discovery.Source(5).Table1=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Source(5).Table2=%OtherDevice.Discovery.Source(4)%

// Now let's discovery PureFlex Switches from their LEDs
// ID;Label;State;
OtherDevice.Discovery.Source(6).Type="SnmpTable"
OtherDevice.Discovery.Source(6).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.8.4.2.1"
OtherDevice.Discovery.Source(6).SnmpTableSelectColumns="2,3,4"

// Make a copy of the Switch LEDs
// ID;Label;State;
OtherDevice.Discovery.Source(7)=%OtherDevice.Discovery.Source(6)%

// Keep only FRU Faults
// ID;Label;State;
OtherDevice.Discovery.Source(7).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(7).Compute(1).Column=2
OtherDevice.Discovery.Source(7).Compute(1).RegExp="FRU Fault"

// Make a copy of the Switch LEDs
// ID;Label;State;
OtherDevice.Discovery.Source(8)=%OtherDevice.Discovery.Source(6)%

// Keep only Power
// ID;Label;State;
OtherDevice.Discovery.Source(8).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(8).Compute(1).Column=2
OtherDevice.Discovery.Source(8).Compute(1).RegExp="Power"

// Keep only Switches with Power "On"
// ID;Label;State;
OtherDevice.Discovery.Source(8).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(8).Compute(2).Column=3
OtherDevice.Discovery.Source(8).Compute(2).ValueList="1"

// Join the Fault LEDs with the Power LEDs.  Which will keep only Powered On Switches
// ID;Label;State;ID;Label;State;
OtherDevice.Discovery.Source(9).Type="TableJoint"
OtherDevice.Discovery.Source(9).LeftTable=%OtherDevice.Discovery.Source(7)%
OtherDevice.Discovery.Source(9).RightTable=%OtherDevice.Discovery.Source(8)%
OtherDevice.Discovery.Source(9).LeftKeyColumn=1
OtherDevice.Discovery.Source(9).RightKeyColumn=1

// Trim unwanted columns
// ID;
OtherDevice.Discovery.Source(9).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(9).Compute(1).ColumnNumbers="1"

// Add Columns
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(9).Compute(2).Type="RightConcat"
OtherDevice.Discovery.Source(9).Compute(2).Column=1
OtherDevice.Discovery.Source(9).Compute(2).String=";Switch Module;;;"

// Add "Switch Module" to ID
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(9).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(9).Compute(3).Column=1
OtherDevice.Discovery.Source(9).Compute(3).String="SM-"

// Union BladeChassis and Pureflex
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.Source(10).Type="TableUnion"
OtherDevice.Discovery.Source(10).Table1=%OtherDevice.Discovery.Source(5)%
OtherDevice.Discovery.Source(10).Table2=%OtherDevice.Discovery.Source(9)%

OtherDevice.Discovery.Source(10).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(10).Compute(1).Column=3
OtherDevice.Discovery.Source(10).Compute(1).String="MAC: "

OtherDevice.Discovery.Source(10).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(10).Compute(2).Column=4
OtherDevice.Discovery.Source(10).Compute(2).String="IP: "

OtherDevice.Discovery.Source(10).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(10).Compute(3).Column=5
OtherDevice.Discovery.Source(10).Compute(3).String="Manufacturer: "


// InstanceTable = Source(10)
// ID;SwitchType;MAC;IPAddress;Manufacturer;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(10)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(2)

//
// Collect

// Collect type is "multi-instance"
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = smControlEntry SNMP table
// ID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.3.1.1.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,15"

// Add module to the deviceID
// ID;Status;
OtherDevice.Collect.Source(1).Compute(1).Type="LeftConcat"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).String="Module-"

// Translate Condition into a PATROL Status
// ID;PatrolStatus;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=2
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="SwitchModuleTranslationTable"

// The SwitchModuleTranslationTable
SwitchModuleTranslationTable(1)="OK"
SwitchModuleTranslationTable(2)="WARN"
SwitchModuleTranslationTable(3)="ALARM"
SwitchModuleTranslationTable(Default)="UNKNOWN"

// Source(2) = smControlEntry SNMP table
// ID;Status;
OtherDevice.Collect.Source(2).Type="SnmpTable"
OtherDevice.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.22.5.1.1"
OtherDevice.Collect.Source(2).SnmpTableSelectColumns="ID,4"

// Translate Condition into a PATROL Status
// ID;PatrolStatus;
OtherDevice.Collect.Source(2).Compute(1).Type="Translate"
OtherDevice.Collect.Source(2).Compute(1).Column=2
OtherDevice.Collect.Source(2).Compute(1).TranslationTable="ManagementModuleTranslationTable"

// The ManagementModuleTranslationTable
ManagementModuleTranslationTable(1)="OK"
ManagementModuleTranslationTable(2)="WARN"
ManagementModuleTranslationTable(3)="ALARM"
ManagementModuleTranslationTable(Default)="UNKNOWN"

// Now let's collect PureFlex Switches from their LEDs
// ID;Label;State;
OtherDevice.Collect.Source(3).Type="SnmpTable"
OtherDevice.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.2.3.51.2.2.8.4.2.1"
OtherDevice.Collect.Source(3).SnmpTableSelectColumns="2,3,4"

// Keep only FRU Faults
// ID;Label;State;
OtherDevice.Collect.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(3).Compute(1).Column=2
OtherDevice.Collect.Source(3).Compute(1).RegExp="FRU Fault"

// Attach an indentifier to the ID
// ID;Label;State;
OtherDevice.Collect.Source(3).Compute(2).Type="LeftConcat"
OtherDevice.Collect.Source(3).Compute(2).Column=1
OtherDevice.Collect.Source(3).Compute(2).String="SM-"

// Trim unwanted columns
// ID;State;
OtherDevice.Collect.Source(3).Compute(3).Type="KeepColumns"
OtherDevice.Collect.Source(3).Compute(3).ColumnNumbers="1,3"

// Translate State into a PATROL Status
// ID;PatrolStatus;
OtherDevice.Collect.Source(3).Compute(4).Type="Translate"
OtherDevice.Collect.Source(3).Compute(4).Column=2
OtherDevice.Collect.Source(3).Compute(4).TranslationTable="LEDSwitchModuleTranslationTable"

// The ManagementModuleTranslationTable
LEDSwitchModuleTranslationTable(0)="OK"
LEDSwitchModuleTranslationTable(1)="ALARM"
LEDSwitchModuleTranslationTable(Default)="UNKNOWN"

// join Switch to Management Module
// ID;PatrolStatus;
OtherDevice.Collect.Source(4).Type="TableUnion"
OtherDevice.Collect.Source(4).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(4).Table2=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(4).Table3=%OtherDevice.Collect.Source(3)%

// The ValueTable
// ID;PatrolStatus;q107

OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(4)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
