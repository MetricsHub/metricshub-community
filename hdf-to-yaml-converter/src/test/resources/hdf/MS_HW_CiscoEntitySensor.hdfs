////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Cisco Entity Sensor
//                Connects to Cisco embedddedSNMP agent
//
//


//
// Header
//

hdf.DisplayName="Cisco Entity Sensor (SNMP)"
hdf.TypicalPlatform="Cisco"
hdf.ReliesOn="Cisco SNMP Agent (ciscoMgmt)"
hdf.Version="1.0"
hdf.Comments="This connector discovers the enclosure Cisco Ethernet switches as well as the various environment sensors (temperatures, fans, power supplies, etc.). It relies on the SNMP protocol."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Network"

hdf.Supersedes="MS_HW_GenericSwitchEnclosure.hdf,MS_HW_MIB2.hdf"

#include MS_HW_MIB2.hhdf

//
// DETECTION
//

// Detection Criteria 1
// Must have A Cisco Enviroment Monitor Present
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.9.9.91.1.1.1.1"

// Detection Criteria 1
// Must have A Cisco Entity Sensor Present
Detection.Criteria(2).Type="SNMP"
Detection.Criteria(2).SnmpGetNext="1.3.6.1.2.1.47.1.1.1.1"


//
// Enclosure
//

//Entities
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.2.1.47.1.1.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,4,5,7,11,12,13"

// Remove Container Class as they are redundant.
Enclosure.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(1).Compute(1).Column=3
Enclosure.Discovery.Source(1).Compute(1).ValueList="5"

// Save Enclosure.Discovery.Source(1) for further computes
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only Chassis class for Enclosure.
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=3
Enclosure.Discovery.Source(2).Compute(1).RegExp="3"

// Sensor Table
// ID;Type;Value;Status;Entity;
Enclosure.Discovery.Source(3).Type="SnmpTable"
Enclosure.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.9.9.91.1.1.1.1"
Enclosure.Discovery.Source(3).SnmpTableSelectColumns="ID,1,2,4,5,8"

// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
// InstanceTable = Source(2)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID="Chassis"
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(7)
Enclosure.Discovery.Instance.Type="Chassis"


// Collect
Enclosure.Collect.Type="MultiInstance"

// Sensor
// ID;Type;Units;Value;Status;Parent
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.91.1.1.1.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="ID,1,2,4,5,8"

Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// ID;Type;Unit;Value;Status;Status;
Enclosure.Collect.Source(2).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(2).Compute(1).Column=5

// ID;Type;Unit;Value;PatrolStatus;Status;
Enclosure.Collect.Source(2).Compute(2).Type="Translate"
Enclosure.Collect.Source(2).Compute(2).Column=5
Enclosure.Collect.Source(2).Compute(2).TranslationTable="SensorStatusTranslationTable"

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Enclosure.Collect.Source(2).Compute(3).Type="Translate"
Enclosure.Collect.Source(2).Compute(3).Column=6
Enclosure.Collect.Source(2).Compute(3).TranslationTable="SensorStatusInformationTranslationTable"

// Entities
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Enclosure.Collect.Source(3).Type="SnmpTable"
Enclosure.Collect.Source(3).SnmpTableOid="1.3.6.1.2.1.47.1.1.1.1"
Enclosure.Collect.Source(3).SnmpTableSelectColumns="ID,4,5,7,11,12,13"

// LEFT  ID;Type;Units;Value;Status;Parent
// RIGHT ID;Parent;Type;Name;SerialNumber;Vendor;Model;
// Result
// SensorID;Type;Unit;Value;Status;Entity(parent);ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Enclosure.Collect.Source(4).Type="TableJoint"
Enclosure.Collect.Source(4).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(4).RightTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(4).LeftKeyColumn=6
Enclosure.Collect.Source(4).RightKeyColumn=1

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
Enclosure.Collect.Source(4).Compute(1).Type="Awk"
Enclosure.Collect.Source(4).Compute(1).AwkScript=EmbeddedFile(1)

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
Enclosure.Collect.Source(4).Compute(2).Type="Translate"
Enclosure.Collect.Source(4).Compute(2).Column=9
Enclosure.Collect.Source(4).Compute(2).TranslationTable="SensorStatusTranslationTable"

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
Enclosure.Collect.Source(4).Compute(3).Type="Translate"
Enclosure.Collect.Source(4).Compute(3).Column=10
Enclosure.Collect.Source(4).Compute(3).TranslationTable="SensorStatusInformationTranslationTable"

// Watts for if we find total watt capacity
Enclosure.Collect.Source(4).Compute(4).Type="Multiply"
Enclosure.Collect.Source(4).Compute(4).Column=8
Enclosure.Collect.Source(4).Compute(4).MultiplyBy=Column(7)

Enclosure.Collect.Source(5)=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(5).Compute(1).Type="Awk"
Enclosure.Collect.Source(5).Compute(1).AwkScript=EmbeddedFile(2)

// Chassis;PowerConsumption
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(5)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.PowerConsumption=ValueTable.Column(2)


//
// PowerSupply
//

// LEFT   ID;Type;Unit;Value;Status;Parent; (sensor)
// RIGHT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity)
// Result
// SensorID;Type;Unit;Value;Status;Entity(parent);ID;Parent;Type;Name;SerialNumber;Vendor;Model;
PowerSupply.Discovery.Source(1).Type="TableJoint"
PowerSupply.Discovery.Source(1).LeftTable=%Enclosure.Discovery.Source(3)%
PowerSupply.Discovery.Source(1).RightTable=%Enclosure.Discovery.Source(1)%
PowerSupply.Discovery.Source(1).LeftKeyColumn=6
PowerSupply.Discovery.Source(1).RightKeyColumn=1

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
PowerSupply.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).ValueList="6"

// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(6)

PowerSupply.Discovery.Instance.AttachedToDeviceID="Chassis"

// Collect

// Collect type = multi-instance
PowerSupply.Collect.Type="MultiInstance"

// PowerSupply Status is a rollup of all sensors associated to it.
// ID;Type;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
PowerSupply.Collect.ValueTable=%Enclosure.Collect.Source(4)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(9)
PowerSupply.Collect.StatusInformation=ValueTable.Column(10)


//
// Temperature
//

// LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
// RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
// Result
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
Temperature.Discovery.Source(1).Type="TableJoint"
Temperature.Discovery.Source(1).LeftTable=%Enclosure.Discovery.Source(1)%
Temperature.Discovery.Source(1).RightTable=%Enclosure.Discovery.Source(3)%
Temperature.Discovery.Source(1).LeftKeyColumn=1
Temperature.Discovery.Source(1).RightKeyColumn=1

// Keep only celsius sensors
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=9
Temperature.Discovery.Source(1).Compute(1).ValueList="8"

Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(4)

Temperature.Discovery.Instance.AttachedToDeviceID="Chassis"


// Collect type = multi-instance
Temperature.Collect.Type="MultiInstance"

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Temperature.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(4)
Temperature.Collect.Status=ValueTable.Column(5)
Temperature.Collect.StatusInformation=ValueTable.Column(6)


//
// Voltage
//

// LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
// RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
// Result
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
Voltage.Discovery.Source(1).Type="TableJoint"
Voltage.Discovery.Source(1).LeftTable=%Enclosure.Discovery.Source(1)%
Voltage.Discovery.Source(1).RightTable=%Enclosure.Discovery.Source(3)%
Voltage.Discovery.Source(1).LeftKeyColumn=1
Voltage.Discovery.Source(1).RightKeyColumn=1

// Keep only DC sensors
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=9
Voltage.Discovery.Source(1).Compute(1).ValueList="4"

// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Voltage.Discovery.Instance.VoltageType="DC"

Voltage.Discovery.Instance.AttachedToDeviceID="Chassis"

// Collect type = multi-instance
Voltage.Collect.Type="MultiInstance"

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Voltage.Collect.Source(1)=%Enclosure.Collect.Source(2)%

Voltage.Collect.Source(1).Compute(1).Type="Translate"
Voltage.Collect.Source(1).Compute(1).Column=3
Voltage.Collect.Source(1).Compute(1).TranslationTable="SensorValueMultiplierTable"

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Voltage.Collect.Source(1).Compute(2).Type="Multiply"
Voltage.Collect.Source(1).Compute(2).Column=4
Voltage.Collect.Source(1).Compute(2).MultiplyBy=Column(3)

// ID;Type;Value;PatrolStatus;StatusInformation;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(4)
Voltage.Collect.Status=ValueTable.Column(5)
Voltage.Collect.StatusInformation=ValueTable.Column(6)


//
// Fan
//

// LEFT  ID;Parent;Type;Name;SerialNumber;Vendor;Model; (entity) EDS1
// RIGHT ID;Type;Unit;Value;Status;Parent; (sensor) EDS3
// Result
// ID;Parent;Type;Name;SerialNumber;Vendor;Model;ID;Type;Unit;Value;Status;Parent;
Fan.Discovery.Source(1).Type="TableJoint"
Fan.Discovery.Source(1).LeftTable=%Enclosure.Discovery.Source(1)%
Fan.Discovery.Source(1).RightTable=%Enclosure.Discovery.Source(3)%
Fan.Discovery.Source(1).LeftKeyColumn=1
Fan.Discovery.Source(1).RightKeyColumn=1

// Keep only RPM sensors
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=9
Fan.Discovery.Source(1).Compute(1).ValueList="10"

// ID;Parent;Type;Name;SerialNumber;Vendor;Model;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(4)

Fan.Discovery.Instance.AttachedToDeviceID="Chassis"

// Collect type = multi-instance
Fan.Collect.Type="MultiInstance"

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Fan.Collect.Source(1)=%Enclosure.Collect.Source(2)%

// ID;Type;Unit;Value;PatrolStatus;StatusInformation;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(4)
Fan.Collect.Status=ValueTable.Column(5)
Fan.Collect.StatusInformation=ValueTable.Column(6)

//add network card discovery present in mib2.hdf and not in mib2.hhdf
// PortID;Description;TypeCode;MacAddress;AdminStatus;ID;Name;Alias;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(3)

// SensorStatusTranslationTable
SensorStatusTranslationTable(1)="OK"
SensorStatusTranslationTable(2)="WARN"
SensorStatusTranslationTable(3)="ALARM"
SensorStatusTranslationTable(4)="ALARM"
SensorStatusTranslationTable(5)="ALARM"
SensorStatusTranslationTable(6)="ALARM"
SensorStatusTranslationTable(Default)="UNKNOWN"

// SensorStatusInformationTranslationTable
SensorStatusInformationTranslationTable(1)=""
SensorStatusInformationTranslationTable(2)="Warning"
SensorStatusInformationTranslationTable(3)="Critical"
SensorStatusInformationTranslationTable(4)="Shutdown"
SensorStatusInformationTranslationTable(5)="No Longer Present"
SensorStatusInformationTranslationTable(6)="Not Functioning"
SensorStatusInformationTranslationTable(Default)="Unknown Status"

SensorValueMultiplierTable(Default)=1
SensorValueMultiplierTable(9)=1000 //V to mV

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that creates proper PowerSupply entry based on various sensors
///    Type;ID;DisplayID;SerialNumber;Vendor;Model;AC;Amps;Status;Status;
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";"}
{
  INDEX[$7] = $7;
  PS[$7] = $7 ";" $9 ";" $10 ";Serial Number: " $11 ";Vendor: " $12 ";Model: " $13
  if ($2 == 5) { AMPS[$7] = $4 }
  if ($2 == 3) { AC[$7] = $4 }
  if ($5 >= STATUS[$7] || "" == STATUS[$7]) { STATUS[$7] = $5 }
}

END {
  for (var in INDEX)
    print PS[var] ";" AC[var] ";" AMPS[var] ";" STATUS[var] ";" STATUS[var]
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that calculates PowerConsumption
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {
  FS=";"
  PowerConsumption=0
}
{
  PowerConsumption += $8
}
END {
  print "Chassis;" PowerConsumption
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
