//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_HPInsightWBEM
//
//      Supports: HP Insight Manager (Server Agent) - WBEM Version
//
//

#include MS_HW_CIMProcessorFamily.hhdf

// HEADER

hdf.DisplayName="HP Insight Management Agent - Server (WBEM)"
hdf.TypicalPlatform="HP ProLiant"
hdf.ReliesOn="HP Insight Management Agents (WBEM)"
hdf.Version="1.2"
hdf.Comments="This connector provides hardware monitoring through the HP Insight Manager (Server Agent) which supports almost all HP ProLiant and Integrity servers under Windows and Linux, as well as Tru64 servers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux,OOB"

// Superseeds
hdf.Supersedes="MS_HW_SunCediag.hdf,MS_HW_SunFmadm.hdf,MS_HW_SunPrtdiag.hdf,MS_HW_SunPrtpicl.hdf,MS_HW_SunPsrinfo.hdf,MS_HW_SunPsrinfoT1.hdf,MS_HW_SunScSnapshot.hdf,MS_HW_IpmiTool.hdf,MS_HW_VMwareESX4i.hdf,MS_HW_VMwareESXi.hdf,MS_HW_VMwareESXiDisksIPMI.hdf,MS_HW_VMwareESXiDisksStorage.hdf"

// Detection

// OS must be Windows
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Linux,OOB"

// The HP_ComputerSystemChassis WBEM class must be instanciated
Detection.Criteria(2).Type="WBEM"
Detection.Criteria(2).WbemQuery="SELECT Model FROM HP_ComputerSystemChassis"
Detection.Criteria(2).WbemNameSpace="root/hpq"
Detection.Criteria(2).ErrorMessage="The HP Insight Agent seems to not be working properly. Please reinstall the HP Insight Agent."

// The HP_NumericSensor WBEM class must have instances.
Detection.Criteria(3).Type="WBEM"
Detection.Criteria(3).WbemQuery="SELECT DeviceID FROM HP_NumericSensor"
Detection.Criteria(3).WbemNameSpace="root/hpq"
Detection.Criteria(3).ErrorMessage="The HP Insight Agent is unable to access environmental sensors.  Check installation of IPMI for Linux and HCL for ESX."

//
// Enclosure: computer
//

//
// Discovery

// Source(1) = the HP_ComputerSystemChassis WBEM class
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemQuery="SELECT Model,SerialNumber FROM HP_ComputerSystemChassis"
Enclosure.Discovery.Source(1).WbemNameSpace="root/hpq"

// Add an identifier
// ID;Model;SerialNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="HPWBEM;"

// Check if the cimv2 namespace (ESX) has a power sensor
// BaseUnits,CurrentReading
Enclosure.Discovery.Source(2).Type="WBEM"
Enclosure.Discovery.Source(2).WbemNameSpace="root/cimv2"
Enclosure.Discovery.Source(2).WbemQuery="SELECT BaseUnits,CurrentReading FROM CIM_NumericSensor"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
// BaseUnits,CurrentReading
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).ValueList="7"

// Replace the first column by an identifier
// ID;CurrentReading
Enclosure.Discovery.Source(2).Compute(2).Type="Replace"
Enclosure.Discovery.Source(2).Compute(2).Column=1
Enclosure.Discovery.Source(2).Compute(2).Replace=Column(1)
Enclosure.Discovery.Source(2).Compute(2).ReplaceBy="HPWBEM"

// Exclude sensors with currentreading of 0
// ID;CurrentReading
Enclosure.Discovery.Source(2).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(2).Compute(3).Column=2
Enclosure.Discovery.Source(2).Compute(3).ValueList="0"

// Check if the hpq namespace (HP) has a power sensor
// BaseUnits,CurrentReading
Enclosure.Discovery.Source(3).Type="WBEM"
Enclosure.Discovery.Source(3).WbemNameSpace="root/cimv2"
Enclosure.Discovery.Source(3).WbemQuery="SELECT BaseUnits,CurrentReading FROM HP_PowerMeter"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
// BaseUnits,CurrentReading
Enclosure.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(3).Compute(1).Column=1
Enclosure.Discovery.Source(3).Compute(1).ValueList="7"

// Replace the first column by an identifier
// ID;CurrentReading
Enclosure.Discovery.Source(3).Compute(2).Type="Replace"
Enclosure.Discovery.Source(3).Compute(2).Column=1
Enclosure.Discovery.Source(3).Compute(2).Replace=Column(1)
Enclosure.Discovery.Source(3).Compute(2).ReplaceBy="HPWBEM"

// Exclude sensors with currentreading of 0
// ID;CurrentReading
Enclosure.Discovery.Source(3).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(3).Compute(3).Column=2
Enclosure.Discovery.Source(3).Compute(3).ValueList="0"

// Source(4) = Union of 2 & 3
// Ok, let's join the ESX and HP sources together
// ID;CurrentReading
Enclosure.Discovery.Source(4).Type="TableUnion"
Enclosure.Discovery.Source(4).Table1=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Source(4).Table2=%Enclosure.Discovery.Source(2)%

// Join the computer system instance with the first power consumption available (if any)
// ID;Model;SerialNumber;ID;CurrentReading;
Enclosure.Discovery.Source(5).Type="TableJoint"
Enclosure.Discovery.Source(5).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(5).RightTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Source(5).LeftKeyColumn=1
Enclosure.Discovery.Source(5).RightKeyColumn=1
Enclosure.Discovery.Source(5).DefaultRightLine=";;"

// InstanceTable = Source(1)
// Note: InstanceTable must contain only one line! so DeviceID is hard coded
// ID;Model;SerialNumber;ID;CurrentReading;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(5)%
Enclosure.Discovery.Instance.DeviceID="HPWBEM"
Enclosure.Discovery.Instance.DisplayID="HPWBEM"
Enclosure.Discovery.Instance.Vendor="HP"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Type="Computer"


// Collect

Enclosure.Collect.Type="MultiInstance"

// Reusing entire discovery as we will always need an instance, even if no power consumption is available.

// Source(1) = the HP_ComputerSystemChassis WBEM class
Enclosure.Collect.Source(1).Type="WBEM"
Enclosure.Collect.Source(1).WbemQuery="SELECT Model,SerialNumber FROM HP_ComputerSystemChassis"
Enclosure.Collect.Source(1).WbemNameSpace="root/hpq"

// Add an identifier
// ID;Model;SerialNumber;
Enclosure.Collect.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).String="HPWBEM;"

// Check if the cimv2 namespace (ESX) has a power sensor
// BaseUnits,CurrentReading
Enclosure.Collect.Source(2).Type="WBEM"
Enclosure.Collect.Source(2).WbemNameSpace="root/cimv2"
Enclosure.Collect.Source(2).WbemQuery="SELECT BaseUnits,CurrentReading FROM CIM_NumericSensor"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
// BaseUnits,CurrentReading
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).ValueList="7"

// Replace the first column by an identifier
// ID;CurrentReading
Enclosure.Collect.Source(2).Compute(2).Type="Replace"
Enclosure.Collect.Source(2).Compute(2).Column=1
Enclosure.Collect.Source(2).Compute(2).Replace=Column(1)
Enclosure.Collect.Source(2).Compute(2).ReplaceBy="HPWBEM"

// Exclude sensors with currentreading of 0
// ID;CurrentReading
Enclosure.Collect.Source(2).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Collect.Source(2).Compute(3).Column=2
Enclosure.Collect.Source(2).Compute(3).ValueList="0"

// Check if the hpq namespace (HP) has a power sensor
// BaseUnits,CurrentReading
Enclosure.Collect.Source(3).Type="WBEM"
Enclosure.Collect.Source(3).WbemNameSpace="root/cimv2"
Enclosure.Collect.Source(3).WbemQuery="SELECT BaseUnits,CurrentReading FROM HP_PowerMeter"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
// BaseUnits,CurrentReading
Enclosure.Collect.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(3).Compute(1).Column=1
Enclosure.Collect.Source(3).Compute(1).ValueList="7"

// Replace the first column by an identifier
// ID;CurrentReading
Enclosure.Collect.Source(3).Compute(2).Type="Replace"
Enclosure.Collect.Source(3).Compute(2).Column=1
Enclosure.Collect.Source(3).Compute(2).Replace=Column(1)
Enclosure.Collect.Source(3).Compute(2).ReplaceBy="HPWBEM"

// Exclude sensors with currentreading of 0
// ID;CurrentReading
Enclosure.Collect.Source(3).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Collect.Source(3).Compute(3).Column=2
Enclosure.Collect.Source(3).Compute(3).ValueList="0"

// Source(4) = Union of 2 & 3
// Ok, let's join the ESX and HP sources together
// ID;CurrentReading
Enclosure.Collect.Source(4).Type="TableUnion"
Enclosure.Collect.Source(4).Table1=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(4).Table2=%Enclosure.Collect.Source(2)%

// Join the computer system instance with the first power consumption available (if any)
// ID;Model;SerialNumber;ID;CurrentReading;
Enclosure.Collect.Source(5).Type="TableJoint"
Enclosure.Collect.Source(5).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(5).RightTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(5).LeftKeyColumn=1
Enclosure.Collect.Source(5).RightKeyColumn=1
Enclosure.Collect.Source(5).DefaultRightLine=";;"

// Instance Table
// ID;Model;SerialNumber;ID;CurrentReading;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(5)%
Enclosure.Collect.DeviceID="HPWBEM"
Enclosure.Collect.PowerConsumption=ValueTable.Column(5)


//
// CPUs
//

//
// Discovery
// Source 1 = HP_Processor Class
cpu.Discovery.Source(1).Type="WBEM"
cpu.Discovery.Source(1).WbemQuery="SELECT CurrentClockSpeed,DeviceID,Family FROM HP_Processor"
cpu.Discovery.Source(1).WbemNameSpace="root/hpq"

// Copy Family number to translate vendor as well
cpu.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Discovery.Source(1).Compute(1).Column="3"

// Translate the Family number into a vendor
cpu.Discovery.Source(1).Compute(2).Type="Translate"
cpu.Discovery.Source(1).Compute(2).Column="3"
cpu.Discovery.Source(1).Compute(2).TranslationTable="cpuVendorTranslationTable"

// Translate the Family number into a model name
cpu.Discovery.Source(1).Compute(3).Type="Translate"
cpu.Discovery.Source(1).Compute(3).Column="4"
cpu.Discovery.Source(1).Compute(3).TranslationTable="cpuFamilyTranslationTable"


// InstanceTable = Source(1)
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(2)
cpu.Discovery.Instance.DisplayID=InstanceTable.Column(2)
cpu.Discovery.Instance.Model=InstanceTable.Column(4)
cpu.Discovery.Instance.Vendor=InstanceTable.Column(3)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(1)
cpu.Discovery.Instance.AttachedToDeviceID="HPWBEM"
cpu.Discovery.Instance.AttachedToDeviceType="Computer"


//
// Collect

cpu.Collect.Type="MultiInstance"

// Source(1) = The HP_Processor WBEM class
cpu.Collect.Source(1).Type="WBEM"
cpu.Collect.Source(1).WbemQuery="SELECT CurrentClockSpeed,DeviceID,HealthState FROM HP_Processor"
cpu.Collect.Source(1).WbemNameSpace="root/hpq"

cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column=3

cpu.Collect.Source(1).Compute(2).Type="Translate"
cpu.Collect.Source(1).Compute(2).Column=3
cpu.Collect.Source(1).Compute(2).TranslationTable="genStatusTranslationTable"

cpu.Collect.Source(1).Compute(3).Type="Translate"
cpu.Collect.Source(1).Compute(3).Column=4
cpu.Collect.Source(1).Compute(3).TranslationTable="genStatusInformationTranslationTable"

cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(2)
cpu.Collect.CurrentSpeed=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(3)
cpu.Collect.StatusInformation=ValueTable.Column(4)

//
// Memory
//

//
// Discovery

// Source(1)
Memory.Discovery.Source(1).Type="WBEM"
Memory.Discovery.Source(1).WbemQuery="SELECT Capacity,MemoryType,Name,SerialNumber FROM HP_MemoryModule"
Memory.Discovery.Source(1).WbemNameSpace="root/hpq"

// Convert size to MB
Memory.Discovery.Source(1).Compute(1).Type="Divide"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).DivideBy="1048576"

// Translate memory type
Memory.Discovery.Source(1).Compute(2).Type="Translate"
Memory.Discovery.Source(1).Compute(2).Column=2
Memory.Discovery.Source(1).Compute(2).TranslationTable="memoryTypeTranslationTable"

// InstanceTable = Source(1)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Memory.Discovery.Instance.Size=InstanceTable.Column(1)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Memory.Discovery.Instance.Type=InstanceTable.Column(2)
Memory.Discovery.Instance.AttachedToDeviceID="HPWBEM"
Memory.Discovery.Instance.AttachedToDeviceType="Computer"

// The memoryTypeTranslationTable
memoryTypeTranslationTable(0)="Unknown Memory Type"
memoryTypeTranslationTable(1)="Unknown Memory Type"
memoryTypeTranslationTable(2)="DRAM"
memoryTypeTranslationTable(3)="Synchronous DRAM"
memoryTypeTranslationTable(4)="Cache DRAM"
memoryTypeTranslationTable(5)="EDO"
memoryTypeTranslationTable(6)="EDRAM"
memoryTypeTranslationTable(7)="VRAM"
memoryTypeTranslationTable(8)="SRAM"
memoryTypeTranslationTable(9)="RAM"
memoryTypeTranslationTable(10)="ROM"
memoryTypeTranslationTable(11)="Flash"
memoryTypeTranslationTable(12)="EEPROM"
memoryTypeTranslationTable(13)="FEPROM"
memoryTypeTranslationTable(14)="EPROM"
memoryTypeTranslationTable(15)="CDRAM"
memoryTypeTranslationTable(16)="3DRAM"
memoryTypeTranslationTable(17)="SDRAM"
memoryTypeTranslationTable(18)="SGRAM"
memoryTypeTranslationTable(19)="RDRAM"
memoryTypeTranslationTable(20)="DDR"
memoryTypeTranslationTable(21)="DDR-2"
memoryTypeTranslationTable(22)="BRAM"
memoryTypeTranslationTable(23)="FB-DIMM"
memoryTypeTranslationTable(24)="DDR3"
memoryTypeTranslationTable(25)="FBD2"
memoryTypeTranslationTable(Default)=""


//
// Collect

Memory.Collect.Type="MultiInstance"

// Source(1) = The IBMPSG_Processor WBEM class
Memory.Collect.Source(1).Type="WBEM"
Memory.Collect.Source(1).WbemQuery="SELECT HealthState,Name FROM HP_MemoryModule"
Memory.Collect.Source(1).WbemNameSpace="root/hpq"

Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column="1"

Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column="1"
Memory.Collect.Source(1).Compute(2).TranslationTable="genStatusTranslationTable"

Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column="2"
Memory.Collect.Source(1).Compute(3).TranslationTable="genStatusInformationTranslationTable"

Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(3)
Memory.Collect.Status=ValueTable.Column(1)
Memory.Collect.StatusInformation=ValueTable.Column(2)

//
// Fans
//

//
// Discovery

// Source(1) = the HP_WinFan WBEM class
Fan.Discovery.Source(1).Type="WBEM"
Fan.Discovery.Source(1).WbemQuery="SELECT DeviceID,FanType,Caption FROM HP_Fan"
Fan.Discovery.Source(1).WbemNameSpace="root/hpq"

// Translate fan type
Fan.Discovery.Source(1).Compute(1).Type="Translate"
Fan.Discovery.Source(1).Compute(1).Column="2"
Fan.Discovery.Source(1).Compute(1).TranslationTable="fanTypeTranslationTable"

// Duplicate the Caption
// DeviceID,FanType,Caption,Caption
Fan.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(2).Column=7

// Extract Everything before the dash
// DeviceID,FanType,Caption,CaptionPart1
Fan.Discovery.Source(1).Compute(3).Type="Extract"
Fan.Discovery.Source(1).Compute(3).Column=4
Fan.Discovery.Source(1).Compute(3).SubColumn=1
Fan.Discovery.Source(1).Compute(3).SubSeparators="-"

// Re-add the dash
Fan.Discovery.Source(1).Compute(4).Type="RightConcat"
Fan.Discovery.Source(1).Compute(4).Column=4
Fan.Discovery.Source(1).Compute(4).String="-"

// Remove part 1 from the main caption
Fan.Discovery.Source(1).Compute(5).Type="Replace"
Fan.Discovery.Source(1).Compute(5).Column=3
Fan.Discovery.Source(1).Compute(5).Replace=Column(4)
Fan.Discovery.Source(1).Compute(5).ReplaceBy=""

// InstanceTable = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)

// The fanTypeTranslationTable
fanTypeTranslationTable(0)="Unknown"
fanTypeTranslationTable(1)="Other"
fanTypeTranslationTable(2)="System board"
fanTypeTranslationTable(3)="Host System board"
fanTypeTranslationTable(4)="I/O board"
fanTypeTranslationTable(5)="CPU board"
fanTypeTranslationTable(6)="Memory board"
fanTypeTranslationTable(7)="Storage bays"
fanTypeTranslationTable(8)="Removable Media Bays"
fanTypeTranslationTable(9)="Power Supply Bays"
fanTypeTranslationTable(10)="Ambient / External / Room"
fanTypeTranslationTable(11)="Chassis"
fanTypeTranslationTable(12)="Bridge Card"
fanTypeTranslationTable(13)="Management board"
fanTypeTranslationTable(14)="Remote Management Card"
fanTypeTranslationTable(15)="Generic Backplane"
fanTypeTranslationTable(16)="Infrastructure Network"
fanTypeTranslationTable(17)="Blade Slot in Chassis/Infrastructure"
fanTypeTranslationTable(18)="Cabinet blower"
fanTypeTranslationTable(19)="Compute Cabinet I/O Fans"
fanTypeTranslationTable(20)="I/O Expansion Cabinet Utility Chassis Fan"
fanTypeTranslationTable(21)="I/O Expansion Cabinet I/O Fan"
fanTypeTranslationTable(22)="Processor Fan"
fanTypeTranslationTable(23)="Cell Fan"
fanTypeTranslationTable(24)="Cooling Device"
fanTypeTranslationTable(25)="Front Panel"
fanTypeTranslationTable(26)="Back Panel"
fanTypeTranslationTable(27)="IO Bus"
fanTypeTranslationTable(28)="Peripheral Bay"
fanTypeTranslationTable(29)="Device Bay"
fanTypeTranslationTable(30)="Switch"
fanTypeTranslationTable(Default)=""

// Collect

Fan.Collect.Type="MultiInstance"

// ID, status
Fan.Collect.Source(1).Type="WBEM"
Fan.Collect.Source(1).WbemQuery="SELECT DeviceID,HealthState FROM HP_Fan"
Fan.Collect.Source(1).WbemNameSpace="root/hpq"

Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="genStatusTranslationTable"

Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="genStatusInformationTranslationTable"

Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)

// PowerSupply

// Discovery

// DeviceID, Type
PowerSupply.Discovery.Source(1).Type="WBEM"
PowerSupply.Discovery.Source(1).WbemQuery="SELECT DeviceID,PowerSupplyType,TotalOutputPower,Caption FROM HP_PowerSupply"
PowerSupply.Discovery.Source(1).WbemNameSpace="root/hpq"

// Translate power supply type
PowerSupply.Discovery.Source(1).Compute(1).Type="Translate"
PowerSupply.Discovery.Source(1).Compute(1).Column="2"
PowerSupply.Discovery.Source(1).Compute(1).TranslationTable="psuTypeTranslationTable"

// When TotalOutputPower is an information unavailable on the server, the agent returns 0.
// Add a MSHW_ string to our value and then remove MSHW_0. This should remove a 0 value and only that value
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column="3"
PowerSupply.Discovery.Source(1).Compute(2).String="MSHW_"

// Remove 0 value
PowerSupply.Discovery.Source(1).Compute(3).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(3).Column="3"
PowerSupply.Discovery.Source(1).Compute(3).Replace="MSHW_0"
PowerSupply.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove MSHW_ for not zero values
PowerSupply.Discovery.Source(1).Compute(4).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(4).Column="3"
PowerSupply.Discovery.Source(1).Compute(4).Replace="MSHW_"
PowerSupply.Discovery.Source(1).Compute(4).ReplaceBy=""


// Duplicate the Caption
//  DeviceID,PowerSupplyType,TotalOutputPower,Caption
PowerSupply.Discovery.Source(1).Compute(5).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(5).Column=4

// Extract Everything before the dash
//  DeviceID,PowerSupplyType,TotalOutputPower,Caption,Caption1
PowerSupply.Discovery.Source(1).Compute(6).Type="Extract"
PowerSupply.Discovery.Source(1).Compute(6).Column=5
PowerSupply.Discovery.Source(1).Compute(6).SubColumn=1
PowerSupply.Discovery.Source(1).Compute(6).SubSeparators="-"

// Re-add the dash
PowerSupply.Discovery.Source(1).Compute(7).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(7).Column=5
PowerSupply.Discovery.Source(1).Compute(7).String="-"

// Remove part 1 from the main caption
PowerSupply.Discovery.Source(1).Compute(8).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(8).Column=4
PowerSupply.Discovery.Source(1).Compute(8).Replace=Column(5)
PowerSupply.Discovery.Source(1).Compute(8).ReplaceBy=""

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%powerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.PowerSupplyPower=InstanceTable.Column(3)

// The psuTypeTranslationTable
psuTypeTranslationTable(0)="Unknown"
psuTypeTranslationTable(1)="Other"
psuTypeTranslationTable(2)="System board"
psuTypeTranslationTable(3)="Host System board"
psuTypeTranslationTable(4)="I/O board"
psuTypeTranslationTable(5)="CPU board"
psuTypeTranslationTable(6)="Memory board"
psuTypeTranslationTable(7)="Storage bays"
psuTypeTranslationTable(8)="Removable Media Bays"
psuTypeTranslationTable(9)="Power Supply Bays"
psuTypeTranslationTable(10)="Ambient / External / Room"
psuTypeTranslationTable(11)="Chassis"
psuTypeTranslationTable(12)="Bridge Card"
psuTypeTranslationTable(13)="Management board"
psuTypeTranslationTable(14)="Remote Management Card"
psuTypeTranslationTable(15)="Generic Backplane"
psuTypeTranslationTable(16)="Infrastructure Network"
psuTypeTranslationTable(17)="Blade Slot in Chassis/Infrastructure"
psuTypeTranslationTable(18)="Computer Cabinet Bulk Power Supply"
psuTypeTranslationTable(19)="Computer Cabinet System Backplane Power Supply"
psuTypeTranslationTable(20)="Computer Cabinet I/O chassis enclosure Power Supply"
psuTypeTranslationTable(21)="Computer Cabinet AC Input Line"
psuTypeTranslationTable(22)="I/O Expansion Cabinet Bulk Power Supply"
psuTypeTranslationTable(23)="I/O Expansion Cabinet System Backplane Power Supply"
psuTypeTranslationTable(24)="I/O Expansion Cabinet I/O chassis enclosure Power Supply"
psuTypeTranslationTable(25)="I/O Expansion Cabinet AC Input Line"
psuTypeTranslationTable(26)="Peripheral Bay"
psuTypeTranslationTable(27)="Device Bay"
psuTypeTranslationTable(28)="Switch"
psuTypeTranslationTable(Default)=""

// Collect
PowerSupply.Collect.Type="MultiInstance"

// ID, status
PowerSupply.Collect.Source(1).Type="WBEM"
PowerSupply.Collect.Source(1).WbemQuery="SELECT DeviceID,HealthState FROM HP_PowerSupply"
PowerSupply.Collect.Source(1).WbemNameSpace="root/hpq"

PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="2"

PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="2"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="genStatusTranslationTable"

PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="3"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="genStatusInformationTranslationTable"

PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

// Temperature

// Discovery

// DeviceID, Type
Temperature.Discovery.Source(1).Type="WBEM"
Temperature.Discovery.Source(1).WbemQuery="SELECT DeviceID,NumericSensorType,SensorType,UpperThresholdNonCritical,UpperThresholdCritical,UpperThresholdFatal,Caption FROM HP_NumericSensor"
Temperature.Discovery.Source(1).WbemNameSpace="root/hpq"

// Only Keep Temperature Sensors (Type 2)
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column="3"
Temperature.Discovery.Source(1).Compute(1).ValueList="2"

// Translate type
Temperature.Discovery.Source(1).Compute(2).Type="Translate"
Temperature.Discovery.Source(1).Compute(2).Column="2"
Temperature.Discovery.Source(1).Compute(2).TranslationTable="sensorTypeTranslationTable"

// Treat the Warning Threshold
// Remove Thresholds of "0"
// DeviceID,NumericSensorType,SensorType,UpperThresholdNonCritical,UpperThresholdCritical,UpperThresholdFatal,Caption
Temperature.Discovery.Source(1).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(3).Column="4"
Temperature.Discovery.Source(1).Compute(3).String="MSHW_"

// Remove 0 value
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column="4"
Temperature.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""

// Remove MSHW_ for not zero values
Temperature.Discovery.Source(1).Compute(5).Type="Replace"
Temperature.Discovery.Source(1).Compute(5).Column="4"
Temperature.Discovery.Source(1).Compute(5).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(5).ReplaceBy=""

// Now let's choose the Alarm Threshold
// Blank Critical if it equals NonCritical
// DeviceID,NumericSensorType,SensorType,UpperThresholdNonCritical,UpperThresholdCritical,UpperThresholdFatal,Caption
Temperature.Discovery.Source(1).Compute(6).Type="Replace"
Temperature.Discovery.Source(1).Compute(6).Column=5
Temperature.Discovery.Source(1).Compute(6).Replace=Column(4)
Temperature.Discovery.Source(1).Compute(6).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(7).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(7).Column=5
Temperature.Discovery.Source(1).Compute(7).String="MSHW"

Temperature.Discovery.Source(1).Compute(8).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(8).Column=5
Temperature.Discovery.Source(1).Compute(8).String="MSHW"

// If UpperThresholdNonCritical = UpperThresholdCritical use Fatal
Temperature.Discovery.Source(1).Compute(9).Type="Replace"
Temperature.Discovery.Source(1).Compute(9).Column=5
Temperature.Discovery.Source(1).Compute(9).Replace="MSHWMSHW"
Temperature.Discovery.Source(1).Compute(9).ReplaceBy=Column(6)

// Otherwise remove unwanted thresholds.
Temperature.Discovery.Source(1).Compute(10).Type="Replace"
Temperature.Discovery.Source(1).Compute(10).Column=5
Temperature.Discovery.Source(1).Compute(10).Replace="MSHW"
Temperature.Discovery.Source(1).Compute(10).ReplaceBy=""

// Duplicate the Caption
// DeviceID,NumericSensorType,SensorType,UpperThresholdNonCritical,UpperThresholdCritical,UpperThresholdFatal,Caption,Caption
Temperature.Discovery.Source(1).Compute(11).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(11).Column=7

// Extract Everything before the dash
// DeviceID,NumericSensorType,SensorType,UpperThresholdNonCritical,UpperThresholdCritical,UpperThresholdFatal,Caption,CaptionPart1
Temperature.Discovery.Source(1).Compute(12).Type="Extract"
Temperature.Discovery.Source(1).Compute(12).Column=8
Temperature.Discovery.Source(1).Compute(12).SubColumn=1
Temperature.Discovery.Source(1).Compute(12).SubSeparators="-"

// Re-add the dash
Temperature.Discovery.Source(1).Compute(13).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(13).Column=8
Temperature.Discovery.Source(1).Compute(13).String="-"

// Remove part 1 from the main caption
Temperature.Discovery.Source(1).Compute(14).Type="Replace"
Temperature.Discovery.Source(1).Compute(14).Column=7
Temperature.Discovery.Source(1).Compute(14).Replace=Column(8)
Temperature.Discovery.Source(1).Compute(14).ReplaceBy=""

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(7)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)


sensorTypeTranslationTable(0)="Unknown"
sensorTypeTranslationTable(1)="Other"
sensorTypeTranslationTable(2)="System board"
sensorTypeTranslationTable(3)="Host System board"
sensorTypeTranslationTable(4)="I/O board"
sensorTypeTranslationTable(5)="CPU board"
sensorTypeTranslationTable(6)="Memory board"
sensorTypeTranslationTable(7)="Storage bays"
sensorTypeTranslationTable(8)="Removable Media Bays"
sensorTypeTranslationTable(9)="Power Supply Bays"
sensorTypeTranslationTable(10)="Ambient / External / Room"
sensorTypeTranslationTable(11)="Chassis"
sensorTypeTranslationTable(12)="Bridge Card"
sensorTypeTranslationTable(13)="Management board"
sensorTypeTranslationTable(14)="Remote Management Card"
sensorTypeTranslationTable(15)="Generic Backplane"
sensorTypeTranslationTable(16)="Infrastructure Network"
sensorTypeTranslationTable(17)="Blade Slot in Chassis/Infrastructure"
sensorTypeTranslationTable(18)="Front Panel"
sensorTypeTranslationTable(19)="Back Panel"
sensorTypeTranslationTable(20)="IO Bus"
sensorTypeTranslationTable(21)="Peripheral Bay"
sensorTypeTranslationTable(22)="Device Bay"
sensorTypeTranslationTable(23)="Switch"
sensorTypeTranslationTable(24)="Software-defined"
sensorTypeTranslationTable(Default)=""

//
// Collect

// Like all WBEM collects, this one is "MultiInstance"
Temperature.Collect.Type="MultiInstance"

// Source(1) = the HP_NumericSensor WBEM class
Temperature.Collect.Source(1).Type="WBEM"
Temperature.Collect.Source(1).WbemQuery="SELECT CurrentReading,DeviceID,HealthState,SensorType FROM HP_NumericSensor"
Temperature.Collect.Source(1).WbemNameSpace="root/hpq"

// Only Keep Temperature Sensors (Type 2)
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=4
Temperature.Collect.Source(1).Compute(1).ValueList="2"

Temperature.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(2).Column=3

Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=3
Temperature.Collect.Source(1).Compute(3).TranslationTable="genStatusTranslationTable"

Temperature.Collect.Source(1).Compute(4).Type="Translate"
Temperature.Collect.Source(1).Compute(4).Column=4
Temperature.Collect.Source(1).Compute(4).TranslationTable="genStatusInformationTranslationTable"


// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)



//
// OTHER DEVICES (iLO card)
//

//
// Discovery

// Source(1) = HP_ManagementProcessor
// ID;ModelCode
OtherDevice.Discovery.Source(1).Type="WBEM"
OtherDevice.Discovery.Source(1).WbemQuery="SELECT ElementName FROM HP_ManagementProcessor"
OtherDevice.Discovery.Source(1).WbemNameSpace="root/hpq"

// Translate ilo Type - REMOVED (as not populated when card is disabled)
// OtherDevice.Discovery.Source(1).Compute(1).Type="Translate"
// OtherDevice.Discovery.Source(1).Compute(1).Column="1"
// OtherDevice.Discovery.Source(1).Compute(1).TranslationTable="iloTypeTranslationTable"

// Add an "ilO-" to the ID as the UniqueIdentifier is the Serial number of the card.
// OtherDevice.Discovery.Source(1).Compute(2).Type="LeftConcat"
// OtherDevice.Discovery.Source(1).Compute(2).Column="2"
//OtherDevice.Discovery.Source(1).Compute(2).String="iLO "

// Instance Table
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DeviceType="Management Card"
OtherDevice.Discovery.Instance.AdditionalLabel=InstanceTable.Column(1)

// ControllerType
// iloTypeTranslationTable(0)="Unknown iLO"
// iloTypeTranslationTable(1)="Integrated Lights Out Controller (Unknown Type)"
// iloTypeTranslationTable(2)="PCI Board-Remote Insight Lights Out Edition II (RILOE II)"
// iloTypeTranslationTable(3)="Embedded Integrated Lights Out Controller (iLO)"
// iloTypeTranslationTable(4)="Embedded Integrated Lights Out Controller 2 (iLO 2)"
// iloTypeTranslationTable(5)="Embedded Integrity Management Processor"
// iloTypeTranslationTable(6)="Embedded Integrity Integrated Lights Out Controller (iLO)"
// iloTypeTranslationTable(7)="Embedded Integrity Integrated Lights Out Controller 2 (iLO 2)"
// iloTypeTranslationTable(Default)="UNKNOWN"

//
// Collect

// Collect type is: multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = HP_ManagementProcessor
OtherDevice.Collect.Source(1).Type="WBEM"
OtherDevice.Collect.Source(1).WbemQuery="SELECT ElementName,HealthState FROM HP_ManagementProcessor"
OtherDevice.Collect.Source(1).WbemNameSpace="root/hpq"

// Add an "ilO-" to the ID as the UniqueIdentifier is the Serial number of the card.
// OtherDevice.Collect.Source(1).Compute(1).Type="LeftConcat"
// OtherDevice.Collect.Source(1).Compute(1).Column="2"
// OtherDevice.Collect.Source(1).Compute(1).String="iLO "

OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column="2"

OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column="2"
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="genStatusTranslationTable"

OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column="3"
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="genStatusInformationTranslationTable"


// ValueTable = Source(1)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)


//
// Discovery

// Source(1) =  HP_ManagementProcessor
// NIDid;IP;Status;
NetworkCard.Discovery.Source(1).Type="WBEM"
NetworkCard.Discovery.Source(1).WbemQuery="SELECT ElementName,IPAddress,NICCondition FROM HP_ManagementProcessor"
NetworkCard.Discovery.Source(1).WbemNameSpace="root/hpq"

// Filter out disabled network cards  (NIC Condition = 3)
NetworkCard.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column="3"
NetworkCard.Discovery.Source(1).Compute(1).ValueList="3"

// Add in the Location,Speed,MAC fields and Statistics
// NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;InterfaceName;
NetworkCard.Discovery.Source(1).Compute(2).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(2).Column=3
NetworkCard.Discovery.Source(1).Compute(2).String=";;;;;;iLO"

// Actually feed the Model field
// NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;InterfaceName;
NetworkCard.Discovery.Source(1).Compute(3).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(3).Column=7
NetworkCard.Discovery.Source(1).Compute(3).String=Column(1)


// Source(2) =  HP_EthernetPort
// __PATH;NIDid;Location;Speed;MAC;Model
NetworkCard.Discovery.Source(2).Type="WBEM"
NetworkCard.Discovery.Source(2).WbemQuery="SELECT __PATH,DeviceID,Description,Speed,PermanentAddress,ElementName FROM HP_EthernetPort"
NetworkCard.Discovery.Source(2).WbemNameSpace="root/hpq"

// Convert Speed from bit to Mbit
// __PATH;NIDid;Location;Speed;MAC;Model;
NetworkCard.Discovery.Source(2).Compute(1).Type="Divide"
NetworkCard.Discovery.Source(2).Compute(1).Column=4
NetworkCard.Discovery.Source(2).Compute(1).DivideBy=1000000

// Add in the IP and Status fields
// __PATH;NIDid;IP;Status;Location;Speed;MAC;Model;
NetworkCard.Discovery.Source(2).Compute(2).Type="RightConcat"
NetworkCard.Discovery.Source(2).Compute(2).Column=2
NetworkCard.Discovery.Source(2).Compute(2).String=";;"

// Source(3) =  HP_EthernetStatistics
// Statistics;
NetworkCard.Discovery.Source(3).Type="WBEM"
NetworkCard.Discovery.Source(3).WbemQuery="SELECT Description FROM HP_EthernetStatistics"
NetworkCard.Discovery.Source(3).WbemNameSpace="root/hpq"

// Source (4) = Table Joint of (2) and (3).  Any network cards without statistics (i.e. Linux System) will be discarded.
// __PATH;NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;
NetworkCard.Discovery.Source(4).Type="TableJoint"
NetworkCard.Discovery.Source(4).LeftTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(4).RightTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Source(4).LeftKeyColumn=5
NetworkCard.Discovery.Source(4).RightKeyColumn=1
NetworkCard.Discovery.Source(4).DefaultRightLine=";"

// Source(5) =  HP_EthernetLANEndpoint
// LANEndpoint__PATH;InterfaceName;
NetworkCard.Discovery.Source(5).Type="WBEM"
NetworkCard.Discovery.Source(5).WbemQuery="SELECT __PATH,Description FROM HP_EthernetLANEndpoint"
NetworkCard.Discovery.Source(5).WbemNameSpace="root/hpq"

// Source(6) = HP_EthernetPortToLANEndpoint
// Port__PATH;LANEndpoint__PATH;
NetworkCard.Discovery.Source(6).Type="WBEM"
NetworkCard.Discovery.Source(6).WbemQuery="SELECT Antecedent,Dependent FROM HP_EthernetPortToLANEndpoint"
NetworkCard.Discovery.Source(6).WbemNameSpace="root/hpq"

// Source(7) = Table Joint of Source(4) with Source(6)
// __PATH;NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;Port__PATH;LANEndpoint__PATH;
NetworkCard.Discovery.Source(7).Type="TableJoint"
NetworkCard.Discovery.Source(7).LeftTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Source(7).RightTable=%NetworkCard.Discovery.Source(6)%
NetworkCard.Discovery.Source(7).LeftKeyColumn=1
NetworkCard.Discovery.Source(7).RightKeyColumn=1
NetworkCard.Discovery.Source(7).DefaultRightLine=";;"

// Source(8) = Table Joint of Source(7) with Source(5)
// __PATH;NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;Port__PATH;LANEndpoint__PATH;LANEndpoint__PATH;InterfaceName;
NetworkCard.Discovery.Source(8).Type="TableJoint"
NetworkCard.Discovery.Source(8).LeftTable=%NetworkCard.Discovery.Source(7)%
NetworkCard.Discovery.Source(8).RightTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Source(8).LeftKeyColumn=11
NetworkCard.Discovery.Source(8).RightKeyColumn=1
NetworkCard.Discovery.Source(8).DefaultRightLine=";;"

// Some clean-up: keep only the columns we are interested in
// NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;InterfaceName;
NetworkCard.Discovery.Source(8).Compute(1).Type="KeepColumns"
NetworkCard.Discovery.Source(8).Compute(1).ColumnNumbers="2,3,4,5,6,7,8,9,13"

// Source(9) = Union of 1 & 8
// NIDid;IP;Status;Location;Speed;MAC;Model;Statistics;InterfaceName;
NetworkCard.Discovery.Source(9).Type="TableUnion"
NetworkCard.Discovery.Source(9).Table1=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(9).Table2=%NetworkCard.Discovery.Source(8)%

NetworkCard.Discovery.Source(9).Compute(1).Type="LeftConcat"
NetworkCard.Discovery.Source(9).Compute(1).Column="4"
NetworkCard.Discovery.Source(9).Compute(1).String="Location: "

// InstanceTable = Source(9)
// NIDid;IP;Status;Location;Speed;MAC;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(9)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(9)
NetworkCard.Discovery.Instance.Model=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.LogicalAddress=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.LogicalAddressType="IP"
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.ParameterActivation.LinkSpeed=ValueTable.Column(5)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"
// All other parameters are activated if a MAC is found
NetworkCard.Discovery.Instance.ParameterActivation.ReceivedPackets=ValueTable.Column(8)
NetworkCard.Discovery.Instance.ParameterActivation.TransmittedPackets=ValueTable.Column(8)
NetworkCard.Discovery.Instance.ParameterActivation.ErrorCount=ValueTable.Column(8)
NetworkCard.Discovery.Instance.ParameterActivation.ReceivedBytes=ValueTable.Column(8)
NetworkCard.Discovery.Instance.ParameterActivation.TransmittedBytes=ValueTable.Column(8)



//
// Collect

// Collect type is "multi-instance"
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = the HP_ManagementProcessor WMI Table
// ID;Condition
NetworkCard.Collect.Source(1).Type="WBEM"
NetworkCard.Collect.Source(1).WbemQuery="SELECT ElementName,NICCondition FROM HP_ManagementProcessor"
NetworkCard.Collect.Source(1).WbemNameSpace="root/hpq"

// Duplicate Condition
// ID;Condition;Condition;
NetworkCard.Collect.Source(1).Compute(1).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(1).Column=2

// Duplicate Condition
// ID;Condition;Condition;Condition;
NetworkCard.Collect.Source(1).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(2).Column=2

// Translate first Condition into PATROLStatus
// ID;PATROLStatusArray;Condition;Condition;
NetworkCard.Collect.Source(1).Compute(3).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(3).Column=2
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="iLONetworkCardStatusTranslationTable"

// Translate second Condition into a more readable string
// ID;PATROLStatusArray;statusInformation;Condition;
NetworkCard.Collect.Source(1).Compute(4).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(4).Column=3
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="iLONetworkCardStatusInfoTranslationTable"
NetworkCard.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Translate second Condition into a more LinkStatus (OK|WARN)
// ID;PATROLStatusArray;statusInformation;LinkStatusArray;
NetworkCard.Collect.Source(1).Compute(5).Type="Translate"
NetworkCard.Collect.Source(1).Compute(5).Column=4
NetworkCard.Collect.Source(1).Compute(5).TranslationTable="iLOLinkStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// ID;PATROLStatus;statusInformation;LinkStatusArray;
NetworkCard.Collect.Source(1).Compute(6).Type="Convert"
NetworkCard.Collect.Source(1).Compute(6).Column=2
NetworkCard.Collect.Source(1).Compute(6).ConversionType="Array2SimpleStatus"

// Convert LinkStatusArray to a simple (unique) LinkStatus
// ID;PATROLStatus;statusInformation;LinkStatus;
NetworkCard.Collect.Source(1).Compute(7).Type="Convert"
NetworkCard.Collect.Source(1).Compute(7).Column=4
NetworkCard.Collect.Source(1).Compute(7).ConversionType="Array2SimpleStatus"

// Need to Pad out the table so that it matches the other sources:
// ID;                  PATROLStatus;statusInformation;LinkStatus;
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,ErrorCount
NetworkCard.Collect.Source(1).Compute(8).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(8).Column=1
NetworkCard.Collect.Source(1).Compute(8).String=";;"
NetworkCard.Collect.Source(1).Compute(9).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(9).Column=6
NetworkCard.Collect.Source(1).Compute(9).String=";;;;;"

// Add "iLO - " to the model, so that the user doesn't get confused
// between the "real" NICs and the one here used only for the management
// NetworkCard.Collect.Source(1).Compute(6).Type="LeftConcat"
// NetworkCard.Collect.Source(1).Compute(6).Column="4"
// NetworkCard.Collect.Source(1).Compute(6).String="iLO "

// Source(1) = the HP_EthernetStatistics WBEM Table
//  1     2              3                4                     5            6                  7                   8                9            10                    11                           12                13                    14
// Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,AlignmentErrors,DeferredTransmissions,ExcessiveCollisions,FCSErrors,InternalMACReceiveErrors,InternalMACTransmitErrors,LateCollisions,MultipleCollisionFrames,SingleCollisionFrames
NetworkCard.Collect.Source(2).Type="WBEM"
NetworkCard.Collect.Source(2).WbemQuery="SELECT Description,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,AlignmentErrors,DeferredTransmissions,ExcessiveCollisions,FCSErrors,InternalMACReceiveErrors,InternalMACTransmitErrors,LateCollisions,MultipleCollisionFrames,SingleCollisionFrames FROM HP_EthernetStatistics"
NetworkCard.Collect.Source(2).WbemNameSpace="root/hpq"

// Combine all the errors into one errorcount
NetworkCard.Collect.Source(2).Compute(1).Type="Add"
NetworkCard.Collect.Source(2).Compute(1).Column=6
NetworkCard.Collect.Source(2).Compute(1).Add=Column(7)
NetworkCard.Collect.Source(2).Compute(2).Type="Add"
NetworkCard.Collect.Source(2).Compute(2).Column=6
NetworkCard.Collect.Source(2).Compute(2).Add=Column(8)
NetworkCard.Collect.Source(2).Compute(3).Type="Add"
NetworkCard.Collect.Source(2).Compute(3).Column=6
NetworkCard.Collect.Source(2).Compute(3).Add=Column(9)
NetworkCard.Collect.Source(2).Compute(4).Type="Add"
NetworkCard.Collect.Source(2).Compute(4).Column=6
NetworkCard.Collect.Source(2).Compute(4).Add=Column(10)
NetworkCard.Collect.Source(2).Compute(5).Type="Add"
NetworkCard.Collect.Source(2).Compute(5).Column=6
NetworkCard.Collect.Source(2).Compute(5).Add=Column(11)
NetworkCard.Collect.Source(2).Compute(6).Type="Add"
NetworkCard.Collect.Source(2).Compute(6).Column=6
NetworkCard.Collect.Source(2).Compute(6).Add=Column(12)
NetworkCard.Collect.Source(2).Compute(7).Type="Add"
NetworkCard.Collect.Source(2).Compute(7).Column=6
NetworkCard.Collect.Source(2).Compute(7).Add=Column(13)
NetworkCard.Collect.Source(2).Compute(8).Type="Add"
NetworkCard.Collect.Source(2).Compute(8).Column=6
NetworkCard.Collect.Source(2).Compute(8).Add=Column(14)

// Remove all the unwanted error columns
//  1     2              3                4                     5            6
// Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,ErrorCount
NetworkCard.Collect.Source(2).Compute(9).Type="KeepColumns"
NetworkCard.Collect.Source(2).Compute(9).ColumnNumbers="1,2,3,4,5,6"

// Source(3) =  HP_EthernetPort
// NIDid;Location;Speed;OperationalStatus;
NetworkCard.Collect.Source(3).Type="WBEM"
NetworkCard.Collect.Source(3).WbemQuery="SELECT DeviceID,Description,Speed,OperationalStatus FROM HP_EthernetPort"
NetworkCard.Collect.Source(3).WbemNameSpace="root/hpq"

// NIDid;Location;Speed;OperationalStatus;OperationalStatus;OperationalStatus;
NetworkCard.Collect.Source(3).Compute(1).Type="DuplicateColumn"
NetworkCard.Collect.Source(3).Compute(1).Column=4
NetworkCard.Collect.Source(3).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(3).Compute(2).Column=4

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// NIDid;Location;Speed;PatrolStatus;OperationalStatus;OperationalStatus;
NetworkCard.Collect.Source(3).Compute(3).Type="ArrayTranslate"
NetworkCard.Collect.Source(3).Compute(3).Column=4
NetworkCard.Collect.Source(3).Compute(3).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// NIDid;Location;Speed;PatrolStatus;StatusInformation;OperationalStatus;
NetworkCard.Collect.Source(3).Compute(4).Type="ArrayTranslate"
NetworkCard.Collect.Source(3).Compute(4).Column=5
NetworkCard.Collect.Source(3).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
NetworkCard.Collect.Source(3).Compute(4).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// NIDid;Location;Speed;PatrolStatus;StatusInformation;OperationalStatus;
NetworkCard.Collect.Source(3).Compute(5).Type="Convert"
NetworkCard.Collect.Source(3).Compute(5).Column=4
NetworkCard.Collect.Source(3).Compute(5).ConversionType="Array2SimpleStatus"

// Then we translate DMTF's OperationStatus code into OK/WARN (for the LINK Status)
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatusArray;
NetworkCard.Collect.Source(3).Compute(6).Type="ArrayTranslate"
NetworkCard.Collect.Source(3).Compute(6).Column=6
NetworkCard.Collect.Source(3).Compute(6).TranslationTable="DMTFOperationToLinkStatusTranslationTable"

// Convert LinkStatusArray to a simple (unique) LinkStatus
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;
NetworkCard.Collect.Source(3).Compute(7).Type="Convert"
NetworkCard.Collect.Source(3).Compute(7).Column=6
NetworkCard.Collect.Source(3).Compute(7).ConversionType="Array2SimpleStatus"

// Convert Speed from bit to Mbit
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;
NetworkCard.Collect.Source(3).Compute(8).Type="Divide"
NetworkCard.Collect.Source(3).Compute(8).Column=3
NetworkCard.Collect.Source(3).Compute(8).DivideBy=1000000

// Source(4) = Source (3) and Source(2)
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,ErrorCount
NetworkCard.Collect.Source(4).Type="TableJoint"
NetworkCard.Collect.Source(4).LeftTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.Source(4).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(4).LeftKeyColumn=2
NetworkCard.Collect.Source(4).RightKeyColumn=1
NetworkCard.Collect.Source(4).DefaultRightLine=";;;;;;"

// Source (5) = Union of 1 & 4
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,ErrorCount
NetworkCard.Collect.Source(5).Type="TableUnion"
NetworkCard.Collect.Source(5).Table1=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(5).Table2=%NetworkCard.Collect.Source(4)%


// ValueTable = Source(5)
// NIDid;Location;Speed;PatrolStatus;StatusInformation;LinkStatus;Location;BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,ErrorCount
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(4)
NetworkCard.Collect.StatusInformation=ValueTable.Column(5)
NetworkCard.Collect.LinkStatus=ValueTable.Column(6)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(3)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(10)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(11)
NetworkCard.Collect.ErrorCount=ValueTable.Column(12)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(8)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(9)



// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(0)="OK"
DMTFOperationStatusTranslationTable(1)="OK"
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
// DMTFOperationStatusTranslationTable(6) has been changed to OK as HP Ethernet Ports will report a status of 6 if the cable is unplugged.
DMTFOperationStatusTranslationTable(6)="OK"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="ALARM"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="WARN"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(0)=""
DMTFOperationStatusInformationTranslationTable(1)=""
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
// DMTFOperationStatusTranslationTable(6) has been changed to "" as Qlogic HBAs will report a status of 6 if the cable is unplugged.
DMTFOperationStatusInformationTranslationTable(6)=""
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)="Unknown Status"

// The DMTFOperationToLinkStatusTranslationTable
DMTFOperationToLinkStatusTranslationTable(6)="WARN"
DMTFOperationToLinkStatusTranslationTable(2)="OK"
DMTFOperationToLinkStatusTranslationTable(Default)=""

//iLONetworkCardStatusTranslationTable
iLONetworkCardStatusTranslationTable(0)="UNKNOWN"
iLONetworkCardStatusTranslationTable(2)="OK"
iLONetworkCardStatusTranslationTable(3)="OK"
iLONetworkCardStatusTranslationTable(4)="WARN"
iLONetworkCardStatusTranslationTable(5)="OK"
iLONetworkCardStatusTranslationTable(6)="ALARM"
iLONetworkCardStatusTranslationTable(Default)="UNKNOWN"


//iLONetworkCardStatusInfoTranslationTable
iLONetworkCardStatusInfoTranslationTable(0)="Unknown Status"
iLONetworkCardStatusInfoTranslationTable(2)=""
iLONetworkCardStatusInfoTranslationTable(3)="NIC disabled"
iLONetworkCardStatusInfoTranslationTable(4)="NIC not in operation-alternate host NIC in use"
iLONetworkCardStatusInfoTranslationTable(5)="NIC in operation but disconnected"
iLONetworkCardStatusInfoTranslationTable(6)="Failed"
iLONetworkCardStatusInfoTranslationTable(Default)="UNKNOWN"

//iLOLinkStatusTranslationTable
iLOLinkStatusTranslationTable(5)="WARN"
iLOLinkStatusTranslationTable(Default)="OK"

// The genStatusTranslationTable
genStatusTranslationTable(0)="UNKNOWN"
genStatusTranslationTable(5)="OK"
genStatusTranslationTable(10)="WARN"
genStatusTranslationTable(15)="WARN"
genStatusTranslationTable(20)="ALARM"
genStatusTranslationTable(25)="ALARM"
genStatusTranslationTable(30)="ALARM"
genStatusTranslationTable("OK")="OK"
genStatusTranslationTable(Default)="UNKNOWN"

// The genStatusInformationTranslationTable
genStatusInformationTranslationTable(0)="Unknown"
genStatusInformationTranslationTable(5)=""
genStatusInformationTranslationTable(10)="Degraded/Warning"
genStatusInformationTranslationTable(15)="Minor Failure"
genStatusInformationTranslationTable(20)="Major Failure"
genStatusInformationTranslationTable(25)="Critical Failure"
genStatusInformationTranslationTable(30)="Non-recoverable Error"
genStatusInformationTranslationTable(Default)="Unknown Status"
