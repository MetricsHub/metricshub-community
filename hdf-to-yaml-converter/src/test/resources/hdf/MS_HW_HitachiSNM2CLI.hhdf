////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)





// ENCLOSURE

// Source(1) = Run auunitinfo through EF1
Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="_EF1_COMMAND_PART1 auunitinfo _EF1_COMMAND_PART2"
Enclosure.Discovery.Source(1).ExecuteLocally=1
Enclosure.Discovery.Source(1).TimeOut="1200"
Enclosure.Discovery.Source(1).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;model;firmware;serialNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(1).Compute(1).Separators=";"

// Instance Table
// MSHW;systemName;model;firmware;serialNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor="Hitachi"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Type="Storage"

// Now discover information for other discoveries
// Source(2) = Run auparts through EF1
Enclosure.Discovery.Source(2).Type="OsCommand"
Enclosure.Discovery.Source(2).CommandLine="_EF1_COMMAND_PART1 auparts _EF1_COMMAND_PART2"
Enclosure.Discovery.Source(2).ExecuteLocally=1
Enclosure.Discovery.Source(2).TimeOut="1200"
Enclosure.Discovery.Source(2).ForceSerialization=1

// Process the command through an AWK script
// MSHW_Class;systemName;DeviceID;DisplayID;Status;Status;
Enclosure.Discovery.Source(2).Compute(1).Type="Awk"
Enclosure.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(3)
Enclosure.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(2).Compute(1).Separators=";"



// Collect

// Collect type: MultiInstance
Enclosure.Collect.Type="MultiInstance"

// Now discover information for other discoveries
// Source(1) = Run auparts through EF1
Enclosure.Collect.Source(1).Type="OsCommand"
Enclosure.Collect.Source(1).CommandLine="_EF1_COMMAND_PART1 auparts _EF1_COMMAND_PART2"
Enclosure.Collect.Source(1).ExecuteLocally=1
Enclosure.Collect.Source(1).TimeOut="1200"
Enclosure.Collect.Source(1).ForceSerialization=1

// Process the command through an AWK script
// MSHW_Class;systemName;DeviceID;DisplayID;Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Collect.Source(1).Compute(1).Separators=";"

// The value table (taken from enclosure.discovery, since we don't actually want to collect anything.
Enclosure.Collect.ValueTable=%Enclosure.Discovery.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)


// PhysicalDisk

// Source(1) =  audrive -vendor
PhysicalDisk.Discovery.Source(1).Type="OsCommand"
PhysicalDisk.Discovery.Source(1).CommandLine="_EF1_COMMAND_PART1 audrive -vendor _EF1_COMMAND_PART2"
PhysicalDisk.Discovery.Source(1).ExecuteLocally=1
PhysicalDisk.Discovery.Source(1).TimeOut="1200"
PhysicalDisk.Discovery.Source(1).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;DriveType;Speed;Vendor;Model;Firmware;Serial;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
PhysicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
PhysicalDisk.Discovery.Source(1).Compute(1).Separators=";"

// Convert Size from Gbytes to bytes
// MSHW;systemName;DeviceID;DisplayID;CapacityB;DriveType;Speed;Vendor;Model;Firmware;Serial;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=5
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=1073741824

PhysicalDisk.Discovery.Source(1).Compute(3).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=6
PhysicalDisk.Discovery.Source(1).Compute(3).String="Type: "

// The discovery table
//   1      2          3       4          5         6        7      8      9   10        11
// MSHW;systemName;DeviceID;DisplayID;CapacityB;DriveType;Speed;Vendor;Model;Firmware;Serial;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(11)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.additionalinformation2=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.additionalinformation1=InstanceTable.Column(7)

// Collect

// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = audrive -status
PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="_EF1_COMMAND_PART1 audrive -status _EF1_COMMAND_PART2"
PhysicalDisk.Collect.Source(1).ExecuteLocally=1
PhysicalDisk.Collect.Source(1).TimeOut="1200"
PhysicalDisk.Collect.Source(1).ForceSerialization=1


// Process the command through an AWK script
// MSHW;DeviceID;Status;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(5)
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"

// Translate the Status
// MSHW;DeviceID;Status;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=3
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DriveStatusTT"

// The opStatusTT translation table
DriveStatusTT("Normal")="OK"
DriveStatusTT("Standby")="OK"
DriveStatusTT("Out")="OK"
DriveStatusTT("Rebuilding")="WARN"
DriveStatusTT("Mounted")="OK"
DriveStatusTT(Default)="ALARM"

// The value table
// MSHW;DeviceID;Status;StatusInformation;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(3)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(4)

// LogicalDisk

// Source(1) =  auluref -m
LogicalDisk.Discovery.Source(1).Type="OsCommand"
LogicalDisk.Discovery.Source(1).CommandLine="_EF1_COMMAND_PART1 auluref -m _EF1_COMMAND_PART2"
LogicalDisk.Discovery.Source(1).ExecuteLocally=1
LogicalDisk.Discovery.Source(1).TimeOut="1200"
LogicalDisk.Discovery.Source(1).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
LogicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
LogicalDisk.Discovery.Source(1).Compute(1).Separators=";"

// Source(1) =  aurgref -m
LogicalDisk.Discovery.Source(2).Type="OsCommand"
LogicalDisk.Discovery.Source(2).CommandLine="_EF1_COMMAND_PART1 aurgref -m _EF1_COMMAND_PART2"
LogicalDisk.Discovery.Source(2).ExecuteLocally=1
LogicalDisk.Discovery.Source(2).TimeOut="1200"
LogicalDisk.Discovery.Source(2).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Discovery.Source(2).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(7)
LogicalDisk.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW"
LogicalDisk.Discovery.Source(2).Compute(1).Separators=";"

// Union Volumes (1) and Raid Groups (2)
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Discovery.Source(3).Type="TableUnion"
LogicalDisk.Discovery.Source(3).Table1=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).Table2=%LogicalDisk.Discovery.Source(2)%

// Convert Size from Gbytes to bytes
// MSHW;systemName;DeviceID;DisplayID;CapacityB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Discovery.Source(3).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(3).Compute(1).Column=5
LogicalDisk.Discovery.Source(3).Compute(1).MultiplyBy=1073741824

LogicalDisk.Discovery.Source(3).Compute(2).Type="LeftConcat"
LogicalDisk.Discovery.Source(3).Compute(2).Column=9
LogicalDisk.Discovery.Source(3).Compute(2).String="Disk Type: "

LogicalDisk.Discovery.Source(3).Compute(3).Type="LeftConcat"
LogicalDisk.Discovery.Source(3).Compute(3).Column=6
LogicalDisk.Discovery.Source(3).Compute(3).String="Stripe Size: "

// The discovery table
//   1      2          3       4          5         6        7          8         9        10        11            12              13               14
// MSHW;systemName;DeviceID;DisplayID;CapacityB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.additionalinformation1=InstanceTable.Column(9)
LogicalDisk.Discovery.Instance.additionalinformation2=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.LogicalDiskType=InstanceTable.Column(12)
LogicalDisk.Discovery.Instance.UseForCapacityReport=InstanceTable.Column(13)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(8)
LogicalDisk.Discovery.Instance.ParameterActivation.UnallocatedSpace=InstanceTable.Column(14)

// Collect

// Collect type: MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = auluref -m
LogicalDisk.Collect.Source(1).Type="OsCommand"
LogicalDisk.Collect.Source(1).CommandLine="_EF1_COMMAND_PART1 auluref -m _EF1_COMMAND_PART2"
LogicalDisk.Collect.Source(1).ExecuteLocally=1
LogicalDisk.Collect.Source(1).TimeOut="1200"
LogicalDisk.Collect.Source(1).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Collect.Source(1).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
LogicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
LogicalDisk.Collect.Source(1).Compute(1).Separators=";"

// Source(2) = aurgref -m
LogicalDisk.Collect.Source(2).Type="OsCommand"
LogicalDisk.Collect.Source(2).CommandLine="_EF1_COMMAND_PART1 aurgref -m _EF1_COMMAND_PART2"
LogicalDisk.Collect.Source(2).ExecuteLocally=1
LogicalDisk.Collect.Source(2).TimeOut="1200"
LogicalDisk.Collect.Source(2).ForceSerialization=1

// Process the command through an AWK script
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Collect.Source(2).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(7)
LogicalDisk.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW"
LogicalDisk.Collect.Source(2).Compute(1).Separators=";"

// Union Volumes (1) and Raid Groups (2)
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Collect.Source(3).Type="TableUnion"
LogicalDisk.Collect.Source(3).Table1=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Source(3).Table2=%LogicalDisk.Collect.Source(2)%

// Translate the Status
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Collect.Source(3).Compute(1).Type="Translate"
LogicalDisk.Collect.Source(3).Compute(1).Column=10
LogicalDisk.Collect.Source(3).Compute(1).TranslationTable="LogicalDriveStatusTT"

// The opStatusTT translation table
LogicalDriveStatusTT("Normal")="OK"
LogicalDriveStatusTT("Normal(Correction")="OK"
LogicalDriveStatusTT(Default)="ALARM"


// The value table
// MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(3)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(3)
LogicalDisk.Collect.Status=ValueTable.Column(10)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(11)
LogicalDisk.Collect.UnallocatedSpace=ValueTable.Column(14)

//
// Fan
//

// Discovery

// Source(1) = Enclosure Discovery 1
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only Fans
// MSHW_Fan;systemName;deviceID;displayID;Status;Status;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).RegExp="^MSHW_FAN$"

// The discovery table
// MSHW_Fan;systemName;deviceID;displayID;Status;Status;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only Fan
// MSHW_Fan;systemName;deviceID;displayID;Status;Status;
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).RegExp="^MSHW_FAN$"

// Now translate  into OK/Warning/Alarm
// MSHW_Fan;systemName;deviceID;displayID;PatrolStatus;Status;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=5
Fan.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_Fan;systemName;deviceID;displayID;PatrolStatus;Status;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(3)
Fan.Collect.Status=ValueTable.Column(5)
Fan.Collect.StatusInformation=ValueTable.Column(6)

//
// OtherDevice
//

// Discovery

// Source(1) = Enclosure Discovery 1
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only OtherDevices
// MSHW_OtherDevice;systemName;deviceID;displayID;Status;Status;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).RegExp="^MSHW_OtherDevice$"

// The discovery table
// MSHW_OtherDevice;systemName;deviceID;displayID;Status;Status;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only OtherDevice
// MSHW_OtherDevice;systemName;deviceID;displayID;Status;Status;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).RegExp="^MSHW_OtherDevice$"

// Now translate  into OK/Warning/Alarm
// MSHW_OtherDevice;systemName;deviceID;displayID;PatrolStatus;Status;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=5
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_OtherDevice;systemName;deviceID;displayID;PatrolStatus;Status;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(3)
OtherDevice.Collect.Status=ValueTable.Column(5)
OtherDevice.Collect.StatusInformation=ValueTable.Column(6)

// The opStatusTT translation table
opStatusTT("Normal")="OK"
opStatusTT(Default)="ALARM"

//
// Memory
//

// Discovery

// Source(1) = Enclosure Discovery 1
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only Memorys
// MSHW_Memory;systemName;deviceID;displayID;Status;Status;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).RegExp="^MSHW_Memory$"

// The discovery table
// MSHW_Memory;systemName;deviceID;displayID;Status;Status;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Memory.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Memory.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only Memory
// MSHW_Memory;systemName;deviceID;displayID;Status;Status;
Memory.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=1
Memory.Collect.Source(1).Compute(1).RegExp="^MSHW_Memory$"

// Now translate  into OK/Warning/Alarm
// MSHW_Memory;systemName;deviceID;displayID;PatrolStatus;Status;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=5
Memory.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_Memory;systemName;deviceID;displayID;PatrolStatus;Status;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(3)
Memory.Collect.Status=ValueTable.Column(5)
Memory.Collect.StatusInformation=ValueTable.Column(6)

//
// NetworkCard
//

// Discovery

// Source(1) = Enclosure Discovery 1
NetworkCard.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only NetworkCards
// MSHW_NetworkCard;systemName;deviceID;displayID;Status;Status;
NetworkCard.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).RegExp="^MSHW_NetworkCard$"

// The discovery table
// MSHW_NetworkCard;systemName;deviceID;displayID;Status;Status;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
NetworkCard.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only NetworkCard
// MSHW_NetworkCard;systemName;deviceID;displayID;Status;Status;
NetworkCard.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).RegExp="^MSHW_NetworkCard$"

// Now translate  into OK/Warning/Alarm
// MSHW_NetworkCard;systemName;deviceID;displayID;PatrolStatus;Status;
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=5
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_NetworkCard;systemName;deviceID;displayID;PatrolStatus;Status;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(3)
NetworkCard.Collect.Status=ValueTable.Column(5)
NetworkCard.Collect.StatusInformation=ValueTable.Column(6)

//
// Battery
//

// Discovery

// Source(1) = Enclosure Discovery 1
Battery.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only Batterys
// MSHW_Battery;systemName;deviceID;displayID;Status;Status;
Battery.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=1
Battery.Discovery.Source(1).Compute(1).RegExp="^MSHW_Battery$"

// The discovery table
// MSHW_Battery;systemName;deviceID;displayID;Status;Status;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
Battery.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Battery.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only Battery
// MSHW_Battery;systemName;deviceID;displayID;Status;Status;
Battery.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Collect.Source(1).Compute(1).Column=1
Battery.Collect.Source(1).Compute(1).RegExp="^MSHW_Battery$"

// Now translate  into OK/Warning/Alarm
// MSHW_Battery;systemName;deviceID;displayID;PatrolStatus;Status;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=5
Battery.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_Battery;systemName;deviceID;displayID;PatrolStatus;Status;
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(3)
Battery.Collect.Status=ValueTable.Column(5)
Battery.Collect.StatusInformation=ValueTable.Column(6)

//
// PowerSupply
//

// Discovery

// Source(1) = Enclosure Discovery 1
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Keep only PowerSupplys
// MSHW_PowerSupply;systemName;deviceID;displayID;Status;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^MSHW_PowerSupply$"

// The discovery table
// MSHW_PowerSupply;systemName;deviceID;displayID;Status;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Collect type: MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only PowerSupply
// MSHW_PowerSupply;systemName;deviceID;displayID;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=1
PowerSupply.Collect.Source(1).Compute(1).RegExp="^MSHW_PowerSupply$"

// Now translate  into OK/Warning/Alarm
// MSHW_PowerSupply;systemName;deviceID;displayID;PatrolStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=5
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_PowerSupply;systemName;deviceID;displayID;PatrolStatus;Status;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(5)
PowerSupply.Collect.StatusInformation=ValueTable.Column(6)




/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = The auunitinfo awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
$0 ~ /^Array Unit Type/ {model = $NF}
$1 ~ /H.W/ && $2 ~ /Rev/ {firmware = $NF}
$1 ~ /Serial/ && $2 ~ /Number/ {serialNumber = $NF}
$1 ~ /MS_HW_SYSTEM_END/  { systemName = $2
                          if (model != "") {print "MSHW;"systemName";"model";"firmware";"serialNumber";"}}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = The auparts awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN {SECTION="";NNCSECTION=""}

$1 ~ /MS_HW_SYSTEM_START/  { systemName = $2 }

SECTION != "" && $1 !~ /^[0-9]+/ && tolower($0) !~ /status/ && NF < 3 && NNCSECTION == "" { SECTION = "" }

$1 ~ /^Controller$/ { SECTION = "CTL" }
SECTION == "CTL" && $1 ~ /^[0-9]+/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Cache$/ { SECTION = "Cache" }
SECTION == "Cache" && $1 ~ /^[0-9]+/ && $2 ~ /^[0-9]+/ && NNCSECTION == "" { ID = SECTION "-CTL" $1 "-Slot" $2
                                     Status = $NF
                                     if ($3 !~ /---/) {print "MSHW_Memory;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";" }
                                   }

$1 ~ /^I.F$/ && $2 ~ /Module/ { SECTION = "IF-Module" }
$1 ~ /^Interface$/ && $2 ~ /Board/ { SECTION = "IF-Module" }
SECTION == "IF-Module" && $1 ~ /^[0-9]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-CTL" $1 "-IF" $2
                                     Status = $NF
                                     print "MSHW_NetworkCard;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Battery$/ && $2 != /^Backup$/ { SECTION = "Battery" }
SECTION == "Battery" && $1 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_Battery;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Battery$/ && $2 ~ /^Backup$/{ SECTION = "Battery-Backup" }
SECTION == "Battery-Backup" && $1 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_Battery;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }


$1 ~ /^Additional$/ && $2 ~ /^Battery$/ { SECTION = "Additional-Battery" }
SECTION == "Additional-Battery" && $1 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_Battery;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Host$/ && $2 ~ /^Connector$/ { SECTION = "Host-Connector" }
SECTION == "Host-Connector" && $1 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_NetworkCard;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Fan$/ { SECTION = "Fan" }
SECTION == "Fan" && $1 ~ /^[0-9C]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-Unit" $1 "-Fan" $2
                                     Status = $NF
                                     print "MSHW_Fan;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }
$1 ~ /^AC$/ { SECTION = "AC" }
SECTION == "AC" && $1 ~ /^[0-9C]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-Unit" $1 "-AC" $2
                                     Status = $NF
                                     print "MSHW_PowerSupply;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^DC$/ { SECTION = "DC" }
SECTION == "AC" && $1 ~ /^[0-9C]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-Unit" $1 "-DC" $2
                                     Status = $NF
                                     print "MSHW_PowerSupply;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^ENC$/ { SECTION = "ENC" }
SECTION == "ENC" && $1 ~ /^[0-9C]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-Unit" $1 "-ENCCable" $2
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Loop$/ { SECTION = "Loop" }
SECTION == "Loop" && $1 ~ /^[0-9]/ && $2 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-Path" $1 "-Loop" $2
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Air$/ && $2 ~ /^Filter$/ && NNCSECTION == "" { SECTION = "Air-Filter"
                                  ID = SECTION ; getline; getline ;
                                  Status = $NF
                                  print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                }

$1 ~ /^NNC$/ && NF == 1 { SECTION = "NNC" }
SECTION == "NNC" && $1 ~ /^[0-9]/ && NNCSECTION == "" { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

# NNC SUB-COMPONENTS
$1 ~ /^NNC[0-9]+$/ && $2 ~ /^Status$/ { NNCSECTION = $1 }

$1 ~ /^DIMM+$/ && NNCSECTION != "" { SECTION = NNCSECTION "-DIMM"}
SECTION ~ /NNC[0-9]+-DIMM/ && $1 ~ /^[A-Z][0-9]/ { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_Memory;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^PS$/ && NNCSECTION != "" { SECTION = NNCSECTION "-PS"
	                                if ( $2 != "" ) { ID = NNCSECTION "-PS"
	                                	                status = $NF
	                                	                print "MSHW_PowerSupply;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
	                                	               }
	                              }
SECTION ~ /NNC[0-9]+-PS/ && $1 ~ /^[0-9]/ { ID = NNCSECTION "-PS" $1
                                     Status = $NF
                                     print "MSHW_PowerSupply;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Fan$/ && NNCSECTION != "" { SECTION = NNCSECTION "-Fan"
	                                if ( $2 != "" ) { ID = NNCSECTION "-Fan"
	                                	                status = $NF
	                                	                print "MSHW_Fan;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
	                                	               }
	                              }
SECTION ~ /NNC[0-9]+-Fan/ && $1 ~ /^[0-9]/ { ID = NNCSECTION "-Fan" $1
                                     Status = $NF
                                     print "MSHW_Fan;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Extension$/ && $2 ~ /^Slot$/ && NNCSECTION != "" { SECTION = NNCSECTION "-ExtSlot"}
SECTION ~ /NNC[0-9]+-ExtSlot/ && $1 ~ /^[0-9]/ { ID = SECTION "-" $1
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }

$1 ~ /^Extension$/ && $2 ~ /^Card$/ && NNCSECTION != "" { SECTION = "NNC-ExtCard"}
SECTION ~ /NNC-ExtCard/ && $1 ~ /^[0-9]/ && $2 ~ /^[0-9]/ { ID = "NNC" $1 "-ExtCard-" $2 ;
                                     Status = $NF
                                     print "MSHW_OtherDevice;" systemName ";" systemName "." ID ";" ID ";" Status ";" Status ";"
                                   }
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = The audrive -vendor awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN {tableValid = ""}
$1 ~ /MS_HW_SYSTEM_START/  { systemName = $2 }
# AMS2100 / HUS 130 / SMS100 / HUS 110
$0 ~ /Unit +HDU +Capacity +Drive +Type +Rotational +Speed +Vendor +ID +Product +ID +Revision +Serial.+/ {tableValid = "AMS2100"}
# Lightning 9500
$0 ~ /Unit +No. +HDU No. +Vendor +Product +Revision +Capacity +Serial +No. +Type/ {tableValid = "9500"}
# AMS 500
$0 ~ /Unit +HDU +Capacity +Drive +Type +Vendor +ID +Product +ID +Revision +Serial No./ {tableValid = "AMS500"}

$1 ~ /MS_HW_SYSTEM_END/  { if (tableValid == "") {print "No valid table format found"}
	                             else {print "Valid table format found. Type: " tableValid }
	                         systemName = "" ; tableValid = ""
	                       }

$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/ && tableValid != "" {
	if (tableValid == "AMS2100") {
		Unit = $1
		HDU = $2 ;
		Capacity = $3 ;
		DriveType = $4
		Speed = "RPM: " $5
		Vendor = $6
		Model = $7
		Firmware = $8
		Serial = $9
		}
	if (tableValid == "9500") {
		Unit = $1
		HDU = $2 ;
		Capacity = $6
		DriveType = $8
		Speed = ""
		Vendor = $3
		Model = $4
		Firmware = $5
		Serial = $7
		}
	if (tableValid == "AMS500") {
		Unit = $1
		HDU = $2 ;
		Capacity = $3 ;
		DriveType = $4
		Speed = ""
		Vendor = $5
		Model = $6
		Firmware = $7
		Serial = $8
		}
	gsub (/[Tt][Bb]/,"000000",Capacity) ; gsub (/[Gg][Bb]/,"000",Capacity) ;  gsub (/[Mm][Bb]/,"",Capacity) ; CapacityGB = Capacity /1000 ;
# 	Watch out - Identifiers must match between the audrive vendor script (discovery) and the audrive status awk script (collect)
	DeviceID = systemName ".Unit-" Unit ".HDU-" HDU  ; DisplayID = "Unit-" Unit ".HDU-" HDU
# MSHW;systemName;DeviceID;DisplayID;CapacityB;DriveType;Speed;Vendor;Model;Firmware;Serial;
	print "MSHW;" systemName";" DeviceID ";" DisplayID ";" CapacityB ";" DriveType ";" Speed ";" Vendor ";" Model ";" Firmware ";" Serial ";"
	}
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = The audrive -status awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(5):
BEGIN {tableValid = ""}
$1 ~ /MS_HW_SYSTEM_START/  { systemName = $2 }
# Lightning 9500
$0 ~ /Unit +No. +HDU +No. +Type +Physics +Status/ {tableValid = "9500"}
$0 ~ /Unit +HDU +Type +Status/ {tableValid = "AMS500"}
# AMS 500
$1 ~ /MS_HW_SYSTEM_END/  { if (tableValid == "") {print "No valid table format found"}
	                             else {print "Valid table format found for: " systemName " Type: " tableValid }
	                         systemName = "" ; tableValid = ""
	                       }

$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/ && tableValid != "" {
	if (tableValid == "9500") {
		Unit = $1
		HDU = $2 ;
		StatusInformation = $0 ;
		Status = $5 ;
		}
	if (tableValid == "AMS500") {
		Unit = $1
		HDU = $2 ;
		StatusInformation = $0 ;
		Status = $4 ;
		}
	gsub (/^.*[0-9]+ +[0-9]+ +/,"",StatusInformation)
	gsub (/  +/," ",StatusInformation)
	if (Status ~ /100%/) {Status = "Normal"}
		else if (Status ~ /[0-9][0-9]%/) {Status = "Rebuilding"}
# 	Watch out - Identifiers must match between the audrive vendor script (discovery) and the audrive status awk script (collect)
	DeviceID = systemName ".Unit-" Unit ".HDU-" HDU  ;
# MSHW;DeviceID;Status;StatusInformation;
	print "MSHW;" DeviceID ";" Status ";" StatusInformation ";"
	}
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = The auluref -m awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN {tableValid = ""}
$1 ~ /MS_HW_SYSTEM_START/  { systemName = $2 }
# AMS2100
$0 ~ /LU +Capacity +Size +Group +Pool +Level +Type +Status/ {tableValid = "AMS2100"}
# 9500 / AMS500
$0 ~ /LU +.Mbyte. +C-CTL +D-CTL +Group +Level +Type +Status/ {tableValid = "9500"}
# AMS2300
$0 ~ /LU +Capacity +Size +Group +Pool +Level +Type +of +Paths +Status/ {tableValid = "AMS2300"}
# HUS110
$0 ~ / +LU +Capacity +Size +Group +Pool +Mode +Level +Type +Speed +of +Paths +Status/ {tableValid = "HUS110"}

$1 ~ /MS_HW_SYSTEM_END/  { if (tableValid == "") {print "No valid table format found"}
	                             else {print "Valid table format found for: " systemName " Type: " tableValid  }
	                         systemName = "" ; tableValid = ""
	                       }

$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+/ && tableValid != "" {
	if (tableValid == "AMS2100") {
		LU = $1
		Capacity = $2 ; CapacityGB = Capacity / 1024 ;
		StripeSize = $4 ;
		RAIDGroup = $5
		RaidLevel = $7 $8
		DiskType = $9
		Status = $10
		StatusInformation = $10 " " $11 " " $12 " " $13
		}
	if (tableValid == "HUS110") {
    LU = $1
    Capacity = $2 ;
    if ($3 ~ /[Mm][Bb]/) { CapacityGB = Capacity / 1024 }
    if ($3 ~ /[Tt][Bb]/) { CapacityGB = Capacity * 1024 }
    if ($3 ~ /[Gg][Bb]/) { CapacityGB = Capacity }
    StripeSize = $4 ;
    RAIDGroup = $5
    if ( $9 ~ /^[0-9]/ ) { RaidLevel = $8 $9 ; DiskType = $10 ; Status = $13 }
    else { RaidLevel = $8 ; DiskType = $9 ; Status = $12 }
    if (Status ~ /^[0-9]/) {Status = $14}
    StatusInformation = $14 " " $15 " " $16 " " $17
    }
	if (tableValid == "9500") {
		LU = $1
		Capacity = $2 ; CapacityGB = Capacity / 1024 ;
		StripeSize = ""
		RAIDGroup = $5
		RaidLevel = $6 ; if (RaidLevel ~ /[(]/) {
			RaidLevel = RaidLevel $7
			DiskType = $8
			Status = $9
			StatusInformation = $9 " " $10 " " $11 " " $12
			}
			else {
				DiskType = $7
				Status = $NF
				StatusInformation = $8 " " $9 " " $10 " " $11
				}
		}
	if (tableValid == "AMS2300") {
		LU = $1
		Capacity = $2 ;
		if (Capacity ~ /[Bb]/) {
			if (Capacity ~ /[Mm][Bb]/) { gsub (/[Mm][Bb]/,"",Capacity); CapacityGB = Capacity / 1024 }
			if (Capacity ~ /[Tt][Bb]/) { gsub (/[Tt][Bb]/,"",Capacity); CapacityGB = Capacity * 1024 }
			if (Capacity ~ /[Gg][Bb]/) { gsub (/[Gg][Bb]/,"",Capacity); CapacityGB = Capacity }
			StripeSize = $3 ;
			RAIDGroup = $4
			RaidLevel = $6 $7
			DiskType = $8
			Status = $10
			StatusInformation = $10 " " $11 " " $12 " " $13
			}
		else {
			if ($3 ~ /[Mm][Bb]/) { CapacityGB = Capacity / 1024 }
			if ($3 ~ /[Tt][Bb]/) { CapacityGB = Capacity * 1024 }
			if ($3 ~ /[Gg][Bb]/) { CapacityGB = Capacity }
			StripeSize = $4 ;
			RAIDGroup = $5
			RaidLevel = $7 $8
			DiskType = $9
			Status = $11
			StatusInformation = $11 " " $12 " " $13 " " $14
			}

		}
	DeviceID = systemName ".LU-" LU ; DisplayID = "LU-" LU
# MUST MATCH EF7 (Raid Groups)
# MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
	print "MSHW;" systemName";" DeviceID ";" DisplayID ";" CapacityGB ";" StripeSize ";" RAIDGroup ";" RaidLevel ";" DiskType ";" Status ";" StatusInformation ";Volume;0;;"
	}
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(7) = The aurgref -m awk script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(7):
BEGIN {tableValid = ""}
$1 ~ /MS_HW_SYSTEM_START/  { systemName = $2 }
# HUS110
$0 ~ /Group  Level +Groups +Type +Speed +Encryption +Total +Capacity +Free +Capacity +Priority +Status +Reconstruction +Progress/ {
	tableValid = "HUS110"
	statusStartIndex = index($0,"Status"); statusEndIndex = index($0,"Reconstruction");
	}

# HUS130
$0 ~ /Group  Level +Groups +Type +Speed +Total +Capacity +Free +Capacity +Priority +Status +Reconstruction +Progress/ {
	tableValid = "HUS130"
	statusStartIndex = index($0,"Status"); statusEndIndex = index($0,"Reconstruction");
	}


# AMS2100
$0 ~ /Group +Level +Groups +Type +Total +Capacity +Free +Capacity +Priority +Status +Reconstruction +Progress/ {
	tableValid = "AMS2100"
	statusStartIndex = index($0,"Status"); statusEndIndex = index($0,"Reconstruction");
	}



$1 ~ /MS_HW_SYSTEM_END/  { if (tableValid == "") {print "No valid table format found"}
	                             else {print "Valid table format found for: " systemName " Type: " tableValid  }
	                         systemName = "" ; tableValid = ""
	                       }

$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+/ && tableValid != "" {
	if (tableValid == "HUS110") {
		RG = $1
		Capacity = $8 ; CapacityGB = Capacity / 1024 ;
		CapacityFree = $10 ; CapacityFreeGB = CapacityFree / 1024 ;
		StripeSize = "" ;
		RAIDGroup = ""
		RaidLevel = $2 $3
		DiskType = $5
		Status = substr($0,statusStartIndex,statusEndIndex-statusStartIndex);
		}
	if (tableValid == "HUS130") {
		RG = $1
		Capacity = $7 ; CapacityGB = Capacity / 1024 ;
		CapacityFree = $9 ; CapacityFreeGB = CapacityFree / 1024 ;
		StripeSize = "" ;
		RAIDGroup = ""
		RaidLevel = $2 $3
		DiskType = $5
		Status = substr($0,statusStartIndex,statusEndIndex-statusStartIndex);
		}
	if (tableValid == "AMS2100") {
		RG = $1
		Capacity = $6 ; CapacityGB = Capacity / 1024 ;
		CapacityFree = $8 ; CapacityFreeGB = CapacityFree / 1024 ;
		StripeSize = "" ;
		RAIDGroup = ""
		RaidLevel = $2 $3
		DiskType = $5
		Status = substr($0,statusStartIndex,statusEndIndex-statusStartIndex);
		}
	gsub (/^ +/,"",Status);gsub (/ +$/,"",Status);
	StatusInformation = Status
	DeviceID = systemName ".RG-" RG ; DisplayID = "RG-" RG
# MUST MATCH EF6 (Volumes)
# MSHW;systemName;DeviceID;DisplayID;CapacityGB;StripeSize;RAIDGroup;RaidLevel;DiskType;Status;StatusInformation;LogicalDiskType;UseInCapacity;CapacityFreeGB;
	print "MSHW;" systemName";" DeviceID ";" DisplayID ";" CapacityGB ";" StripeSize ";" RAIDGroup ";" RaidLevel ";" DiskType ";" Status ";" StatusInformation ";RaidGroup;1;" CapacityFreeGB ";"
	}
EmbeddedFile(7).End
/////////////////////////////////////////////////////////////////////
