////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Emc Vplex
//                Connects to REST API
// ....Source(n).Type="HTTP"
// ....Source(n).Method="GET|POST"
// ....Source(n).URL="/url/test.pl"
// ....Source(n).Header=EmbeddedFile(1)
// ....Source(n).Body=EmbeddedFile(2)
// ....Source(n).ResultContent="httpStatus|header|body|all".
// ....Source(n).AuthenticationToken=%...Source(n-1)%
//

//
// Enclosure
//

// Eclosure Discovery
// ....Source(n).Type="HTTP"
// ....Source(n).Method="GET|POST"
// ....Source(n).URL="/url/test.pl"
// ....Source(n).Header=EmbeddedFile(1)
// ....Source(n).Body=EmbeddedFile(2)
// ....Source(n).ResultContent="httpStatus|header|body|all".
// ....Source(n).AuthenticationToken=%...Source(n-1)%
hdf.Comments="It monitors the Enclosure and Physical Disks as well as the various environment sensors (fans, power supplies, Memory, Directors and Network cards)"

Enclosure.Discovery.Source(1).Type="HTTP"
Enclosure.Discovery.Source(1).Method="GET"
Enclosure.Discovery.Source(1).URL="/vplex/engines/*"
Enclosure.Discovery.Source(1).ResultContent="body"
Enclosure.Discovery.Source(1).ForceSerialization=1
//Enclosure.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Enclosure.Discovery.Source(1).Compute(1).Type="Json2Csv"
Enclosure.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
Enclosure.Discovery.Source(1).Compute(1).Properties="/name;/value"
Enclosure.Discovery.Source(1).Compute(1).Separator=";"

//
// Awk Parsing
// Enclosure
// MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
// 1   ,2               ,3        , 4           ,5        , 6                ,7           ,  8       ,  9 , 10               , 11            , 12          ,13                ,14
Enclosure.Discovery.Source(1).Compute(2).Type="Awk"
Enclosure.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Enclosure.Discovery.Source(1).Compute(2).Separators=";"
//Enclosure.Discovery.Source(1).Compute(2).SelectColumns="2,3,4,5,6"


// Enclosure
// MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
// 1   ,2               ,3        , 4           ,5        , 6                ,7           ,  8       ,  9 , 10               , 11            , 12          ,13                ,14
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(9)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(9)
Enclosure.Discovery.Instance.Vendor="EMC"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(4)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(12)
Enclosure.Discovery.Instance.Type="Storage"


// Collect

// Collect type = multi-instance
Enclosure.Collect.Type="MultiInstance"

// Get the Enclosure Status
// ChassisID;State;
Enclosure.Collect.Source(1).Type="HTTP"
Enclosure.Collect.Source(1).ForceSerialization=1
Enclosure.Collect.Source(1).Method="GET"
Enclosure.Collect.Source(1).URL="/vplex/engines/*"
//Enclosure.Collect.Source(1).URL="/vplex/**/*/*"
Enclosure.Collect.Source(1).ResultContent="body"
//Enclosure.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Enclosure.Collect.Source(1).Compute(1).Type="Json2Csv"
Enclosure.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
Enclosure.Collect.Source(1).Compute(1).Properties="/name;/value"
Enclosure.Collect.Source(1).Compute(1).Separator=";"


//
// Awk Parsing
//
// MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
// 1   ,2               ,3        , 4           ,5        , 6                ,7           ,  8       ,  9 , 10               , 11            , 12          ,13                ,14
Enclosure.Collect.Source(1).Compute(2).Type="Awk"
Enclosure.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Enclosure.Collect.Source(1).Compute(2).Separators=";"

// MSHW, cluster-ip-seed,engine-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
// 1   ,2               ,3        , 4           ,5        , 6                ,7           ,  8       ,  9 , 10               , 11               , 12            ,13           ,14                , 15

Enclosure.Collect.Source(1).Compute(3).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(3).Column="10"

Enclosure.Collect.Source(1).Compute(4).Type="Translate"
Enclosure.Collect.Source(1).Compute(4).Column="10"
Enclosure.Collect.Source(1).Compute(4).TranslationTable="EnclosureTranslateTable"

EnclosureTranslateTable("online")="OK"
EnclosureTranslateTable("offline")="ALARM"
EnclosureTranslateTable(Default)="UNKNOWN"

// ValueTable = Source(1)
// ID;PatrolStatus;Value;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(9)
Enclosure.Collect.Status=ValueTable.Column(10)
Enclosure.Collect.StatusInformation=ValueTable.Column(11)



//
//
// FANS
//

// FANS
// Discovery

// Source(1) = Fan Table
// systemFanStatus
Fan.Discovery.Source(1).Type="HTTP"
Fan.Discovery.Source(1).ForceSerialization=1
Fan.Discovery.Source(1).Method="GET"
Fan.Discovery.Source(1).URL="/vplex/engines/*/fans/*"
Fan.Discovery.Source(1).ResultContent="body"
//Fan.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Fan.Discovery.Source(1).Compute(1).Type="Json2Csv"
Fan.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
Fan.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
Fan.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, NAME , STATUS, SPEED_THRESHOLD,parenttoCS
//  1 ,   2,    3,      4,                 5
Fan.Discovery.Source(1).Compute(2).Type="Awk"
Fan.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(2)
Fan.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Fan.Discovery.Source(1).Compute(2).Separators=";"
//Fan.Discovery.Source(1).Compute(2).SelectColumns="2,3,4,5,6"


// The discovery table
//
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

// FANS
// Collect
Fan.Collect.Type="MultiInstance"

Fan.Collect.Source(1).Type="HTTP"
Fan.Collect.Source(1).ForceSerialization=1
Fan.Collect.Source(1).Method="GET"
Fan.Collect.Source(1).URL="/vplex/engines/*/fans/*"
Fan.Collect.Source(1).ResultContent="body"
//Fan.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Fan.Collect.Source(1).Compute(1).Type="Json2Csv"
Fan.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
Fan.Collect.Source(1).Compute(1).Properties="/name;/value"
Fan.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, NAME , STATUS, SPEED_THRESHOLD, ParentID
//  1  ,     2,      3,               4,    5
Fan.Collect.Source(1).Compute(2).Type="Awk"
Fan.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(2)
Fan.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Fan.Collect.Source(1).Compute(2).Separators=";"
//Fan.Collect.Source(1).Compute(2).SelectColumns="2,3,4,5,6"

// MSHW, NAME , STATUS,Status, SPEED_THRESHOLD, ParentID
//  1  ,     2,      3,     4,               5,   6

Fan.Collect.Source(1).Compute(3).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(3).Column="3"

Fan.Collect.Source(1).Compute(4).Type="Translate"
Fan.Collect.Source(1).Compute(4).Column="4"
Fan.Collect.Source(1).Compute(4).TranslationTable="FansTranslateTable"

FansTranslateTable("online")="OK"
FansTranslateTable("offline")="ALARM"
FansTranslateTable(Default)="UNKNOWN"

// The Collect table
//
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(4)
Fan.Collect.StatusInformation=ValueTable.Column(3)


// PowerSupply
// Discovery

// Source(1) = Fan Table
// systemFanStatus
PowerSupply.Discovery.Source(1).Type="HTTP"
PowerSupply.Discovery.Source(1).ForceSerialization=1
PowerSupply.Discovery.Source(1).Method="GET"
PowerSupply.Discovery.Source(1).URL="/vplex/engines/*/*power*/*"
PowerSupply.Discovery.Source(1).ResultContent="body"
//PowerSupply.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
PowerSupply.Discovery.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
PowerSupply.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
PowerSupply.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
//  1   , 2         , 3    ,4    ,5                 , 6          , 7              , 8           , 9                             , 10
PowerSupply.Discovery.Source(1).Compute(2).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(3)
PowerSupply.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
PowerSupply.Discovery.Source(1).Compute(2).Separators=";"

PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=6
PowerSupply.Discovery.Source(1).Compute(3).String="Part Number: "

PowerSupply.Discovery.Source(1).Compute(4).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(4).Column=8
PowerSupply.Discovery.Source(1).Compute(4).String="Serial Number: "

// The discovery table
//
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(8)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(10)


// PowerSupply
// Collect

PowerSupply.Collect.Type="MultiInstance"

PowerSupply.Collect.Source(1).Type="HTTP"
PowerSupply.Collect.Source(1).ForceSerialization=1
PowerSupply.Collect.Source(1).Method="GET"
PowerSupply.Collect.Source(1).URL="/vplex/engines/*/*power*/*"
PowerSupply.Collect.Source(1).ResultContent="body"
//PowerSupply.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
PowerSupply.Collect.Source(1).Compute(1).Type="Json2Csv"
PowerSupply.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
PowerSupply.Collect.Source(1).Compute(1).Properties="/name;/value"
PowerSupply.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
// MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
//  1   , 2         , 3    ,4    ,5                 , 6          , 7              , 8           , 9                             , 10
PowerSupply.Collect.Source(1).Compute(2).Type="Awk"
PowerSupply.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(3)
PowerSupply.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
PowerSupply.Collect.Source(1).Compute(2).Separators=";"

// Duplicate Column
// MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
//  1   , 2         , 3    ,4    ,5                 , 6          , 7              , 8           , 9                             , 10
PowerSupply.Collect.Source(1).Compute(3).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(3).Column="5"


// MSHW, Marker-LED, Name, OnDC, operational-status,operationalstatus, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded,parent
//  1   , 2         , 3    ,4    ,5                , 6               , 7          , 8              , 9            , 10                            , 11
PowerSupply.Collect.Source(1).Compute(4).Type="Translate"
PowerSupply.Collect.Source(1).Compute(4).Column=5
PowerSupply.Collect.Source(1).Compute(4).TranslationTable="PowerSupplyTranslationTable"

// The psStatusTranslationTable status translation table
PowerSupplyTranslationTable("online")="OK"
PowerSupplyTranslationTable("offline")="ALARM"
PowerSupplyTranslationTable(Default)="UNKNOWN"

// The Collect table
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(5)
PowerSupply.Collect.StatusInformation=ValueTable.Column(6)

// OtherDevice
// Discovery

// Source(1) = Fan Table
// systemFanStatus
OtherDevice.Discovery.Source(1).Type="HTTP"
OtherDevice.Discovery.Source(1).ForceSerialization=1
OtherDevice.Discovery.Source(1).Method="GET"
OtherDevice.Discovery.Source(1).URL="/vplex/engines/*/directors/*/"
OtherDevice.Discovery.Source(1).ResultContent="body"
//OtherDevice.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
OtherDevice.Discovery.Source(1).Compute(1).Type="Json2Csv"
OtherDevice.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
OtherDevice.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
OtherDevice.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, health-state, name, serial-number,sp-id,parent
//  1   , 2          , 3   ,4             ,5    , 6
OtherDevice.Discovery.Source(1).Compute(2).Type="Awk"
OtherDevice.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(4)
OtherDevice.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
OtherDevice.Discovery.Source(1).Compute(2).Separators=";"

// AdditionalInformation adding Serial Number:
OtherDevice.Discovery.Source(1).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(3).Column=4
OtherDevice.Discovery.Source(1).Compute(3).String="Serial Number: "

// The discovery table
//
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

// OtherDevice
// Collect
OtherDevice.Collect.Type="MultiInstance"
OtherDevice.Collect.Source(1).Type="HTTP"
OtherDevice.Collect.Source(1).ForceSerialization=1
OtherDevice.Collect.Source(1).Method="GET"
OtherDevice.Collect.Source(1).URL="/vplex/engines/*/directors/*/"
OtherDevice.Collect.Source(1).ResultContent="body"
//OtherDevice.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
OtherDevice.Collect.Source(1).Compute(1).Type="Json2Csv"
OtherDevice.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
OtherDevice.Collect.Source(1).Compute(1).Properties="/name;/value"
OtherDevice.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, health-state, name, serial-number,sp-id,parent
//  1   , 2          , 3   ,4             ,5    , 6
OtherDevice.Collect.Source(1).Compute(2).Type="Awk"
OtherDevice.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(4)
OtherDevice.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
OtherDevice.Collect.Source(1).Compute(2).Separators=";"

OtherDevice.Collect.Source(1).Compute(3).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(3).Column=2


// Now translate Status

// MSHW, health-state,health-state, name, serial-number,sp-id,parent
//  1   , 2          , 3          ,4    ,5             , 6   , 7
OtherDevice.Collect.Source(1).Compute(4).Type="Translate"
OtherDevice.Collect.Source(1).Compute(4).Column=2
OtherDevice.Collect.Source(1).Compute(4).TranslationTable="OtherStatusTranslationTable"

// The psStatusTranslationTable status translation table
OtherStatusTranslationTable("ok")="OK"
OtherStatusTranslationTable("ko")="ALARM"
OtherStatusTranslationTable(Default)="UNKNOWN"

// The Collect table
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(4)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)

// Memory
// Discovery

// Source(1) = Fan Table
// systemFanStatus
Memory.Discovery.Source(1).Type="HTTP"
Memory.Discovery.Source(1).ForceSerialization=1
Memory.Discovery.Source(1).Method="GET"
Memory.Discovery.Source(1).URL="/vplex/*/*/directors/*/hardware/dimms/*"
Memory.Discovery.Source(1).ResultContent="body"
//Memory.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Memory.Discovery.Source(1).Compute(1).Type="Json2Csv"
Memory.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
Memory.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
Memory.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, name, operationnal-status, part-number, serial-number, parent
//  1   , 2         , 3             ,4          ,5            ,  6
Memory.Discovery.Source(1).Compute(2).Type="Awk"
Memory.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(5)
Memory.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Memory.Discovery.Source(1).Compute(2).Separators=";"


// The discovery table
//
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

// Memory
// Collect
Memory.Collect.Type="MultiInstance"
Memory.Collect.Source(1).Type="HTTP"
Memory.Collect.Source(1).ForceSerialization=1
Memory.Collect.Source(1).Method="GET"
Memory.Collect.Source(1).URL="/vplex/*/*/directors/*/hardware/dimms/*"
Memory.Collect.Source(1).ResultContent="body"
//Memory.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
Memory.Collect.Source(1).Compute(1).Type="Json2Csv"
Memory.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
Memory.Collect.Source(1).Compute(1).Properties="/name;/value"
Memory.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// Memory DIM
// MSHW; NAME, Operational-status; Part-number, serial-number , parent
// 1   ,    2,         3          , 4         , 5             , 6
Memory.Collect.Source(1).Compute(2).Type="Awk"
Memory.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(5)
Memory.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Memory.Collect.Source(1).Compute(2).Separators=";"
//Memory.Collect.Source(1).Compute(2).SelectColumns="2,3,4,5,6"

// MSHW; NAME, Operational-status, Operational-status, Part-number   , serial-number , parent
// 1   ,    2,         3          , 4                , 5             , 6             ,   7
Memory.Collect.Source(1).Compute(3).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(3).Column=3

Memory.Collect.Source(1).Compute(4).Type="Translate"
Memory.Collect.Source(1).Compute(4).Column=3
Memory.Collect.Source(1).Compute(4).TranslationTable="MemoryTranslationTable"

// The psStatusTranslationTable status translation table
MemoryTranslationTable("Online")="OK"
MemoryTranslationTable("Offline")="ALARM"
MemoryTranslationTable(Default)="UNKNOWN"

// The Collect table
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(2)
Memory.Collect.Status=ValueTable.Column(3)
Memory.Collect.StatusInformation=ValueTable.Column(4)


// NetworkCard
// https://emc-vplex/vplex/engines/*/directors/*/hardware/ports/*

// Source(1) = NetworkCard Table
//
NetworkCard.Discovery.Source(1).Type="HTTP"
NetworkCard.Discovery.Source(1).ForceSerialization=1
NetworkCard.Discovery.Source(1).Method="GET"
NetworkCard.Discovery.Source(1).URL="/vplex/*/*/directors/*/hardware/ports/*"
NetworkCard.Discovery.Source(1).ResultContent="body"
//NetworkCard.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
NetworkCard.Discovery.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
NetworkCard.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
NetworkCard.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, address,enabled,name,operational-status,linkstatus,port-wwn,role,parent
//  1  ,  2     , 3     ,4   ,5                 ,6         ,7        ,  8, 9
NetworkCard.Discovery.Source(1).Compute(2).Type="Awk"
NetworkCard.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(6)
NetworkCard.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(1).Compute(2).Separators=";"

//keep only enabled fc's
NetworkCard.Discovery.Source(1).Compute(3).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(3).Column=3
NetworkCard.Discovery.Source(1).Compute(3).ValueList="true"

NetworkCard.Discovery.Source(1).Compute(4).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(4).Column=8
NetworkCard.Discovery.Source(1).Compute(4).String="Role: "

// The discovery table
// Network
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(8)


// Memory
// Collect
NetworkCard.Collect.Type="MultiInstance"
NetworkCard.Collect.Source(1).Type="HTTP"
NetworkCard.Collect.Source(1).ForceSerialization=1
NetworkCard.Collect.Source(1).Method="GET"
NetworkCard.Collect.Source(1).URL="/vplex/*/*/directors/*/hardware/ports/*"
NetworkCard.Collect.Source(1).ResultContent="body"
//NetworkCard.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
NetworkCard.Collect.Source(1).Compute(1).Type="Json2Csv"
NetworkCard.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
NetworkCard.Collect.Source(1).Compute(1).Properties="/name;/value"
NetworkCard.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// MSHW, address,enabled,name,operational-status,linkstatus,port-wwn,role,parent
//  1  ,  2     , 3     ,4   ,5                 ,6         ,7        ,  8, 9

NetworkCard.Collect.Source(1).Compute(2).Type="Awk"
NetworkCard.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(6)
NetworkCard.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(1).Compute(2).Separators=";"

// MSHW, address,enabled,name,operational-status,operational-status,linkstatus,port-wwn,role,parent
//  1  ,  2     , 3     ,4   ,5                 ,6                 ,7         ,  8     , 9  ,10
NetworkCard.Collect.Source(1).Compute(3).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(3).Column=5

NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=5
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="NetworkCardTranslationTable"


// The NetworkCardTranslationTable status translation table
NetworkCardTranslationTable("ok")="OK"
NetworkCardTranslationTable("stopped")="OK"
// Error-No Link is cleared by the awk script
NetworkCardTranslationTable("error")="ALARM"
NetworkCardTranslationTable(Default)="UNKNOWN"

// Translate the Link Status
NetworkCard.Collect.Source(1).Compute(5).Type="Translate"
NetworkCard.Collect.Source(1).Compute(5).Column=7
NetworkCard.Collect.Source(1).Compute(5).TranslationTable="LinkTranslationTable"

// The LinkTranslationTable status translation table
LinkTranslationTable("up")="OK"
LinkTranslationTable("down")="WARN"
LinkTranslationTable("no-link")="WARN"
LinkTranslationTable(Default)="WARN"

// The Collect table
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(4)
NetworkCard.Collect.Status=ValueTable.Column(5)
NetworkCard.Collect.StatusInformation=ValueTable.Column(6)
NetworkCard.Collect.LinkStatus=ValueTable.Column(7)

//
// Discovery PhysicalDisk
// https://emc-vplex/vplex/engines/*/directors/*/hardware/internal-disks/*

// Source(1) =  Table
PhysicalDisk.Discovery.Source(1).Type="HTTP"
PhysicalDisk.Discovery.Source(1).ForceSerialization=1
PhysicalDisk.Discovery.Source(1).Method="GET"
PhysicalDisk.Discovery.Source(1).URL="/vplex/*/*/directors/*/hardware/internal-disks/*"
PhysicalDisk.Discovery.Source(1).ResultContent="body"
//PhysicalDisk.Discovery.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Discovery.Source(1).Compute(1).EntryKey="response/context/attributes"
PhysicalDisk.Discovery.Source(1).Compute(1).Properties="/name;/value;../parent"
PhysicalDisk.Discovery.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// Physical Disk
// MSHW, name, operational-status, part-number, serial-number, parentid
// 1    ,  2 ,       3            ,  4         ,   5         ,    6
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(7)
PhysicalDisk.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(1).Compute(2).Separators=";"



// The discovery table
//
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)

// PhysicalDisk
// Collect
PhysicalDisk.Collect.Type="MultiInstance"
PhysicalDisk.Collect.Source(1).Type="HTTP"
PhysicalDisk.Collect.Source(1).ForceSerialization=1
PhysicalDisk.Collect.Source(1).Method="GET"
PhysicalDisk.Collect.Source(1).URL="/vplex/*/*/directors/*/hardware/internal-disks/*"
PhysicalDisk.Collect.Source(1).ResultContent="body"
//PhysicalDisk.Collect.Source(1).Header=EmbeddedFile(8)

// JSON Status
//
PhysicalDisk.Collect.Source(1).Compute(1).Type="Json2Csv"
PhysicalDisk.Collect.Source(1).Compute(1).EntryKey="response/context/attributes"
PhysicalDisk.Collect.Source(1).Compute(1).Properties="/name;/value"
PhysicalDisk.Collect.Source(1).Compute(1).Separator=";"

// Awk Parsing
//
// Physical Disk
// MSHW, name, operational-status, part-number, serial-number, parentid
// 1    ,  2 ,       3            ,  4         ,   5         ,    6
PhysicalDisk.Collect.Source(1).Compute(2).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(7)
PhysicalDisk.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Compute(2).Separators=";"
//PhysicalDisk.Collect.Source(1).Compute(2).SelectColumns="2,3,4,5,6"


// MSHW, name, operational-status,operational-status, part-number, serial-number, parentid
// 1    ,  2 ,       3           ,  4               ,   5        ,    6         , 7

PhysicalDisk.Collect.Source(1).Compute(3).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3

// Now translate Status
// Value,StatusInfo,Status
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=3
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskTranslationTable"

// The PhysicalDiskTranslationTable status translation table
PhysicalDiskTranslationTable("online")="OK"
PhysicalDiskTranslationTable("offline")="ALARM"
PhysicalDiskTranslationTable(Default)="UNKNOWN"

// The Collect table
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(3)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(4)



////////////////////////////////////
////  AWK Scripts
///////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parses
/// Enclosure
/// MSHW, cluster-ip-seed,enclosure-id,engine-family,engine-id,health-indications,health-state,marker-led,name,operational-status,revision-number,serial-number,top-level-assembly,wwn-seed
/// MSHW, 2             ,3         ,4            , 5        ,6              , 7           ,8         , 8     ,      9                  , 10            , 11          , 12               ,13
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";";}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^cluster-ip-seed/ { ClusterIPSeed[ID] = $3 ;   }
$2 ~ /^enclosure-id/ { EnclosureID[ID] = $3 ; }
$2 ~ /^engine-family/ { EngineFamily[ID] = $3 ;  }
$2 ~ /^engine-id/ { EngineID[ID] = $3 ; }
$2 ~ /^health-indications/ { HealthIndications[ID] = $3 ; }
$2 ~ /^health-state/ { HealthState[ID] = $3 ; }
$2 ~ /^marker-led/ {MarkerLED[ID] = $3 ; }
$2 ~ /^name/ {Name[ID] = $3 ; }
$2 ~ /^operational-status/ { Status[ID] = $3 ;}
$2 ~ /^revision-number/ { RevNumber[ID] = $3 ; }
$2 ~ /^serial-number/ { SerialNumber[ID] = $3 ;}
$2 ~ /^top-level-assembly/ {TopLevelAssembly[ID] = $3;}
$2 ~ /^wwn-seed/ {  WWNSeed[ID] = $3 }
END{
    for (ID in Name) {
    	print "MSHW;" ClusterIPSeed[ID] ";" EnclosureID[ID] ";" EngineFamily[ID] ";" EngineID[ID] ";" HealthIndications[ID] ";" HealthState[ID] ";" MarkerLED[ID] ";" Name[ID] ";" Status[ID] ";" RevNumber[ID] ";" SerialNumber[ID] ";" TopLevelAssembly[ID] ";" WWNSeed[ID] ";"
    }
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parses
/// FAN
/// MSHW, Name, Operational-status, speed-threshold-exceeded, parentid
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS=";";}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^name/  {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
	}
$2 ~ /^operational-status/  { OS[ID] = $3 ; }
$2 ~ /^speed-threshold-exceeded/ { SpeedThresholdExceeded[ID] = $3 ; }

END{
for ( ID in Name)
    {
    print "MSHW;" Name[ID] ";" OS[ID] ";" SpeedThresholdExceeded[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = awk script that parses
/// Power Supply
/// MSHW, Marker-LED, Name, OnDC, operational-status, Part-number, Revision-number, Serial-Number, Temperature-threshold-exceeded, parentid
///  1   , 2         , 3    ,4    ,5                 , 6          , 7              , 8           , 9                                 10
/////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN {FS=";";ID =""}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^marker-led/  { MarkerLED[ID] = $3 ;}
$2 ~ /^name/  {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
	}
$2 ~ /^onDC/ { OnDC[ID] = $3 ;}
$2 ~ /^operational-status/ { Status[ID] = $3 ;}
$2 ~ /^part-number/ { PartNumber[ID] = $3 ;}
$2 ~ /^revision-number/ { RevNumber[ID] = $3 ;}
$2 ~ /^serial-number/ { SerialNumber[ID] = $3 ;}
$2 ~ /^temperature-threshold-exceeded/ { TemperatureThresholdExceeded[ID] = $3 ;}

END{
for ( ID in Name){
    print "MSHW;" MarkerLED[ID] ";" Name[ID] ";" OnDC[ID] ";" Status[ID] ";" PartNumber[ID] ";" RevNumber[ID] ";" SerialNumber[ID] ";" TemperatureThresholdExceeded[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = awk script that parses
/// OtherDevice: Director
/// MSHW, Health-state, name, serial-number, sp-id, parentid
/////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN {FS=";";}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^health-state/ { HealthState[ID] = $3 ;}
$2 ~ /^name/  {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
    }
$2 ~ /^serial-number/  { SerialNumber[ID] = $3 ; }
$2 ~ /^sp-id/  { SPID[ID] = $3 ; }

END{
for ( ID in Name) {
    print "MSHW;" HealthState[ID] ";" Name[ID] ";" SerialNumber[ID] ";" SPID[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = awk script that parses
/// Memory DIM
/// MSHW; NAME, Operational-status; Part-number, serial-number, parentid
/////////////////////////////////////////////////////////
EmbeddedFile(5):
BEGIN {FS=";";}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^name/ && $3 ~ /^dimm/ {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
    }
$2 ~ /^operational-status/  { Status[ID] = $3 ; }
$2 ~ /^part-number/ { PartNumber[ID] = $3 ;}
$2 ~ /^serial-number/ { SerialNumber[ID] = $3 ;}

END{
for ( ID in Name) {
    print "MSHW;" Name[ID] ";" Status[ID] ";" PartNumber[ID] ";" SerialNumber[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = awk script that parses
/// Network
/// MSHW; address,enabled,name,operational-status-port-status,port-wwn,role, parentid
///  1   ,  2    , 3        4   ,5                          , 6     ,7           8
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN {FS=";"; }
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^address/  { Address[ID] = $3 ;   }
$2 ~ /^enabled/ && Address[ID] != 0 { Enabled[ID] = $3 ; }
$2 ~ /^name/ {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
	}
$2 ~ /^operational-status/ { Status[ID] = $3 ; }
$2 ~ /^port-status/  { PortStatus[ID] = $3 ;  }
$2 ~ /^port-wwn/ { PortWWN[ID] = $3 ; }
$2 ~ /^role/ { Role[ID] = $3 ;   }


END{
for ( ID in Name) {
	# if the only error is a no-link, clear the error
	if ( Status[ID] == "error" && PortStatus[ID] == "no-link") { Status[ID] = "ok" }
    print "MSHW;" Address[ID] ";" Enabled[ID] ";" Name[ID] ";" Status[ID] ";" PortStatus[ID] ";" PortWWN[ID] ";" Role[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(7) = awk script that parses
/// Physical Disk
/// MSHW, name, operational-status, part-number, serial-number, parentid
/// 1    ,  2 ,       3            ,  4         ,   5            6
/////////////////////////////////////////////////////////
EmbeddedFile(7):
BEGIN {FS=";";}
{ID = $1; gsub(/.*context./,"",ID); gsub(/..attributes.*$/,"",ID);}
$2 ~ /^name/  {
    Name[ID] = $3 ;
    split($4,outputarray,"/")
    Parent[ID]=outputarray[3]
    }
$2 ~ /^operational-status/ && Name[ID] != 0 { Status[ID] = $3 ; }
$2 ~ /^part-number/ && Name[ID] != 0  { PartNumber[ID] = $3 ;  }
$2 ~ /^serial-number/ && Name[ID] != 0 { SerialNumber[ID] = $3 ; }

END{
for ( ID in Name) {
    print "MSHW;" Name[ID] ";" Status[ID] ";" PartNumber[ID] ";" SerialNumber[ID] ";" Parent[ID] ";"
    }
}
EmbeddedFile(7).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(8) = Headers for authentification
///
/////////////////////////////////////////////////////////
//EmbeddedFile(8):
//username:%{USERNAME}
//password:%{PASSWORD}
//EmbeddedFile(8).End
/////////////////////////////////////////////////////////////////////
