//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                 MS_HW_LSIsas2ircu.hdf
//
//      Supports: x86 Servers
//			Monitors: Raid contollers, arrays and disks managed by Sas2Ircu (LSI, usually Dell)
//      Connects to: Sas2Ircu under Linux
//

//
// HEADER
//

hdf.DisplayName="LSI sas2ircu Managed Raid Controllers"
hdf.TypicalPlatform="Any system with LSI sas2ircu"
hdf.ReliesOn="Sas2Ircu (LSI) managed RAID card"
hdf.Comments="Gives physical disk and array status."
hdf.Version="1.1"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux"
hdf.Supersedes="MS_HW_Director52ServeRAIDLinux.hdf,MS_HW_SmartMonLinux.hdf,MS_HW_LSIUtilUNIX.hdf"

//
// DETECTION
//

// Check the utility exists
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="%{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu"
Detection.Criteria(1).ExpectedResult="SAS2IRCU: No command specified"
Detection.Criteria(1).ErrorMessage="sas2ircu not installed on this server."

// Check there are appropriate controllers installed
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu LIST"
Detection.Criteria(2).ExpectedResult="^[0-9].*SAS.*:.*:.*:"
Detection.Criteria(2).ErrorMessage="No sas2ircu managed controllers found / insufficient rights."

// We should find disks attached to one controller
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="/bin/sh %EmbeddedFile(1)%"
Detection.Criteria(3).ExpectedResult="Device is a"
Detection.Criteria(3).ErrorMessage="No sas2ircu managed physical disks found."

//
// SUDO-able commands
//
Sudo(1).Command="/opt/lsi/bin/sas2ircu"


//
// DISK CONTROLLERS
//

//
// Discovery


// Source(1) = Output of sas2ircu script
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"

// Reformat Source(1) output via EmbeddedFile(2)
//
DiskController.Discovery.Source(1).Compute(1).Type="Awk"
DiskController.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
DiskController.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
DiskController.Discovery.Source(1).Compute(1).Separators=";"

// Make a copy of DiskController Source 1 so that it can be used by other discoveries
DiskController.Discovery.Source(2)=%DiskController.Discovery.Source(1)%

// Keep only Controllers
// MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
DiskController.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(2).Compute(1).Column="1"
DiskController.Discovery.Source(2).Compute(1).ValueList="MSHW_CTRL"

DiskController.Discovery.Source(2).Compute(2).Type="LeftConcat"
DiskController.Discovery.Source(2).Compute(2).Column=6
DiskController.Discovery.Source(2).Compute(2).String="Location: "

// The InstanceTable
// MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(2)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
DiskController.Discovery.Instance.Model=InstanceTable.Column(3)
DiskController.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(5)

//
// Collect

// Collect type is "all instances in one shot"
DiskController.Collect.Type="MultiInstance"


// There is no DiskController Status (it's too basic of a controller to have one)
// We're just using this so that we can collect for other classes.

// Source(1) = Output of sas2ircu script
DiskController.Collect.Source(1).Type="OsCommand"
DiskController.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"

// Reformat Source(1) output via EmbeddedFile(2)
//
DiskController.Collect.Source(1).Compute(1).Type="Awk"
DiskController.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
DiskController.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
DiskController.Collect.Source(1).Compute(1).Separators=";"

// Make a copy of DiskController Source 1 so that it can be used by other discoveries
DiskController.Collect.Source(2)=%DiskController.Discovery.Source(1)%

// Keep only Controllers
// MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
DiskController.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Collect.Source(2).Compute(1).Column="1"
DiskController.Collect.Source(2).Compute(1).ValueList="MSHW_CTRL"

// ValueTable = Source(1)
// MSHW_CTRL;ControllerID;ControllerType;BIOS;ControllerFirmware;ControllerSlot;
DiskController.Collect.ValueTable=%DiskController.Collect.Source(2)%
DiskController.Collect.DeviceID=ValueTable.Column(2)

//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = Discovery Instance Table
PhysicalDisk.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// Keep only PhysicalDisks
// MSHW_PD;EnclosureSlot;State;SizeMB;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="1"
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="MSHW_PD"

// Translate size into bytes
// MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=4
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1048576"

// Translate the Drive Type
// MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=9
PhysicalDisk.Discovery.Source(1).Compute(3).TranslationTable="PhysicalDiskTypeTranslationTable"

// The PhysicalDiskStatusTranslationTable
PhysicalDiskTypeTranslationTable("SAS_HDD")="SAS hard-disk drive"
PhysicalDiskTypeTranslationTable("SATA_HDD")="SATA hard-disk drive"
PhysicalDiskTypeTranslationTable("SAS_SSD")="SAS solid-state drive"
PhysicalDiskTypeTranslationTable("SATA_SSD")="SATA solid-state drive"
PhysicalDiskTypeTranslationTable(Default)="Hard Disk Drive"

PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=9
PhysicalDisk.Discovery.Source(1).Compute(4).String="Type: "
// InstanceTable = Source(1)
// MSHW_PD;EnclosureSlot;State;Size;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(7)
// Removed for ConnectorStandardization compatibility
// PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)

//
// Collect

// Collect type is "all instances in one shot"
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = Collect Instance Table
PhysicalDisk.Collect.Source(1)=%DiskController.Collect.Source(1)%

// Keep only PhysicalDisks
// MSHW_PD;EnclosureSlot;State;SizeMB;Manufacturer;Model;Firmware;Serial;DriveType;Controller;
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column="1"
PhysicalDisk.Collect.Source(1).Compute(1).ValueList="MSHW_PD"

// Keep only ID and State
// EnclosureSlot;State;
PhysicalDisk.Collect.Source(1).Compute(2).Type="KeepColumns"
PhysicalDisk.Collect.Source(1).Compute(2).ColumnNumbers="2,3"

// Duplicate the state column
// EnclosureSlot;State;State;
PhysicalDisk.Collect.Source(1).Compute(3).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(3).Column="2"

// Translate the first state column into a PATROLStatus
// EnclosureSlot;PATROLStatus;state
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column="2"
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskStatusTranslationTable"

// Translate the second state column into a more readable string
// EnclosureSlot;PATROLStatus;statusInformation
PhysicalDisk.Collect.Source(1).Compute(5).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(5).Column="3"
PhysicalDisk.Collect.Source(1).Compute(5).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable("ONL")="OK"
PhysicalDiskStatusTranslationTable("HSP")="OK"
PhysicalDiskStatusTranslationTable("AVL")="OK"
PhysicalDiskStatusTranslationTable("FLD")="ALARM"
PhysicalDiskStatusTranslationTable("MIS")="ALARM"
PhysicalDiskStatusTranslationTable("SBY")="WARN"
PhysicalDiskStatusTranslationTable("OSY")="ALARM"
PhysicalDiskStatusTranslationTable("DGD")="ALARM"
PhysicalDiskStatusTranslationTable("RBLD")="WARN"
PhysicalDiskStatusTranslationTable("OPT")="OK"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable("ONL")="Online"
PhysicalDiskStatusInformationTranslationTable("HSP")="Hot Spare"
PhysicalDiskStatusInformationTranslationTable("AVL")="Available"
PhysicalDiskStatusInformationTranslationTable("FLD")="Failed"
PhysicalDiskStatusInformationTranslationTable("MIS")="Missing"
PhysicalDiskStatusInformationTranslationTable("SBY")="Standby"
PhysicalDiskStatusInformationTranslationTable("OSY")="Out of Sync"
PhysicalDiskStatusInformationTranslationTable("DGD")="Degraded"
PhysicalDiskStatusInformationTranslationTable("RBLD")="Rebuilding"
PhysicalDiskStatusInformationTranslationTable("OPT")="Optimal"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"


//
// Logical DISKS
//

//
// Discovery

// Source(1) = Discovery Instance Table
LogicalDisk.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// Keep only LogicalDisks
// MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
LogicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(1).Compute(1).Column=1
LogicalDisk.Discovery.Source(1).Compute(1).ValueList="MSHW_LD"

// Translate size into bytes
// MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeB;ControllerID;
LogicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(2).Column=7
LogicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1048576"

LogicalDisk.Discovery.Source(1).Compute(3).Type="LeftConcat"
LogicalDisk.Discovery.Source(1).Compute(3).Column=5
LogicalDisk.Discovery.Source(1).Compute(3).String="WWID: "

// InstanceTable = Source(1)
// MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(8)
LogicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)

//
// Collect

// Collect type is "all instances in one shot"
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = Collect Instance Table
LogicalDisk.Collect.Source(1)=%DiskController.Collect.Source(1)%

// Keep only LogicalDisks
// MSHW_LD;IRVolume;VolumeID;VolumeStatus;VolumeWWID;VolumeRAIDLevel;SizeMB;ControllerID;
LogicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(1).Compute(1).Column="1"
LogicalDisk.Collect.Source(1).Compute(1).ValueList="MSHW_LD"

// Keep only ID and State
// VolumeID;State;
LogicalDisk.Collect.Source(1).Compute(2).Type="KeepColumns"
LogicalDisk.Collect.Source(1).Compute(2).ColumnNumbers="3,4"

// Duplicate the state column
// VolumeID;State;State;
LogicalDisk.Collect.Source(1).Compute(3).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(3).Column="2"

// Translate the first state column into a PATROLStatus
// VolumeID;PATROLStatus;state
LogicalDisk.Collect.Source(1).Compute(4).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(4).Column="2"
LogicalDisk.Collect.Source(1).Compute(4).TranslationTable="LogicalDiskStatusTranslationTable"

// Translate the second state column into a more readable string
// VolumeID;PATROLStatus;statusInformation
LogicalDisk.Collect.Source(1).Compute(5).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(5).Column="3"
LogicalDisk.Collect.Source(1).Compute(5).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable("ONL")="OK"
LogicalDiskStatusTranslationTable("DGD")="ALARM"
LogicalDiskStatusTranslationTable("FLD")="ALARM"
LogicalDiskStatusTranslationTable("MIS")="ALARM"
LogicalDiskStatusTranslationTable("INIT")="WARN"
LogicalDiskStatusTranslationTable("OKY")="OK"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable("ONL")="Online"
LogicalDiskStatusInformationTranslationTable("DGD")="Degraded"
LogicalDiskStatusInformationTranslationTable("FLD")="Failed"
LogicalDiskStatusInformationTranslationTable("MIS")="Missing"
LogicalDiskStatusInformationTranslationTable("INIT")="Initializing"
LogicalDiskStatusInformationTranslationTable("OKY")="OK"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"





////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = LIST / DISPLAY Command
///    Gets a list of controllers from sas2ircu LIST
///		 Then runs an sas2ircu DISPLAY for each controller.
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
# Awk (or nawk)
if [ -f /usr/xpg4/bin/awk ]; then
	AWK="/usr/xpg4/bin/awk";
elif [ -f /usr/bin/nawk ]; then
	AWK="/usr/bin/nawk";
else
	AWK="awk";
fi
CONTROLLERLIST=`%{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu LIST | $AWK '$1~/^[0-9]+$/{print $1}'`
for CONTROLLER in $CONTROLLERLIST
    do
    echo MS_HW_CONTROLLER_START $CONTROLLER
    %{SUDO:/opt/lsi/bin/sas2ircu} /opt/lsi/bin/sas2ircu $CONTROLLER DISPLAY
    echo MS_HW_CONTROLLER_END $CONTROLLER
    done

EmbeddedFile(1).End
/////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = Controller / Physicaldisk / Logical Disk awk
///    takes output of EF1 and returns MSHW_CTRL / MSHW_LD / MSHW_PD
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {DriveCounter = 0}
#CONTROLLER
$1 ~ /MS_HW_CONTROLLER_START/ {ControllerID = $2}
$0 ~ /^ *Controller type *:/ {ControllerType = $4}
$0 ~ /^ *BIOS version *:/ {BIOS = $4}
$0 ~ /^ *Firmware version *:/ {ControllerFirmware = $4}
$1 ~ /^ *Slot/ && $2 ~ /:/ {ControllerSlot = $3}
$1 ~ /MS_HW_CONTROLLER_END/ && ControllerType !- "" {
         print "MSHW_CTRL;" ControllerID ";" ControllerType  ";" BIOS  ";" ControllerFirmware ";" ControllerSlot ";"
         ControllerType = ""
         }

#LOGICAL DISK
$0 ~ /^ *IR volume [0-9]/ { IRVolume = $NF }
$0 ~ /^ *Volume ID *:/ {VolumeID = $NF}
$0 ~ /^ *Status of volume *:/ { VolumeStatus = $NF ; gsub ("[()]","",VolumeStatus) }
$0 ~ /^ *Volume wwid *:/ { VolumeWWID = $NF }
$0 ~ /^ *RAID level *:/ {VolumeRAIDLevel = $NF}
$0 ~ /^ *Size/ && IRVolume != "" {SizeMB = $NF
                       print "MSHW_LD;" IRVolume ";" VolumeID ";" VolumeStatus ";" VolumeWWID ";" VolumeRAIDLevel ";" SizeMB ";" ControllerID ";"
                       IRVolume = ""
                      }

#PHYSICAL DISK
$0 ~ /^ *Device is a/ {DriveCounter = DriveCounter +1 }
$0 ~ /^ *Enclosure # *:/  {Enclosure[DriveCounter] = $NF
                          Controller[DriveCounter] = ControllerID
                         }
$0 ~ /^ *Slot # *:/ {Slot[DriveCounter] = $NF}
$0 ~ /^ *State *:/ {State[DriveCounter] = $NF  ; gsub ("[()]","",State[DriveCounter])}
$0 ~ /^ *Size.*in MB.*in sectors.*:/ {Size[DriveCounter] = $NF ; gsub ("/.*","",Size[DriveCounter]) }
$0 ~ /^ *Manufacturer *:/ {Manufacturer[DriveCounter] = $NF}
$0 ~ /^ *Model Number *:/ {Model[DriveCounter] = $NF}
$0 ~ /^ *Firmware Revision *:/ {Firmware[DriveCounter] = $NF}
$0 ~ /^ *Serial No *:/ {Serial[DriveCounter] = $NF}
$0 ~ /^ *Drive Type *:/ {DriveType[DriveCounter] = $NF}

END { for (I in Enclosure)
      print ("MSHW_PD;Enclosure " Enclosure[I] " Slot " Slot[I] ";" State[I] ";" Size[I] ";" Manufacturer[I] ";" Model[I] ";" Firmware[I] ";" Serial[I] ";" DriveType[I] ";" Controller[I] ";" )
    }
EmbeddedFile(2).End
/////////////////////////////////////////////////////////
