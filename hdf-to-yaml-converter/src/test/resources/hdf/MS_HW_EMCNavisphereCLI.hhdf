
// ENCLOSURE



// Process the naviseccli command through an AWK script
Enclosure.Discovery.Source(3).Compute(1).Type="Awk"
Enclosure.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(3).Compute(1).Separators=";"

// Enclosure Source 2 = Copy of Source 1
Enclosure.Discovery.Source(4)=%Enclosure.Discovery.Source(3)%

// Keep only Enclosures
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;SystemFaultLED;
Enclosure.Discovery.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(4).Compute(1).Column=1
Enclosure.Discovery.Source(4).Compute(1).RegExp="^MSHW_ENCLOSURE$"

// The discovery table
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;SystemFaultLED;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor="EMC"
Enclosure.Discovery.Instance.Type="Storage"


// Collect

// Collect type: MultiInstance
Enclosure.Collect.Type="MultiInstance"



// Process the naviseccli command through an AWK script
Enclosure.Collect.Source(3).Compute(1).Type="Awk"
Enclosure.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Collect.Source(3).Compute(1).Separators=";"

// Enclosure Source 2 = Copy of Source 1
Enclosure.Collect.Source(4)=%Enclosure.Collect.Source(3)%

// Keep only Enclosures
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;SystemFaultLED;
Enclosure.Collect.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(4).Compute(1).Column=1
Enclosure.Collect.Source(4).Compute(1).RegExp="^MSHW_ENCLOSURE$"

// Duplicate status, because we will translate it two times
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;SystemFaultLED;SystemFaultLED;
Enclosure.Collect.Source(4).Compute(2).Type="DuplicateColumn"
Enclosure.Collect.Source(4).Compute(2).Column=5

// Translate Status into PATROLStatus
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;PATROLStatus;SystemFaultLED;
Enclosure.Collect.Source(4).Compute(3).Type="Translate"
Enclosure.Collect.Source(4).Compute(3).Column=5
Enclosure.Collect.Source(4).Compute(3).TranslationTable="systemStatusTranslationTable"

// The systemStatusTranslationTable
systemStatusTranslationTable("ON")="WARN"
systemStatusTranslationTable("OFF")="OK"
systemStatusTranslationTable(Default)="UNKNOWN"

// Translate second Status into more readable string
// MS_HW_Enclosure;SystemModel;SerialNumber;SystemFirmware;PATROLStatus;StatusInformation;
Enclosure.Collect.Source(4).Compute(4).Type="Translate"
Enclosure.Collect.Source(4).Compute(4).Column=6
Enclosure.Collect.Source(4).Compute(4).TranslationTable="systemStatusInformationTranslationTable"

// The systemStatusInformationTranslationTable
systemStatusInformationTranslationTable("ON")="System Fault LED ON"
systemStatusInformationTranslationTable("OFF")="System Fault LED OFF"
systemStatusInformationTranslationTable(Default)="Unknown System Fault LED Status"

// ValueTable = Source(2)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.DeviceID=ValueTable.Column(3)
Enclosure.Collect.Status=ValueTable.Column(5)
Enclosure.Collect.StatusInformation=ValueTable.Column(6)

// Take a copy of the last discovery for the next discovery to use
Enclosure.Collect.Source(5)=%Enclosure.Discovery.Source(3)%

//
//
// PhysicalDisk
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only PhysicalDisk
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1
PhysicalDisk.Discovery.Source(1).Compute(1).RegExp="^MSHW_PHYDISK$"

// Convert Size from Mbytes to bytes
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=10
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=1048576

// Exclude Empty Disk Slots
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=4
PhysicalDisk.Discovery.Source(1).Compute(3).ValueList="Empty"

// The discovery table
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStateInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.additionalinformation1=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.additionalinformation2=InstanceTable.Column(9)

// Collect

// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only Physical Disks
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column=1
PhysicalDisk.Collect.Source(1).Compute(1).RegExp="^MSHW_PHYDISK$"

// Now translate  into OK/Warning/Alarm
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=4
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="StatusTT"

// Value Table
// MSHW_PHYDISK;DiskID;DiskVendor;DiskState;DiskStatusInformation;DiskModel;DiskRevision;DiskTLAPartNumber;DiskPartNumber;Size;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(4)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(5)

//
//
// PowerSupply
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only "OTHER"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Keep only "Power"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).RegExp="^Power$"

// Exclude Empty
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(3).Column=4
PowerSupply.Discovery.Source(1).Compute(3).ValueList="Empty"

// The discovery table
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.additionalinformation1=InstanceTable.Column(5)
PowerSupply.Discovery.Instance.additionalinformation2=InstanceTable.Column(6)
PowerSupply.Discovery.Instance.additionalinformation3=InstanceTable.Column(7)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(8)

// Collect

// Collect type: MultiInstance
PowerSupply.Collect.Type="MultiInstance"

PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only PowerSupply
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=1
PowerSupply.Collect.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Duplicate the State
// MSHW_OTHER;Type;ComponentID;Status;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(2).Column=4

// Now translate  into OK/Warning/Alarm
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=4
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="StatusTT"

// Value Table
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(4)
PowerSupply.Collect.StatusInformation=ValueTable.Column(5)


//
//
// Memory
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only "OTHER"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;Size;Type;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Keep only "DIMM"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;Size;Type;
Memory.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(2).Column=2
Memory.Discovery.Source(1).Compute(2).RegExp="^DIMM$"

// Exclude Empty
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;Size;Type;
Memory.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(3).Column=4
Memory.Discovery.Source(1).Compute(3).ValueList="Empty"

Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=5
Memory.Discovery.Source(1).Compute(4).String="Part Number: "

Memory.Discovery.Source(1).Compute(5).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(5).Column=7
Memory.Discovery.Source(1).Compute(5).String="Version: "

// The discovery table
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;Size;Type;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Memory.Discovery.Instance.additionalinformation1=InstanceTable.Column(5)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Memory.Discovery.Instance.additionalinformation2=InstanceTable.Column(7)
Memory.Discovery.Instance.Model=InstanceTable.Column(8)
Memory.Discovery.Instance.Type=InstanceTable.Column(10)
Memory.Discovery.Instance.Size=InstanceTable.Column(9)


// Collect

// Collect type: MultiInstance
Memory.Collect.Type="MultiInstance"

Memory.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only Memory
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
Memory.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=1
Memory.Collect.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Duplicate the State
// MSHW_OTHER;Type;ComponentID;Status;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
Memory.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(2).Column=4

// Now translate  into OK/Warning/Alarm
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=4
Memory.Collect.Source(1).Compute(3).TranslationTable="StatusTT"

// Value Table
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(3)
Memory.Collect.Status=ValueTable.Column(4)
Memory.Collect.StatusInformation=ValueTable.Column(5)


//
//
// CPU
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
CPU.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only "OTHER"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=1
CPU.Discovery.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Keep only "DIMM"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(2).Column=2
CPU.Discovery.Source(1).Compute(2).RegExp="^CPU$"

// Exclude Empty
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
CPU.Discovery.Source(1).Compute(3).Column=4
CPU.Discovery.Source(1).Compute(3).ValueList="Empty"

CPU.Discovery.Source(1).Compute(4).Type="LeftConcat"
CPU.Discovery.Source(1).Compute(4).Column=6
CPU.Discovery.Source(1).Compute(4).String="SerialNumber: "

// The discovery table
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(3)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(3)
CPU.Discovery.Instance.additionalinformation1=InstanceTable.Column(5)
CPU.Discovery.Instance.additionalinformation3=InstanceTable.Column(6)
CPU.Discovery.Instance.additionalinformation2=InstanceTable.Column(7)
CPU.Discovery.Instance.Model=InstanceTable.Column(8)

// Collect

// Collect type: MultiInstance
CPU.Collect.Type="MultiInstance"

CPU.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only CPU
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Collect.Source(1).Compute(1).Column=1
CPU.Collect.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Duplicate the State
// MSHW_OTHER;Type;ComponentID;Status;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Collect.Source(1).Compute(2).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(2).Column=4

// Now translate  into OK/Warning/Alarm
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=4
CPU.Collect.Source(1).Compute(3).TranslationTable="StatusTT"

// Value Table
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(3)
CPU.Collect.Status=ValueTable.Column(4)
CPU.Collect.StatusInformation=ValueTable.Column(5)

//
//
// OtherDevice
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only "OTHER"
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Keep only non DIMM / CPU
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=2
OtherDevice.Discovery.Source(1).Compute(2).ValueList="DIMM,CPU,Power"

// Exclude Empty
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(3).Column=4
OtherDevice.Discovery.Source(1).Compute(3).ValueList="Empty"

OtherDevice.Discovery.Source(1).Compute(4).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(4).Column=5
OtherDevice.Discovery.Source(1).Compute(4).String="Part Number: "

OtherDevice.Discovery.Source(1).Compute(5).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(5).Column=6
OtherDevice.Discovery.Source(1).Compute(5).String="Serial Number: "

// The discovery table
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.additionalinformation1=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.additionalinformation2=InstanceTable.Column(6)
OtherDevice.Discovery.Instance.additionalinformation3=InstanceTable.Column(7)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(8)

// Collect

// Collect type: MultiInstance
OtherDevice.Collect.Type="MultiInstance"

OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only OtherDevice
// MSHW_OTHER;Type;ComponentID;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).RegExp="^MSHW_OTHER$"

// Duplicate the State
// MSHW_OTHER;Type;ComponentID;Status;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Collect.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(2).Column=4

// Now translate  into OK/Warning/Alarm
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=4
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="StatusTT"

// Value Table
// MSHW_OTHER;Type;ComponentID;PatrolStatus;Status;ComponentPartNumber;ComponentSerialNumber;ComponentRevision;ComponentDescription;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(3)
OtherDevice.Collect.Status=ValueTable.Column(4)
OtherDevice.Collect.StatusInformation=ValueTable.Column(5)


//
//
// LogicalDisk
//
// We do not collect logical disks.  We are using this to create events to indicate
// NaviSphere CLI errors (as logical disks don't report missings)

//
// Discovery

// Source(1) = Enclosure Discovery 1
LogicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only LogicalDisk
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(1).Compute(1).Column=1
LogicalDisk.Discovery.Source(1).Compute(1).RegExp="^MSHW_LOGICALDISK$"

// Discovery Table
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(5)

// Collect

// Collect type: MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Split LogicalDisks into NaviSphereCLI Warnings (From Celerra Connector and Real Logical Disks)
LogicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only NaviSphereCLI Warnings.  These are pre-translated
LogicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(1).Compute(1).Column=2
LogicalDisk.Collect.Source(1).Compute(1).RegExp="^NaviSphere CLI Failure$"

// Split LogicalDisks into NaviSphereCLI Warnings (From Celerra Connector and Real Logical Disks)
LogicalDisk.Collect.Source(2)=%Enclosure.Collect.Source(3)%

// Keep only RAIDGroups
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(2).Compute(1).Column=2
LogicalDisk.Collect.Source(2).Compute(1).RegExp="^RAIDGroup-"

// Translate the first status array into a patrol status array
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(2).Compute(2).Type="ArrayTranslate"
LogicalDisk.Collect.Source(2).Compute(2).Column=3
LogicalDisk.Collect.Source(2).Compute(2).TranslationTable="RaidGroupStatusTranslationTable"

// The RaidGroupStatusTranslationTable
RaidGroupStatusTranslationTable("Explicit_Remove")="OK"
RaidGroupStatusTranslationTable("Valid_luns")="OK"
RaidGroupStatusTranslationTable("Valid states are Invalid")="WARN"
RaidGroupStatusTranslationTable("Expanding")="OK"
RaidGroupStatusTranslationTable("Defragmenting")="OK"
RaidGroupStatusTranslationTable("Halted")="ALARM"
RaidGroupStatusTranslationTable("Busy")="OK"
RaidGroupStatusTranslationTable("Invalid")="WARN"
RaidGroupStatusTranslationTable("Enabled")="OK"
RaidGroupStatusTranslationTable("OK")="OK"
RaidGroupStatusTranslationTable("Rebuilding")="WARN"
RaidGroupStatusTranslationTable("attention")="WARN"
RaidGroupStatusTranslationTable("failed")="ALARM"
RaidGroupStatusTranslationTable("normal")="OK"
RaidGroupStatusTranslationTable("removed")="ALARM"
RaidGroupStatusTranslationTable("empty")="ALARM"
RaidGroupStatusTranslationTable("no_mirror")="WARN"
RaidGroupStatusTranslationTable("Online")="WARN"
RaidGroupStatusTranslationTable("fault")="ALARM"
RaidGroupStatusTranslationTable("faulted")="ALARM"
RaidGroupStatusTranslationTable("*fault*")="ALARM"
RaidGroupStatusTranslationTable("Unbound")="OK"
RaidGroupStatusTranslationTable("bound")="OK"
RaidGroupStatusTranslationTable("ready")="OK"
RaidGroupStatusTranslationTable("present")="OK"
RaidGroupStatusTranslationTable("valid")="OK"
RaidGroupStatusTranslationTable("degraded")="WARN"

// Translate the second status array into a status information array
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(2).Compute(3).Type="ArrayTranslate"
LogicalDisk.Collect.Source(2).Compute(3).Column=4
LogicalDisk.Collect.Source(2).Compute(3).TranslationTable="RaidGroupStatusInformationTranslationTable"
LogicalDisk.Collect.Source(2).Compute(3).ResultSeparator=" - "

// The RaidGroupStatusInformationTranslationTable
RaidGroupStatusInformationTranslationTable("Explicit_Remove")=""
RaidGroupStatusInformationTranslationTable("Valid_luns")=""
RaidGroupStatusInformationTranslationTable("Valid states are Invalid")="Valid States are Invalid"
RaidGroupStatusInformationTranslationTable("Expanding")=""
RaidGroupStatusInformationTranslationTable("Defragmenting")=""
RaidGroupStatusInformationTranslationTable("Halted")="Halted"
RaidGroupStatusInformationTranslationTable("Busy")="OK"
RaidGroupStatusInformationTranslationTable("Degraded")="Degraded"
RaidGroupStatusInformationTranslationTable("Invalid")="Invalid"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(2).Compute(4).Type="Convert"
LogicalDisk.Collect.Source(2).Compute(4).Column=3
LogicalDisk.Collect.Source(2).Compute(4).ConversionType="Array2SimpleStatus"

// Split LogicalDisks into NaviSphereCLI Warnings (From Celerra Connector and Real Logical Disks)
LogicalDisk.Collect.Source(3)=%Enclosure.Collect.Source(3)%

// Keep Only Logical Disks
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(3).Compute(1).Column=1
LogicalDisk.Collect.Source(3).Compute(1).RegExp="^MSHW_LOGICALDISK$"

// Exclude RAIDGroups
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(3).Compute(2).Type="ExcludeMatchingLines"
LogicalDisk.Collect.Source(3).Compute(2).Column=2
LogicalDisk.Collect.Source(3).Compute(2).RegExp="^RAIDGroup-"

// Exclude NaviSphereCLI Warnings.  These are pre-translated
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(3).Compute(3).Type="ExcludeMatchingLines"
LogicalDisk.Collect.Source(3).Compute(3).Column=2
LogicalDisk.Collect.Source(3).Compute(3).RegExp="^NaviSphere CLI Failure$"

// Now translate  into OK/Warning/Alarm
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.Source(3).Compute(4).Type="Translate"
LogicalDisk.Collect.Source(3).Compute(4).Column=3
LogicalDisk.Collect.Source(3).Compute(4).TranslationTable="StatusTT"

// Union 1 and 2 and 3
LogicalDisk.Collect.Source(4).Type="TableUnion"
LogicalDisk.Collect.Source(4).Table1=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Source(4).Table2=%LogicalDisk.Collect.Source(2)%
LogicalDisk.Collect.Source(4).Table3=%LogicalDisk.Collect.Source(3)%

// Value Table
// MSHW_LOGICALDISK;ID;Status;StatusInformation;RaidLevel;Name;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(4)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(2)
LogicalDisk.Collect.Status=ValueTable.Column(3)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(4)

//
//
// NetworkCard
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
NetworkCard.Discovery.Source(1)=%Enclosure.Discovery.Source(3)%

// Keep only NetworkCards
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).RegExp="^MSHW_PORT$"

// Exclude ports with no SFP
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(2).Column=6
NetworkCard.Discovery.Source(1).Compute(2).ValueList="None"

NetworkCard.Discovery.Source(1).Compute(3).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(3).Column=8
NetworkCard.Discovery.Source(1).Compute(3).String="Location: "

NetworkCard.Discovery.Source(1).Compute(4).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(4).Column=10
NetworkCard.Discovery.Source(1).Compute(4).String="Part Number: "

NetworkCard.Discovery.Source(1).Compute(5).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(5).Column=9
NetworkCard.Discovery.Source(1).Compute(5).String="SPUID: "

// The discovery table
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.ParameterActivation.LinkSpeed=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(8)
NetworkCard.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)


// Collect

// Collect type: MultiInstance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
NetworkCard.Collect.Source(1)=%Enclosure.Collect.Source(3)%

// Keep only DiskControllers
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).RegExp="^MSHW_PORT$"

// Now translate SPLinkStatus into OK/Warning/Alarm
// MSHW_PORT;PortID;PATROLSPLinkStatus;SPPortStatus;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=3
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="SPLinkStatusTT"

SPLinkStatusTT("up")="OK"
SPLinkStatusTT("down")="WARN"
SPLinkStatusTT(Default)="UNKNOWN"

// Add SPPortStatus to Status Information
NetworkCard.Collect.Source(1).Compute(3).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(3).Column=5
NetworkCard.Collect.Source(1).Compute(3).String=Column(4)

// Translate the Port Status
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=4
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="SPPortStatusTT"

SPPortStatusTT("online")="OK"
SPPortStatusTT("disabled")="OK"
SPPortStatusTT(Default)="ALARM"

// Add Port Status to Status Information
NetworkCard.Collect.Source(1).Compute(5).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(5).Column=5
NetworkCard.Collect.Source(1).Compute(5).String="Port Status: "

// Add SFP State to Status Information
NetworkCard.Collect.Source(1).Compute(6).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(6).Column=5
NetworkCard.Collect.Source(1).Compute(6).String=" - SFP State: "

// Add SFState value to the Status Information
NetworkCard.Collect.Source(1).Compute(7).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(7).Column=5
NetworkCard.Collect.Source(1).Compute(7).String=Column(6)

// Translate the Port Status
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Collect.Source(1).Compute(8).Type="Translate"
NetworkCard.Collect.Source(1).Compute(8).Column=6
NetworkCard.Collect.Source(1).Compute(8).TranslationTable="SFPPortStatusTT"

SFPPortStatusTT("online")="OK"
SFPPortStatusTT("disabled")="OK"
SFPPortStatusTT(Default)="ALARM"

// Add the SFState to the SPPortStatus and Convert to SimpleStatus
// MSHW_PORT;PortID;SPLinkStatus;SPPortStatus;StatusInformation;SFState;SPPortSpeed;Location;SPUID[PortID];FRU;
NetworkCard.Collect.Source(1).Compute(9).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(9).Column=4
NetworkCard.Collect.Source(1).Compute(9).String="|"

NetworkCard.Collect.Source(1).Compute(10).Type="LeftConcat"
NetworkCard.Collect.Source(1).Compute(10).Column=4
NetworkCard.Collect.Source(1).Compute(10).String=Column(6)

NetworkCard.Collect.Source(1).Compute(11).Type="Convert"
NetworkCard.Collect.Source(1).Compute(11).Column=4
NetworkCard.Collect.Source(1).Compute(11).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(2)
NetworkCard.Collect.LinkStatus=ValueTable.Column(3)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(7)
NetworkCard.Collect.Status=ValueTable.Column(4)
NetworkCard.Collect.StatusInformation=ValueTable.Column(5)

StatusTT("Enabled")="OK"
StatusTT("OK")="OK"
StatusTT("Rebuilding")="WARN"
StatusTT("attention")="WARN"
StatusTT("failed")="ALARM"
StatusTT("normal")="OK"
StatusTT("removed")="ALARM"
StatusTT("empty")="ALARM"
StatusTT("no_mirror")="WARN"
StatusTT("Online")="WARN"
StatusTT("fault")="ALARM"
StatusTT("faulted")="ALARM"
StatusTT("*fault*")="ALARM"
StatusTT("Unbound")="OK"
StatusTT("bound")="OK"
StatusTT("ready")="OK"
StatusTT("present")="OK"
StatusTT("valid")="OK"
StatusTT("degraded")="WARN"
StatusTT("spare")="OK"
StatusTT("alerts.")="ALARM"
StatusTT("Bypass")="ALARM"
StatusTT("Up")="OK"
StatusTT("Off")="ALARM"
StatusTT("Binding")="OK"
StatusTT("Equalizing")="OK"
StatusTT("Expanding")="OK"
StatusTT("Formatting")="WARN"
StatusTT("Power")="OK"
StatusTT("Transitioning")="OK"
StatusTT("unformatted")="WARN"
StatusTT("unsupported")="ALARM"
StatusTT(Default)="UNKNOWN"

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = Process Get All
///
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
# ENCLOSURE
$0 ~ /Agent.Host Information/ {Section="ENC"}
Section=="ENC" {
  if ($1 ~ /Model:/)  {SystemModel = $2}
  else if ($1 ~ /Prom/ && $2 ~ /Rev:/) {SystemFirmware = $NF}
  else if ($1 ~ /Serial/ && $2 ~ /No:/)  {SystemSerial = $NF}
  }

# ARRAY
$0 ~ /Array Information/ {Section="ARRAY"}
Section=="ARRAY" {
  if ($1 ~ /Array/ && $2 ~ /Name:/) {ArrayName = $NF}
  else if ( $0 ~ /^Bus [0-9]* Enclosure [0-9]*.*State:/ || $0 ~ /^SP [A-Z0-9] State:/ || $0 ~ /^Enclosure SPE.*State:/ ) {
	                                                         ComponentID = $0 ;
	                                                         gsub(/State:/,":",ComponentID)
	                                                         gsub(/ ?:.*$/,"",ComponentID)
	                                                         ComponentIDs[ComponentID] = ComponentID;
	                                                         Type[ComponentID] = $5 ;
															 if ($0 ~ /^SP [A-Z0-9] State:/) {Type[ComponentID] = "SP"};
															 if (/^Enclosure SPE.*State:/) {
															   Typetemp = $0
                                                               gsub(/Enclosure SPE /,"",Typetemp) ;
															   gsub(/( [^ ][^ ]?)? State:.*/,"",Typetemp) ;
															   gsub(/SPS? [AB] /,"",Typetemp) ;
															   Type[ComponentID] = Typetemp
															   }
	                                                         Status[ComponentID] = $0
	                                                         gsub(/.*: */,"",Status[ComponentID])
	                                                         gsub(/ *$/,"",Status[ComponentID])
	                                                       }
  }

# HBA
$0 ~ /^HBA Information/ {Section="HBA"}

# Ports
$0 ~ /Information about each SPPORT/ {Section="SPPORT"}
Section=="SPPORT" {
  if ($1 ~ /SP/ && $2 ~ /Name:/) {SPName = $0; gsub(/.*: */,"",SPName);}
  else if ($1 ~ /SP/ && $2 ~ /Port/ && $3 ~ /ID:/) {SPID = $NF ; PortID = SPName " Port " SPID ; Ports[PortID] = PortID ;}
  else if ($1 ~ /Link/ && $2 ~ /Status:/) {SPLinkStatus[PortID] = $NF }
  else if ($1 ~ /Port/ && $2 ~ /Status:/) {SPPortStatus[PortID] = $NF ; SPPortStatusInformation[PortID] = $0 ; gsub(/Status: */,"", SPPortStatusInformation[PortID]) }
  else if ($1 ~ /SFP/ && $2 ~ /State:/)	 {SFState[PortID] = $NF }
  else if ($1 ~ /Speed/ && $2 ~ /Value/)	 {SPPortSpeed[PortID] = $NF ; gsub(/[Gg]bps/,"000",SPPortSpeed[PortID]);gsub(/[Mm]bps/,"",SPPortSpeed[PortID]);gsub(/N.A/,"",SPPortSpeed[PortID])}
  else if ($1 ~ /I.O/ && $2 ~ /Module/ && $3 ~ /Slot:/) {SPIOSlot[PortID] = "IO Module " $NF}
  else if ($1 ~ /Physical/ && $2 ~ /Port/ && $3 ~ /ID:/) {SPPhysPortID[PortID] = "Port ID " $NF}
# (removed)  else if ($1 ~ /SP/ && $2 ~ /UID:/)	 {SPUID[PortID] = "UID: "$NF }
  else if ($1 ~ /SFP.Connector/ && $2 ~ /EMC/ && $3 ~ /Part/) {SPEMCPartNumber[PortID] = "Part Number: " $NF ; gsub (/N.A$/,"",SPEMCPartNumber[PortID]) }
  else if ($1 ~ /SFP.Connector/ && $2 ~ /EMC/ && $3 ~ /Serial/) {SPEMCSerialNumber[PortID] = "Serial Number: " $NF ; gsub (/N.A$/,"",SPEMCSerialNumber[PortID])}
  else if ($1 ~ /SFP.Connector/ && $2 ~ /Vendor/ && $3 ~ /Part/) {SPVendorPartNumber[PortID] = "Alternative Part Number: " $NF ; gsub (/N.A$/,"",SPVendorPartNumber[PortID])}
  else if ($1 ~ /SFP.Connector/ && $2 ~ /Vendor/ && $3 ~ /Serial/) {SPVendorSerialNumber[PortID] = "Alternative Serial Number: " $NF ; gsub (/N.A$/,"",SPVendorSerialNumber[PortID])}
  }
# SP Information
$0 ~ /^SP Information/ {Section="SP"}
Section=="SP" {
  if ($1 ~ /System/ && $2 ~ /Fault/ && $3 ~ /LED:/) {SystemFaultLED = $NF}
  }

# PHYSICAL DISK
$0 ~ /All Disks Information/ {Section="PD"}
Section=="PD" {
  if ($0 ~ /^Bus [0-9]+ Enclosure [0-9]+ +Disk [A-Za-z0-9]+$/) {DiskID = $0; DiskIDs[DiskID]= DiskID;}
  else if ($1 ~ /Vendor/ && $2 ~ /Id:/) {DiskVendor[DiskID] = $NF}
  else if ($1 ~ /State/) {DiskState[DiskID] = $NF ; DiskStateInformation[DiskID] = $0 ; gsub(/.*State:? */,"", DiskStateInformation[DiskID])}
  else if ($1 ~ /Capacity:/) {Size[DiskID] = $NF}
  else if ($1 ~ /Product/ && $2 ~ /Id:/)  {DiskModel[DiskID] = $0; gsub(/.*: */,"",DiskModel[DiskID])}
  else if ($1 ~ /Product/ && $2 ~ /Revision:/) {DiskRevision[DiskID] = $NF}
  else if ($1 ~ /Clariion/ && $2 ~ /TLA/ && $3 ~ /Part/) {DiskTLAPartNumber[DiskID] =  $NF; gsub (/Number:/,"",DiskTLAPartNumber[DiskID]) ;
	                                                             gsub (/PWR$/,"",DiskTLAPartNumber[DiskID]) ;
	                                                             DiskTLAPartNumber[DiskID] = "Alternative Part Number: " DiskTLAPartNumber[DiskID] }
  else if ($1 ~ /Clariion/ && $2 ~ /Part/ && $3 ~ /Number:/) {DiskPartNumber[DiskID] = "Part Number: "$NF}
  }
# Raid Group
$0 ~ /All RAID Groups Information/ {Section="RG"}
Section=="RG" {
  if ($1 ~ /RaidGroup/ && $2 ~ /ID/) {LDiskID = "RAIDGroup-" $NF ;LDiskIDs[LDiskID]= LDiskID; LDiskName[LDiskID] = LDiskID;}
  else if ($1 ~ /RaidGroup/ && $2 ~ /Type/) {LDiskRaid[LDiskID] = $NF}
  else if ($1 ~ /RaidGroup/ && $2 ~ /State/) {State = $0 ; gsub(/.*: */,"",State); LDiskState[LDiskID] = LDiskState[LDiskID] "|" State
                                                   endofState = 0;
                                                   while (endofState=="0") {getline
                                                   	                        if( $0 ~ /:/ ) {endofState = 1}
                                                   	                        else {State = $0 ; gsub(/ */,"",State);
                                                   	                        	  LDiskState[LDiskID] = LDiskState[LDiskID] "|" State
                                                   	                             }
                                                   	                       }
                                                  }
  }

# Raid Group (LUNs)
# Get additional RG status information from its LUNs
$0 ~/LOGICAL UNIT NUMBER/ {Section="LUN"}
Section=="LUN" {
  if ($1 ~ /RAIDGroup/ && $2 ~ /ID/) { LDiskID = "RAIDGroup-" $NF  ;}
  else if ($1 ~ /State/) { State = $0 ; gsub(/.*: */,"",State);
	                             # A faulted LUN Raid Group is just a degraded one
	                             if ( tolower(State) ~ /faulted/) { State = "Degraded" }
	                             LDiskState[LDiskID] = LDiskState[LDiskID] "|" State
                                 LDiskID = ""
                               }
  }

# Storage Pools
$1 ~ /Pool/ && $2 ~ /Name:/ {Section="SPOOL"; PoolName = $0 ; gsub(/.*: */,"",PoolName) }
Section=="SPOOL" {
  if ($1 ~ /Pool/ && $2 ~ /ID/) { LDiskID = "StoragePool-" $NF ; LDiskIDs[LDiskID] = LDiskID ; LDiskName[LDiskID] = PoolName }
  else if ($1 ~ /Raid/ && $2 ~ /Type/) {LDiskRaid[LDiskID] = $NF}
  else if ($1 ~ /State/) {LDiskState[LDiskID] = $NF}
  }

# Resume Information
$0 ~ /Resume Information/ {Section="FRU"}
$0 !~ /:/ && Section != "NAS" {ComponentID=""}
#SP
Section=="FRU" {
  if ($1 ~ /SP/ && $2 ~ /[A-Z]/) { ComponentID = "SP " $2 ; Type[ComponentID]="SP"}
#For non-SP, set StorageProcessor
  else if ($1 ~ /Storage/ && $2 ~ /Processor/ && $3 ~ /^[A-Z]$/) {StorageProcessor = $3}
#For power supplies and LCC, Set the Location aswell
  else if ($0 ~ /Bus [0-9] Enclosure [0-9]/) {Location = $0}
  else if ($0 ~ /Enclosure SPE/) {Location = $0}
  else if ($1 ~ /Power/ && $2 ~ /^[A-Z][A-Z0-9]?$/) {StorageProcessor = $2 ; ComponentID = Location " Power " StorageProcessor ; Type[ComponentID] = "Power"}
  else if ($1 ~ /Standby/ && $2 ~ /Power/ && $3 ~ /Supply/) { ComponentID = "Enclosure SPE SPS " StorageProcessor ; Type[ComponentID] = "SPS" }
  else if ($1 ~ /Management/ && $2 ~ /Module/) { ComponentID = Location " Management Module " $3 ; Type[ComponentID] = "SPS" }
  else if ($1 ~ /Fan/ && $2 ~ /[0-9]/) { ComponentID = Location " Fan " $2 ; Type[ComponentID] = "FAN" }
  else if ($1 ~ /LCC/ && $2 ~ /^[A-Z]$/) {StorageProcessor = $2 ; ComponentID = Location " LCC " StorageProcessor ; Type[ComponentID] = "LCC"}
  else if ($1 ~ /ICM/ && $2 ~ /^[A-Z]$/) {StorageProcessor = $2 ; ComponentID = Location " ICM " StorageProcessor ; Type[ComponentID] = "ICM"}
  else if ($1 ~ /CPU/ && $2 ~ /Module/) { ComponentID = "Bus 0 Enclosure 0 CPU Module " StorageProcessor ; Type[ComponentID] = "CPU"
                                          ComponentID2 = "Enclosure SPE CPU Module " StorageProcessor ; Type[ComponentID] = "CPU"
                                        }
  else if ($1 ~ /I.O/ && $2 ~ /Module/) { ComponentID = "Bus 0 Enclosure 0 SP " StorageProcessor " I/O Module " $3 ; Type[ComponentID] = "IOM"
                                          ComponentID2 = "Enclosure SPE SP " StorageProcessor " I/O Module " $3 ; Type[ComponentID2] = "IOM"
                                        }
  else if ($1 ~ /EMC/ && $2 ~ /Part/ && $3 ~ /Number:/) {ComponentPartNumber[ComponentID] = "Part Number: " $NF
                                                         ComponentPartNumber[ComponentID2] = ComponentPartNumber[ComponentID]
                                                        }
  else if ($1 ~ /EMC/ && $2 ~ /Serial/ && $3 ~ /Number:/) {ComponentSerialNumber[ComponentID] = "Serial Number: " $NF
                                                           ComponentSerialNumber[ComponentID2] = ComponentSerialNumber[ComponentID]
                                                          }
  else if ($1 ~ /EMC/ && $2 ~ /Assembly/ && $3 ~ /Revision:/) {ComponentRevision[ComponentID] = "Version: "$NF
                                                               ComponentRevision[ComponentID2] = ComponentRevision[ComponentID]
                                                              }
  else if ($1 ~ /Assembly/ && $2 ~ /Name:/) {ComponentDescription[ComponentID] = $0; gsub(/^.*: */,"",ComponentDescription[ComponentID])
                                             ComponentDescription[ComponentID2] = ComponentDescription[ComponentID]
                                            }
  }

$0 ~ /All logical Units Information/ {Section="LD"}
$0 ~ /Snap View Information/ {Section="SV"}

# Process output of nas_inventory
$0 ~ /MS_HW_NAS_INVENTORY_START/ {Section="NAS"}
Section=="NAS" {
  if ($1 ~ /Component/ && $2 ~ /Name/) {
    ComponentID  = $0 ; gsub(/.* = /,"",ComponentID )
    if (ComponentID ~ /^Shelf/) {
    	  Bus = ComponentID
    	  gsub(/Shelf /,"",Bus)
    	  gsub("/.*","",Bus)
    	  Enclosure = ComponentID
    	  gsub("Shelf [0-9]+/","",Enclosure)
    	  gsub(" .*","",Enclosure)
        ComponentDetails = ComponentID
        gsub("Shelf [0-9]+/[0-9]+ ","",ComponentDetails)
        ComponentID = "Bus " Bus " Enclosure " Enclosure " " ComponentDetails
        }
    if (ComponentID ~ /Power Supply/) { gsub(/Power Supply/,"Power",ComponentID) }
    }
  else if ($1 ~ /Type/) { ComponentType = $0 ; gsub(/.* = /,"",ComponentType )  }
  else if ($1 ~ /Status/) { ComponentStatus = $0 ; gsub(/.* = /,"",ComponentStatus ) ; gsub(/[(].*/,"",ComponentStatus) ; gsub(/Error.*: /,"",ComponentStatus) }
  else if ($1 ~ /Variant/) { Description = $0 ; gsub(/.* = /,"",Description )}
  else if ($1 ~ /Version/) { Version = $0 ; gsub(/.* = /,"",Version )}
  else if ($1 ~ /Serial/) { SerialNumber = $0 ; gsub(/.* = /,"",SerialNumber )}
  else if ($1 ~ /Part/) { PartNumber = $0 ; gsub(/.* = /,"",PartNumber )}
  else if ($0 ~ /EMC_PART_NUMBER/) { PartNumber = $0 ; gsub(/.*EMC_PART_NUMBER:/,"",PartNumber )}
  else if ($0 ~ /EMC_ASSEMBLY_REVISION/) { Revision = $0 ; gsub(/.*EMC_ASSEMBLY_REVISION:/,"",Revision ) }
  else if ($0 ~ /DIMM_TYPE/) { DimmType = $0 ; gsub(/.*DIMM_TYPE:/,"",DimmType )}

  # Create a fake Logical Disk to indicate Navisphere CLI failures
  else if ($0 ~ /MS_HW_NAS_NaviSphereCLI_Failure/) { print "MSHW_LOGICALDISK;NaviSphere CLI Failure;ALARM;Unknown login error for block side of system, see debug;;NaviSphere CLI Failure;"}
  else if ($0 ~ /MS_HW_NAS_Authentication_failed/) { print "MSHW_LOGICALDISK;NaviSphere CLI Failure;ALARM;Authentication failed for block side of system;;NaviSphere CLI Failure;"}
  else if ($0 ~ /MS_HW_NAS_No_SP_In_Hosts/) { print "MSHW_LOGICALDISK;NaviSphere CLI Failure;ALARM;No SP addresses in /etc/hosts file;;NaviSphere CLI Failure;"}
  else if ($0 ~ /MS_HW_NAS_Authentication_blocked/) { print "MSHW_LOGICALDISK;NaviSphere CLI Failure;ALARM;Excessive failed authentication attempts for block side of system;;NaviSphere CLI Failure;"}
  else if ($0 ~ /MS_HW_NAS_Not_Compatible/) { print "MSHW_LOGICALDISK;NaviSphere CLI Failure;ALARM;Connector not compatible with this version of the KM;;NaviSphere CLI Failure;"}
  else if ($0 ~ /MS_HW_NAS_INVENTORY_END/ || $1 ~ /Location/) {
    if (toupper(ComponentType) ~ /VNX/ || ComponentType ~ /Clar/ || ComponentType ~ /Celerra/) {
        SystemModel = Description
        SystemFirmware = Version
        SystemSerial = SerialNumber
        }
    else if (ComponentType ~ /Disk/) {
        DiskID = ComponentID
        gsub(/ Disk/,"  Disk",DiskID)
        DiskIDs[DiskID]=DiskID
        if (DiskState[DiskID] == "") {DiskState[DiskID]=ComponentStatus}
        DiskRevision[DiskID]=Version
        DiskTLAPartNumber[DiskID]=PartNumber
        DiskSerialNumber=SerialNumber
        }
    else {
        ComponentIDs[ComponentID] = ComponentID;
        if (ComponentType != "") { Type[ComponentID] = ComponentType }
        if (PartNumber != "") { ComponentPartNumber[ComponentID] = PartNumber }
        if (SerialNumber != "") { ComponentSerialNumber[ComponentID] = SerialNumber }
        if (Revision != "") { ComponentRevision[ComponentID] = Revision }
        if (DimmType != "") {
                             if (DimmType ~ /MB$/) { DimmArraySize = split(DimmType,DimmArray," ")
                                                     DimmSize = DimmArray[DimmArraySize]
                                                     gsub(DimmSize,"",DimmType);
                                                     gsub(/MB/,"",DimmSize)
                                                     ComponentDimmSize[ComponentID] = DimmSize
                                                     ComponentDimmType[ComponentID] = DimmType
                                                   }
                             else {ComponentDimmType[ComponentID] = DimmType }
                            }
        if (Description != "") { ComponentDescription[ComponentID] = Description }
        if (ComponentStatus != "" && Status[ComponentID] == "") { Status[ComponentID] = ComponentStatus }
        }
    ComponentType = ""
    ComponentStatus = ""
    Description = ""
    Version = ""
    SerialNumber = ""
    PartNumber = ""
    Revision = ""
    DimmType = ""
    }
  }
# We will now process the previous discovery (if available).
# If the status of a physical disk is removed then we will replace that disk's information with that of the previous discover
$0 ~ /^MSHW_PHYDISK/ {
  # Split the line (see print below to know the fields)
  split($0,PHYDISKArray,";")
  DiskID=PHYDISKArray[2]
  if ( tolower(DiskState[DiskID]) ~ /removed/ ) {
    # If current information is empty, replace with that of last discovery
    if ( DiskVendor[DiskID] !~ /.../ ) { DiskVendor[DiskID] = PHYDISKArray[3] }
    if ( DiskModel[DiskID] !~ /.../ ) { DiskModel[DiskID] = PHYDISKArray[5] }
    if ( DiskRevision[DiskID] !~ /.../ ) { DiskRevision[DiskID] = PHYDISKArray[6] }
    if ( DiskTLAPartNumber[DiskID] !~ /.../ ) { DiskTLAPartNumber[DiskID] = PHYDISKArray[7] }
    if ( DiskPartNumber[DiskID] !~ /.../ ) { DiskPartNumber[DiskID] = PHYDISKArray[8] }
    if ( Size[DiskID] !~ /.../ ) { Size[DiskID] = PHYDISKArray[9] }
  }
}


END{
# ENCLOSURE
print "MSHW_ENCLOSURE;" SystemModel ";" SystemSerial ";" "Prom Rev:" SystemFirmware ";" SystemFaultLED ";"
# PHYSICAL DISK
for (DiskID in DiskIDs) { if (DiskID != "") {
	  print "MSHW_PHYDISK;" DiskID ";" DiskVendor[DiskID] ";" DiskState[DiskID] ";" DiskStateInformation[DiskID] ";" DiskModel[DiskID] ";" DiskRevision[DiskID] ";" DiskTLAPartNumber[DiskID] ";"  DiskPartNumber[DiskID] ";" Size[DiskID] ";"
    }
    }

# LOGICAL DISK
for (LDiskID in LDiskIDs) { print "MSHW_LOGICALDISK;" LDiskID ";" LDiskState[LDiskID] ";" LDiskState[LDiskID] ";" LDiskRaid[LDiskID] ";" LDiskName[LDiskID] ";"}

# Components
for (ComponentID in ComponentIDs) { if (ComponentID != "" && Status[ComponentID] != "" ) {
  if(Type[ComponentID] != "DIMM") {
      print "MSHW_OTHER;" Type[ComponentID] ";" ComponentID ";" Status[ComponentID] ";" ComponentPartNumber[ComponentID] ";" ComponentSerialNumber[ComponentID] ";" ComponentRevision[ComponentID] ";" ComponentDescription[ComponentID] ";"
      }
  else {
      print "MSHW_OTHER;" Type[ComponentID] ";" ComponentID ";" Status[ComponentID] ";" ComponentPartNumber[ComponentID] ";" ComponentSerialNumber[ComponentID] ";" ComponentRevision[ComponentID] ";" ComponentDescription[ComponentID] ";" ComponentDimmSize[ComponentID] ";" ComponentDimmType[ComponentID] ";"
      }
  }
  }

# Ports
for (PortID in Ports) { if (PortID != "") {
	FRU = ""
	if ( SPEMCPartNumber[PortID] != "" ) { FRU = SPEMCPartNumber[PortID] " - " }
  if ( SPEMCSerialNumber[PortID] != "" ) { FRU = FRU SPEMCSerialNumber[PortID] " - " }
  if ( SPVendorPartNumber[PortID] != "" ) { FRU = FRU SPVendorPartNumber[PortID] " - " }
  if ( SPVendorSerialNumber[PortID] != "" ) { FRU = FRU SPVendorSerialNumber[PortID]}
  gsub (/ - $/,"",FRU)
  Location = ""
  if (SPIOSlot[PortID] != "" && SPPhysPortID[PortID] != "") { Location = "Location: " SPIOSlot[PortID] " " SPPhysPortID[PortID] }
  print "MSHW_PORT;" PortID ";" SPLinkStatus[PortID] ";" SPPortStatus[PortID] ";" SPPortStatusInformation[ID] ";" SFState[PortID] ";"SPPortSpeed[PortID] ";" Location ";"   ";" FRU ";"
  }
}
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////
