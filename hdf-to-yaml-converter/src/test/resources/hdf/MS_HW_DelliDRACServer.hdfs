//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_DelliDRACServer.hdf
//
//      Connects to: Dell iDRAC Management Card
//
//


// Header

hdf.DisplayName="Dell iDRAC - Server"
hdf.TypicalPlatform="Dell PowerEdge"
hdf.ReliesOn="Dell iDRAC Management Card (iDRAC7 or Later)"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through Dell's iDRAC Management Card for Dell servers with iDRAC7 or later."
hdf.RemoteSupport="true"
hdf.AppliesToOS="OOB"
// hdf.Supersedes=""

// Detection
// Ensure that the systemDetailsGroup is populated
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.674.10892.5.4"

// Get the model code in the chassis table
// ChassisID;Status;Manufacturer;Model;SerialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.300.10.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,3,8,9,11"

// Get the Power Consumption
// ChassisID;PowerConsumption;SensorType;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.30.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="1,6,7"

// Keep Only Sensors of type 26 = Watts (the other is amps)
// ChassisID;PowerConsumption;SensorType;
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=3
Enclosure.Discovery.Source(2).Compute(1).ValueList="26"

// Join the Chassis to the Power Consumption
// ChassisID;Status;Manufacturer;Model;SerialNumber;ChassisID;PowerConsumption;SensorType;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;;"

// The Instance Table
// ChassisID;Status;Manufacturer;Model;SerialNumber;ChassisID;PowerConsumption;SensorType;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="Dell"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(4)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(2)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(6)


// Collect
Enclosure.Collect.Type="MultiInstance"

// ChassisID;Status;
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.300.10.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="1,4"

// Duplicate systemStateChassisStatus
// ChassisID;Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Translate the first systemStateChassisStatus into a PATROL status
// ChassisID;PATROLStatus;Status
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second systemStateChassisStatus into a more readable string
// ChassisID;PATROLStatus;statusInformation
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// Get the Power Consumption
// ChassisID;PowerConsumption;SensorType;
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.30.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="1,6,7"

// Keep Only Sensors of type 26 = Watts (the other is amps)
// ChassisID;PowerConsumption;SensorType;
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=3
Enclosure.Collect.Source(2).Compute(1).ValueList="26"

// Join the Chassis to the Power Consumption
// ChassisID;PATROLStatus;statusInformation;ChassisID;PowerConsumption;SensorType;
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";;;"

// The ValueTable = Source(3)
// ChassisID;PATROLStatus;statusInformation;ChassisID;PowerConsumption;SensorType;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)
Enclosure.Collect.PowerConsumption=ValueTable.Column(5)



// TEMPERATURES

// Temperature discovery
// TemperatureID;ChassisID;TemperatureStatus;Temperature;Location;UpperCritical;UpperNonCritical;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.700.20.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,1,5,6,8,10,11"

// Convert tenth of celsius to celsius
// TemperatureID;ChassisID;TemperatureStatus;Temperature;Location;UpperCritical;UpperNonCritical;
Temperature.Discovery.Source(1).Compute(1).Type="Divide"
Temperature.Discovery.Source(1).Compute(1).Column=6
Temperature.Discovery.Source(1).Compute(1).DivideBy=10
Temperature.Discovery.Source(1).Compute(2).Type="Divide"
Temperature.Discovery.Source(1).Compute(2).Column=7
Temperature.Discovery.Source(1).Compute(2).DivideBy=10

// Instance Table
// TemperatureID;ChassisID;TemperatureStatus;Temperature;Location;UpperCritical;UpperNonCritical;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(5)
Temperature.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(7)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.AttachedToDeviceType="Computer"
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)

// Temperature collect

// Collect type is MultiInstance
Temperature.Collect.Type="MultiInstance"

// TemperatureID;Status;Temperature;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.700.20.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Duplicate the Status column
// TemperatureID;Status;Status;Temperature;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column="2"

// The value given by OpenManage is in tenth of degrees, so convert it to degrees
// TemperatureID;Status;Status;Temperature;
Temperature.Collect.Source(1).Compute(2).Type="Divide"
Temperature.Collect.Source(1).Compute(2).Column=4
Temperature.Collect.Source(1).Compute(2).DivideBy="10"

// Translate first temperatureProbeStatus into a PATROL status
// TemperatureID;PATROLStatus;Status;Temperature;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=2
Temperature.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusTranslationTable"

// The EnvironmentStatusTranslationTable
EnvironmentStatusTranslationTable(3)="OK"
EnvironmentStatusTranslationTable(4)="WARN"
EnvironmentStatusTranslationTable(5)="ALARM"
EnvironmentStatusTranslationTable(6)="ALARM"
EnvironmentStatusTranslationTable(7)="WARN"
EnvironmentStatusTranslationTable(8)="ALARM"
EnvironmentStatusTranslationTable(9)="ALARM"
EnvironmentStatusTranslationTable(10)="ALARM"
EnvironmentStatusTranslationTable(Default)="UNKNOWN"

// Translate second temperatureProbeStatus into a more readable string
// TemperatureID;PATROLStatus;statusInformation;Temperature;
Temperature.Collect.Source(1).Compute(4).Type="Translate"
Temperature.Collect.Source(1).Compute(4).Column=3
Temperature.Collect.Source(1).Compute(4).TranslationTable="EnvironmentStatusInformationTranslationTable"

// The EnvironmentStatusInformationTranslationTable
EnvironmentStatusInformationTranslationTable(3)=""
EnvironmentStatusInformationTranslationTable(4)="Non-Critical Upper"
EnvironmentStatusInformationTranslationTable(5)="Critical Upper"
EnvironmentStatusInformationTranslationTable(6)="Unrecoverable Upper"
EnvironmentStatusInformationTranslationTable(7)="Non-Critical Lower"
EnvironmentStatusInformationTranslationTable(8)="Critical Lower"
EnvironmentStatusInformationTranslationTable(9)="Unrecoverable Lower"
EnvironmentStatusInformationTranslationTable(10)="Failed"
EnvironmentStatusInformationTranslationTable(Default)="Unknown Status"

// The ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)
Temperature.Collect.Temperature=ValueTable.Column(4)


// Fan.

// Fan.discovery
// FanID;ChassisID;Status;Speed;Location;LowerNonCritical;LowerCritical;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.700.12.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,1,5,6,8,12,13"

// Instance Table
// FanID;ChassisID;Status;Speed;Location;LowerNonCritical;LowerCritical;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(5)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(7)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.AttachedToDeviceType="Computer"
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(4)

// Fan.collect

// Collect type is MultiInstance
Fan.Collect.Type="MultiInstance"

// FanID;Status;Speed
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.700.12.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Duplicate the Status column
// FanID;Status;Status;Speed
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate first Fan.robeStatus into a PATROL status
// FanID;PATROLStatus;Status;Speed
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="EnvironmentStatusTranslationTable"

// Translate second Fan.robeStatus into a more readable string
// FanID;PATROLStatus;statusInformation;Speed
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusInformationTranslationTable"


// The ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)
Fan.Collect.Speed=ValueTable.Column(4)

// Voltage.

// Note: actual voltage wasn't included due to issues with emulaton and inconsistent implementation by Dell

// Voltage.discovery
// VoltageID;ChassisID;Status;Location;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.20.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,1,5,8"

// Instance Table
// VoltageID;ChassisID;Status;Speed;Location;LowerNonCritical;LowerCritical;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(4)
Voltage.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
// Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)
// Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(6)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.AttachedToDeviceType="Computer"
// Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)
// Voltage.Discovery.Instance.ParameterActivation.Voltage.InstanceTable.Column(4)

// Voltage.collect

// Collect type is MultiInstance
Voltage.Collect.Type="MultiInstance"

// VoltageID;Status;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.20.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,5"
// ,5,6

// Duplicate the Status column
// VoltageID;Status;Status;
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column=2

// Translate first Voltage.robeStatus into a PATROL status
// VoltageID;PATROLStatus;Status;
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column=2
Voltage.Collect.Source(1).Compute(2).TranslationTable="EnvironmentStatusTranslationTable"

// Translate second Voltage.robeStatus into a more readable string
// VoltageID;PATROLStatus;statusInformation;
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column=3
Voltage.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusInformationTranslationTable"


// The ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)
// Voltage.Collect.Voltage.ValueTable.Column(4)

// Battery.

// Battery.discovery
// BatteryID;ChassisID;Location;
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.50.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="ID,1,7"

// Instance Table
// BatteryID;ChassisID;Location;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.Type=InstanceTable.Column(3)
Battery.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Battery.Discovery.Instance.AttachedToDeviceType="Computer"

// Battery.collect

// Collect type is MultiInstance
Battery.Collect.Type="MultiInstance"

// BatteryID;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.50.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Duplicate the Status column
// BatteryID;Status;Status;
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Translate first Battery.robeStatus into a PATROL status
// BatteryID;PATROLStatus;Status;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate second Battery.robeStatus into a more readable string
// BatteryID;PATROLStatus;statusInformation;
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column=3
Battery.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"


// The ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

// PowerSupply.

// PowerSupply.discovery
// PowerSupplyID;ChassisID;Location;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.12.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,1,8"

// Instance Table
// PowerSupplyID;ChassisID;Location;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AttachedToDeviceType="Computer"

// PowerSupply.collect

// Collect type is MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// PowerSupplyID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.600.12.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Duplicate the Status column
// PowerSupplyID;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate first PowerSupply.robeStatus into a PATROL status
// PowerSupplyID;PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate second PowerSupply.robeStatus into a more readable string
// PowerSupplyID;PATROLStatus;statusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"


// The ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

// CPU.

// CPU.discovery
// CPUID;ChassisID;CPUStateSettings;Location;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.32.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="ID,1,4,7"

// Keep only installed CPUs
// CPUID;ChassisID;CPUStateSettings;Location;
CPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=3
CPU.Discovery.Source(1).Compute(1).ValueList="2,4,6"

// Replace " Status" from CPU Location
// CPUID;ChassisID;CPUStateSettings;Location;
CPU.Discovery.Source(1).Compute(2).Type="Replace"
CPU.Discovery.Source(1).Compute(2).Column=4
CPU.Discovery.Source(1).Compute(2).Replace=" Status"
CPU.Discovery.Source(1).Compute(2).ReplaceBy=""

// Add "Location: " to the location column
// CPUID;ChassisID;CPUStateSettings;Location;
CPU.Discovery.Source(1).Compute(3).Type="LeftConcat"
CPU.Discovery.Source(1).Compute(3).Column=4
CPU.Discovery.Source(1).Compute(3).String="Location: "

// Instance Table
// CPUID;ChassisID;CPUStateSettings;Location;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
CPU.Discovery.Instance.AttachedToDeviceType="Computer"

// CPU.collect

// Collect type is MultiInstance
CPU.Collect.Type="MultiInstance"

// CPUID;Status;
CPU.Collect.Source(1).Type="SnmpTable"
CPU.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.32.1"
CPU.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Duplicate the Status column
// CPUID;Status;Status;
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column=2

// Translate first CPU.robeStatus into a PATROL status
// CPUID;PATROLStatus;Status;
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column=2
CPU.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate second CPU.robeStatus into a more readable string
// CPUID;PATROLStatus;statusInformation;
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=3
CPU.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"


// The ValueTable = Source(1)
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(2)
CPU.Collect.StatusInformation=ValueTable.Column(3)

// Memory.

// Memory.discovery
// MemoryID;ChassisID;Type;Location;Size;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.50.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="ID,1,7,8,14,15,21,22,23"

// Translate memory from KM in MB
// MemoryID;ChassisID;Type;Location;SizeMB;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.Source(1).Compute(1).Type="Divide"
Memory.Discovery.Source(1).Compute(1).Column=5
Memory.Discovery.Source(1).Compute(1).DivideBy="1024"

// Translate memory type
// MemoryID;ChassisID;Type;Location;SizeMB;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.Source(1).Compute(2).Type="Translate"
Memory.Discovery.Source(1).Compute(2).Column=3
Memory.Discovery.Source(1).Compute(2).TranslationTable="MemoryTypeTranslationTable"

// Add "Part Number: " to the part number column
// Add "Serial Number: " to the AssetTagName column
// MemoryID;ChassisID;Type;Location;SizeMB;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.Source(1).Compute(3).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(3).Column=8
Memory.Discovery.Source(1).Compute(3).String="Part Number: "

// Add "Location: " to the location column
// MemoryID;ChassisID;Type;Location;SizeMB;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=4
Memory.Discovery.Source(1).Compute(4).String="Location: "

// MemoryTypeTranslationTable
MemoryTypeTranslationTable(1)="Other type"
MemoryTypeTranslationTable(2)="Unknown type"
MemoryTypeTranslationTable(3)="DRAM"
MemoryTypeTranslationTable(4)="EDRAM"
MemoryTypeTranslationTable(5)="VRAM"
MemoryTypeTranslationTable(6)="SRAM"
MemoryTypeTranslationTable(7)="RAM"
MemoryTypeTranslationTable(8)="ROM"
MemoryTypeTranslationTable(9)="Flash"
MemoryTypeTranslationTable(10)="EEPROM"
MemoryTypeTranslationTable(11)="FEPROM"
MemoryTypeTranslationTable(12)="EPROM"
MemoryTypeTranslationTable(13)="CDRAM"
MemoryTypeTranslationTable(14)="3DRAM"
MemoryTypeTranslationTable(15)="SDRAM"
MemoryTypeTranslationTable(16)="SGRAM"
MemoryTypeTranslationTable(17)="RDRAM"
MemoryTypeTranslationTable(18)="DDR"
MemoryTypeTranslationTable(19)="DDR2"
MemoryTypeTranslationTable(20)="DDR2 FB-DIMM"
MemoryTypeTranslationTable(24)="DDR3"
MemoryTypeTranslationTable(default)=""

// Instance Table
// MemoryID;ChassisID;Type;Location;SizeMB;Speed;Manufacturer;PartNumber;SerialNumber
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Memory.Discovery.Instance.AttachedToDeviceType="Computer"
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Memory.Discovery.Instance.Size=InstanceTable.Column(5)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(7)
Memory.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
Memory.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(8)

// Memory.collect

// Collect type is MultiInstance
Memory.Collect.Type="MultiInstance"

// MemoryID;Status;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.50.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Duplicate the Status column
// MemoryID;Status;Status;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate first Memory.robeStatus into a PATROL status
// MemoryID;PATROLStatus;Status;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate second Memory.robeStatus into a more readable string
// MemoryID;PATROLStatus;statusInformation;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=3
Memory.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// The ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)

// NetworkCard.

// NetworkCard.discovery
// NetworkID;ChassisID;ProductName;FQDD(slot number);MacAddress
NetworkCard.Discovery.Source(1).Type="SnmpTable"
NetworkCard.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.90.1"
NetworkCard.Discovery.Source(1).SnmpTableSelectColumns="ID,1,6,30,15"

// NetworkID;ChassisID;ProductName;FQDD(slot number);MacAddress;DisplayName
NetworkCard.Discovery.Source(1).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Instance Table
// NetworkID;ChassisID;ProductName;FQDD(slot number);MacAddress;DisplayName
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.AttachedToDeviceType="Computer"
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"

// NetworkCard.collect

// Collect type is MultiInstance
NetworkCard.Collect.Type="MultiInstance"

// NetworkID;Status;LinkStatus;FQDD
NetworkCard.Collect.Source(1).Type="SnmpTable"
NetworkCard.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.1100.90.1"
NetworkCard.Collect.Source(1).SnmpTableSelectColumns="ID,3,4,30"

// Duplicate the Status column
// NetworkID;Status;Status;LinkStatus;FQDD
NetworkCard.Collect.Source(1).Compute(1).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(1).Column=2

// Translate first NetworkCard.robeStatus into a PATROL status
// NetworkID;PATROLStatus;Status;LinkStatus;FQDD
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=2
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate second NetworkCard.robeStatus into a more readable string
// NetworkID;PATROLStatus;statusInformation;LinkStatus;FQDD
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=3
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// Translate the Link Status
// NetworkID;PATROLStatus;statusInformation;LinkStatus;FQDD
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=4
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="GenericLinkStatusTranslationTable"

// GenericLinkStatusTranslationTable
GenericLinkStatusTranslationTable(1)="OK"
GenericLinkStatusTranslationTable(2)="WARN"
GenericLinkStatusTranslationTable(3)="WARN"
GenericLinkStatusTranslationTable(4)="WARN"
GenericLinkStatusTranslationTable(10)="WARN"
GenericLinkStatusTranslationTable(11)="WARN"
GenericLinkStatusTranslationTable(12)="WARN"
GenericLinkStatusTranslationTable(13)="WARN"


// The ValueTable = Source(1)
// NetworkID;PATROLStatus;statusInformation;LinkStatus;FQDD
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(5)
NetworkCard.Collect.Status=ValueTable.Column(2)
NetworkCard.Collect.StatusInformation=ValueTable.Column(3)
NetworkCard.Collect.LinkStatus=ValueTable.Column(4)


// The GenericStatusTranslationTable
GenericStatusTranslationTable(3)="OK"
GenericStatusTranslationTable(4)="WARN"
GenericStatusTranslationTable(5)="ALARM"
GenericStatusTranslationTable(6)="ALARM"
GenericStatusTranslationTable(Default)="UNKNOWN"

// The GenericStatusInformationTranslationTable
GenericStatusInformationTranslationTable(3)=""
GenericStatusInformationTranslationTable(4)="Non Critical"
GenericStatusInformationTranslationTable(5)="Critical"
GenericStatusInformationTranslationTable(6)="Unrecoverable"
GenericStatusInformationTranslationTable(Default)="Unknown Status"



//
// OTHER DEVICES (SD Cards)
//

//
// Discovery

// Source(1) = systemStateTable SNMP table
// DeviceID;SDCardUnit;SCCardDevice;IDSDMCardUnit;IDSDMDevice;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.200.10.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID,54,56,58,60"

// Source(2) = Copy of (1)
OtherDevice.Discovery.Source(2)=%OtherDevice.Discovery.Source(1)%

// Select Columns
// DeviceID;SDCardUnit;
OtherDevice.Discovery.Source(2).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(2).Compute(1).ColumnNumbers="1,2"

// Keep only lines with values
// DeviceID;SDCardUnit;
OtherDevice.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(2).Compute(2).Column=2
OtherDevice.Discovery.Source(2).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;SDCardUnit;
OtherDevice.Discovery.Source(2).Compute(3).Type="Replace"
OtherDevice.Discovery.Source(2).Compute(3).Column=1
OtherDevice.Discovery.Source(2).Compute(3).Replace=Column(1)
OtherDevice.Discovery.Source(2).Compute(3).ReplaceBy="SDCardUnit"

// Source(3) = Copy of (1)
OtherDevice.Discovery.Source(3)=%OtherDevice.Discovery.Source(1)%

// Select Columns
// DeviceID;SCCardDevice;
OtherDevice.Discovery.Source(3).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(3).Compute(1).ColumnNumbers="1,3"

// Keep only lines with values
// DeviceID;SCCardDevice;
OtherDevice.Discovery.Source(3).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(3).Compute(2).Column=2
OtherDevice.Discovery.Source(3).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;SCCardDevice;
OtherDevice.Discovery.Source(3).Compute(3).Type="Replace"
OtherDevice.Discovery.Source(3).Compute(3).Column=1
OtherDevice.Discovery.Source(3).Compute(3).Replace=Column(1)
OtherDevice.Discovery.Source(3).Compute(3).ReplaceBy="SCCardDevice"


// Source(4) = Copy of (1)
OtherDevice.Discovery.Source(4)=%OtherDevice.Discovery.Source(1)%

// Select Columns
// DeviceID;IDSDMCardUnit;
OtherDevice.Discovery.Source(4).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(4).Compute(1).ColumnNumbers="1,4"

// Keep only lines with values
// DeviceID;IDSDMCardUnit;
OtherDevice.Discovery.Source(4).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(4).Compute(2).Column=2
OtherDevice.Discovery.Source(4).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;IDSDMCardUnit;
OtherDevice.Discovery.Source(4).Compute(3).Type="Replace"
OtherDevice.Discovery.Source(4).Compute(3).Column=1
OtherDevice.Discovery.Source(4).Compute(3).Replace=Column(1)
OtherDevice.Discovery.Source(4).Compute(3).ReplaceBy="IDSDMCardUnit"


// Source(4) = Copy of (1)
OtherDevice.Discovery.Source(5)=%OtherDevice.Discovery.Source(1)%

// Select Columns
// DeviceID;IDSDMDevice;
OtherDevice.Discovery.Source(5).Compute(1).Type="KeepColumns"
OtherDevice.Discovery.Source(5).Compute(1).ColumnNumbers="1,5"

// Keep only lines with values
// DeviceID;IDSDMDevice;
OtherDevice.Discovery.Source(5).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(5).Compute(2).Column=2
OtherDevice.Discovery.Source(5).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;IDSDMDevice;
OtherDevice.Discovery.Source(5).Compute(3).Type="Replace"
OtherDevice.Discovery.Source(5).Compute(3).Column=1
OtherDevice.Discovery.Source(5).Compute(3).Replace=Column(1)
OtherDevice.Discovery.Source(5).Compute(3).ReplaceBy="IDSDMDevice"

// Source(3) = Union of Source(1) and Source(2)
// DeviceID;Status;
OtherDevice.Discovery.Source(6).Type="TableUnion"
OtherDevice.Discovery.Source(6).Table1=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(6).Table2=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Source(6).Table3=%OtherDevice.Discovery.Source(4)%
OtherDevice.Discovery.Source(6).Table4=%OtherDevice.Discovery.Source(5)%

// InstanceTable = Source(1)
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(6)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(1)


//
// Collect

// Collect type is mono-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = systemStateTable SNMP table
// DeviceID;SDCardUnit;SCCardDevice;IDSDMCardUnit;IDSDMDevice;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.5.4.200.10.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,54,56,58,60"

// Source(2) = Copy of (1)
OtherDevice.Collect.Source(2)=%OtherDevice.Collect.Source(1)%

// Select Columns
// DeviceID;SDCardUnit;
OtherDevice.Collect.Source(2).Compute(1).Type="KeepColumns"
OtherDevice.Collect.Source(2).Compute(1).ColumnNumbers="1,2"

// Keep only lines with values
// DeviceID;SDCardUnit;
OtherDevice.Collect.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(2).Compute(2).Column=2
OtherDevice.Collect.Source(2).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;SDCardUnit;
OtherDevice.Collect.Source(2).Compute(3).Type="Replace"
OtherDevice.Collect.Source(2).Compute(3).Column=1
OtherDevice.Collect.Source(2).Compute(3).Replace=Column(1)
OtherDevice.Collect.Source(2).Compute(3).ReplaceBy="SDCardUnit"

// Source(3) = Copy of (1)
OtherDevice.Collect.Source(3)=%OtherDevice.Collect.Source(1)%

// Select Columns
// DeviceID;SCCardDevice;
OtherDevice.Collect.Source(3).Compute(1).Type="KeepColumns"
OtherDevice.Collect.Source(3).Compute(1).ColumnNumbers="1,3"

// Keep only lines with values
// DeviceID;SCCardDevice;
OtherDevice.Collect.Source(3).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(3).Compute(2).Column=2
OtherDevice.Collect.Source(3).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;SCCardDevice;
OtherDevice.Collect.Source(3).Compute(3).Type="Replace"
OtherDevice.Collect.Source(3).Compute(3).Column=1
OtherDevice.Collect.Source(3).Compute(3).Replace=Column(1)
OtherDevice.Collect.Source(3).Compute(3).ReplaceBy="SCCardDevice"


// Source(4) = Copy of (1)
OtherDevice.Collect.Source(4)=%OtherDevice.Collect.Source(1)%

// Select Columns
// DeviceID;IDSDMCardUnit;
OtherDevice.Collect.Source(4).Compute(1).Type="KeepColumns"
OtherDevice.Collect.Source(4).Compute(1).ColumnNumbers="1,4"

// Keep only lines with values
// DeviceID;IDSDMCardUnit;
OtherDevice.Collect.Source(4).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(4).Compute(2).Column=2
OtherDevice.Collect.Source(4).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;IDSDMCardUnit;
OtherDevice.Collect.Source(4).Compute(3).Type="Replace"
OtherDevice.Collect.Source(4).Compute(3).Column=1
OtherDevice.Collect.Source(4).Compute(3).Replace=Column(1)
OtherDevice.Collect.Source(4).Compute(3).ReplaceBy="IDSDMCardUnit"


// Source(4) = Copy of (1)
OtherDevice.Collect.Source(5)=%OtherDevice.Collect.Source(1)%

// Select Columns
// DeviceID;IDSDMDevice;
OtherDevice.Collect.Source(5).Compute(1).Type="KeepColumns"
OtherDevice.Collect.Source(5).Compute(1).ColumnNumbers="1,5"

// Keep only lines with values
// DeviceID;IDSDMDevice;
OtherDevice.Collect.Source(5).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(5).Compute(2).Column=2
OtherDevice.Collect.Source(5).Compute(2).RegExp="."

// Make the ID unique
// DeviceID;IDSDMDevice;
OtherDevice.Collect.Source(5).Compute(3).Type="Replace"
OtherDevice.Collect.Source(5).Compute(3).Column=1
OtherDevice.Collect.Source(5).Compute(3).Replace=Column(1)
OtherDevice.Collect.Source(5).Compute(3).ReplaceBy="IDSDMDevice"

// Source(3) = Union of Source(1) and Source(2)
// DeviceID;Status;
OtherDevice.Collect.Source(6).Type="TableUnion"
OtherDevice.Collect.Source(6).Table1=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(6).Table2=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.Source(6).Table3=%OtherDevice.Collect.Source(4)%
OtherDevice.Collect.Source(6).Table4=%OtherDevice.Collect.Source(5)%

// Duplicate the Status column
// DeviceID;Status;Status;
OtherDevice.Collect.Source(6).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(6).Compute(1).Column=2

// Translate the first Status into a PATROL Status
// DeviceID;PATROLStatus;Status;
OtherDevice.Collect.Source(6).Compute(2).Type="Translate"
OtherDevice.Collect.Source(6).Compute(2).Column=2
OtherDevice.Collect.Source(6).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second Status into a more readable string
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(6).Compute(3).Type="Translate"
OtherDevice.Collect.Source(6).Compute(3).Column=3
OtherDevice.Collect.Source(6).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// ValueTable = Source(3)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(6)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parses
/// Network cards to build the display name
//  input:
/// NetworkID;ChassisID;ProductName;FQDD(slot number);MacAddress
// output:
/// NetworkID;ChassisID;ProductName;FQDD(slot number);MacAddress;displayname
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";";}
{
	split($3,outputarray,"-");
	cardType = outputarray[1] ;
	split($4,outputarray,".");
	slotName = outputarray[3]

	if (slotName != "")
	{
		print $1 ";" $2 ";" $3 ";" $4 ";" $5 ";" slotName "." cardType
	}
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////
