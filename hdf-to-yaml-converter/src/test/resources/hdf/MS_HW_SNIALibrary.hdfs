////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: SNIA Tape Libraries MIB (SNIA-SML-MIB)
//                Connects to a SNMP agent
//
//


//
// Header
//

hdf.DisplayName="SNIA Compliant Tape Libraries (SNMP)"
hdf.TypicalPlatform="IBM 3584,IBM TS3000 Tape Libraries"
hdf.ReliesOn="SNIA Compliant SNMP Agent (SNIA-SML-MIB)"
hdf.Version="1.2"
hdf.Comments="This connector connects to the SNMP Agent of IBM 3584 tape libraries (also known as IBM TotalStorage 3xxx)."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"


//
// DETECTION
// Does a get_next to see if there that the model OID is populated.
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.14851.3.1.2"

//
// Enclosure
//

// Source(1) = 	chassisGroup SNMP table
// Vendor;Model;SerialNumber;Firmware Revision
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.14851.3.1.4"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,2,3"

// Change Internatinal Business Machines to IBM
// Vendor;Model;SerialNumber;Firmware Revision
Enclosure.Discovery.Source(1).Compute(1).Type="Replace"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).Replace="International Business Machines"
Enclosure.Discovery.Source(1).Compute(1).ReplaceBy="IBM"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="SNIA Library"
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="Storage"

//
// Collect


Enclosure.Collect.Type="MonoInstance"

// Source(1) = 	computerSystem-OperationalStatus SNMP OID
// Status

Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.4.1.14851.3.1.10.2.0"

// Duplicate status, because we will translate it two times
// Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column="1"

// Translate Status into PATROLStatus
// PATROLStatus;Status;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="1"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column="2"
Enclosure.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID="SNIA Library"
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)


//
// Tape Drives
// Source 1 = Tape Drives


// Source(1) = 	physicalPackageTable SNMP table
// Using .5 as the ID as this corresponds to the ID in the status table (mediaAccessDeviceTable) for this device
// Media Access Device Table ID;Manufacturer;Model;Serial Number;
TapeDrive.Discovery.Source(1).Type="SnmpTable"
TapeDrive.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.14851.3.1.8.2.1"
TapeDrive.Discovery.Source(1).SnmpTableSelectColumns="5,2,3,4"

// Change Internatinal Business Machines to IBM
// Media Access Device Table ID;Manufacturer;Model;Serial Number;
TapeDrive.Discovery.Source(1).Compute(1).Type="Replace"
TapeDrive.Discovery.Source(1).Compute(1).Column=2
TapeDrive.Discovery.Source(1).Compute(1).Replace="International Business Machines"
TapeDrive.Discovery.Source(1).Compute(1).ReplaceBy="IBM"

// Media Access Device Table ID;Manufacturer;Model;Serial Number;
TapeDrive.Discovery.InstanceTable=%TapeDrive.Discovery.Source(1)%
TapeDrive.Discovery.Instance.DeviceID=InstanceTable.Column(1)
TapeDrive.Discovery.Instance.Vendor=InstanceTable.Column(2)
TapeDrive.Discovery.Instance.Model=InstanceTable.Column(3)
TapeDrive.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
TapeDrive.Discovery.Instance.AttachedToDeviceID="SNIA Library"


// COLLECT

TapeDrive.Collect.Type="MultiInstance"

// Collect Tape Drive Status
// Source(1) = 	mediaAccessDeviceTable SNMP table
// ID;CleaningStatus;MountCount;Status
TapeDrive.Collect.Source(1).Type="SnmpTable"
TapeDrive.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.14851.3.1.6.2.1"
TapeDrive.Collect.Source(1).SnmpTableSelectColumns="ID,6,7,11"


// Duplicate status, because we will translate it two times
// ID;CleaningStatus;MountCount;Status;Status
TapeDrive.Collect.Source(1).Compute(1).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(1).Column="4"

// Translate Status into PATROLStatus
// ID;CleaningStatus;MountCount;PatrolStatus;Status;
TapeDrive.Collect.Source(1).Compute(2).Type="Translate"
TapeDrive.Collect.Source(1).Compute(2).Column="4"
TapeDrive.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;CleaningStatus;MountCount;PatrolStatus;StatusInformation;
TapeDrive.Collect.Source(1).Compute(3).Type="Translate"
TapeDrive.Collect.Source(1).Compute(3).Column="5"
TapeDrive.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Translate Status into PATROLStatus
// ID;PatrolCleaningStatus;MountCount;PatrolStatus;StatusInformation;
TapeDrive.Collect.Source(1).Compute(4).Type="Translate"
TapeDrive.Collect.Source(1).Compute(4).Column="2"
TapeDrive.Collect.Source(1).Compute(4).TranslationTable="CleaningStatusTranslationTable"

// Value Table
// ID;PatrolCleaningStatus;MountCount;PatrolStatus;StatusInformation;
TapeDrive.Collect.ValueTable=%TapeDrive.Collect.Source(1)%
TapeDrive.Collect.DeviceID=ValueTable.Column(1)
TapeDrive.Collect.Status=ValueTable.Column(4)
TapeDrive.Collect.StatusInformation=ValueTable.Column(5)
TapeDrive.Collect.NeedsCleaning=ValueTable.Column(2)
// Mount Count removed as it is returning indeciferable strings instead of a number.
//TapeDrive.Collect.MountCount=ValueTable.Column(3)

// ROBOTICS


// Now going to discover Changer (Robotics) informaiton
// Source(2) = 	changerDeviceTable SNMP table
// Name (ID)
Robotic.Discovery.Source(1).Type="SnmpTable"
Robotic.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.14851.3.1.11.2.1"
Robotic.Discovery.Source(1).SnmpTableSelectColumns="4"

// Instance table
Robotic.Discovery.InstanceTable=%Robotic.Discovery.Source(1)%
Robotic.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Robotic.Discovery.Instance.RoboticType="Cassette Robot"
Robotic.Discovery.Instance.AttachedToDeviceID="SNIA Library"


// COLLECT

Robotic.Collect.Type="MultiInstance"

// Collect Robotics Status
// Source(2) = 	changerDeviceTable SNMP table
// ID;Status
Robotic.Collect.Source(1).Type="SnmpTable"
Robotic.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.14851.3.1.11.2.1"
Robotic.Collect.Source(1).SnmpTableSelectColumns="4,9"

// Duplicate status, because we will translate it two times
// ID;Status;Status
Robotic.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Robotic.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// ID;PatrolStatus;Status;
Robotic.Collect.Source(1).Compute(2).Type="Translate"
Robotic.Collect.Source(1).Compute(2).Column="2"
Robotic.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(3).Type="Translate"
Robotic.Collect.Source(1).Compute(3).Column="3"
Robotic.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Value Table
// ID;PatrolStatus;StatusInformation;
Robotic.Collect.ValueTable=%Robotic.Collect.Source(1)%
Robotic.Collect.DeviceID=ValueTable.Column(1)
Robotic.Collect.Status=ValueTable.Column(2)
Robotic.Collect.StatusInformation=ValueTable.Column(3)

// The StatusTranslationTable
StatusTranslationTable(0)="UNKNOWN"
StatusTranslationTable(1)="ALARM"
StatusTranslationTable(2)="OK"
StatusTranslationTable(3)="WARN"
StatusTranslationTable(4)="WARN"
StatusTranslationTable(5)="WARN"
StatusTranslationTable(6)="ALARM"
StatusTranslationTable(7)="ALARM"
StatusTranslationTable(8)="WARN"
StatusTranslationTable(9)="WARN"
StatusTranslationTable(10)="ALARM"
StatusTranslationTable(11)="WARN"
StatusTranslationTable(12)="ALARM"
StatusTranslationTable(13)="ALARM"
StatusTranslationTable(14)="ALARM"
StatusTranslationTable(15)="WARN"
StatusTranslationTable(16)="WARN"
StatusTranslationTable(17)="OK"
StatusTranslationTable(18)="OK"
StatusTranslationTable(19)="UNKNOWN"
StatusTranslationTable(32768)="UNKNOWN"
StatusTranslationTable(Default)="UNKNOWN"


// The StatusTranslationTable
StatusInformationTranslationTable(0)="unknown"
StatusInformationTranslationTable(1)="Other (Unknown)"
StatusInformationTranslationTable(2)=""
StatusInformationTranslationTable(3)="Degraded"
StatusInformationTranslationTable(4)="Stressed"
StatusInformationTranslationTable(5)="Predicted Failure"
StatusInformationTranslationTable(6)="Error"
StatusInformationTranslationTable(7)="Non-Recoverable Error"
StatusInformationTranslationTable(8)="Starting"
StatusInformationTranslationTable(9)="Stopping"
StatusInformationTranslationTable(10)="Stopped"
StatusInformationTranslationTable(11)="In Service"
StatusInformationTranslationTable(12)="No Contact"
StatusInformationTranslationTable(13)="Lost Communication"
StatusInformationTranslationTable(14)="Aborted"
StatusInformationTranslationTable(15)="Dormant"
StatusInformationTranslationTable(16)="Supporting Entity In Error"
StatusInformationTranslationTable(17)="Completed"
StatusInformationTranslationTable(18)="Power Mode"
StatusInformationTranslationTable(19)="dMTFReserved"
StatusInformationTranslationTable(32768)="Unspecified Vendor Specific Status"
StatusInformationTranslationTable(Default)="UNKNOWN"

// The StatusTranslationTable
CleaningStatusTranslationTable(1)="1"
CleaningStatusTranslationTable(2)="0"
CleaningStatusTranslationTable(Default)="UNKNOWN"