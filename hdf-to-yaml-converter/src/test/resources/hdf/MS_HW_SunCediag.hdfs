//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//               MS_HW_SunCediag.hdf
//
//      Supports: Sun Solaris 8 and 9 machines with cediag installed
//		Monitors: Memory modules
//      Connects to: cediag and cestat (from the SUNWcest package)
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun Solaris - Memory Modules (cediag)"
hdf.TypicalPlatform="Oracle/Sun"
hdf.ReliesOn="Sun Solaris system commands (cediag, cestat)"
hdf.Comments="Provides memory modules monitoring on Sun Solaris 8 and 9 SPARC systems. Requires root privileges."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Solaris"

// Sudo-able commands
Sudo(1).Command="/opt/SUNWcest/bin/cediag"

//
// DETECTION
//

// OS should be SunOS,SOLARIS (Solaris on SPARC)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="SunOS,SOLARIS"

// The various following tools have to be present
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="/bin/ls /opt/SUNWcest/bin/cestat"
Detection.Criteria(2).ExpectedResult="^/opt/SUNWcest/bin/cestat$"

Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="/bin/ls /opt/SUNWcest/bin/cediag"
Detection.Criteria(3).ExpectedResult="^/opt/SUNWcest/bin/cediag$"

// Cestat should work (it won't if not as superuser)
Detection.Criteria(4).Type="OSCommand"
Detection.Criteria(4).CommandLine="%{SUDO:/opt/SUNWcest/bin/cediag}/opt/SUNWcest/bin/cestat -v"
Detection.Criteria(4).ExpectedResult="^Page Retirement Statistics Tool"


//
// NO COMPUTER
//

//
// MEMORY MODULES
//

//
// Discovery

// Source(1) = output of EmbeddedFile(1)
// deviceID;predictedFailure;status;statusInformation
Memory.Discovery.Source(1).Type="OsCommand"
Memory.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"
Memory.Discovery.Source(1).KeepOnlyRegExp="^MSHW;"
Memory.Discovery.Source(1).Separators=";"
Memory.Discovery.Source(1).SelectColumns="2,3,4,5"

// InstanceTable = Source(3)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(1)


//
// Collect

// Collect type is "multi-instance"
Memory.Collect.Type="MultiInstance"

// Source(1) = Memory.Discovery.Source(1)
// Because actually, we're not going to collect every 2 minutes. Collect will rely on
// discovery results (which got status and statusInformation) every hour.
// So, parameters will still be refreshed every 2 minutes but will reflect values collected
// every hour. This is sufficient because Sun recommends running cediag/cestat once a day, so...
// deviceID;predictedFailure;status;statusInformation
Memory.Collect.Source(1)=%Memory.Discovery.Source(1)%

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.PredictedFailure=ValueTable.Column(2)
Memory.Collect.Status=ValueTable.Column(3)
Memory.Collect.StatusInformation=ValueTable.Column(4)


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = shell script that lists disks, hardware path and raw device path
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
#!/bin/sh

# First, check that cediag is actually installed
if /bin/test ! -f /opt/SUNWcest/bin/cediag ; then
	/bin/echo "ERROR: cediag is not installed"
	exit 1
fi

# Check that we got cestat command (with maybe sudo) in $1 and cediag in $2
CESTATCOMMAND="%{SUDO:/opt/SUNWcest/bin/cediag}/opt/SUNWcest/bin/cestat"
CEDIAGCOMMAND="%{SUDO:/opt/SUNWcest/bin/cediag}/opt/SUNWcest/bin/cediag"
CESTATOPTION="-v"
CEDIAGOPTION="-v"

# Debug settings
#CESTATCOMMAND="cat /tmp/cestatexample"
#CEDIAGCOMMAND="cat /tmp/cediagexample"
#CESTATOPTION=""
#CEDIAGOPTION=""

# Accept the cediag license
LICENSEFILE=$HOME/.cediag.licence.accepted
if /bin/test "$LOGNAME" = "root" ; then
	if /bin/test ! -d /var/opt/SUNWcest/conf ; then
		if /bin/test ! -d /var/opt/SUNWcest ; then
			mkdir /var/opt/SUNWcest
		fi
		/bin/mkdir /var/opt/SUNWcest/conf
	fi
	LICENSEFILE=/var/opt/SUNWcest/conf/licence.accepted.for.root
fi

if /bin/test ! -f $LICENSEFILE ; then
	$CEDIAGCOMMAND -V|/usr/bin/awk '{ print(substr($0, 9)); }'>$LICENSEFILE
fi

# Parse cestat to show the discovered DIMMs
DIMMLIST=`$CESTATCOMMAND $CESTATOPTION|/usr/bin/awk '{
	if ($NF == "no" || $NF == "YES")
	{
		dimmID = $1;
		for (i=2 ; i<= NF-6 ; i++)
		{
			dimmID = dimmID "_" $i
		}
		print dimmID;
	}
}'`

# Add 'Overall' as an object to be monitored, corresponding to the whole memory system
DIMMLIST="$DIMMLIST Overall"

# Execute cediag and store its output in a temporary file
CEDIAGOUTPUTFILE=/tmp/MS_HW_cediagoutput_$$

$CEDIAGCOMMAND $CEDIAGOPTION|/usr/bin/awk 'BEGIN {
	overallPagesRetired = 0;
	overallPagesRetiredLimit = 1000000;
	overallDatapathFaults = 0;
	overallUE = 0;
	overallRule4 = 0;
	overallRule5 = 0;
	overallRule6 = 0;
	quoteChar = sprintf("%c", 39);
}
/^cediag: / {


	if ($2 == "Pages" && $3 == "Retired:")
	{
		overallPagesRetired = $4;
	}

	if ($0 ~ /info: MPR \(deduced\) PRL pages:/)
	{
		overallPagesRetiredLimit = $7;
	}

	if ($0 ~ /info: MPR PRL pages:/)
	{
		overallPagesRetiredLimit = $6;
	}

	if ($2 == "findings:" && $4 == "datapath" && $5 == "fault")
	{
		overallDatapathFaults = $3;
	}

	if ($2 == "findings:" && $4 == "UE(s)")
	{
		overallUE = $3;
	}

	if ($2 == "findings:" && $0 ~ /DIMMs with a failure pattern matching rule#4$/)
	{
		overallRule4 = $3;
	}

	if ($2 == "findings:" && $0 ~ /DIMMs with a failure pattern matching rule#5$/)
	{
		overallRule5 = $3;
	}

	if ($2 == "findings:" && $0 ~ /DIMMs with a failure pattern matching rule#6$/)
	{
		overallRule6 = $3;
	}

	if ($2 ~ /advice:.*:/ && $3 == "replace" && $4 == "DIMM")
	{
		dimmID = "";
		status = "OK";
		statusInformation = "";
		predictedFailure = "false";

		quotePos = index($0, quoteChar);
		if (quotePos > 0)
		{
			tempID = substr($0, quotePos + 1);
			quotePos = index(tempID, quoteChar);
			if (quotePos > 0)
			{
				tempID = substr(tempID, 1, quotePos - 1);
				for (i=1 ; i<=split(tempID, tempIDsplitted, " ") ; i++)
				{
					dimmID = dimmID "_" tempIDsplitted[i]
				}
				dimmID = substr(dimmID, 2, length(dimmID) - 1);
			}
		}

		if ($2 == "advice:HIGH:")
		{
			status = "ALARM";
			statusInformation = "Replacement needed";
			predictedFailure = "true";
		}
		else if ($2 == "advice:MEDIUM:")
		{
			status = "OK";
			statusInformation = "Replacement advised";
			predictedFailure = "true";
		}

		if (dimmID != "")
		{
			print "MSHW;" dimmID ";" predictedFailure ";" status ";" statusInformation
		}
	}

}
END {
	if (overallPagesRetired > overallPagesRetiredLimit)
	{
		print "MSHW;Overall;false;ALARM;Too many pages retired";
	}
	else if (overallDatapathFaults > 0)
	{
		print "MSHW;Overall;false;ALARM;Datapath faults detected";
	}
	else if (overallUE > 0)
	{
		print "MSHW;Overall;false;ALARM;Uncorrectable errors detected";
	}
	else if (overallRule4 > 0)
	{
		print "MSHW;Overall;false;ALARM;Module replacement needed";
	}
	else if (overallRule5 + overallRule6 > 0)
	{
		print "MSHW;Overall;true;OK;Module replacement advised";
	}

}'>$CEDIAGOUTPUTFILE

# For each DIMM found with cestat, show its status found in cediag, or OK if nothing in cediag
for DIMM in $DIMMLIST
do

DIMMRESULT=`/usr/bin/grep "^MSHW;$DIMM;" $CEDIAGOUTPUTFILE`
if /bin/test "$DIMMRESULT" = "" ; then
	/bin/echo "MSHW;$DIMM;false;OK;"
else
	/bin/echo $DIMMRESULT
fi

done

# Remove the temporary file
/bin/rm -f $CEDIAGOUTPUTFILE

EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

