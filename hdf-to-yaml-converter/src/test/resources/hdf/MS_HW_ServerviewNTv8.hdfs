//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_ServerviewNT
//
//      Supports: Fujitsu-Siemens Serverview
//
//

// HEADER

hdf.DisplayName="Fujitsu-Siemens Serverview - Agent (v8 or higher)"
hdf.TypicalPlatform="Fujitsu-Siemens PRIMERGY"
hdf.ReliesOn="Fujitsu-Siemens Serveview Agent"
hdf.Version="1.2"
hdf.Comments="This connector provides hardware monitoring through the Fujitsu-Siemens Serverview Agent which supports almost all Fujitsu-Siemens PRIMERGY servers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"
hdf.Supersedes="MS_HW_ServerviewNT.hdf,MS_HW_IpmiTool.hdf,MS_HW_ServerviewWMI.hdf"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGet="1.3.6.1.4.1.231.2.10.2.2.10.1.3.0"
Detection.Criteria(1).ExpectedResult=^\([1-9][0-9]\)\|\([89]\)\.

//
// ENCLOSURES
//

//
// Discovery

// Get the model name from the model code
// ID;sc2UnitModelName;sc2UnitClass;SerialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.10.2.3.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,5,2,7"

// Convert the chassis code into an enclosure type
// ID;Model;EnclosureType
Enclosure.Discovery.Source(1).Compute(1).Type="Translate"
Enclosure.Discovery.Source(1).Compute(1).Column="3"
Enclosure.Discovery.Source(1).Compute(1).TranslationTable="EnclosureTypeTranslationTable"

// The EnclosureTypeTranslationTable
EnclosureTypeTranslationTable(2)="Computer"
EnclosureTypeTranslationTable(3)="Storage Extension"
EnclosureTypeTranslationTable(4)="Blade Server Chassis"
EnclosureTypeTranslationTable(5)="Blade Server"
EnclosureTypeTranslationTable(6)="Cluster Node"
EnclosureTypeTranslationTable(7)="Multi Node Chassis"
EnclosureTypeTranslationTable(8)="Multi Node Service"
EnclosureTypeTranslationTable(9)="Virtual Server"
EnclosureTypeTranslationTable(10)="Virtual Partition"
EnclosureTypeTranslationTable(11)="Systemboard In Partition"
EnclosureTypeTranslationTable(20)="Virtual Server Vmware"
EnclosureTypeTranslationTable(21)="Virtual Server HyperV"
EnclosureTypeTranslationTable(22)="Virtual Server Xen"
EnclosureTypeTranslationTable(23)="Virtual Server Pan"
EnclosureTypeTranslationTable(Default)="Computer"

// UnitClass (INTEGER) {unknown(1),standardServer(2),storageExtension(3),bladeServerChassis(4),bladeServer(5),clusterNode(6),multiNodeChassis(7),multiNodeServer(8),
//virtualServer(9),virtualPartition(10),systemboardInPartition(11),virtualServerVmware(20), virtualServerHyperV(21), virtualServerXen(22), virtualServerPan(23) }

//now activate powerconsuption if available
// ID;powerconsuption
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOID=".1.3.6.1.4.1.231.2.10.2.2.10.4.5.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="1,5"

//if power powerconsuption is -1 it means that it's not available so blank it to deactivate parameter
Enclosure.Discovery.Source(2).Compute(1).Type="Replace"
Enclosure.Discovery.Source(2).Compute(1).Column=2
Enclosure.Discovery.Source(2).Compute(1).Replace="-1"
Enclosure.Discovery.Source(2).Compute(1).ReplaceBy=""

//now joint with source 1
// ID;sc2UnitModelName;sc2UnitClass;SerialNumber;ID;powerconsuption
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=;;



// InstanceTable
// ID;sc2UnitModelName;sc2UnitClass;SerialNumber;ID;powerconsuption
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="Fujitsu-Siemens"
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type=InstanceTable.Column(3)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(6)

//
// Collect

// Collect type is multi-instance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = the cabinetInfosTable SNMP table (like discovery)
// ID;cabinetFrontDoorStatus;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.10.2.3.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="1,11,12"

// cabinetFrontDoorStatus and cabinetHousingOpenStatus are a number whose meaning is:
// 1 = unknown
// 2 = open
// 3 = closed
// Multiply cabinetFrontDoorStatus by 4 and then add cabinetHousingOpenStatus to it
// so that we have a single code for both housing and front door

// Multiply cabinetFrontDoorStatus by 4
Enclosure.Collect.Source(1).Compute(1).Type="Multiply"
Enclosure.Collect.Source(1).Compute(1).Column="2"
Enclosure.Collect.Source(1).Compute(1).MultiplyBy="4"

// Add cabinetHousingOpenStatus to cabinetFrontDoorStatus
// ID;intrusionCode;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Compute(2).Type="Add"
Enclosure.Collect.Source(1).Compute(2).Column="2"
Enclosure.Collect.Source(1).Compute(2).Add=Column(3)

// Translate intrusionCode into IntrusionStatus
// ID;intrusionStatus;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column="2"
Enclosure.Collect.Source(1).Compute(3).TranslationTable="IntrusionCodeTranslationTable"

// The IntrusionCodeTranslationTable
IntrusionCodeTranslationTable(8)="WARN"
IntrusionCodeTranslationTable(9)="WARN"
IntrusionCodeTranslationTable(10)="WARN"
IntrusionCodeTranslationTable(11)="WARN"
IntrusionCodeTranslationTable(2)="WARN"
IntrusionCodeTranslationTable(6)="WARN"
IntrusionCodeTranslationTable(14)="WARN"
IntrusionCodeTranslationTable(Default)="OK"

//now collect PowerConsumption
//now activate powerconsuption if available
// ID;powerconsuption
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOID=".1.3.6.1.4.1.231.2.10.2.2.10.4.5.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="1,5"

//now joint
//now joint with source 1
// ID;intrusionStatus;cabinetHousingOpenStatus;ID;powerconsuption
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=;;

// ValueTable
// ID;intrusionStatus;cabinetHousingOpenStatus;ID;powerconsuption
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.IntrusionStatus=ValueTable.Column(2)
Enclosure.Collect.PowerConsumption=ValueTable.Column(5)


//
// TEMPERATURES
//

//
// Temperature discovery

// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.5.1.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,1,5,3,6,7,8"

// Keep only really available sensors
// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=3
Temperature.Discovery.Source(1).Compute(1).ValueList="3,6,7,8,9"

// Copy table for sensors with valid discrete status.
// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.Source(2)=%Temperature.Discovery.Source(1)%

// Exclude sensors with invalid discrete status.
Temperature.Discovery.Source(2).Compute(1).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=3
Temperature.Discovery.Source(2).Compute(1).ValueList="1,2"

// Remove current temperatures equal to zero
Temperature.Discovery.Source(2).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(2).Compute(2).Column=5
Temperature.Discovery.Source(2).Compute(2).String="MSHW_"

Temperature.Discovery.Source(2).Compute(3).Type="Replace"
Temperature.Discovery.Source(2).Compute(3).Column=5
Temperature.Discovery.Source(2).Compute(3).Replace="MSHW_0"
Temperature.Discovery.Source(2).Compute(3).ReplaceBy=""

Temperature.Discovery.Source(2).Compute(4).Type="Replace"
Temperature.Discovery.Source(2).Compute(4).Column=5
Temperature.Discovery.Source(2).Compute(4).Replace="MSHW_"
Temperature.Discovery.Source(2).Compute(4).ReplaceBy=""

// Remove thresholds
Temperature.Discovery.Source(2).Compute(5).Type="Replace"
Temperature.Discovery.Source(2).Compute(5).Column=6
Temperature.Discovery.Source(2).Compute(5).Replace=Column(6)
Temperature.Discovery.Source(2).Compute(5).ReplaceBy=""

Temperature.Discovery.Source(2).Compute(6).Type="Replace"
Temperature.Discovery.Source(2).Compute(6).Column=7
Temperature.Discovery.Source(2).Compute(6).Replace=Column(7)
Temperature.Discovery.Source(2).Compute(6).ReplaceBy=""

// Make a copy of tables
// This table is for sensors without a valid discrete status.
// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.Source(3)=%Temperature.Discovery.Source(1)%

// Keep only sensors with invalid discrete value
Temperature.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(3).Compute(1).Column=3
Temperature.Discovery.Source(3).Compute(1).ValueList="1,2"

// Remove discrete sensor value
Temperature.Discovery.Source(3).Compute(2).Type="Replace"
Temperature.Discovery.Source(3).Compute(2).Column=3
Temperature.Discovery.Source(3).Compute(2).Replace=Column(3)
Temperature.Discovery.Source(3).Compute(2).ReplaceBy=""

// Exclude where numeric sensor is zero
Temperature.Discovery.Source(3).Compute(3).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(3).Compute(3).Column=5
Temperature.Discovery.Source(3).Compute(3).ValueList="0"

// Union of 2 and 3
// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.Source(4).Type="TableUnion"
Temperature.Discovery.Source(4).Table1=%Temperature.Discovery.Source(2)%
Temperature.Discovery.Source(4).Table2=%Temperature.Discovery.Source(3)%


// InstanceTable
// ID;enclosureID;Status;sensorDesignation;currentValue;warningThreshold;alarmThreshold;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(4)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(6)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(7)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(5)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

//
// Temperature collect

// Collect type is Multi-instance
Temperature.Collect.Type="MultiInstance"

// ID;currentValue;Status;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.5.1.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,6,5"

// Duplicate status
// ID;currentValue;TemperatureStatus;Status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=3

// Translate TemperatureStatus into PATROLStatus
// ID;currentValue;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).TranslationTable="TemperatureStatusTranslationTable"

// Translate Status into StatusInformation
// ID;currentValue;PATROLStatus;StatusInformation;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=4
Temperature.Collect.Source(1).Compute(3).TranslationTable="TemperatureStatusInformationTranslationTable"

// The ValueTable = Source(1)
// ID;currentValue;PATROLStatus;StatusInformation;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)

// The TemperatureStatusTranslationTable
//TemperatureStatusTranslationTable(1)="WARN"
//TemperatureStatusTranslationTable(2)="WARN"
TemperatureStatusTranslationTable(3)="OK"
TemperatureStatusTranslationTable(4)="WARN"
TemperatureStatusTranslationTable(5)="WARN"
TemperatureStatusTranslationTable(6)="WARN"
TemperatureStatusTranslationTable(7)="ALARM"
TemperatureStatusTranslationTable(8)="OK"
TemperatureStatusTranslationTable(9)="WARN"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// The TemperatureStatusInformationTranslationTable
//TemperatureStatusInformationTranslationTable(1)="Other"
//TemperatureStatusInformationTranslationTable(2)="Unknown"
TemperatureStatusInformationTranslationTable(3)=""
TemperatureStatusInformationTranslationTable(4)="Temperature Sensor Failure"
TemperatureStatusInformationTranslationTable(5)="Temperature Failure"
TemperatureStatusInformationTranslationTable(6)="Warning: Temperature High"
TemperatureStatusInformationTranslationTable(7)="Critical: Temperature Exceeds Tolerance"
TemperatureStatusInformationTranslationTable(8)=""
TemperatureStatusInformationTranslationTable(9)="Warning"
TemperatureStatusInformationTranslationTable(Default)="Unknown Status"

//
// FANS
//

//
// Fan discovery

// ID;enclosureID;fanStatus;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.5.2.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,1,5,6,3"

//FanStatus
//INTEGER {unknown(1),
//disabled(2),ok(3),failed(4),prefailure-predicted(5),redundant-fan-failed(6),not-manageable(7),not-present(8)

// Keep only fans that are present (status = 3 (ok), 4 (failed), 5 (pred fail), 6 (redundant fan failed))
// ID;enclosureID;fanStatus;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column="3"
Fan.Discovery.Source(1).Compute(1).ValueList="1,2,8"

// Deactivate speed if speed equals zero and status equals Ok
Fan.Discovery.Source(1).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(2).Column=4
Fan.Discovery.Source(1).Compute(2).String="_MSHW_"

Fan.Discovery.Source(1).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(3).Column=4
Fan.Discovery.Source(1).Compute(3).String=Column(3)

Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=4
Fan.Discovery.Source(1).Compute(4).Replace="3_MSHW_0"
Fan.Discovery.Source(1).Compute(4).ReplaceBy=""

//The instance table
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(5)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(4)

//
// Fan collect

// Collect type is "multi-instance"
Fan.Collect.Type="MultiInstance"

// Source(1) = The fansTable SNMP table
// ID;enclosureID;fanStatus;fanSpeed
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.5.2.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,1,5,6"

// Duplicate the fanStatus column
// DeviceID;fanStatus;fanStatus;fanSpeed
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="3"

// Translate fanStatus into PATROLStatus
// DeviceID;enclosureID;status;fanStatus;fanSpeed
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="3"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

//INTEGER {unknown(1),disabled(2),ok(3),failed(4),prefailure-predicted(5),
//redundant-fan-failed(6),not-manageable(7),not-present(8)

// The FanStatusTranslationTable
FanStatusTranslationTable(3)="OK"
FanStatusTranslationTable(4)="ALARM"
FanStatusTranslationTable(5)="WARN"
FanStatusTranslationTable(6)="WARN"
FanStatusTranslationTable(7)="WARN"
FanStatusTranslationTable(8)="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// Translate the second fanStatus into a more readable string
// DeviceID;status;statusInformation;fanSpeed
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="4"
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(3)=""
FanStatusInformationTranslationTable(4)="Failed"
FanStatusInformationTranslationTable(5)="Predicted Failure"
FanStatusInformationTranslationTable(6)="Failed Redundancy"
FanStatusInformationTranslationTable(7)="Not Manageable"
FanStatusInformationTranslationTable(8)="Not Present"
FanStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)
Fan.Collect.Speed=ValueTable.Column(5)


//
// VOLTAGES
//

//
// Voltage discovery

// Source(1)
// ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.3.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,1,4,3,5,7,8"

// Copy table for sensors with a valid discrete status
Voltage.Discovery.Source(2)=%Voltage.Discovery.Source(1)%

// Exclude sensors with invalid discrete status.
Voltage.Discovery.Source(2).Compute(1).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(2).Compute(1).Column=3
Voltage.Discovery.Source(2).Compute(1).ValueList="1,2"

// Remove voltages that are equal to 4294967295
Voltage.Discovery.Source(2).Compute(2).Type="Replace"
Voltage.Discovery.Source(2).Compute(2).Column=5
Voltage.Discovery.Source(2).Compute(2).Replace="4294967295"
Voltage.Discovery.Source(2).Compute(2).ReplaceBy=""

// Remove thresholds
Voltage.Discovery.Source(2).Compute(3).Type="Replace"
Voltage.Discovery.Source(2).Compute(3).Column=6
Voltage.Discovery.Source(2).Compute(3).Replace=Column(6)
Voltage.Discovery.Source(2).Compute(3).ReplaceBy=""

Voltage.Discovery.Source(2).Compute(4).Type="Replace"
Voltage.Discovery.Source(2).Compute(4).Column=7
Voltage.Discovery.Source(2).Compute(4).Replace=Column(7)
Voltage.Discovery.Source(2).Compute(4).ReplaceBy=""

// Make a copy of table
// This table is for sensors without a valid discrete status.
// ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
Voltage.Discovery.Source(3)=%Voltage.Discovery.Source(1)%

// Keep only sensors with invalid discrete value
Voltage.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(3).Compute(1).Column=3
Voltage.Discovery.Source(3).Compute(1).ValueList="1,2"

// Remove discrete sensor value
Voltage.Discovery.Source(3).Compute(2).Type="Replace"
Voltage.Discovery.Source(3).Compute(2).Column=3
Voltage.Discovery.Source(3).Compute(2).Replace=Column(3)
Voltage.Discovery.Source(3).Compute(2).ReplaceBy=""

// Exclude where numeric sensor is 4294967295
Voltage.Discovery.Source(3).Compute(3).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(3).Compute(3).Column=5
Voltage.Discovery.Source(3).Compute(3).ValueList="4294967295"

// Union of 2 and 3
// ID;enclosureID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;
Voltage.Discovery.Source(4).Type="TableUnion"
Voltage.Discovery.Source(4).Table1=%Voltage.Discovery.Source(2)%
Voltage.Discovery.Source(4).Table2=%Voltage.Discovery.Source(3)%

// InstanceTable
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(4)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(6)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(5)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

//
// Voltage collect

// Collect type = "multi instance"
Voltage.Collect.Type="MultiInstance"

// Source(1) = voltage table
// ID;enclosureID;CurrentValue;VoltageStatus;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.3.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,1,5,4"

// Duplicate status
// ID;enclosureID;CurrentValue;VoltageStatus;StatusInformation;
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column=4

// Translate TemperatureStatus into PATROLStatus
// ID;currentValue;PATROLStatus;StatusInformation;
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column=4
Voltage.Collect.Source(1).Compute(2).TranslationTable="VoltageStatusTranslationTable"

// Translate Status into StatusInformation
// ID;currentValue;PATROLStatus;StatusInformation;
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column=5
Voltage.Collect.Source(1).Compute(3).TranslationTable="VoltageStatusInformationTranslationTable"

//Voltage status not-available(2):no voltage available (e.g. CPU voltage on empty CPU socket)
//ok(3):voltage value is in normal range too-low (4):voltage value is below nominal range
//too-high(5):voltage value is above upper limit
//out-of-range(6):voltage value is out of normal range (cannot detect whether too low or too high)
//warning(7):voltage warning (e.g. battery failure predicted)

//TemperatureStatusTranslationTable(2)="WARN"
VoltageStatusTranslationTable(3)="OK"
VoltageStatusTranslationTable(4)="ALARM"
VoltageStatusTranslationTable(5)="ALARM"
VoltageStatusTranslationTable(6)="ALARM"
VoltageStatusTranslationTable(7)="WARN"
VoltageStatusTranslationTable(Default)="UNKNOWN"

// The TemperatureStatusInformationTranslationTable
//TemperatureStatusInformationTranslationTable(1)="Other"
//TemperatureStatusInformationTranslationTable(2)="Unknown"
VoltageStatusInformationTranslationTable(3)=""
VoltageStatusInformationTranslationTable(4)="Below Lower Threshold"
VoltageStatusInformationTranslationTable(5)="Above Upper Threshold"
VoltageStatusInformationTranslationTable(6)="Out of Normal Range"
VoltageStatusInformationTranslationTable(7)="Warning (e.g. Battery failure predicted)"
VoltageStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(3)
Voltage.Collect.Status=ValueTable.Column(4)
Voltage.Collect.StatusInformation=ValueTable.Column(5)

//
// POWER SUPPLIES
//

//
// Power Supply discovery

// Source(1) = powerSupplyUnitsTable SNMP table
// ID;enclosureID;PSDesignation;Status
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.2.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,5"

//INTEGER {unknown(1), not-present(2), ok(3), failed(4), ac-fail(5), dc-fail(6),
//critical-temperature(7), not-manageable(8), fan-failure-predicted(9), fan-failure(10),
//power-safe-mode(11),non-redundant-dc-fail(12), non-redundant-ac-fail(13)

PowerSupply.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column="4"
PowerSupply.Discovery.Source(1).Compute(1).ValueList="1,2"

// InstanceTable
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)

//
// Power Supply collect

// Collect type is "Multi-instance"
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = SNMP get on the powerSupplyUnitStatus OID
// DeviceID;cabinetID;Status
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.2.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,1,5"

// Duplicate the powerSupplyUnitStatus
// DeviceID;cabinetID;Status;StatusInformation
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="3"

// Translate the first powerSupplyUnitStatus into a PATROL statuss
// status;powerSupplyUnitStatus
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="3"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

//INTEGER {unknown(1), not-present(2), ok(3), failed(4), ac-fail(5), dc-fail(6),
//critical-temperature(7), not-manageable(8), fan-failure-predicted(9), fan-failure(10),
//power-safe-mode(11),non-redundant-dc-fail(12), non-redundant-ac-fail(13)

// The PowerSupplyStatusTranslationTable

PowerSupplyStatusTranslationTable(3)="OK"
PowerSupplyStatusTranslationTable(4)="ALARM"
PowerSupplyStatusTranslationTable(5)="ALARM"
PowerSupplyStatusTranslationTable(6)="ALARM"
PowerSupplyStatusTranslationTable(7)="ALARM"
PowerSupplyStatusTranslationTable(8)="WARN"
PowerSupplyStatusTranslationTable(9)="WARN"
PowerSupplyStatusTranslationTable(10)="ALARM"
PowerSupplyStatusTranslationTable(11)="ALARM"
PowerSupplyStatusTranslationTable(12)="ALARM"
PowerSupplyStatusTranslationTable(13)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// Translate the second powerSupplyUnitStatus into a more readable string
// status;statusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="4"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(3)=""
PowerSupplyStatusInformationTranslationTable(4)="Failed"
PowerSupplyStatusInformationTranslationTable(5)="AC Failure"
PowerSupplyStatusInformationTranslationTable(6)="DC Failure"
PowerSupplyStatusInformationTranslationTable(7)="Critical Temperature"
PowerSupplyStatusInformationTranslationTable(8)="Not Manageable"
PowerSupplyStatusInformationTranslationTable(9)="Fan Failure Predicted"
PowerSupplyStatusInformationTranslationTable(10)="Fan Failed"
PowerSupplyStatusInformationTranslationTable(11)="Power Safe Mode"
PowerSupplyStatusInformationTranslationTable(12)="Non-redundant DC Failure"
PowerSupplyStatusInformationTranslationTable(13)="Non-redundant AC Failure"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// Collect table
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(3)
PowerSupply.Collect.StatusInformation=ValueTable.Column(4)


//
// MEMORY modules
//

//
// Discovery

// Source(1) = SNMP memoryTable
// DeviceID;EnclosureID;Status;Size;TypeCode;Socket;MaximumSpeed
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.5.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="ID,1,4,6,9,3,15"

// Keep only lines where status is not "not-available (4)" and not "unknown (1)"
//unknown(1):Module status could not be evaluated
//not-present(2):Module socket is empty
//ok(3):Module is available and working properly
//disabled(4):Module was manually disabled in BIOS setup
//error(5):Module has encountered errors but is still in use
//failed(6):Module has failed and was disabled
//prefailure-predicted(7):Module has encountered too many correctable errors within a certain
//time period and is predicted to fail in near future
//hidden(11):Module socket is not available and should be hidden
// ID;EnclosureID;Status;Size;TypeCode;Socket;
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).ValueList="1,2,4,11"

//Add MHz to memory speed
Memory.Discovery.Source(1).Compute(2).Type="RightConcat"
Memory.Discovery.Source(1).Compute(2).Column=7
Memory.Discovery.Source(1).Compute(2).String=" MHz"

Memory.Discovery.Source(1).Compute(3).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(3).Column=7
Memory.Discovery.Source(1).Compute(3).String="Speed: "

// InstanceTable
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Size=InstanceTable.Column(4)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(6)
Memory.Discovery.Instance.Type=InstanceTable.Column(5)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)


//
// Collect

// Collect type is "multi-instance"
Memory.Collect.Type="MultiInstance"

// Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
// DeviceID;enclosureID;Status;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.5.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="ID,1,4"

// Duplicate the status column
// ID;Status;Status;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column="3"

// Translate the first status column into a PATROL Status
// DeviceID;enclosureID;PATROLStatus;Status;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column="3"
Memory.Collect.Source(1).Compute(2).TranslationTable="MemoryModuleStatusTranslationTable"

// Translate the second status column into a more readable string
// DeviceID;enclosureID;PATROLStatus;StatusInformation;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column="4"
Memory.Collect.Source(1).Compute(3).TranslationTable="MemoryModuleStatusInformationTranslationTable"

// ValueTable
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(3)
Memory.Collect.StatusInformation=ValueTable.Column(4)

//Memory module status:
//unknown(1):Module status could not be evaluated
//not-present(2):Module socket is empty
//ok(3):Module is available and working properly
//disabled(4):Module was manually disabled in BIOS setup
//error(5):Module has encountered errors but is still in use
//failed(6):Module has failed and was disabled
//prefailure-predicted(7):Module has encountered too many correctable errors within a certain
//time period and is predicted to fail in near future
//hidden(11):Module socket is not available and should be hidden

// The MemoryModuleStatusTranslationTable
MemoryModuleStatusTranslationTable(3)="OK"
MemoryModuleStatusTranslationTable(4)="OK"
MemoryModuleStatusTranslationTable(5)="ALARM"
MemoryModuleStatusTranslationTable(6)="ALARM"
MemoryModuleStatusTranslationTable(7)="WARN"
MemoryModuleStatusTranslationTable(Default)="UNKNOWN"

// The MemoryModuleStatusInformationTranslationTable
MemoryModuleStatusInformationTranslationTable(3)=""
MemoryModuleStatusInformationTranslationTable(4)="Disabled in BIOS"
MemoryModuleStatusInformationTranslationTable(5)="Error but still in use"
MemoryModuleStatusInformationTranslationTable(6)="Failed and disabled"
MemoryModuleStatusInformationTranslationTable(7)="Failure Predicted (Error count exceeded)"
MemoryModuleStatusInformationTranslationTable(Default)="Unknown Status"

//
// CPUs
//

//
// Discovery

// Source(1) = SNMP cpuTable
// ID;enclosureID,Speed;Status;Model;cpuDesignation;Vendor;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.4.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="ID,1,8,4,5,3,6"

// Keep only lines where status is not "not-available (4)" and not "unknown (1)"
// ID;enclosureID;Speed;Status;Model;cpuDesignation;Vendor;
CPU.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=4
CPU.Discovery.Source(1).Compute(1).ValueList="1,2,4"
// CPU status:
//unknown(1):CPU status could not be evaluated
//not-present(2):CPU socket is empty
//ok(3):CPU is available and working properly
//disabled(4):CPU was manually disabled in BIOS setup
//error(5):CPU has encountered errors but is still in use
//failed(6):CPU has failed and is disabled
//missing-termination(7):CPU socket needs a terminator module when not populated but the terminator is missing
//prefailure-warning(8):CPU has encountered too many correctable errors within a certain
//time period and is predicted to fail in near future

// Remove Genuine from manufacturer's name
// ID;enclosureID;Speed;Status;Model;cpuDesignation;Vendor;
CPU.Discovery.Source(1).Compute(2).Type="Replace"
CPU.Discovery.Source(1).Compute(2).Column=7
CPU.Discovery.Source(1).Compute(2).Replace="Genuine"
CPU.Discovery.Source(1).Compute(2).ReplaceBy=""

// Replace "-1" by nothing: that's in case the CPU is disabled and its speed N/A
// ID;enclosureID;Speed;Status;Model;Socket;Vendor;
CPU.Discovery.Source(1).Compute(3).Type="Replace"
CPU.Discovery.Source(1).Compute(3).Column=3
CPU.Discovery.Source(1).Compute(3).Replace="-1"
CPU.Discovery.Source(1).Compute(3).ReplaceBy=""

// InstanceTable
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.MaximumSpeed=InstanceTable.Column(3)
CPU.Discovery.Instance.Model=InstanceTable.Column(5)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(6)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(7)

//
// Collect

// Collect type is "multi-instance"
CPU.Collect.Type="MultiInstance"

// Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
// ID,enclosureID;Status;
CPU.Collect.Source(1).Type="SnmpTable"
CPU.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.6.4.1"
CPU.Collect.Source(1).SnmpTableSelectColumns="ID,1,4"

// Duplicate the status column
// ID,enclosureID,Status;Status
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column="3"

// Translate the first status column into a PATROL Status
// ID;enclosureID;PATROLStatus;StatusInformation
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column="3"
CPU.Collect.Source(1).Compute(2).TranslationTable="CPUStatusTranslationTable"

// Translate the second status column into a more readable string
// PATROLStatus;StatusInformation
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column="4"
CPU.Collect.Source(1).Compute(3).TranslationTable="CPUStatusInformationTranslationTable"

// CPU status:
//unknown(1):CPU status could not be evaluated
//not-present(2):CPU socket is empty
//ok(3):CPU is available and working properly
//disabled(4):CPU was manually disabled in BIOS setup
//error(5):CPU has encountered errors but is still in use
//failed(6):CPU has failed and is disabled
//missing-termination(7):CPU socket needs a terminator module when not populated but the terminator is missing
//prefailure-warning(8):CPU has encountered too many correctable errors within a certain
//time period and is predicted to fail in near future
// The CPUStatusTranslationTable

CPUStatusTranslationTable(3)="OK"
CPUStatusTranslationTable(4)="OK"
CPUStatusTranslationTable(5)="ALARM"
CPUStatusTranslationTable(6)="ALARM"
CPUStatusTranslationTable(7)="WARN"
CPUStatusTranslationTable(8)="WARN"
CPUStatusTranslationTable(Default)="UNKNOWN"

// The CPUStatusInformationTranslationTable
CPUStatusInformationTranslationTable(3)=""
CPUStatusInformationTranslationTable(4)="Disabled"
CPUStatusInformationTranslationTable(5)="Error"
CPUStatusInformationTranslationTable(6)="Failed"
CPUStatusInformationTranslationTable(7)="Missing Termination"
CPUStatusInformationTranslationTable(8)="Failure predicted"
CPUStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
Cpu.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(3)
CPU.Collect.StatusInformation=ValueTable.Column(4)


// BATTERY

// Discovery
// ID;Enclosure;Designation;Type;Status;
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,4,8"

// Keep Only Batteries
Battery.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=4
Battery.Discovery.Source(1).Compute(1).RegExp="Battery"

// Exclude components with Unknown or Not-Present Status
Battery.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(2).Column=5
Battery.Discovery.Source(1).Compute(2).ValueList="1,6"

// InstanceTable = Source(1)
// ID;Enclosure;Designation;Type;Status;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect

// Collect type = "multi instance"
Battery.Collect.Type="MultiInstance"

// Source(1) = voltage table
// ID;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="ID,8"

// Duplicate status
// ID;Status;StatusInformation;
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Translate TemperatureStatus into PATROLStatus
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="SC2CSSSensorTranslationTable"

// SC2CSSSensorTranslationTable
SC2CSSSensorTranslationTable(2)="OK"
SC2CSSSensorTranslationTable(3)="OK"
SC2CSSSensorTranslationTable(4)="ALARM"
SC2CSSSensorTranslationTable(5)="ALARM"
SC2CSSSensorTranslationTable(6)="ALARM"
SC2CSSSensorTranslationTable(Default)="UNKNOWN"

// Translate Status into StatusInformation
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column=3
Battery.Collect.Source(1).Compute(3).TranslationTable="SC2CSSSensorInformationTranslationTable"

// SC2CSSSensorInformationTranslationTable
SC2CSSSensorInformationTranslationTable(2)=""
SC2CSSSensorInformationTranslationTable(3)="Identify LED ON"
SC2CSSSensorInformationTranslationTable(4)="Predicted Failure"
SC2CSSSensorInformationTranslationTable(5)="Failed"
SC2CSSSensorInformationTranslationTable(6)="Removed"
SC2CSSSensorInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

// PhysicalDisk

// Discovery
// ID;Enclosure;Designation;Type;Status;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,4,8"

// Keep Only Disk
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=4
PhysicalDisk.Discovery.Source(1).Compute(1).RegExp="Disk"

// Exclude components with Unknown or Not-Present Status
PhysicalDisk.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=5
PhysicalDisk.Discovery.Source(1).Compute(2).ValueList="1,6"

// InstanceTable = Source(1)
// ID;Enclosure;Designation;Type;Status;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect

// Collect type = "multi instance"
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = voltage table
// ID;Status;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8"

// Duplicate status
// ID;Status;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate TemperatureStatus into PATROLStatus
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="SC2CSSSensorTranslationTable"

// Translate Status into StatusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="SC2CSSSensorInformationTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


// OtherDevice

// Discovery
// ID;Enclosure;Designation;Type;Status;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,4,8"

// Keep Only Disk
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=4
OtherDevice.Discovery.Source(1).Compute(1).RegExp="\(PCI\)\|\(Power Unit\)\|\(System Management Module\)"

// Exclude components with Unknown or Not-Present Status
OtherDevice.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=5
OtherDevice.Discovery.Source(1).Compute(2).ValueList="1,6"

// InstanceTable = Source(1)
// ID;Enclosure;Designation;Type;Status;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect

// Collect type = "multi instance"
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = OtherDevice table
// ID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.10.8.3.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,8"

// Duplicate status
// ID;Status;StatusInformation;
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column=2

// Translate TemperatureStatus into PATROLStatus
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=2
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="SC2CSSSensorTranslationTable"

// Translate Status into StatusInformation
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=3
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="SC2CSSSensorInformationTranslationTable"

// ValueTable = Source(1)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)
