//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//              MS_HW_DellStorageManager
//
//         Connects to: Dell OpenManage Storage Manager
//
//


// Header

hdf.DisplayName="Dell OpenManage Storage Manager"
hdf.TypicalPlatform="Dell PowerEdge"
hdf.ReliesOn="Dell OpenManage Server Administrator"
hdf.Version="1.2"
hdf.Comments="This connector provides Dell disk array monitoring through the Dell Storage Manager Agent which supports almost all Dell disk arrays."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"
hdf.Supersedes="MS_HW_WBEMGenDiskNT.hdf"

//
// Detection
//

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.674.10893.1.20"


//
// Disk controllers
//

//
// Discovery

// Source(1) = the controllerTable
// ControllerIndex;Model;FWRev;DriverVersion;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,8,41"

// The InstanceTable
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(3)
DiskController.Discovery.Instance.DriverVersion=InstanceTable.Column(4)

//
// Collect

// Collect type is multi-instance
DiskController.Collect.Type="MultiInstance"

// Source(1) = the controllerTable SNMP Table
// ID;controllerComponentStatus
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.1.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="1,38"

// Duplicate the controllerComponentStatus column
// ID;controllerComponentStatus;controllerComponentStatus
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column="2"

// Translate the first controllerComponentStatus into a PATROL Status
// ID;PATROLStatus;controllerComponentStatus
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column="2"
DiskController.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second controllerComponentStatus into a more readable string
// ID;PATROLStatus;statusInformation
DiskController.Collect.Source(1).Compute(3).Type="Translate"
DiskController.Collect.Source(1).Compute(3).Column="3"
DiskController.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)


/////////////////////////////////////////////////
///  ***  P H Y S I C A L   D I S K S   ***   ///
/////////////////////////////////////////////////

//
// Discovery

// Source(1) = the arrayDiskTable snmp table
// ID;DiskNumber;DiskName;Vendor;Model;Serial;SizeMB;BusTypeCode;NexusID;PartNumber;PredictedFailure;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.4.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,3,6,7,11,21,26,27,31"

// Source(2) = the arrayDiskChannelConnectionTable snmp table
// DiskNumber;ControllerNumber
PhysicalDisk.Discovery.Source(2).Type="SnmpTable"
PhysicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.5.1"
PhysicalDisk.Discovery.Source(2).SnmpTableSelectColumns="3,7"

// Source(3) = the arrayDiskChannelConnectionTable snmp table
// DiskNumber;ControllerNumber
PhysicalDisk.Discovery.Source(3).Type="SnmpTable"
PhysicalDisk.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.6.1"
PhysicalDisk.Discovery.Source(3).SnmpTableSelectColumns="3,7"

// Source(4) = union of Source(2) and Source(3)
// DiskNumber;ControllerNumber
PhysicalDisk.Discovery.Source(4).Type="TableUnion"
PhysicalDisk.Discovery.Source(4).Table1=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(4).Table2=%PhysicalDisk.Discovery.Source(3)%

// Source(5) = table joint between Source(1) and Source(4)
// ID;DiskNumber;DiskName;Vendor;Model;Serial;SizeMB;BusTypeCode;NexusID;PartNumber;PredictedFailure;DiskNumber;ControllerNumber
PhysicalDisk.Discovery.Source(5).Type="TableJoint"
PhysicalDisk.Discovery.Source(5).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(5).RightTable=%PhysicalDisk.Discovery.Source(4)%
PhysicalDisk.Discovery.Source(5).LeftKeyColumn=2
PhysicalDisk.Discovery.Source(5).RightKeyColumn=1
PhysicalDisk.Discovery.Source(5).DefaultRightLine=";1;"

// Clean up in an awk script and extract enclosure
// EnclosureID;DisplayID;DiskName;Vendor;Model;Serial;Size;BusType;NexusID;PartNumber;PredictedFailure;ControllerNumber;
PhysicalDisk.Discovery.Source(5).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(5).Compute(1).AwkScript=EmbeddedFile(1)
PhysicalDisk.Discovery.Source(5).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(5).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(5).Compute(1).SelectColumns="2,3,4,5,6,7,8,9,10,11,12,13"

// Convert the size into bytes
// EnclosureID;DisplayID;DiskName;Vendor;Model;Serial;Size;BusType;NexusID;PartNumber;PredictedFailure;ControllerNumber;
PhysicalDisk.Discovery.Source(5).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(5).Compute(2).Column=7
PhysicalDisk.Discovery.Source(5).Compute(2).MultiplyBy=1048576

// Translate the BusTypeCode column into a readable string
// EnclosureID;DisplayID;DiskName;Vendor;Model;Serial;Size;BusType;NexusID;PartNumber;PredictedFailure;ControllerNumber;
PhysicalDisk.Discovery.Source(5).Compute(3).Type="Translate"
PhysicalDisk.Discovery.Source(5).Compute(3).Column=8
PhysicalDisk.Discovery.Source(5).Compute(3).TranslationTable="PhysicalDiskBusTypeTranslationTable"

// The PhysicalDiskBusTypeTranslationTable
PhysicalDiskBusTypeTranslationTable(1)="SCSI"
PhysicalDiskBusTypeTranslationTable(2)="IDE"
PhysicalDiskBusTypeTranslationTable(3)="FC"
PhysicalDiskBusTypeTranslationTable(4)="SSA"
PhysicalDiskBusTypeTranslationTable(6)="USB"
PhysicalDiskBusTypeTranslationTable(7)="SATA"
PhysicalDiskBusTypeTranslationTable(8)="SAS"
PhysicalDiskBusTypeTranslationTable(Default)=""

// The instance table = Source(5)
// The Nexus ID will now be used as it is the reference used in the GUI / on the Case
// EnclosureID;DisplayID;DiskName;Vendor;Model;Serial;Size;BusType;NexusID;PartNumber;PredictedFailure;ControllerNumber;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(5)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(12)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType="Enclosure"
PhysicalDisk.Discovery.Instance.ParameterActivation.PredictedFailure=InstanceTable.Column(11)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(3)

//
// Collect

// Collect type = mono-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = SNMP Get on the arrayDiskState value of the arrayDiskTable SNMP table
// ID;arrayDiskState;NexusID;smartIndication;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.4.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,4,26,31"

// Duplicate the state column (twice)
// ID;arrayDiskState;arrayDiskState;NexusID;smartIndication
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate the first arrayDiskState into a PATROL status
// ID;patrolStatus;arrayDiskState;NexusID;smartIndication
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// Translate the second arrayDiskState into a PATROL information
// ID;patrolStatus;statusInformation;NexusID;smartIndication
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// Translate the smartIndication into an TRUE/FALSE value for PredictedFailure
// ID;patrolStatus;statusInformation;NexusID;PredictedFailure
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=5
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="PhysicalDiskPredictedFailureTranslationTable"

// Replace double slashes with single.  I'm not sure if this is an emulation issue or if the server really returns these
// ID;patrolStatus;statusInformation;NexusID;PredictedFailure
PhysicalDisk.Collect.Source(1).Compute(5).Type="Replace"
PhysicalDisk.Collect.Source(1).Compute(5).Column=4
PhysicalDisk.Collect.Source(1).Compute(5).Replace="\\"
PhysicalDisk.Collect.Source(1).Compute(5).ReplaceBy="\"
//"




// ValueTable = Source(1)
// ID;patrolStatus;statusInformation;NexusID;PredictedFailure
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(4)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(5)

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable(1)="OK"
PhysicalDiskStatusTranslationTable(2)="ALARM"
PhysicalDiskStatusTranslationTable(3)="OK"
PhysicalDiskStatusTranslationTable(4)="ALARM"
PhysicalDiskStatusTranslationTable(6)="WARN"
PhysicalDiskStatusTranslationTable(7)="WARN"
PhysicalDiskStatusTranslationTable(11)="ALARM"
PhysicalDiskStatusTranslationTable(13)="OK"
PhysicalDiskStatusTranslationTable(14)="ALARM"
PhysicalDiskStatusTranslationTable(15)="OK"
PhysicalDiskStatusTranslationTable(22)="WARN"
PhysicalDiskStatusTranslationTable(23)="WARN"
PhysicalDiskStatusTranslationTable(24)="OK"
PhysicalDiskStatusTranslationTable(25)="ALARM"
PhysicalDiskStatusTranslationTable(26)="OK"
PhysicalDiskStatusTranslationTable(28)="OK"
PhysicalDiskStatusTranslationTable(34)="WARN"
PhysicalDiskStatusTranslationTable(35)="OK"
PhysicalDiskStatusTranslationTable(39)="WARN"
PhysicalDiskStatusTranslationTable(40)="OK"
PhysicalDiskStatusTranslationTable(41)="ALARM"
PhysicalDiskStatusTranslationTable(53)="ALARM"
PhysicalDiskStatusTranslationTable(56)="OK"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable(1)="Ready"
PhysicalDiskStatusInformationTranslationTable(2)="Failed"
PhysicalDiskStatusInformationTranslationTable(3)="Online"
PhysicalDiskStatusInformationTranslationTable(4)="Offline"
PhysicalDiskStatusInformationTranslationTable(6)="Degraded"
PhysicalDiskStatusInformationTranslationTable(7)="Recovering"
PhysicalDiskStatusInformationTranslationTable(11)="Removed"
PhysicalDiskStatusInformationTranslationTable(13)="Non-RAID"
PhysicalDiskStatusInformationTranslationTable(14)="Not REady"
PhysicalDiskStatusInformationTranslationTable(15)="Resynching"
PhysicalDiskStatusInformationTranslationTable(22)="Replacing"
PhysicalDiskStatusInformationTranslationTable(23)="Spinning Down"
PhysicalDiskStatusInformationTranslationTable(24)="Rebuilding"
PhysicalDiskStatusInformationTranslationTable(25)="No media"
PhysicalDiskStatusInformationTranslationTable(26)="Formatting"
PhysicalDiskStatusInformationTranslationTable(28)="Diagnosing"
PhysicalDiskStatusInformationTranslationTable(34)="Predicted Failure"
PhysicalDiskStatusInformationTranslationTable(35)="Initializing"
PhysicalDiskStatusInformationTranslationTable(39)="Foreign"
PhysicalDiskStatusInformationTranslationTable(40)="Clear"
PhysicalDiskStatusInformationTranslationTable(41)="Unsupported"
PhysicalDiskStatusInformationTranslationTable(53)="Incompatible"
PhysicalDiskStatusInformationTranslationTable(56)="Read Only"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"

// The PhysicalDiskPredictedFailureTranslationTable
PhysicalDiskPredictedFailureTranslationTable(2)="TRUE"
PhysicalDiskPredictedFailureTranslationTable(Default)="FALSE"


///////////////////////////////////////////////
///  ***  L O G I C A L   D I S K S   ***   ///
///////////////////////////////////////////////

//
// Discovery

// Source(1) = the virtualDiskTable snmp table
// ID;virtualDiskNumber;diskName;deviceName;SizeMB;RaidLevel
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.140.1.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,3,6,13"

// Translate size into bytes
// ID;virtualDiskNumber;diskName;deviceName;Size;RaidLevel
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column=5
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy=1048576

// Translate the FaultToleranceLevel into a more readable string
// ID;virtualDiskNumber;diskName;deviceName;Size;RaidLevel
LogicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(2).Column=6
LogicalDisk.Discovery.Source(1).Compute(2).TranslationTable="RAIDLevelTranslationTable"

// The RAIDLevelTranslationTable
RAIDLevelTranslationTable(1)="Concatenated"
RAIDLevelTranslationTable(2)="0"
RAIDLevelTranslationTable(3)="1"
RAIDLevelTranslationTable(4)="2"
RAIDLevelTranslationTable(5)="3"
RAIDLevelTranslationTable(6)="4"
RAIDLevelTranslationTable(7)="5"
RAIDLevelTranslationTable(8)="6"
RAIDLevelTranslationTable(9)="7"
RAIDLevelTranslationTable(10)="10"
RAIDLevelTranslationTable(11)="30"
RAIDLevelTranslationTable(12)="50"
RAIDLevelTranslationTable(13)="Add Spares"
RAIDLevelTranslationTable(14)="Delete Logical"
RAIDLevelTranslationTable(15)="Transform Logical"
RAIDLevelTranslationTable(18)="0+1"
RAIDLevelTranslationTable(Default)=""

// Source(2) = the arrayDiskLogicalConnectionTable snmp table
// physicalDiskNumber;VirtualDiskNumber
LogicalDisk.Discovery.Source(2).Type="SnmpTable"
LogicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.140.3.1"
LogicalDisk.Discovery.Source(2).SnmpTableSelectColumns="3,5"

// Source(3) = table joint between source(1) and source(2)
// ID;virtualDiskNumber;diskName;deviceName;Size;RaidLevel;physicalDiskNumber;VirtualDiskNumber
LogicalDisk.Discovery.Source(3).Type="TableJoint"
LogicalDisk.Discovery.Source(3).LeftTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).RightTable=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(3).LeftKeyColumn=2
LogicalDisk.Discovery.Source(3).RightKeyColumn=2

// Source(4) = the arrayDiskEnclosureConnectionTable snmp table
// arrayDiskNumber;controllerNumber
LogicalDisk.Discovery.Source(4).Type="SnmpTable"
LogicalDisk.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.5.1"
LogicalDisk.Discovery.Source(4).SnmpTableSelectColumns="3,7"

// Source(4) = the arrayDiskChannelConnectionTable snmp table
// arrayDiskNumber;controllerNumber
LogicalDisk.Discovery.Source(5).Type="SnmpTable"
LogicalDisk.Discovery.Source(5).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.6.1"
LogicalDisk.Discovery.Source(5).SnmpTableSelectColumns="3,7"

// Source(6) = Union of Source(4) and Source(5)
// arrayDiskNumber;controllerNumber
LogicalDisk.Discovery.Source(6).Type="TableUnion"
LogicalDisk.Discovery.Source(6).Table1=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Source(6).Table2=%LogicalDisk.Discovery.Source(5)%

// Source(5) = table joint between source(3) and source(6)
// ID;virtualDiskNumber;diskName;deviceName;Size;RaidLevel;physicalDiskNumber;VirtualDiskNumber;arrayDiskNumber;controllerNumber;
LogicalDisk.Discovery.Source(7).Type="TableJoint"
LogicalDisk.Discovery.Source(7).LeftTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Source(7).RightTable=%LogicalDisk.Discovery.Source(6)%
LogicalDisk.Discovery.Source(7).LeftKeyColumn=7
LogicalDisk.Discovery.Source(7).RightKeyColumn=1
LogicalDisk.Discovery.Source(7).DefaultRightLine=";1;"

// The InstanceTable
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(7)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(10)
LogicalDisk.Discovery.Instance.AttachedToDeviceType="DiskController"
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)


//
// Collect

// Collect type = mono-instance
LogicalDisk.Collect.Type="MonoInstance"

// Source(1) = SNMP Get on the virtualDiskState value of the virtualDiskTable SNMP table
// virtualDiskState
LogicalDisk.Collect.Source(1).Type="SnmpGet"
LogicalDisk.Collect.Source(1).SnmpOid="1.3.6.1.4.1.674.10893.1.20.140.1.1.4.%LogicalDisk.Collect.DeviceID%"

// Duplicate this status, because we will translate it two times
// virtualDiskState;virtualDiskState
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="1"

// Translate the virtualDiskState into a PATROL status
// patrolDiskStatus;virtualDiskState
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="1"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// Translate the virtualDiskState into a more readable string
// patrolDiskStatus;arrayDiskStatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="2"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Status=ValueTable.Column(1)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(2)

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable(1)="OK"
LogicalDiskStatusTranslationTable(2)="ALARM"
LogicalDiskStatusTranslationTable(3)="OK"
LogicalDiskStatusTranslationTable(4)="ALARM"
LogicalDiskStatusTranslationTable(6)="WARN"
LogicalDiskStatusTranslationTable(15)="WARN"
LogicalDiskStatusTranslationTable(24)="WARN"
LogicalDiskStatusTranslationTable(26)="OK"
LogicalDiskStatusTranslationTable(32)="WARN"
LogicalDiskStatusTranslationTable(35)="OK"
LogicalDiskStatusTranslationTable(36)="OK"
LogicalDiskStatusTranslationTable(38)="OK"
LogicalDiskStatusTranslationTable(52)="ALARM"
LogicalDiskStatusTranslationTable(54)="WARN"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable(1)="Ready"
LogicalDiskStatusInformationTranslationTable(2)="Failed"
LogicalDiskStatusInformationTranslationTable(3)="Online"
LogicalDiskStatusInformationTranslationTable(4)="Offline"
LogicalDiskStatusInformationTranslationTable(6)="Degraded"
LogicalDiskStatusInformationTranslationTable(15)="Resynching"
LogicalDiskStatusInformationTranslationTable(24)="Rebuilding"
LogicalDiskStatusInformationTranslationTable(26)="Formatting"
LogicalDiskStatusInformationTranslationTable(32)="Reconstructing"
LogicalDiskStatusInformationTranslationTable(35)="Initializing"
LogicalDiskStatusInformationTranslationTable(36)="Background Initialization"
LogicalDiskStatusInformationTranslationTable(38)="Resynching Paused"
LogicalDiskStatusInformationTranslationTable(52)="Permanently Degraded"
LogicalDiskStatusInformationTranslationTable(54)="Degraded Redundancy"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"


//
// BATTERIES
//

//
// Discovery

// Source(1) = batteryTable SNMP Table
// DeviceID;BatteryNumber;Name;Vendor;
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.15.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,3"

// Source(2) = batteryConnectionTable SNMP table
// BatteryNumber;ControllerNumber;
Battery.Discovery.Source(2).Type="SnmpTable"
Battery.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.16.1"
Battery.Discovery.Source(2).SnmpTableSelectColumns="3,5"

// Source(3) = Table joint of Source(1) and Source(2)
// DeviceID;BatteryNumber;Name;Vendor;BatteryNumber;ControllerNumber;
Battery.Discovery.Source(3).Type="TableJoint"
Battery.Discovery.Source(3).LeftTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Source(3).RightTable=%Battery.Discovery.Source(2)%
Battery.Discovery.Source(3).LeftKeyColumn=2
Battery.Discovery.Source(3).RightKeyColumn=1
Battery.Discovery.Source(3).DefaultRightLine=";1;"

// InstanceTable = Source(1)
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(3)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.Model=InstanceTable.Column(3)
Battery.Discovery.Instance.Vendor=InstanceTable.Column(4)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(6)
Battery.Discovery.Instance.AttachedToDeviceType="DiskController"

//
// Collect

// Collect type is multi-instance
Battery.Collect.Type="MultiInstance"

// Source(1) = batteryTable SNMP Table
// DeviceID;DetailedStatus;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.15.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="ID,4,6"

// Translate the DetailedStatus into a more readable string
// DeviceID;StatusInformation;Status;
Battery.Collect.Source(1).Compute(1).Type="Translate"
Battery.Collect.Source(1).Compute(1).Column=2
Battery.Collect.Source(1).Compute(1).TranslationTable="BatteryStatusInformationTranslationTable"

// The BatteryStatusInformationTranslationTable
BatteryStatusInformationTranslationTable(1)="Ready"
BatteryStatusInformationTranslationTable(2)="Failed"
BatteryStatusInformationTranslationTable(6)="Degraded"
BatteryStatusInformationTranslationTable(7)="Reconditioning"
BatteryStatusInformationTranslationTable(9)="High"
BatteryStatusInformationTranslationTable(10)="Low Power"
BatteryStatusInformationTranslationTable(12)="Charging"
BatteryStatusInformationTranslationTable(21)="Missing"
BatteryStatusInformationTranslationTable(36)="Learning"
BatteryStatusInformationTranslationTable(Default)="Unknown Status"

// Translate the Status into a PATROL Status
// DeviceID;StatusInformation;PATROLStatus;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=3
Battery.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(3)
Battery.Collect.StatusInformation=ValueTable.Column(2)


// The GenericStatusTranslationTable
GenericStatusTranslationTable(3)="OK"
GenericStatusTranslationTable(4)="WARN"
GenericStatusTranslationTable(5)="ALARM"
GenericStatusTranslationTable(6)="ALARM"
GenericStatusTranslationTable(Default)="UNKNOWN"

// The GenericStatusInformationTranslationTable
GenericStatusInformationTranslationTable(3)=""
GenericStatusInformationTranslationTable(4)="Non-Critical"
GenericStatusInformationTranslationTable(5)="Critical"
GenericStatusInformationTranslationTable(6)="Unrecoverable"
GenericStatusInformationTranslationTable(Default)="Unknown Status"


//
// Enclosure: Drive Bay
//

// Source(1) = enclosureEntry
// EnclosureID;EnclosureType;EnclosureName;ServiceTag;AssetTag;NexusID;PartNumber;SerialNumber;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.3.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="6,16,2,8,9,25,28,29"

// Exclude lines of type 1 (Internal)
// EnclosureID;EnclosureType;EnclosureName;ServiceTag;AssetTag;NexusID;PartNumber;SerialNumber;
Enclosure.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(1).Compute(1).Column=2
Enclosure.Discovery.Source(1).Compute(1).ValueList="1"

// Add Identifiers
// EnclosureID;EnclosureType;EnclosureName;ServiceTag;AssetTag;NexusID;PartNumber;SerialNumber;
Enclosure.Discovery.Source(1).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=4
Enclosure.Discovery.Source(1).Compute(2).String="Serial Number: "

Enclosure.Discovery.Source(1).Compute(3).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(3).Column=5
Enclosure.Discovery.Source(1).Compute(3).String="Alternative Serial Number: "

Enclosure.Discovery.Source(1).Compute(4).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(4).Column=7
Enclosure.Discovery.Source(1).Compute(4).String="Part Number: "

// Replace double slashes with single.  I'm not sure if this is an emulation issue or if the server really returns these
// EnclosureID;EnclosureType;EnclosureName;ServiceTag;AssetTag;NexusID;PartNumber;SerialNumber;
Enclosure.Discovery.Source(1).Compute(5).Type="Replace"
Enclosure.Discovery.Source(1).Compute(5).Column=6
Enclosure.Discovery.Source(1).Compute(5).Replace="\\"
Enclosure.Discovery.Source(1).Compute(5).ReplaceBy="\"
// "

// Instance Table
// EnclosureID;EnclosureType;EnclosureName;ServiceTag;AssetTag;NexusID;PartNumber;SerialNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Vendor="Dell"
Enclosure.Discovery.Instance.Type="External Storage"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
Enclosure.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(7)


//
// Collect

// Collect type is multi-instance
Enclosure.Collect.Type="MultiInstance"

/// Source(1) = cpqSsDrvBoxTable
// ID;Status
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.3.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="25,4"

// Now, duplicate Status
// ID;Status;Status
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Translate first Status into a PATROL status
// ID;PatrolStatus;Status;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="EnclosureStatusTranslationTable"

// The EnclosureStatusTranslationTable
EnclosureStatusTranslationTable(1)="OK"
EnclosureStatusTranslationTable(2)="ALARM"
EnclosureStatusTranslationTable(3)="OK"
EnclosureStatusTranslationTable(4)="WARN"
EnclosureStatusTranslationTable(6)="WARN"
EnclosureStatusTranslationTable(Default)="UNKNOWN"

// Translate second Status into a statusInformation
// ID;PatrolStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="EnclosureStatusInformationTranslationTable"

// The EnclosureStatusInformationTranslationTable
EnclosureStatusInformationTranslationTable(1)="Ready"
EnclosureStatusInformationTranslationTable(2)="Failed"
EnclosureStatusInformationTranslationTable(3)="Online"
EnclosureStatusInformationTranslationTable(4)="Offline"
EnclosureStatusInformationTranslationTable(6)="Degraded"
EnclosureStatusInformationTranslationTable(Default)="Unknown Status"

// Replace double slashes with single.
// ID;PatrolStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(4).Type="Replace"
Enclosure.Collect.Source(1).Compute(4).Column=1
Enclosure.Collect.Source(1).Compute(4).Replace="\\"
Enclosure.Collect.Source(1).Compute(4).ReplaceBy="\"
//"

// ValueTable = Source(1)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)



// Fans

// NexusID;Vendor;PartNumber;
//
// Fan
//

// Source(1) = Fan.Entry
// NexusID;Name;PartNumber;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.7.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="16,2,12"

// Extract the EnclosureID;
// EnclosureID;NexusID;Name;PartNumber;
Fan.Discovery.Source(1).Compute(1).Type="Awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Fan.Discovery.Source(1).Compute(1).Separators=";"
Fan.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// Add Part Number:
// EnclosureID;NexusID;Name;PartNumber;
Fan.Discovery.Source(1).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(2).Column=4
Fan.Discovery.Source(1).Compute(2).String="Part Number: "

// Replace double slashes with single.
// EnclosureID;NexusID;Name;PartNumber;
Fan.Discovery.Source(1).Compute(3).Type="Replace"
Fan.Discovery.Source(1).Compute(3).Column=2
Fan.Discovery.Source(1).Compute(3).Replace="\\"
Fan.Discovery.Source(1).Compute(3).ReplaceBy="\"
//"

// Instance Table
// EnclosureID;NexusID;Name;PartNumber;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Fan.Discovery.Instance.AttachedToDeviceType="External Storage"

//
// Collect

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = Fan.Entry
// NexusID;Status;Value;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.7.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="16,14,11"

// Now, duplicate Status
// NexusID;Status;Status;Value;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate first Status into a PATROL status
// NexusID;PatrolStatus;Status;Value;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="ComponentStatusTranslationTable"

// The ComponentStatusTranslationTable
ComponentStatusTranslationTable(3)="OK"
ComponentStatusTranslationTable(4)="WARN"
ComponentStatusTranslationTable(5)="ALARM"
ComponentStatusTranslationTable(6)="ALARM"
ComponentStatusTranslationTable(Default)="UNKNOWN"

// Translate second Status into a statusInformation
// NexusID;PatrolStatus;StatusInformation;Value;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).TranslationTable="ComponentStatusInformationTranslationTable"

// The ComponentStatusInformationTranslationTable
ComponentStatusInformationTranslationTable(3)=""
ComponentStatusInformationTranslationTable(4)="Non-Critical Fault"
ComponentStatusInformationTranslationTable(5)="Critical Fault"
ComponentStatusInformationTranslationTable(6)="Non-Recoverable Fault"
ComponentStatusInformationTranslationTable(Default)="Unknown Status"

// Replace double slashes with single.
// NexusID;PatrolStatus;StatusInformation;Value;
Fan.Collect.Source(1).Compute(4).Type="Replace"
Fan.Collect.Source(1).Compute(4).Column=1
Fan.Collect.Source(1).Compute(4).Replace="\\"
Fan.Collect.Source(1).Compute(4).ReplaceBy="\"
//"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)
Fan.Collect.Speed=ValueTable.Column(4)

//
// PowerSupply
//

// Source(1) = PowerSupply.Entry
// NexusID;Name;PartNumber;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.9.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="10,2,6"

// Extract the EnclosureID;
// EnclosureID;NexusID;Name;PartNumber;
PowerSupply.Discovery.Source(1).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
PowerSupply.Discovery.Source(1).Compute(1).Separators=";"
PowerSupply.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// Add Part Number:
// EnclosureID;NexusID;Name;PartNumber;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).String="Part Number: "

// Replace double slashes with single.
// EnclosureID;NexusID;Name;PartNumber;
PowerSupply.Discovery.Source(1).Compute(3).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(3).Column=2
PowerSupply.Discovery.Source(1).Compute(3).Replace="\\"
PowerSupply.Discovery.Source(1).Compute(3).ReplaceBy="\"
//"

// Instance Table
// EnclosureID;NexusID;Name;PartNumber;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AttachedToDeviceType="External Storage"

//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = PowerSupply.Entry
// NexusID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.9.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="10,8"

// Now, duplicate Status
// NexusID;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate first Status into PATROL status
// NexusID;PatrolStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="ComponentStatusTranslationTable"

// Translate second Status into a statusInformation
// NexusID;PatrolStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="ComponentStatusInformationTranslationTable"

// Replace double slashes with single.
// NexusID;PatrolStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(4).Type="Replace"
PowerSupply.Collect.Source(1).Compute(4).Column=1
PowerSupply.Collect.Source(1).Compute(4).Replace="\\"
PowerSupply.Collect.Source(1).Compute(4).ReplaceBy="\"
//"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

//
// Temperature
//

// Source(1) = Temperature.Entry
// NexusID;Name;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.11.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="14,2"

// Extract the EnclosureID;
// EnclosureID;NexusID;Name;
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// Replace double slashes with single.
// EnclosureID;NexusID;Name;PartNumber;
Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column=2
Temperature.Discovery.Source(1).Compute(2).Replace="\\"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy="\"
//"

// Instance Table
// EnclosureID;NexusID;Name;PartNumber;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.AttachedToDeviceType="External Storage"

//
// Collect

// Collect type is multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = Temperature.Entry
// NexusID;Status;Value;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.11.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="14,12,11"

// Now, duplicate Status
// NexusID;Status;Status;Value;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=2

// Translate first Status into a PATROL status
// NexusID;PatrolStatus;Status;Value;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=2
Temperature.Collect.Source(1).Compute(2).TranslationTable="ComponentStatusTranslationTable"

// Translate second Status into a statusInformation
// NexusID;PatrolStatus;StatusInformation;Value;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=3
Temperature.Collect.Source(1).Compute(3).TranslationTable="ComponentStatusInformationTranslationTable"

// Replace double slashes with single.
// NexusID;PatrolStatus;StatusInformation;Value;
Temperature.Collect.Source(1).Compute(4).Type="Replace"
Temperature.Collect.Source(1).Compute(4).Column=1
Temperature.Collect.Source(1).Compute(4).Replace="\\"
Temperature.Collect.Source(1).Compute(4).ReplaceBy="\"
//"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)
Temperature.Collect.Temperature=ValueTable.Column(4)

//
// OtherDevice
//

// Source(1) = OtherDevice.Entry
// NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.13.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="12,2,6,7"

// Extract the EnclosureID;
// EnclosureID;NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.Source(1).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
OtherDevice.Discovery.Source(1).Compute(1).Separators=";"
OtherDevice.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6"

// Add Part Number:
// EnclosureID;NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.Source(1).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(2).Column=4
OtherDevice.Discovery.Source(1).Compute(2).String="Part Number: "

// Replace double slashes with single.
// EnclosureID;NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.Source(1).Compute(3).Type="Replace"
OtherDevice.Discovery.Source(1).Compute(3).Column=2
OtherDevice.Discovery.Source(1).Compute(3).Replace="\\"
OtherDevice.Discovery.Source(1).Compute(3).ReplaceBy="\"
//"

// Translate Type
// EnclosureID;NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.Source(1).Compute(4).Type="Translate"
OtherDevice.Discovery.Source(1).Compute(4).Column=5
OtherDevice.Discovery.Source(1).Compute(4).TranslationTable="TypeTranslationTable"

// The TypeTranslationTable
TypeTranslationTable(0)=""
TypeTranslationTable(1)="EMM"
TypeTranslationTable(2)="Termination Card"
TypeTranslationTable(Default)=""

// Instance Table
// EnclosureID;NexusID;Name;PartNumber;Type;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.AttachedToDeviceType="External Storage"

//
// Collect

// Collect type is multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = OtherDevice.Entry
// NexusID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10893.1.20.130.13.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="12,10"

// Now, duplicate Status
// NexusID;Status;Status;
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column=2

// Translate first Status into a PATROL status
// NexusID;PatrolStatus;Status;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=2
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="ComponentStatusTranslationTable"

// Translate second Status into a statusInformation
// NexusID;PatrolStatus;StatusInformation;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=3
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="ComponentStatusInformationTranslationTable"

// Replace double slashes with single.
// NexusID;PatrolStatus;StatusInformation;
OtherDevice.Collect.Source(1).Compute(4).Type="Replace"
OtherDevice.Collect.Source(1).Compute(4).Column=1
OtherDevice.Collect.Source(1).Compute(4).Replace="\\"
OtherDevice.Collect.Source(1).Compute(4).ReplaceBy="\"
//"

// ValueTable = Source(1)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script for Physical Disk Discovery
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";"}
$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/ {
	ID = $1
	DiskNumber = $2
	DiskName = $3
	Vendor = $4 ; gsub ("\\(tm\\)","",Vendor);
	Model = $5
	Serial = $6
	Size = $7
	BusType = $8
	NexusID = $9 ; gsub ("\\\\\\\\","\\",NexusID);
	PartNumber = $10 ; PartNumber = "Part Number: " PartNumber
	PredictedFailure = $11
#	DiskNumber = $12
	ControllerNumber = $13

	Model = "Model: " Model " " BusType

	if ( NexusID ~ "^\\\\0" ) { EnclosureID = "" }
		else { EnclosureID = NexusID ; gsub("\\\\[0-9]+$","",EnclosureID);
			     ControllerNumber = ""
			   }
	DisplayID = NexusID ; gsub("^\\\\[0-9]+\\\\","",DisplayID) ; gsub("\\\\",":",DisplayID);

	print "MSHW;" EnclosureID ";" DisplayID ";" DiskName ";" Vendor ";" Model ";" Serial ";" Size ";" BusType ";" NexusID ";" PartNumber ";" PredictedFailure ";" ControllerNumber ";"
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script for Fans, Temperatures, Power Supplies etc.
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS=";"}
$1 ~ "^\\\\" { NexusID = $1 ; gsub ("\\\\\\\\","\\",NexusID)
	             EnclosureID = NexusID ; gsub("\\\\[0-9]+$","",EnclosureID);
	             print "MSHW;" EnclosureID ";" $0
	           }
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
