//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                MS_HW_WBEMGenHBA.hdf
//
//      Supports: any NT/2000/2K3 machine with the WINMGMT (WBEM) service running
//
//


// HEADER

hdf.DisplayName="WMI - LUN"
hdf.TypicalPlatform="Any system"
hdf.ReliesOn="WMI"
hdf.Version="0.9"
hdf.Comments="This connector provides the monitoring of LUNs on all Windows-based systems through the WMI layer (root/WMI namespace)."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT"

//
// DETECTION
//

// OS must be Windows NT-derivative
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="NT"

// WMI must be available
Detection.Criteria(2).Type="Service"
Detection.Criteria(2).ServiceName="WINMGMT"

// The root\wmi namespace must have the MPIO_DISK_INFO
Detection.Criteria(3).Type="WMI"
Detection.Criteria(3).WbemQuery="SELECT NumberDrives,DriveInfo.Name FROM MPIO_DISK_INFO"
Detection.Criteria(3).WbemNameSpace="root\wmi"
Detection.Criteria(3).ExpectedResult="^[1-9][0-9]*;[^;].*;$"


// LUN

//
// Discovery

// Source (1) = MPIO_DISK_INFO
// LunIdArray;LunPathCount;LunNaaID;
LUN.Discovery.Source(1).Type="WMI"
LUN.Discovery.Source(1).WbemNameSpace="root\wmi"
LUN.Discovery.Source(1).WbemQuery="SELECT DriveInfo.Name,DriveInfo.NumberPaths,DriveInfo.SerialNumber FROM MPIO_DISK_INFO"

// Take the list of volumes and associated them to the MPIO disk.
// MPIOID;LunPathCount;NAAID;
LUN.Discovery.Source(1).Compute(1).Type="Awk"
LUN.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(1).Compute(1).Separators=";"
LUN.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// Source (2) = Win32_LogicalDisk
// Win32_LogicalDisk;PartitionLetter;PartitionName;
LUN.Discovery.Source(2).Type="WMI"
LUN.Discovery.Source(2).WbemNameSpace="root\cimv2"
LUN.Discovery.Source(2).WbemQuery="SELECT __PATH,Name,VolumeName FROM Win32_LogicalDisk"

// Source (3) = Win32_LogicalDiskToPartition
// Win32_DiskPartition;Win32_LogicalDisk;
LUN.Discovery.Source(3).Type="WMI"
LUN.Discovery.Source(3).WbemNameSpace="root\cimv2"
LUN.Discovery.Source(3).WbemQuery="SELECT Antecedent,Dependent FROM Win32_LogicalDiskToPartition"

// Source (4) = Win32_LogicalDiskToPartition
// Win32_DiskDrive;Win32_DiskPartition;
LUN.Discovery.Source(4).Type="WMI"
LUN.Discovery.Source(4).WbemNameSpace="root\cimv2"
LUN.Discovery.Source(4).WbemQuery="SELECT Antecedent,Dependent FROM Win32_DiskDriveToDiskPartition"

// Source 5 = Win32_DiskDrive
// Win32_DiskDrive;PhysicalDiskName;PnPAddress;
LUN.Discovery.Source(5).Type="WMI"
LUN.Discovery.Source(5).WbemNameSpace="root\cimv2"
LUN.Discovery.Source(5).WbemQuery="SELECT __PATH,Name,PNPDeviceID FROM Win32_DiskDrive"

// Add a _0 to the Win32_DiskDrive PNPAddress so that it matches
// Win32_DiskDrive;PhysicalDiskName;PnPAddress;
LUN.Discovery.Source(5).Compute(1).Type="RightConcat"
LUN.Discovery.Source(5).Compute(1).Column=3
LUN.Discovery.Source(5).Compute(1).String="_0"


// Source 6 = MPIO_GET_DESCRIPTOR
// LunId(WithDevice);PnPAddress;
LUN.Discovery.Source(6).Type="WMI"
LUN.Discovery.Source(6).WbemNameSpace="root\wmi"
LUN.Discovery.Source(6).WbemQuery="SELECT DeviceName,InstanceName FROM MPIO_GET_DESCRIPTOR"

// To upper the PnPAddress
// LunId(WithDevice);PnPAddress;
LUN.Discovery.Source(6).Compute(1).Type="Awk"
LUN.Discovery.Source(6).Compute(1).AwkScript=EmbeddedFile(3)
LUN.Discovery.Source(6).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(6).Compute(1).Separators=";"
LUN.Discovery.Source(6).Compute(1).SelectColumns="2,3"

// Source 7 = 2 Joined to 3 with Win32_LogicalDisk
// Win32_LogicalDisk;PartitionLetter;PartitionName;Win32_DiskPartition;Win32_LogicalDisk;
LUN.Discovery.Source(7).Type="TableJoint"
LUN.Discovery.Source(7).LeftTable=%LUN.Discovery.Source(2)%
LUN.Discovery.Source(7).RightTable=%LUN.Discovery.Source(3)%
LUN.Discovery.Source(7).LeftKeyColumn=1
LUN.Discovery.Source(7).RightKeyColumn=2
LUN.Discovery.Source(7).KeyType="Wbem"

// Source 8 = 7 Joined to 4 with Win32_DiskPartition
//          1                2            3                      4              5                6              7
// Win32_LogicalDisk;PartitionLetter;PartitionName;Win32_DiskPartition;Win32_LogicalDisk;Win32_DiskDrive;Win32_DiskPartition;
LUN.Discovery.Source(8).Type="TableJoint"
LUN.Discovery.Source(8).LeftTable=%LUN.Discovery.Source(7)%
LUN.Discovery.Source(8).RightTable=%LUN.Discovery.Source(4)%
LUN.Discovery.Source(8).LeftKeyColumn=4
LUN.Discovery.Source(8).RightKeyColumn=2
LUN.Discovery.Source(8).KeyType="Wbem"

// Source 9 = 8 Joined to 5 with Win32_DiskDrive
//          1                2            3                      4              5                6              7                    8                 9          10
// Win32_LogicalDisk;PartitionLetter;PartitionName;Win32_DiskPartition;Win32_LogicalDisk;Win32_DiskDrive;Win32_DiskPartition;Win32_DiskDrive;PhysicalDiskName;PnPAddress;
LUN.Discovery.Source(9).Type="TableJoint"
LUN.Discovery.Source(9).LeftTable=%LUN.Discovery.Source(8)%
LUN.Discovery.Source(9).RightTable=%LUN.Discovery.Source(5)%
LUN.Discovery.Source(9).LeftKeyColumn=6
LUN.Discovery.Source(9).RightKeyColumn=1
LUN.Discovery.Source(9).KeyType="Wbem"

// Source 10 = 9 Joined to 5 with PnPAddress
//          1                2            3                      4              5                6              7                    8                 9          10           11             12
// Win32_LogicalDisk;PartitionLetter;PartitionName;Win32_DiskPartition;Win32_LogicalDisk;Win32_DiskDrive;Win32_DiskPartition;Win32_DiskDrive;PhysicalDiskName;PnPAddress;LunId(WithDevice);PnPAddress;
LUN.Discovery.Source(10).Type="TableJoint"
LUN.Discovery.Source(10).LeftTable=%LUN.Discovery.Source(9)%
LUN.Discovery.Source(10).RightTable=%LUN.Discovery.Source(6)%
LUN.Discovery.Source(10).LeftKeyColumn=10
LUN.Discovery.Source(10).RightKeyColumn=2
// LUN.Discovery.Source(10).KeyType="Wbem"

// Trim down to what we need
//FROM        1                2            3                      4              5                6              7                    8                 9          10           11             12
// Win32_LogicalDisk;PartitionLetter;PartitionName;Win32_DiskPartition;Win32_LogicalDisk;Win32_DiskDrive;Win32_DiskPartition;Win32_DiskDrive;PhysicalDiskName;PnPAddress;LunId(WithDevice);PnPAddress;
//TO
// PartitionLetter;PartitionName;LunId(WithDevice);
LUN.Discovery.Source(10).Compute(1).Type="KeepColumns"
LUN.Discovery.Source(10).Compute(1).ColumnNumbers="2,3,11"

// Take the list of volumes and associated them to the MPIO disk.
// MPIOID;VolumeList;
LUN.Discovery.Source(10).Compute(2).Type="Awk"
LUN.Discovery.Source(10).Compute(2).AwkScript=EmbeddedFile(2)
LUN.Discovery.Source(10).Compute(2).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(10).Compute(2).Separators=";"
LUN.Discovery.Source(10).Compute(2).SelectColumns="2,3"

// Join the MPIO Discovered list with the Volume List
// MPIOID;LunPathCount;NAAID;MPIOID;VolumeList;
LUN.Discovery.Source(11).Type="TableJoint"
LUN.Discovery.Source(11).LeftTable=%LUN.Discovery.Source(1)%
LUN.Discovery.Source(11).RightTable=%LUN.Discovery.Source(10)%
LUN.Discovery.Source(11).LeftKeyColumn=1
LUN.Discovery.Source(11).RightKeyColumn=1
LUN.Discovery.Source(11).DefaultRightLine=";No Volumes;"

// Right concat " - " to the first MPIO ID
// MPIOID;LunPathCount;NAAID;MPIOID;VolumeList;
LUN.Discovery.Source(11).Compute(1).Type="RightConcat"
LUN.Discovery.Source(11).Compute(1).Column=1
LUN.Discovery.Source(11).Compute(1).String=" - "

// Right concat the volume list to the first MPIO ID
// MPIOID-VolumeList;LunPathCount;NAAID;MPIOID;VolumeList;
LUN.Discovery.Source(11).Compute(2).Type="RightConcat"
LUN.Discovery.Source(11).Compute(2).Column=1
LUN.Discovery.Source(11).Compute(2).String=Column(5)

// InstanceTable = Source(1)
// MPIOID-VolumeList;LunPathCount;NAAID;MPIOID;VolumeList;
LUN.Discovery.InstanceTable=%LUN.Discovery.Source(11)%
LUN.Discovery.Instance.DeviceID=InstanceTable.Column(3)
LUN.Discovery.Instance.DisplayID=InstanceTable.Column(3)
LUN.Discovery.Instance.LocalDeviceName=InstanceTable.Column(1)




//
// COLLECT

// Collect type is multi-instance
LUN.Collect.Type="MultiInstance"

// Source (1) = MPIO_DISK_INFO
// LunIdArray;LunPathCount;LunNaaID;
LUN.Collect.Source(1).Type="WMI"
LUN.Collect.Source(1).WbemNameSpace="root\wmi"
LUN.Collect.Source(1).WbemQuery="SELECT DriveInfo.Name,DriveInfo.NumberPaths,DriveInfo.SerialNumber FROM MPIO_DISK_INFO"

// Take the list of volumes and associated them to the MPIO disk.
// MPIOID;LunPathCount;NAAID;
LUN.Collect.Source(1).Compute(1).Type="Awk"
LUN.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Collect.Source(1).Compute(1).Separators=";"
LUN.Collect.Source(1).Compute(1).SelectColumns="2,3,4"


// ValueTable = Source(1)
// LUNID;NumberPaths
LUN.Collect.ValueTable=%LUN.Collect.Source(1)%
LUN.Collect.DeviceID=ValueTable.Column(3)
LUN.Collect.AvailablePathCount=ValueTable.Column(2)


/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    Takes the Array returned from MPIO_DISK_INFO and returns each disk seperately
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[;]"}
	{split($1,LunIdArray,"[|]") ;
	 split($2,LunPathCountArray,"[|]") ;
	 split($3,LunNaaIDArray,"[|]") ;
	}

END {for (MPIOID in LunIdArray)
        if ( LunIdArray[MPIOID] != "" ) {print ("MSHW;" LunIdArray[MPIOID] ";" LunPathCountArray[MPIOID] ";" "naa." LunNaaIDArray[MPIOID] ";" ) }
        }
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///    Creates a list of Windows Volumes associated with each MPIO disk
///
/////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS="[;]"}
$3 ~ /.Device.MPIO/ { DriveLetter = $1
	                    DriveName = $2
	                    MPIOID = $3 ; gsub (".*MPIO","MPIO ",MPIOID)
	                    MPIOInfo[MPIOID] = MPIOInfo[MPIOID] DriveLetter " (" DriveName ") "
	                  }
END { for (MPIOID in MPIOInfo) {
          if ( MPIOInfo[MPIOID] != "" ) {print ("MSHW;" MPIOID ";" MPIOInfo[MPIOID] ";" ) }
      }
    }
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///    To upper
///
/////////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN {FS="[;]"}
$1 ~ /.Device.MPIO/ { print ( "MSHW;" $1 ";" toupper($2) ";") }
EmbeddedFile(3).End
///////////////////////////////////////////////////////////////
