//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_LenovoIMM.hdf
//
//      Connects to: Lenovo IMMs
//


// Header

hdf.DisplayName="Lenovo IMM (SNMP)"
hdf.TypicalPlatform="Lenovo"
hdf.ReliesOn="Lenovo IMM's SNMP Service"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through Lenovo's IMM management card.  The connector also usually works with the last generation of IBM xSeries servers (m5)."
hdf.RemoteSupport="true"
hdf.AppliesToOS="OOB"
hdf.Supersedes="MS_HW_IpmiTool.hdf,MS_HW_Director52ServeRAIDLinux.hdf"

// Detection
// Look for a CPU (Indicates an m5 or later server) with a status
// Servers without this OID generally do not have enough information available from SNMP and IPMI-over-LAN should be used.
Detection.Criteria(1).Type="SNMP"
// Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2.3.51.3.1.5.20.1.11"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2.3.51.3.1"

// Enclosure: computer

// Get the model code in the chassis table
// ModelNumberPart1;ModelNumberPart2;SerialNumber;ModelName;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.5.2.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,5"
Enclosure.Discovery.Source(1).ForceSerialization=1

// Add Part2 of the Model to Part One
// ModelNumber;ModelNumberPart2;SerialNumber;ModelName;
Enclosure.Discovery.Source(1).Compute(1).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="-"

Enclosure.Discovery.Source(1).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=1
Enclosure.Discovery.Source(1).Compute(2).String=Column(2)

// ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID
Enclosure.Discovery.Source(1).Compute(3).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(3).Column=4
Enclosure.Discovery.Source(1).Compute(3).String=";Server"

//Enclosure power consumption
//PowerConsumption
Enclosure.Discovery.Source(2).Type="SnmpGet"
Enclosure.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.2.3.51.3.1.10.1.10.0"
Enclosure.Discovery.Source(2).ForceSerialization=1

//Add Id for the tablejoin
//ID;PowerConsumption
Enclosure.Discovery.Source(2).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).String="Server;"

// Join the Chassis to the Power Consumption
// ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID;ID;PowerConsumption
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=5
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;"


// Now we have what is necessary to define the computer model
// ModelNumber;ModelNumberPart2;SerialNumber;ModelName;ID;ID;PowerConsumption
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID="Server"
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Vendor="Lenovo"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(7)

//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MultiInstance"

// CurrentReading;
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.10.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="10"
Enclosure.Collect.Source(1).ForceSerialization=1

// ValueTable = Source(1)
// CurrentReading;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID="Server"
Enclosure.Collect.PowerConsumption=ValueTable.Column(1)

// TEMPERATURES

// Temperature discovery

// Source(1)
// Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.1.2.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="2,6,7,11,3"
Temperature.Discovery.Source(1).ForceSerialization=1

// Remove Thresholds and Current Readings of Zero
// Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
Temperature.Discovery.Source(1).Compute(1).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(1).Column=2
Temperature.Discovery.Source(1).Compute(1).String="MSHW_"

Temperature.Discovery.Source(1).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(2).Column=3
Temperature.Discovery.Source(1).Compute(2).String="MSHW_"

Temperature.Discovery.Source(1).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(3).Column=5
Temperature.Discovery.Source(1).Compute(3).String="MSHW_"

// Remove 0 value
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=2
Temperature.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(5).Type="Replace"
Temperature.Discovery.Source(1).Compute(5).Column=3
Temperature.Discovery.Source(1).Compute(5).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(5).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(6).Type="Replace"
Temperature.Discovery.Source(1).Compute(6).Column=5
Temperature.Discovery.Source(1).Compute(6).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(6).ReplaceBy=""

// Remove MSHW_ for non 0 values
Temperature.Discovery.Source(1).Compute(7).Type="Replace"
Temperature.Discovery.Source(1).Compute(7).Column=2
Temperature.Discovery.Source(1).Compute(7).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(7).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(8).Type="Replace"
Temperature.Discovery.Source(1).Compute(8).Column=3
Temperature.Discovery.Source(1).Compute(8).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(8).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(9).Type="Replace"
Temperature.Discovery.Source(1).Compute(9).Column=5
Temperature.Discovery.Source(1).Compute(9).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(9).ReplaceBy=""

// Blank Status of Unknown
// Description;AlarmThreshold;WarningThreshold;Status;CurrentReading;
Temperature.Discovery.Source(1).Compute(10).Type="Replace"
Temperature.Discovery.Source(1).Compute(10).Column=4
Temperature.Discovery.Source(1).Compute(10).Replace="Unknown"
Temperature.Discovery.Source(1).Compute(10).ReplaceBy=""

// Now transfor Status into an overall instance activation
// Description;AlarmThreshold;WarningThreshold;InstanceActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(11).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(11).Column=4
Temperature.Discovery.Source(1).Compute(11).String=Column(5)

// Keep only instances with either a valid current reading or status
// Description;AlarmThreshold;WarningThreshold;InstanceActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(12).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(12).Column=4
Temperature.Discovery.Source(1).Compute(12).RegExp="."

// OK, we've eliminated instances with no temperature or status, now let's reuse column 4 for status
// activation.  We're only going to activate status if there is no numeric thresholds.

// Set Status to Alarm Threshold
// Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(13).Type="Replace"
Temperature.Discovery.Source(1).Compute(13).Column=4
Temperature.Discovery.Source(1).Compute(13).Replace=Column(4)
Temperature.Discovery.Source(1).Compute(13).ReplaceBy=Column(2)

// Add the warning threshold
// Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(14).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(14).Column=4
Temperature.Discovery.Source(1).Compute(14).String=Column(3)

// Add MSHW to both sides
Temperature.Discovery.Source(1).Compute(15).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(15).Column=4
Temperature.Discovery.Source(1).Compute(15).String="MSHW"

Temperature.Discovery.Source(1).Compute(16).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(16).Column=4
Temperature.Discovery.Source(1).Compute(16).String="MSHW"

// If the result is MSHWMSHW (i.e. no current reading, replace with NoCurrentReading
// Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(17).Type="Replace"
Temperature.Discovery.Source(1).Compute(17).Column=4
Temperature.Discovery.Source(1).Compute(17).Replace="MSHWMSHW"
Temperature.Discovery.Source(1).Compute(17).ReplaceBy="NoCurrentReading"

// Now remove the warning, alarm and MSHW from the Status Activation
// Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
Temperature.Discovery.Source(1).Compute(18).Type="Replace"
Temperature.Discovery.Source(1).Compute(18).Column=4
Temperature.Discovery.Source(1).Compute(18).Replace=Column(3)
Temperature.Discovery.Source(1).Compute(18).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(19).Type="Replace"
Temperature.Discovery.Source(1).Compute(19).Column=4
Temperature.Discovery.Source(1).Compute(19).Replace=Column(2)
Temperature.Discovery.Source(1).Compute(19).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(20).Type="Replace"
Temperature.Discovery.Source(1).Compute(20).Column=4
Temperature.Discovery.Source(1).Compute(20).Replace="MSHW"
Temperature.Discovery.Source(1).Compute(20).ReplaceBy=""


// Instance table = Source(1)
// Description;AlarmThreshold;WarningThreshold;StatusActivation;CurrentReading;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(2)
// Activate Temperature if a current reading exists
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(5)
// Activate Status only if no thresholds exist
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(4)


// Temperature collect

// Collect type is MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1)
// Description;CurrentReading;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.1.2.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="2,3,11"
Temperature.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;CurrentReading;Status;Status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=3

// Translate Status into PATROLStatus
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// And Finally, remove Temp from the ID
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(3).Type="Replace"
Temperature.Collect.Source(1).Compute(3).Column=1
Temperature.Collect.Source(1).Compute(3).Replace=" Temp"
Temperature.Collect.Source(1).Compute(3).ReplaceBy=""


// The ValueTable = Source(1)
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)

// Fans

// Fan discovery

// Source(1)
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.3.2.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="2,10,3"
Fan.Discovery.Source(1).ForceSerialization=1

// remove tach from the ID
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(1).Compute(1).Type="Replace"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).Replace=" Tach"
Fan.Discovery.Source(1).Compute(1).ReplaceBy=""

// Copy to only get discrete sensors
Fan.Discovery.Source(2)=%Fan.Discovery.Source(1)%

// Exclude fans with an unknown status
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(2).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(2).Compute(1).Column=2
Fan.Discovery.Source(2).Compute(1).ValueList="Unknown"

// Keep only fans with a status
Fan.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(2).Compute(2).Column=2
Fan.Discovery.Source(2).Compute(2).RegExp="."

// Blank the SpeedPercent
Fan.Discovery.Source(2).Compute(3).Type="Replace"
Fan.Discovery.Source(2).Compute(3).Column=3
Fan.Discovery.Source(2).Compute(3).Replace="offline"
Fan.Discovery.Source(2).Compute(3).ReplaceBy=""

Fan.Discovery.Source(2).Compute(4).Type="Replace"
Fan.Discovery.Source(2).Compute(4).Column=3
Fan.Discovery.Source(2).Compute(4).Replace="Unavailable"
Fan.Discovery.Source(2).Compute(4).ReplaceBy=""

// Copy to only get unknown sensors
Fan.Discovery.Source(3)=%Fan.Discovery.Source(1)%

// KeepOnly fans with an unknown status
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(3).Compute(1).Column=2
Fan.Discovery.Source(3).Compute(1).ValueList="Unknown"

// Keep only fans with a SpeedPercent
Fan.Discovery.Source(3).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(3).Compute(2).Column=3
Fan.Discovery.Source(3).Compute(2).RegExp="."

// Blank the status
Fan.Discovery.Source(3).Compute(3).Type="Replace"
Fan.Discovery.Source(3).Compute(3).Column=2
Fan.Discovery.Source(3).Compute(3).Replace=column(2)
Fan.Discovery.Source(3).Compute(3).ReplaceBy=""

// Exclude fans with unavailable or offline speed
Fan.Discovery.Source(3).Compute(4).Type="ExcludeMatchingLines"
Fan.Discovery.Source(3).Compute(4).Column=3
Fan.Discovery.Source(3).Compute(4).ValueList="Unavailable,offline"

// Copy to only get unknown sensors
Fan.Discovery.Source(4)=%Fan.Discovery.Source(1)%

// KeepOnly fans with an blank status
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(4).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(4).Compute(1).Column=2
Fan.Discovery.Source(4).Compute(1).RegExp="."

// Keep only fans with a SpeedPercent
Fan.Discovery.Source(4).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(4).Compute(2).Column=3
Fan.Discovery.Source(4).Compute(2).RegExp="."

// Blank the status
Fan.Discovery.Source(4).Compute(3).Type="Replace"
Fan.Discovery.Source(4).Compute(3).Column=2
Fan.Discovery.Source(4).Compute(3).Replace=column(2)
Fan.Discovery.Source(4).Compute(3).ReplaceBy=""

// Exclude fans with unavailable speed
Fan.Discovery.Source(4).Compute(4).Type="ExcludeMatchingLines"
Fan.Discovery.Source(4).Compute(4).Column=3
Fan.Discovery.Source(4).Compute(4).ValueList="Unavailable"

// Union 1 , 2 and 3
// Description;FanStatus;SpeedPercent;
Fan.Discovery.Source(5).Type="TableUnion"
Fan.Discovery.Source(5).Table1=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(5).Table2=%Fan.Discovery.Source(3)%
Fan.Discovery.Source(5).Table3=%Fan.Discovery.Source(4)%



Fan.Discovery.Source(5).Compute(1).Type="Replace"
Fan.Discovery.Source(5).Compute(1).Column=3
Fan.Discovery.Source(5).Compute(1).Replace="ofmaximum"
Fan.Discovery.Source(5).Compute(1).ReplaceBy=""


// Instance table = Source(4)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(5)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(2)
Fan.Discovery.Instance.ParameterActivation.SpeedPercent=InstanceTable.Column(3)

// Fan collect

// Collect type is MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;SpeedPercent;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.3.2.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="2,10,3"
Fan.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;SpeedPercent;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;SpeedPercent;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Remove Tach from the ID
// Description;PATROLStatus;Status;SpeedPercent;
Fan.Collect.Source(1).Compute(3).Type="Replace"
Fan.Collect.Source(1).Compute(3).Column=1
Fan.Collect.Source(1).Compute(3).Replace=" Tach"
Fan.Collect.Source(1).Compute(3).ReplaceBy=""

// Remove Spaces and Percentage signs from SpeedPercent
// Description;PATROLStatus;Status;SpeedPercent;
Fan.Collect.Source(1).Compute(4).Type="Replace"
Fan.Collect.Source(1).Compute(4).Column=4
Fan.Collect.Source(1).Compute(4).Replace="%%"
Fan.Collect.Source(1).Compute(4).ReplaceBy=""

Fan.Collect.Source(1).Compute(5).Type="Replace"
Fan.Collect.Source(1).Compute(5).Column=4
Fan.Collect.Source(1).Compute(5).Replace=" "
Fan.Collect.Source(1).Compute(5).ReplaceBy=""

Fan.Collect.Source(1).Compute(6).Type="Replace"
Fan.Collect.Source(1).Compute(6).Column=4
Fan.Collect.Source(1).Compute(6).Replace="ofmaximum"
Fan.Collect.Source(1).Compute(6).ReplaceBy=""


// The ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)
Fan.Collect.SpeedPercent=ValueTable.Column(4)

// Voltages

// Voltage discovery

// Source(1)
// Description;LowerThreshold;UpperThreshold;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.2.2.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="2,9,6"
Voltage.Discovery.Source(1).ForceSerialization=1

// Blank zero thresholds
// Description;LowerThreshold;UpperThreshold;
Voltage.Discovery.Source(1).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(1).Compute(1).Column=2
Voltage.Discovery.Source(1).Compute(1).String="MSHW_"

Voltage.Discovery.Source(1).Compute(2).Type="LeftConcat"
Voltage.Discovery.Source(1).Compute(2).Column=3
Voltage.Discovery.Source(1).Compute(2).String="MSHW_"

// Remove 0 value
Voltage.Discovery.Source(1).Compute(3).Type="Replace"
Voltage.Discovery.Source(1).Compute(3).Column=2
Voltage.Discovery.Source(1).Compute(3).Replace="MSHW_0"
Voltage.Discovery.Source(1).Compute(3).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(4).Type="Replace"
Voltage.Discovery.Source(1).Compute(4).Column=3
Voltage.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Voltage.Discovery.Source(1).Compute(4).ReplaceBy=""

// Remove MSHW_ for non 0 values
Voltage.Discovery.Source(1).Compute(5).Type="Replace"
Voltage.Discovery.Source(1).Compute(5).Column=2
Voltage.Discovery.Source(1).Compute(5).Replace="MSHW_"
Voltage.Discovery.Source(1).Compute(5).ReplaceBy=""

Voltage.Discovery.Source(1).Compute(6).Type="Replace"
Voltage.Discovery.Source(1).Compute(6).Column=3
Voltage.Discovery.Source(1).Compute(6).Replace="MSHW_"
Voltage.Discovery.Source(1).Compute(6).ReplaceBy=""


// Instance table = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(2)

// Voltage collect

// Collect type is MultiInstance
Voltage.Collect.Type="MultiInstance"

// Source(1)
// Description;CurrentReading;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.2.2.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="2,3"
Voltage.Collect.Source(1).ForceSerialization=1

// The ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)


//
// CPUs
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.Source(1).Type="SnmpTable"
cpu.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.5.20.1"
cpu.Discovery.Source(1).SnmpTableSelectColumns="2,3,6,7,8,11"
cpu.Discovery.Source(1).ForceSerialization=1

// Exclude cpu with an unknown status
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
cpu.Discovery.Source(1).Compute(1).Column=6
cpu.Discovery.Source(1).Compute(1).ValueList="Unknown"

// Add some descriptors
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.Source(1).Compute(2).Type="LeftConcat"
cpu.Discovery.Source(1).Compute(2).Column=4
cpu.Discovery.Source(1).Compute(2).String="Cores: "

cpu.Discovery.Source(1).Compute(3).Type="LeftConcat"
cpu.Discovery.Source(1).Compute(3).Column=5
cpu.Discovery.Source(1).Compute(3).String="Threads: "


// InstanceTable = Source(1)
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(1)
cpu.Discovery.Instance.DisplayID=InstanceTable.Column(1)
cpu.Discovery.Instance.Model=InstanceTable.Column(3)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(2)
cpu.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
cpu.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
cpu.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)

// Fan collect

// Collect type is MultiInstance
cpu.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
cpu.Collect.Source(1).Type="SnmpTable"
cpu.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.5.20.1"
cpu.Collect.Source(1).SnmpTableSelectColumns="2,11"
cpu.collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
cpu.Collect.Source(1).Compute(2).Type="Translate"
cpu.Collect.Source(1).Compute(2).Column=2
cpu.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(2)
cpu.Collect.StatusInformation=ValueTable.Column(3)



//
// Memory
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;PartNumber;SerialNumber;Type;Size;Status;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.5.21.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="2,3,4,6,7,8"
Memory.Discovery.Source(1).ForceSerialization=1

// Exclude Memory with an unknown status
// Description;PartNumber;SerialNumber;Type;Size;Status;
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=6
Memory.Discovery.Source(1).Compute(1).ValueList="Unknown"

// Add some descriptors
// Description;PartNumber;SerialNumber;Type;Size;Status;
Memory.Discovery.Source(1).Compute(2).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(2).Column=2
Memory.Discovery.Source(1).Compute(2).String="Part Number: "

// Convert size from GB to MB
// Description;PartNumber;SerialNumber;Type;Size;Status;
Memory.Discovery.Source(1).Compute(3).Type="Multiply"
Memory.Discovery.Source(1).Compute(3).Column=5
Memory.Discovery.Source(1).Compute(3).MultiplyBy=1024

// InstanceTable = Source(1)
// Description;PartNumber;SerialNumber;Type;Size;Status;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Memory.Discovery.Instance.Type=InstanceTable.Column(4)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
Memory.Discovery.Instance.Size=InstanceTable.Column(5)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Memory.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)

// Memory collect

// Collect type is MultiInstance
Memory.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.5.21.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="2,8"
Memory.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)



//
// PowerSupplies
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.11.2.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="2,3,4,5,6"
PowerSupply.Discovery.Source(1).ForceSerialization=1

// Exclude PowerSupply with an unknown status
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=5
PowerSupply.Discovery.Source(1).Compute(1).ValueList="Unknown"

// Add some descriptors
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).String="Part Number: "

PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=3
PowerSupply.Discovery.Source(1).Compute(3).String="Alternative Part Number: "

PowerSupply.Discovery.Source(1).Compute(4).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(4).Column=4
PowerSupply.Discovery.Source(1).Compute(4).String="Serial Number: "

// InstanceTable = Source(1)
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(4)

// PowerSupply collect

// Collect type is MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.11.2.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="2,6"
PowerSupply.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
// DiskControllers
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.2.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="2,4,6,9,10,13"
DiskController.Discovery.Source(1).ForceSerialization=1

// Replace Unknown with blank to deactivate DiskController status
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.Source(1).Compute(1).Type="Replace"
DiskController.Discovery.Source(1).Compute(1).Column=6
DiskController.Discovery.Source(1).Compute(1).Replace="Unknown"
DiskController.Discovery.Source(1).Compute(1).ReplaceBy=""

// InstanceTable = Source(1)
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(1)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(3)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(2)
DiskController.Discovery.Instance.ParameterActivation.ControllerStatus=InstanceTable.Column(6)

// DiskController collect

// Collect type is MultiInstance
DiskController.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.2.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="2,13"
DiskController.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column=2
DiskController.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)

//
// LogicalDisks
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;ControllerName;Size;
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.7.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="2,3,5"
LogicalDisk.Discovery.Source(1).ForceSerialization=1

// Split the size units from the size
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
LogicalDisk.Discovery.Source(1).Compute(1).Column=3
LogicalDisk.Discovery.Source(1).Compute(1).Replace=" "
LogicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=";"

// Convert the Size units to a multiplier factor
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(2).Column=4
LogicalDisk.Discovery.Source(1).Compute(2).TranslationTable="SizeUnitsTranslationTable"

// The SizeUnitsTranslationTable
SizeUnitsTranslationTable("MB")="1048576"
SizeUnitsTranslationTable("GB")="1073741824"
SizeUnitsTranslationTable("TB")="1099511627776"
SizeUnitsTranslationTable(Default)="1"

// Multiply the Size by the Size Units Multiplier
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(3).Column=3
LogicalDisk.Discovery.Source(1).Compute(3).MultiplyBy=Column(4)

// InstanceTable = Source(1)
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.AttachedToDeviceType="DiskController"

// LogicalDisk collect

// Collect type is MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.7.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,4"
LogicalDisk.Collect.Source(1).ForceSerialization=1


// Duplicate status
// Description;Status;Status;
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// PhysicalDisks
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
//Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.3.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="2,3,5,7,8,9,11,13,14,17,18,19,12"
PhysicalDisk.Discovery.Source(1).ForceSerialization=1

// Split the size units from the size
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=13
PhysicalDisk.Discovery.Source(1).Compute(1).Replace=" "
PhysicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=";"

// Convert the Size units to a multiplier factor
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=14
PhysicalDisk.Discovery.Source(1).Compute(2).TranslationTable="SizeUnitsTranslationTable"

// Multiply the Size by the Size Units Multiplier
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=13
PhysicalDisk.Discovery.Source(1).Compute(3).MultiplyBy=Column(14)

// Create the Location
// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=3
PhysicalDisk.Discovery.Source(1).Compute(4).String=" - Slot: "

PhysicalDisk.Discovery.Source(1).Compute(5).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(5).Column=3
PhysicalDisk.Discovery.Source(1).Compute(5).String=Column(9)

PhysicalDisk.Discovery.Source(1).Compute(6).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(6).Column=3
PhysicalDisk.Discovery.Source(1).Compute(6).String="Enclosure: "

// Create Drive Type
// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(7).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(7).Column=4
PhysicalDisk.Discovery.Source(1).Compute(7).String=" - "

PhysicalDisk.Discovery.Source(1).Compute(8).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(8).Column=4
PhysicalDisk.Discovery.Source(1).Compute(8).String=Column(5)

PhysicalDisk.Discovery.Source(1).Compute(9).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(9).Column=4
PhysicalDisk.Discovery.Source(1).Compute(9).String=" - "

PhysicalDisk.Discovery.Source(1).Compute(10).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(10).Column=4
PhysicalDisk.Discovery.Source(1).Compute(10).String=Column(6)

PhysicalDisk.Discovery.Source(1).Compute(11).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(11).Column=4
PhysicalDisk.Discovery.Source(1).Compute(11).String="Speed: "

// Create the Model/FRU Number
PhysicalDisk.Discovery.Source(1).Compute(12).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(12).Column=11
PhysicalDisk.Discovery.Source(1).Compute(12).String=" - Alternative Part Number: "

PhysicalDisk.Discovery.Source(1).Compute(13).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(13).Column=11
PhysicalDisk.Discovery.Source(1).Compute(13).String=Column(12)

PhysicalDisk.Discovery.Source(1).Compute(14).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(14).Column=11
PhysicalDisk.Discovery.Source(1).Compute(14).String="Part Number: "


// Retrieve disks' FirmwareVersion
//DriveName;FirmwareVersion
PhysicalDisk.Discovery.Source(2).Type="SnmpTable"
PhysicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.5.1"
PhysicalDisk.Discovery.Source(2).SnmpTableSelectColumns="3,6"
PhysicalDisk.Discovery.Source(2).ForceSerialization=1


// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;DriveName;FirmwareVersion
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(3).RightKeyColumn=1
PhysicalDisk.Discovery.Source(3).DefaultRightLine=";;"


// InstanceTable = Source(3)
//Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;DriveName;FirmwareVersion
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(13)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(16)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(11)



// PhysicalDisk collect

// Collect type is MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.3.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,4"
PhysicalDisk.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
// Batteries
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Model;Manufacturer;Status:Serial;
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.2.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="2,22,23,24,27"
Battery.Discovery.Source(1).ForceSerialization=1

// Exclude Battery with an unknown status
// Description;PartNumber;Vendor;Status;SerialNumber;
Battery.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=4
Battery.Discovery.Source(1).Compute(1).ValueList="Unknown"

// Add some descriptors
// Description;PartNumber;Vendor;Status;SerialNumber;
Battery.Discovery.Source(1).Compute(2).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(2).Column=2
Battery.Discovery.Source(1).Compute(2).String="Part Number: "

Battery.Discovery.Source(1).Compute(3).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(3).Column=5
Battery.Discovery.Source(1).Compute(3).String="Serial Number: "

// InstanceTable = Source(1)
// Description;PartNumber;Vendor;Status;SerialNumber;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Battery.Discovery.Instance.Vendor=InstanceTable.Column(3)
Battery.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
Battery.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.AttachedToDeviceType="DiskController"

// Battery collect

// Collect type is MultiInstance
Battery.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.13.1.2.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="2,24"
Battery.Collect.Source(1).ForceSerialization=1

// Duplicate status
// Description;Status;Status;
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)


//
// LEDs (The first connector to explore this mysterious area)
//

//
// Discovery

// Source(1)
// Description;Color;
LED.Discovery.Source(1).Type="SnmpTable"
LED.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.8.2.1"
LED.Discovery.Source(1).SnmpTableSelectColumns="4,6"
LED.Discovery.Source(1).ForceSerialization=1

// Duplicate Color
// Description;Color;Color;
LED.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
LED.Discovery.Source(1).Compute(1).Column=2

// Translate the Color to
// Description;Color;ON;BLINKING;OFF;
LED.Discovery.Source(1).Compute(2).Type="Translate"
LED.Discovery.Source(1).Compute(2).Column=3
LED.Discovery.Source(1).Compute(2).TranslationTable="LEDColorTranslationTable"

LEDColorTranslationTable("yellow")="ALARM;ALARM;OK"
LEDColorTranslationTable("blue")="OK;OK;OK"
LEDColorTranslationTable("green")="OK;OK;ALARM"

// The Instance Table
// Description;Color;ON;BLINKING;OFF;
LED.Discovery.InstanceTable=%LED.Discovery.Source(1)%
LED.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LED.Discovery.Instance.DisplayID=InstanceTable.Column(1)
LED.Discovery.Instance.Color=InstanceTable.Column(2)
LED.Discovery.Instance.OnStatus=InstanceTable.Column(3)
LED.Discovery.Instance.BlinkingStatus=InstanceTable.Column(4)
LED.Discovery.Instance.OffStatus=InstanceTable.Column(5)

//
// Collect

// Collect type is multi-instance
LED.Collect.Type="MultiInstance"

// Source(1)
// Description;State;
LED.Collect.Source(1).Type="SnmpTable"
LED.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.3.51.3.1.8.2.1"
LED.Collect.Source(1).SnmpTableSelectColumns="4,5"
LED.Collect.Source(1).ForceSerialization=1

// Translate the State
// Description;State;
LED.Collect.Source(1).Compute(1).Type="Translate"
LED.Collect.Source(1).Compute(1).Column=2
LED.Collect.Source(1).Compute(1).TranslationTable="LEDStateTranslationTable"

// The LEDStateTranslationTable
LEDStateTranslationTable(0)="Off"
LEDStateTranslationTable(1)="On"
LEDStateTranslationTable(2)="Blinking"

// ValueTable = Source(1)
// Description;State;
LED.Collect.ValueTable=%LED.Collect.Source(1)%
LED.Collect.DeviceID=ValueTable.Column(1)
LED.Collect.Status=ValueTable.Column(2)




// The statusTranslationTable
statusTranslationTable("Normal")="OK"
statusTranslationTable("Unknown")="UNKNOWN"
statusTranslationTable("Critical")="ALARM"
statusTranslationTable("Operational")="OK"
statusTranslationTable("Optimal")="OK"
statusTranslationTable("Online")="OK"
statusTranslationTable("Unconfigured Good")="OK"
statusTranslationTable(Default)="WARN"
