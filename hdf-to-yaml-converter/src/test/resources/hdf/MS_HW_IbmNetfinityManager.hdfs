//
//
//                  C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//            MS_HW_IbmNetfinityManager.hdf
//
//      Supports: IBM Netfinity Manager 5.20.x NORMAL system environment
//				  under Windows
//
//

// Note: there is a little difference between the IBM Netfinity Manager NORMAL
// and BASIC system environment monitoring.
// On some computers, Netfinity gives BASIC environment information (just the
// status of each sensor), and on some other computers, it gives NORMAL information
// (value of the temperatures and voltages)
// To support that behaviour, we have 2 different connectors (.HDF). One support
// NORMAL information, and the other support BASIC information.
// This .HDF supports NORMAL information and defines the computer object.
// The BASIC .HDF supports BASIC information but does not define the computer object.
// Therefore, on classical IBM computers with Netfinity, the following connectors
// should be used:
//  - IBM Netfinity Manager 5.20.x NORMAL
//  - IBM Netfinity Manager 5.20.x RAID
// On more basic IBM computers, the following connectors should be used:
//  - IBM Netfinity Manager 5.20.x NORMAL  ( <- to define the computer object)
//  - IBM Netfinity Manager 5.20.x BASIC
//  - IBM Netfinity Manager 5.20.x RAID


// HEADER

hdf.DisplayName="IBM Netfinity Manager 5.20.x - Normal"
hdf.TypicalPlatform="IBM Netfinity"
hdf.ReliesOn="IBM Netfinity Manager 5.20.x"
hdf.Version="1.0"
hdf.Comments="This connector provides environment monitoring through the IBM Netfinity Manager Services SNMP sub-agent which supports almost all old IBM servers (Netfinity) under Windows."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT"

// DETECTION

// Check that there is something below the snmp OID: ...ibm(2).ibmProd(6).netFinity(71).DmiMibs(200).NetFinityServicesMIB(2).dmtfGroups(1).tNetfinityMonitorAttributes(3).eNetfinityMonitorAttributes(1)
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2.6.71.200.2.1.3.1"

// COMPUTER ENCLOSURE

// Get the model name
Enclosure.Discovery.Source(1).Type="SnmpGet"
Enclosure.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.2.6.71.200.1.1.1.1.2.1"

Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="1"
Enclosure.Discovery.Instance.Vendor="IBM"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"
//
// TEMPERATURES
//

//
// Temperature discovery
// Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
// ID;TemperatureLocation;Unit
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.3.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,2,6"

// Keep only lines whose unit is "Celsius"
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column="3"
Temperature.Discovery.Source(1).Compute(1).RegExp="Celsius"

// Remove the " Temperature (C)" statement from the temperature location
Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column="2"
Temperature.Discovery.Source(1).Compute(2).Replace=" Temperature (C)"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove the " Temperature" statement from the temperature location
Temperature.Discovery.Source(1).Compute(3).Type="Replace"
Temperature.Discovery.Source(1).Compute(3).Column="2"
Temperature.Discovery.Source(1).Compute(3).Replace=" Temperature"
Temperature.Discovery.Source(1).Compute(3).ReplaceBy=""

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold="65"
Temperature.Discovery.Instance.AlarmThreshold="70"


//
// Temperature collect

// Collect type is: Multi-Instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
// ID;TextualValue
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.3.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)


//
//  VOLTAGES
//

//
// Voltage discovery

// Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
// ID;VoltageType;Unit
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.3.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,2,6"

// Keep only lines whose unit is "Celsius"
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column="3"
Voltage.Discovery.Source(1).Compute(1).RegExp="Volts"

// InstanceTable = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)


//
// Voltage collect

// Collect type is: Multi-Instance
Voltage.Collect.Type="MultiInstance"

// Source(1) = the 1.3.6.1.4.1.2.6.71.200.2.1.3.1 SNMP table
// ID;TextualValue
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2.6.71.200.2.1.3.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Convert the Volt values into milliVolts (mV)
// ID;mVValue
Voltage.Collect.Source(1).Compute(1).Type="Multiply"
Voltage.Collect.Source(1).Compute(1).Column="2"
Voltage.Collect.Source(1).Compute(1).MultiplyBy="1000"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)
