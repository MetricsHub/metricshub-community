//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//             MS_HW_CiscoUCSBladeSNMP.hdf
//
//         Supports: Cisco UCS B-Series Servers
//
//

// HEADER

hdf.DisplayName="Cisco UCS B-Series (SNMP)"
hdf.TypicalPlatform="Cisco B-Series Servers"
hdf.ReliesOn="Cisco UCS Manager SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring for the Cisco B-Series Servers via SNMP agent of UCS Manager. It does not connect to the blades themselves"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

// DETECTION
// Does a get_next to see if there that there is some blades information

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.9.9.719.1.9.2.1.2"

// Enclosure (New Systems)

// Source(2) = cucsComputeRackUnitEntry
// DN;Model;Serial;OperState;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.9.2.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="2,32,47,42"

// Duplicate the deviceID
//DN;Displayname;Model;Serial;OperState;
Enclosure.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Discovery.Source(1).Compute(1).Column=1

// Remove SYS/
// DN;Displayname;Model;Serial;OperState;
Enclosure.Discovery.Source(1).Compute(2).Type="Replace"
Enclosure.Discovery.Source(1).Compute(2).Column="2"
Enclosure.Discovery.Source(1).Compute(2).Replace="sys/"
Enclosure.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove "removed" blades
// DN;Displayname;Model;Serial;OperState;
Enclosure.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(1).Compute(3).Column=5
Enclosure.Discovery.Source(1).Compute(3).ValueList="40"

// The InstanceTable
// DN;DisplayName;Model;Serial;OperState;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Vendor="Cisco"


//
// Enclosure collect

// Collect type is MultiInstance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = cucsEquipmentEnclosureEntry
// DN;OperState;
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.9.2.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="2,42"

// Duplicate the StatusCode column
// DN;OperState;OperState;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Translate 1st StatusCode into PATROLSTatus
// DN;PATROLStatus;OperState;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="bladeStatusTranslationTable"

// Translate second STatusCode into a more readable string
// DN;PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="bladeStatusInformationTranslationTable"



// ValueTable = Source(1)
//DN;PATROLStatus;StatusInformation;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)


//
// DiskController
//

//
// DiskController discovery

// Source(1) = cucsProcessorUnitTable
// DN;RN;Model;SerialNumber;Vendor;Revision;OperState;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="2,3,5,14,18,13,6"

//Ignore empty slots (removed)
DiskController.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
DiskController.Discovery.Source(1).Compute(1).Column=7
DiskController.Discovery.Source(1).Compute(1).ValueList="6"

// DN
DiskController.Discovery.Source(2).Type="SnmpTable"
DiskController.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.1.1"
DiskController.Discovery.Source(2).SnmpTableSelectColumns="2"


// Run this through awk EF1
// attachedDeviceID;DN
DiskController.Discovery.Source(2).Compute(1).Type="Awk"
DiskController.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(1)


// Source(3) = jointure of source(1) and source(2) in order to have the attached deviceID
// DN;RN;Model;SerialNumber;Vendor;Revision;OperState;attachedDeviceID;DN
DiskController.Discovery.Source(3).Type="TableJoint"
DiskController.Discovery.Source(3).LeftTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(3).LeftKeyColumn=1
DiskController.Discovery.Source(3).RightKeyColumn=2

// Source(4) = jointure of source(3) and enclosure.source(2) in order to have controllers attached to a blade
// DN;RN;Model;SerialNumber;Vendor;Revision;OperState;attachedDeviceID;DN;enclosure
DiskController.Discovery.Source(4).Type="TableJoint"
DiskController.Discovery.Source(4).LeftTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(1)%
DiskController.Discovery.Source(4).LeftKeyColumn=8
DiskController.Discovery.Source(4).RightKeyColumn=1

// InstanceTable = Source(1)
// DN;RN;Model;SerialNumber;Vendor;Revision;OperState;attachedDeviceID;ID;enclosure
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(4)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(2)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(5)
DiskController.Discovery.Instance.Model=InstanceTable.Column(3)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(6)
DiskController.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)

//
// DiskController collect

// Collect type is MultiInstance
DiskController.Collect.Type="MultiInstance"

// Source(1) = cucsProcessorUnitTable
// DN;OperState;
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.1.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="2,6"

//Ignore empty slots (removed)
DiskController.Collect.Source(1).Compute(1).Type="ExcludeMatchingLines"
DiskController.Collect.Source(1).Compute(1).Column=2
DiskController.Collect.Source(1).Compute(1).ValueList="6"

// Duplicate the StatusCode column
// DN;OperState;OperState;
DiskController.Collect.Source(1).Compute(2).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(2).Column=2

// Translate 1st StatusCode into PATROLSTatus
// DN;PATROLStatus;OperState;
DiskController.Collect.Source(1).Compute(3).Type="Translate"
DiskController.Collect.Source(1).Compute(3).Column=2
DiskController.Collect.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Translate second STatusCode into a more readable string
// DN;PATROLStatus;StatusInformation;
DiskController.Collect.Source(1).Compute(4).Type="Translate"
DiskController.Collect.Source(1).Compute(4).Column=3
DiskController.Collect.Source(1).Compute(4).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)



//
// PhysicalDisk
//

//
// PhysicalDisk discovery

// Source(1) = cucsEquipmentPhysicalDiskEntry
// DN;Model;Size;Vendor;RN;OperState;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.4.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="2,3,12,13,14,9"

//Ignore empty slots (removed)
PhysicalDisk.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=6
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="6"

// Duplicate the deviceID
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=1

// Add a "/"ou our RN to remove it from the atttached device ID
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(3).Column="3"
PhysicalDisk.Discovery.Source(1).Compute(3).String="/"

//generate the attached device id
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(4).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(4).Replace=Column(3)
PhysicalDisk.Discovery.Source(1).Compute(4).ReplaceBy=""

// Convert the size into bytes
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;
PhysicalDisk.Discovery.Source(1).Compute(5).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(5).Column=5
PhysicalDisk.Discovery.Source(1).Compute(5).MultiplyBy=1048576

// Remove "/" added to rn
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;
PhysicalDisk.Discovery.Source(1).Compute(6).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(6).Column="3"
PhysicalDisk.Discovery.Source(1).Compute(6).Replace="/"
PhysicalDisk.Discovery.Source(1).Compute(6).ReplaceBy=""

// DN for enclosure id
PhysicalDisk.Discovery.Source(2).Type="SnmpTable"
PhysicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.4.1"
PhysicalDisk.Discovery.Source(2).SnmpTableSelectColumns="2"


// Run this through awk EF1
// attachedDeviceID;DN
PhysicalDisk.Discovery.Source(2).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(1)


// Source(3) = jointure of source(1) and source(2) in order to have the attached deviceID
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;enclosureID;DN
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(3).RightKeyColumn=2

// Source(4) = jointure of source(3) and enclosure.source(2) in order to have controllers attached to a blade
//DN;attachedDeviceID;RN;Model;Size;Vendor;OperState;enclosureID;DN;enclosure
PhysicalDisk.Discovery.Source(4).Type="TableJoint"
PhysicalDisk.Discovery.Source(4).LeftTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(4).LeftKeyColumn=8
PhysicalDisk.Discovery.Source(4).RightKeyColumn=1



// InstanceTable = Source(1)
//DN;attachedDeviceID;RN;Model;Size;Vendor;enclosureID;DN;enclosure
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(4)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)

//
// PhysicalDisk collect

// Collect type is MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = cucsEquipmentPhysicalDiskEntry
// DN;OperState;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.45.4.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,9"

//Ignore empty slots (removed)
PhysicalDisk.Collect.Source(1).Compute(1).Type="ExcludeMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2
PhysicalDisk.Collect.Source(1).Compute(1).ValueList="6"

// Duplicate the StatusCode column
// DN;OperState;OperState;
PhysicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2

// Translate 1st StatusCode into PATROLStatus
// DN;PATROLStatus;OperState;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=2
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Translate second STatusCode into a more readable string
// DN;PATROLStatus;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=3
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// CPU
//

//
// CPU discovery

// Source(1) = cucsProcessorUnitTable
// DN;RN;Model;Speed;Vendor;OperState;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.41.9.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="2,3,8,17,21,9"


// DN
CPU.Discovery.Source(2).Type="SnmpTable"
CPU.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.41.9.1"
CPU.Discovery.Source(2).SnmpTableSelectColumns="2"


// Run this through awk EF1
// attachedDeviceID;DN
CPU.Discovery.Source(2).Compute(1).Type="Awk"
CPU.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(1)


// Source(3) = jointure of source(1) and source(2) in order to attached deviceID
// DN;RN;Model;Speed;Vendor;OperState;attachedDeviceID;DN
CPU.Discovery.Source(3).Type="TableJoint"
CPU.Discovery.Source(3).LeftTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Source(3).RightTable=%CPU.Discovery.Source(2)%
CPU.Discovery.Source(3).LeftKeyColumn=1
CPU.Discovery.Source(3).RightKeyColumn=2

// Exclude empty CPU slots
// DN;RN;Model;Speed;Vendor;OperState;attachedDeviceID;DN
CPU.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
CPU.Discovery.Source(3).Compute(1).Column=4
CPU.Discovery.Source(3).Compute(1).ValueList="0"

//Ignore empty slots (Removed)
CPU.Discovery.Source(3).Compute(2).Type="ExcludeMatchingLines"
CPU.Discovery.Source(3).Compute(2).Column=6
CPU.Discovery.Source(3).Compute(2).ValueList="6"

// Source(4) = jointure of source(3) and enclosure.source(2) in order to have cpus attached to a blade
// DN;RN;Model;Speed;Vendor;OperState;attachedDeviceID;DN;enclosure
CPU.Discovery.Source(4).Type="TableJoint"
CPU.Discovery.Source(4).LeftTable=%CPU.Discovery.Source(3)%
CPU.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(1)%
CPU.Discovery.Source(4).LeftKeyColumn=7
CPU.Discovery.Source(4).RightKeyColumn=1


// InstanceTable = Source(1)
// DN;RN;Model;Speed;Vendor;OperState;attachedDeviceID;DN
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(4)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(2)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(5)
CPU.Discovery.Instance.Model=InstanceTable.Column(3)
CPU.Discovery.Instance.MaximumSpeed=InstanceTable.Column(4)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(7)

//
// CPU collect

// Collect type is MultiInstance
CPU.Collect.Type="MultiInstance"

// Source(1) = cucsProcessorUnitTable
// DN;OperState;
CPU.Collect.Source(1).Type="SnmpTable"
CPU.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.41.9.1"
CPU.Collect.Source(1).SnmpTableSelectColumns="2,9"

//Ignore empty slots (Removed)
CPU.Collect.Source(1).Compute(1).Type="ExcludeMatchingLines"
CPU.Collect.Source(1).Compute(1).Column=2
CPU.Collect.Source(1).Compute(1).ValueList="6"


// Duplicate the StatusCode column
// DN;OperState;OperState;
CPU.Collect.Source(1).Compute(2).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(2).Column=2

// Translate 1st StatusCode into PATROLSTatus
// DN;PATROLStatus;OperState;
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=2
CPU.Collect.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Translate second STatusCode into a more readable string
// DN;PATROLStatus;StatusInformation;
CPU.Collect.Source(1).Compute(4).Type="Translate"
CPU.Collect.Source(1).Compute(4).Column=3
CPU.Collect.Source(1).Compute(4).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(2)
CPU.Collect.StatusInformation=ValueTable.Column(3)

//
// Memory
//

//
// Memory discovery

// Source(1) = cucsMemoryUnitEntry
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;OperState;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.30.11.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="2,3,11,17,6,19,21,13"


// Exclude  "Missing" memory modules
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;OperState;
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=4
Memory.Discovery.Source(1).Compute(1).ValueList="11"

Memory.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(2).Column=8
Memory.Discovery.Source(1).Compute(2).ValueList="6"

Memory.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(3).Column=6
Memory.Discovery.Source(1).Compute(3).RegExp="NO DIMM"


// Add Identifiers
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;OperState;
Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=3
Memory.Discovery.Source(1).Compute(4).String="Location : "

Memory.Discovery.Source(1).Compute(5).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(5).Column=7
Memory.Discovery.Source(1).Compute(5).String="Speed: "

//source 2 for the attached device id
// DN;
Memory.Discovery.Source(2).Type="SnmpTable"
Memory.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.30.11.1"
Memory.Discovery.Source(2).SnmpTableSelectColumns="2"

// Run this through awk EF1
// attachedDeviceID;DN
Memory.Discovery.Source(2).Compute(1).Type="Awk"
Memory.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(1)


// Source(3) = jointure of source(1) and source(2) in order to attached deviceID
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;OperState;attachedDeviceID;DN
Memory.Discovery.Source(3).Type="TableJoint"
Memory.Discovery.Source(3).LeftTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Source(3).RightTable=%Memory.Discovery.Source(2)%
Memory.Discovery.Source(3).LeftKeyColumn=1
Memory.Discovery.Source(3).RightKeyColumn=2

// Source(4) = jointure of source(3) and enclosure.source(2) in order to have memories attached to a blade
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;OperState;attachedDeviceID;DN;enclosure
Memory.Discovery.Source(4).Type="TableJoint"
Memory.Discovery.Source(4).LeftTable=%Memory.Discovery.Source(3)%
Memory.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(1)%
Memory.Discovery.Source(4).LeftKeyColumn=9
Memory.Discovery.Source(4).RightKeyColumn=1


// InstanceTable = Source(1)
// DN;RN;Location;Presence;CapacityMB;Serial;Speed;attachedDeviceID;DN
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(3)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Memory.Discovery.Instance.Size=InstanceTable.Column(5)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Memory.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)

//
// Memory collect

// Collect type is MultiInstance
Memory.Collect.Type="MultiInstance"

// Source(1) = cucsMemoryUnitEntry
// DN;OperState;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.9.9.719.1.30.11.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="2,13"

//Ignore empty slots (Removed)
Memory.Collect.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=2
Memory.Collect.Source(1).Compute(1).ValueList="6"

// Duplicate the StatusCode column
// DN;OperState;OperState;
Memory.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(2).Column=2

// Translate 1st StatusCode into PATROLSTatus
// DN;PATROLStatus;OperState;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=2
Memory.Collect.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Translate second STatusCode into a more readable string
// DN;PATROLStatus;StatusInformation;
Memory.Collect.Source(1).Compute(4).Type="Translate"
Memory.Collect.Source(1).Compute(4).Column=3
Memory.Collect.Source(1).Compute(4).TranslationTable="statusInformationTranslationTable"

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)


// The statusTranslationTable
// The statusTranslationTable
statusTranslationTable(0)="UNKNOWN"
statusTranslationTable(1)="OK"
statusTranslationTable(2)="WARN"
statusTranslationTable(3)="WARN"
statusTranslationTable(4)="WARN"
statusTranslationTable(5)="WARN"
statusTranslationTable(6)="ALARM"
statusTranslationTable(7)="WARN"
statusTranslationTable(8)="WARN"
statusTranslationTable(9)="WARN"
statusTranslationTable(10)="WARN"
statusTranslationTable(11)="WARN"
statusTranslationTable(12)="ALARM"
statusTranslationTable(13)="WARN"
statusTranslationTable(14)="WARN"
statusTranslationTable(51)="WARN"
statusTranslationTable(52)="WARN"
statusTranslationTable(81)="WARN"
statusTranslationTable(82)="WARN"
statusTranslationTable(83)="OK"
statusTranslationTable(84)="WARN"
statusTranslationTable(100)="WARN"
statusTranslationTable(101)="WARN"
statusTranslationTable(102)="ALARM"
statusTranslationTable(103)="OK"
statusTranslationTable(104)="ALARM"
statusTranslationTable(105)="WARN"
statusTranslationTable(106)="WARN"
statusTranslationTable(107)="WARN"
statusTranslationTable(108)="WARN"
statusTranslationTable(Default)="Unknown Status"



// The statusInformationTranslationTable
statusInformationTranslationTable(0)="Unknown"
statusInformationTranslationTable(1)="Operable"
statusInformationTranslationTable(2)="Inoperable"
statusInformationTranslationTable(3)="Degraded"
statusInformationTranslationTable(4)="Powered Off"
statusInformationTranslationTable(5)="Power Problem"
statusInformationTranslationTable(6)="Removed"
statusInformationTranslationTable(7)="Voltage Problem"
statusInformationTranslationTable(8)="Thermal Problem"
statusInformationTranslationTable(9)="Performance Problem"
statusInformationTranslationTable(10)="Accessibility Problem"
statusInformationTranslationTable(11)="Identity Unestablishable"
statusInformationTranslationTable(12)="Bios Post Timeout"
statusInformationTranslationTable(13)="Disabled"
statusInformationTranslationTable(14)="Malformed FRU"
statusInformationTranslationTable(51)="Fabric Conn Problem"
statusInformationTranslationTable(52)="Fabric Unsupported Conn"
statusInformationTranslationTable(81)="Config"
statusInformationTranslationTable(82)="Equipment Problem"
statusInformationTranslationTable(83)="Decommissioning"
statusInformationTranslationTable(84)="Chassis Limit Exceeded"
statusInformationTranslationTable(100)="Not Supported"
statusInformationTranslationTable(101)="Discovery"
statusInformationTranslationTable(102)="Discovery Failed"
statusInformationTranslationTable(103)="Identify"
statusInformationTranslationTable(104)="Post Failure"
statusInformationTranslationTable(105)="Upgrade Problem"
statusInformationTranslationTable(106)="Peer Comm Problem"
statusInformationTranslationTable(107)="Auto Upgrade"
statusInformationTranslationTable(108)="Link Activate Blocked"
statusInformationTranslationTable(Default)="Unknown Status"



// The bladeStatusTranslationTable
// The bladeStatusTranslationTable
bladeStatusTranslationTable(0)="UNKNOWN"
bladeStatusTranslationTable(1)="WARN"
bladeStatusTranslationTable(10)="OK"
bladeStatusTranslationTable(11)="OK"
bladeStatusTranslationTable(12)="OK"
bladeStatusTranslationTable(13)="OK"
bladeStatusTranslationTable(14)="OK"
bladeStatusTranslationTable(15)="OK"
bladeStatusTranslationTable(20)="OK"
bladeStatusTranslationTable(21)="OK"
bladeStatusTranslationTable(29)="WARN"
bladeStatusTranslationTable(30)="WARN"
bladeStatusTranslationTable(31)="WARN"
bladeStatusTranslationTable(32)="WARN"
bladeStatusTranslationTable(33)="ALARM"
bladeStatusTranslationTable(34)="ALARM"
bladeStatusTranslationTable(35)="ALARM"
bladeStatusTranslationTable(36)="OK"
bladeStatusTranslationTable(40)="WARN"
bladeStatusTranslationTable(41)="WARN"
bladeStatusTranslationTable(50)="ALARM"
bladeStatusTranslationTable(60)="WARN"
bladeStatusTranslationTable(61)="WARN"
bladeStatusTranslationTable(62)="WARN"
bladeStatusTranslationTable(63)="ALARM"
bladeStatusTranslationTable(101)="OK"
bladeStatusTranslationTable(201)="OK"
bladeStatusTranslationTable(202)="OK"
bladeStatusTranslationTable(203)="OK"
bladeStatusTranslationTable(204)="ALARM"
bladeStatusTranslationTable(210)="OK"
bladeStatusTranslationTable(211)="WARN"
bladeStatusTranslationTable(212)="WARN"
bladeStatusTranslationTable(Default)="Unknown Status"

bladeStatusInformationTranslationTable(0)="Indeterminate"
bladeStatusInformationTranslationTable(1)="Unassociated"
bladeStatusInformationTranslationTable(10)="OK"
bladeStatusInformationTranslationTable(11)="Discovery"
bladeStatusInformationTranslationTable(12)="Config"
bladeStatusInformationTranslationTable(13)="Unconfig"
bladeStatusInformationTranslationTable(14)="PowerOff"
bladeStatusInformationTranslationTable(15)="Restart"
bladeStatusInformationTranslationTable(20)="Maintenance"
bladeStatusInformationTranslationTable(21)="Test"
bladeStatusInformationTranslationTable(29)="Compute Mismatch"
bladeStatusInformationTranslationTable(30)="Compute Failed"
bladeStatusInformationTranslationTable(31)="Degraded"
bladeStatusInformationTranslationTable(32)="Discovery Failed"
bladeStatusInformationTranslationTable(33)="Config Failure"
bladeStatusInformationTranslationTable(34)="Unconfig Failed"
bladeStatusInformationTranslationTable(35)="Test Failed"
bladeStatusInformationTranslationTable(36)="Maintenance Failed"
bladeStatusInformationTranslationTable(40)="Removed"
bladeStatusInformationTranslationTable(41)="Disabled"
bladeStatusInformationTranslationTable(50)="Inaccessible"
bladeStatusInformationTranslationTable(60)="Thermal Problem"
bladeStatusInformationTranslationTable(61)="Power Problem"
bladeStatusInformationTranslationTable(62)="Voltage Problem"
bladeStatusInformationTranslationTable(63)="Inoperable"
bladeStatusInformationTranslationTable(101)="Decommissioning"
bladeStatusInformationTranslationTable(201)="Bios Restore"
bladeStatusInformationTranslationTable(202)="Cmos Reset"
bladeStatusInformationTranslationTable(203)="Diagnostics"
bladeStatusInformationTranslationTable(204)="Diagnostics Failed"
bladeStatusInformationTranslationTable(210)="Pending Reboot"
bladeStatusInformationTranslationTable(211)="Pending Reassociation"
bladeStatusInformationTranslationTable(212)="Svnic Not Present"
bladeStatusInformationTranslationTable(Default)="Unknown Status"


/////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///    AWK script that return the enclosure ID
///    and returns the model of the system
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[/]"}
{
print $1 "/" $2 "/" $3 ";" $0
}

EmbeddedFile(1).End
///////////////////////////////////////////////////////////////
