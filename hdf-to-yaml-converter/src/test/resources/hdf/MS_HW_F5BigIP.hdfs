////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Switches that support F5 BigIP Switches
//                Connects to a SNMP agent
//
//


//
// Header
//

hdf.DisplayName="F5 BigIP Switch"
hdf.TypicalPlatform="F5 BigIP"
hdf.ReliesOn="F5 SNMP Agent (bigipSystem)"
hdf.Version="1.0"
hdf.Comments="This connector discovers ports and the environment for F5 BigIP Switches (F5-BIGIP-SYSTEM-MIB)"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Network"


// Supersedes the generic MIB-2 based connector
hdf.Supersedes="MS_HW_MIB2.hdf,MS_HW_GenericSwitchEnclosure.hdf"

//
// DETECTION
//
// The system should
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.3375.2.1.3.5.1"

//
// Enclosure
//

// Source(1) = 	sysGeneral SNMP table
// Model,SerialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.3"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,3"

// InstanceTable = Source(1)
// Model,SerialNumber
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="F5-BigIP"
Enclosure.Discovery.Instance.Vendor="F5"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type="Switch"

//
// TEMPERATURES
//

//
// Discovery

// Source(1) = sysCpu
// Name;Temperature;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.1.2.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="4,2"

// Keep Only CPUs with a valid temperature.
// Name;Temperature;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=2
Temperature.Discovery.Source(1).Compute(1).RegExp="[1-9]"

// Add the standard F5 CPU threshold of 75
// Name;Temperature;WarnThreshold;
Temperature.Discovery.Source(1).Compute(2).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(2).Column=2
Temperature.Discovery.Source(1).Compute(2).String=";75"

// Source(2) = sysCpu
// Name;Temperature;
Temperature.Discovery.Source(2).Type="SnmpTable"
Temperature.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.3.2.1"
Temperature.Discovery.Source(2).SnmpTableSelectColumns="1,2"

// Keep Only Chassis with a valid temperature.
// Name;Temperature;
Temperature.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=2
Temperature.Discovery.Source(2).Compute(1).RegExp="[1-9]"

// Add the standard F5 Chassis threshold of 50
// Name;Temperature;WarnThreshold;
Temperature.Discovery.Source(2).Compute(2).Type="RightConcat"
Temperature.Discovery.Source(2).Compute(2).Column=2
Temperature.Discovery.Source(2).Compute(2).String=";50"

// Union CPU and Chassis
// Name;Temperature;WarnThreshold;
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%

// InstanceTable = Source(3)
// Name;Temperature;WarnThreshold;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)

// Collect

// Collect type = multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = sysCpu
// Name;Temperature;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.1.2.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="4,2"

// Source(2) = sysCpu
// Name;Temperature;
Temperature.Collect.Source(2).Type="SnmpTable"
Temperature.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.3.2.1"
Temperature.Collect.Source(2).SnmpTableSelectColumns="1,2"

// Union CPU and Chassis
// Name;Temperature;
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%

// ValueTable = Source(3)
// Name;Temperature;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)

//
// Fans
//

//
// Discovery

// Source(1) = sysCpu
// Name;FanSpeed;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.1.2.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="4,3"

// Keep Only CPUs with a valid Fan.
// Name;Fan;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).RegExp="[0-9]"

// Add the standard F5 Fan threshold of 3000
// Name;Fan;;WarnThreshold;
Fan.Discovery.Source(1).Compute(2).Type="RightConcat"
Fan.Discovery.Source(1).Compute(2).Column=2
Fan.Discovery.Source(1).Compute(2).String=";;3000"

// Source(2) = sysFan
// Name;Speed;Status;
Fan.Discovery.Source(2).Type="SnmpTable"
Fan.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.1.2.1"
Fan.Discovery.Source(2).SnmpTableSelectColumns="1,3,2"

// Keep only "Present" Fans
// Name;Speed;Status;
Fan.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(2).Compute(1).Column=3
Fan.Discovery.Source(2).Compute(1).ValueList="0,1"

// Add a blank warning threshold
// Name;Speed;Status;WarnThreshold;
Fan.Discovery.Source(2).Compute(2).Type="RightConcat"
Fan.Discovery.Source(2).Compute(2).Column=3
Fan.Discovery.Source(2).Compute(2).String=";"

// Union CPU and Chassis
// Name;Speed;Status;WarnThreshold;
Fan.Discovery.Source(3).Type="TableUnion"
Fan.Discovery.Source(3).Table1=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(3).Table2=%Fan.Discovery.Source(2)%

// InstanceTable = Source(3)
// Only CPU fans will have numeric thresholds
// Name;Speed;Status;WarnThreshold;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(3)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

// Collect type = multi-instance
Fan.Collect.Type="MultiInstance"

//
// Collect

// Source(1) = sysCpu
// Name;FanSpeed;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.1.2.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="4,3"

// Add a Blank Status
// Name;FanSpeed;;
Fan.Collect.Source(1).Compute(1).Type="RightConcat"
Fan.Collect.Source(1).Compute(1).Column=2
Fan.Collect.Source(1).Compute(1).String=";"

// Source(2) = sysFan
// Name;FanSpeed;Status;
Fan.Collect.Source(2).Type="SnmpTable"
Fan.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.1.2.1"
Fan.Collect.Source(2).SnmpTableSelectColumns="1,3,2"

// Translate the status into a PATROLStatus
// Name;FanSpeed;Status;
Fan.Collect.Source(2).Compute(1).Type="Translate"
Fan.Collect.Source(2).Compute(1).Column=3
Fan.Collect.Source(2).Compute(1).TranslationTable="SensorStatusTranslationTable"

// SensorStatusTranslationTable
SensorStatusTranslationTable(0)="ALARM"
SensorStatusTranslationTable(1)="OK"
SensorStatusTranslationTable(Default)="UNKNOWN"

// Union CPU and Chassis
// Name;Speed;Status;
Fan.Collect.Source(3).Type="TableUnion"
Fan.Collect.Source(3).Table1=%Fan.Collect.Source(1)%
Fan.Collect.Source(3).Table2=%Fan.Collect.Source(2)%

// ValueTable = Source(3)
// Name;Speed;Status;
Fan.Collect.ValueTable=%Fan.Collect.Source(3)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(3)

//
// PowerSupplys
//

//
// Discovery

// Source(1) = sysChassisPowerSupply
// Name;Status;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.2.2.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="1,2"

// Keep only "Present" PowerSupplys
// Name;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).ValueList="0,1"

// InstanceTable = Source(1)
// Name;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)


// Collect type = multi-instance
PowerSupply.Collect.Type="MultiInstance"

//
// Collect

// Source(1) = sysChassisPowerSupply
// Name;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.3.2.2.2.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="1,2"

// Translate the status into a PATROLStatus
// Name;PatrolStatus;
PowerSupply.Collect.Source(1).Compute(1).Type="Translate"
PowerSupply.Collect.Source(1).Compute(1).Column=2
PowerSupply.Collect.Source(1).Compute(1).TranslationTable="SensorStatusTranslationTable"

// ValueTable = Source(1)
// Name;Speed;Status;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)


//
// NetworkCard
//

//
// Discovery

// Source(1) = sysInterface SNMP Table
// PortID;ActiveSpeed,MACAddress
NetworkCard.Discovery.Source(1).Type="SnmpTable"
NetworkCard.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.2.4.1.2.1"
NetworkCard.Discovery.Source(1).SnmpTableSelectColumns="1,4,6"

// InstanceTable = Source(1)
// PortID;ActiveSpeed,MACAddress
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.Bandwidth=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"


//
// Collect

// Collect type = multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = sysInterface SNMP Table
// PortID;ActiveSpeed,ActiveDuplex,LinkStatus
NetworkCard.Collect.Source(1).Type="SnmpTable"
NetworkCard.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3375.2.1.2.4.1.2.1"
NetworkCard.Collect.Source(1).SnmpTableSelectColumns="1,4,5,17"

// Translate Duplex
// PortID;ActiveSpeed,ActiveDuplex,LinkStatus
NetworkCard.Collect.Source(1).Compute(1).Type="Translate"
NetworkCard.Collect.Source(1).Compute(1).Column=3
NetworkCard.Collect.Source(1).Compute(1).TranslationTable="DuplexStatusTranslationTable"

// The DuplexStatusTranslationTable
DuplexStatusTranslationTable(0)=""
DuplexStatusTranslationTable(1)="half"
DuplexStatusTranslationTable(2)="full"
DuplexStatusTranslationTable(Default)=""

// Translate Link Status
// PortID;ActiveSpeed,ActiveDuplex,LinkStatus
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=4
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="LinkStatusTranslationTable"

// The LinkStatusTranslationTable
LinkStatusTranslationTable(0)="OK"
LinkStatusTranslationTable(1)="WARN"
LinkStatusTranslationTable(2)="WARN"
LinkStatusTranslationTable(3)="WARN"
LinkStatusTranslationTable(4)="WARN"
LinkStatusTranslationTable(5)="WARN"
LinkStatusTranslationTable(Default)="WARN"

// Source(2) = sysInterfaceStatTable SNMP Table
// All metrics are 64 bit, so will only work with SNMP v2/3
// PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsIn;ErrorsOut;
NetworkCard.Collect.Source(2).Type="SnmpTable"
NetworkCard.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.3375.2.1.2.4.4.3.1"
NetworkCard.Collect.Source(2).SnmpTableSelectColumns="1,2,3,4,5,8,9"

// Add the two errors together
// PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
NetworkCard.Collect.Source(2).Compute(1).Type="Add"
NetworkCard.Collect.Source(2).Compute(1).Column=6
NetworkCard.Collect.Source(2).Compute(1).Add=Column(7)

// Join the port information with the stats
// PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
NetworkCard.Collect.Source(3).Type="TableJoint"
NetworkCard.Collect.Source(3).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(3).LeftKeyColumn=1
NetworkCard.Collect.Source(3).RightKeyColumn=1
NetworkCard.Collect.Source(3).DefaultRightLine=";;;;;;;"

// ValueTable = Source(1)
//   1         2             3          4         5       6         7       8           9            10      11
// PortID;ActiveSpeed,ActiveDuplex,LinkStatus;PortID;PacketsRec;BytesRec;PacketsTrans;BytesTrans;ErrorsTotal;ErrorsOut;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
// NetworkCard.Collect.Status=ValueTable.Column()
// NetworkCard.Collect.StatusInformation=ValueTable.Column()
NetworkCard.Collect.LinkStatus=ValueTable.Column(4)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(2)
NetworkCard.Collect.DuplexMode=ValueTable.Column(3)
NetworkCard.Collect.ErrorCount=ValueTable.Column(10)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(8)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(6)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(9)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(7)
