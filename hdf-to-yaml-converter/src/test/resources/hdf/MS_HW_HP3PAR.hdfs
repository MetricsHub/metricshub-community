////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: HPE Primera or HP 3PAR Storage System
//                Connects to the embedded HPE Primera or HP 3PAR SMI-S provider
//				  (namespace is root/tpd)
//

//
// Header
//

hdf.DisplayName="HPE Primera / HP 3PAR Disk Array"
hdf.TypicalPlatform="HPE Primera / HP 3PAR"
hdf.ReliesOn="HPE Primera / HP 3PAR Embedded SMI-S Provider"
hdf.Version="1.0"
hdf.Comments="This connector discovers the enclosure and the disks of HPE Primera and HP 3PAR disk arrays, as well as the storage pools. It also discovers and monitor the FC ports of the array and the various environment sensors when available (temperatures, fans, power supplies, etc.). It relies on the WBEM technology and supports SMI-S compliant disk arrays only."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"

// Supersedes the existing SMIS Disk Array Connector
hdf.Supersedes="MS_HW_SMISDiskArray.hdf"

//
// Detection
//

// Verify that there is an TPD_StorageSystem instance
Detection.Criteria(1).Type="WBEM"
Detection.Criteria(1).WbemNameSpace="root/tpd"
Detection.Criteria(1).WbemQuery="SELECT Name FROM TPD_StorageSystem"

//
// Enclosure
//

//
// Discovery


// Source(1) = TPD_SystemPackage
// Model,SerialNumber,Version,TPD_SystemPackage
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemQuery="SELECT Model,SerialNumber,Version,__Path FROM TPD_SystemPackage"
Enclosure.Discovery.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_StorageSystem
// ElementName,IdentifyingDescriptions,Name,OtherIdentifyingInfo,TPD_StorageSystem
Enclosure.Discovery.Source(2).Type="WBEM"
Enclosure.Discovery.Source(2).WbemQuery="SELECT ElementName,IdentifyingDescriptions,Name,OtherIdentifyingInfo,__Path FROM TPD_StorageSystem"
Enclosure.Discovery.Source(2).WbemNameSpace="root/tpd"

// Awk the output to extract information
// MSHW,ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,TPD_StorageSystem
Enclosure.Discovery.Source(2).Compute(1).Type="Awk"
Enclosure.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW"

// Source(3) = TPD_ComputerSystemPackage
// TPD_SystemPackage,TPD_StorageSystem
Enclosure.Discovery.Source(3).Type="WBEM"
Enclosure.Discovery.Source(3).WbemQuery="SELECT Antecedent,Dependent FROM TPD_ComputerSystemPackage"
Enclosure.Discovery.Source(3).WbemNameSpace="root/tpd"

// Source (4) = Join of TPD_StorageSystem and Association Table
// MSHW,ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,TPD_StorageSystem,TPD_SystemPackage,TPD_StorageSystem
Enclosure.Discovery.Source(4).Type="TableJoint"
Enclosure.Discovery.Source(4).LeftTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Source(4).LeftKeyColumn=9
Enclosure.Discovery.Source(4).RightKeyColumn=2
Enclosure.Discovery.Source(4).KeyType="Wbem"
Enclosure.Discovery.Source(4).DefaultRightLine=";;"

// Source (5) = Join of (4) and TPD_SystemPackage
// MSHW,ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,TPD_StorageSystem,TPD_SystemPackage,TPD_StorageSystem,Model,SerialNumber,Version,TPD_SystemPackage
Enclosure.Discovery.Source(5).Type="TableJoint"
Enclosure.Discovery.Source(5).LeftTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Source(5).RightTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(5).LeftKeyColumn=10
Enclosure.Discovery.Source(5).RightKeyColumn=4
Enclosure.Discovery.Source(5).KeyType="Wbem"
Enclosure.Discovery.Source(5).DefaultRightLine=";;;;"

// Remove Paths
//   1         2      3      4    5     6   7       8           9                10             11              12       13          14        15
// MSHW,ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,TPD_StorageSystem,TPD_SystemPackage,TPD_StorageSystem,Model,SerialNumber,Version,TPD_SystemPackage
// ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,Model,SerialNumber,Version
Enclosure.Discovery.Source(5).Compute(1).Type="KeepColumns"
Enclosure.Discovery.Source(5).Compute(1).ColumnNumbers="2,3,4,5,6,7,8,12,13,14"

// Add 3 empty additionalInformationColumns
// ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,Model,SerialNumber,Version,,,
Enclosure.Discovery.Source(5).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(5).Compute(2).Column=10
Enclosure.Discovery.Source(5).Compute(2).String=";;;"

// Drive Cages

// Source (6) = TPD_DriveCage
// ElementName,Tag,ModelName,SerialNumber,FirmwareVersion,SaleableProductNumber,SaleableSerialNumber,ModelNumber
Enclosure.Discovery.Source(6).Type="WBEM"
Enclosure.Discovery.Source(6).WbemQuery="SELECT ElementName,Tag,ModelName,SerialNumber,FirmwareVersion,SaleableProductNumber,SaleableSerialNumber,ModelNumber FROM TPD_DriveCage"
Enclosure.Discovery.Source(6).WbemNameSpace="root/tpd"

// Add 5 blank columns
// ElementName,Tag ,       ,    ,    ,    ,        ,ModelName,SerialNumber,FirmwareVersion,SaleableProductNumber,SaleableSerialNumber,ModelNumber
// ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,Model    ,SerialNumber,Version        ,               ,                     ,
Enclosure.Discovery.Source(6).Compute(1).Type="RightConcat"
Enclosure.Discovery.Source(6).Compute(1).Column=2
Enclosure.Discovery.Source(6).Compute(1).String=";;;;;"

// Add identifiers
Enclosure.Discovery.Source(6).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(6).Compute(2).Column=11
Enclosure.Discovery.Source(6).Compute(2).String="Alternative Part Number: "

Enclosure.Discovery.Source(6).Compute(3).Type="LeftConcat"
Enclosure.Discovery.Source(6).Compute(3).Column=12
Enclosure.Discovery.Source(6).Compute(3).String="Serial Number: "

Enclosure.Discovery.Source(6).Compute(4).Type="LeftConcat"
Enclosure.Discovery.Source(6).Compute(4).Column=13
Enclosure.Discovery.Source(6).Compute(4).String="Model: "

// Union of Node Enclosure and Drive Cages
// ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,Model,SerialNumber,Version,SaleableProductNumber,SaleableSerialNumber,ModelNumber
Enclosure.Discovery.Source(7).Type="TableUnion"
Enclosure.Discovery.Source(7).Table1=%Enclosure.Discovery.Source(5)%
Enclosure.Discovery.Source(7).Table2=%Enclosure.Discovery.Source(6)%

Enclosure.Discovery.Source(7).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(7).Compute(1).Column=10
Enclosure.Discovery.Source(7).Compute(1).String="FirmwareVersion: "


// Instance Table
// ElementName,Name,NodeWWN,IPv4,Ipv6,FQDN,SystemID,Model,SerialNumber,Version,SaleableProductNumber,SaleableSerialNumber,ModelNumber
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(7)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="HP"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(8)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
Enclosure.Discovery.Instance.BIOSVersion=InstanceTable.Column(10)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(11)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(12)
Enclosure.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(13)
Enclosure.Discovery.Instance.Type="Storage"


//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = TPD_StorageSystem
// ElementName;OperationalStatus;
Enclosure.Collect.Source(1).Type="WBEM"
Enclosure.Collect.Source(1).WbemQuery="SELECT Name,OperationalStatus FROM TPD_StorageSystem"
Enclosure.Collect.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_StorageSystem
// ElementName;OperationalStatus;
Enclosure.Collect.Source(2).Type="WBEM"
Enclosure.Collect.Source(2).WbemQuery="SELECT Tag,OperationalStatus FROM TPD_DriveCage"
Enclosure.Collect.Source(2).WbemNameSpace="root/tpd"

// Union 1 and 2
// ElementName;OperationalStatus;
Enclosure.Collect.Source(3).Type="TableUnion"
Enclosure.Collect.Source(3).Table1=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).Table2=%Enclosure.Collect.Source(2)%

// Duplicate the "OperationalStatusArray" column
// Name;OperationalStatus;OperationalStatus;
Enclosure.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(3).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// Name;PATROLStatusArray;OperationalStatus;
Enclosure.Collect.Source(3).Compute(2).Type="ArrayTranslate"
Enclosure.Collect.Source(3).Compute(2).Column=2
Enclosure.Collect.Source(3).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// Name;PATROLStatusArray;StatusDescriptions;
Enclosure.Collect.Source(3).Compute(3).Type="ArrayTranslate"
Enclosure.Collect.Source(3).Compute(3).Column=3
Enclosure.Collect.Source(3).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Enclosure.Collect.Source(3).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.Source(3).Compute(4).Type="Convert"
Enclosure.Collect.Source(3).Compute(4).Column=2
Enclosure.Collect.Source(3).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// Name;PATROLStatus;StatusDescriptions;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)


//
//  Blade
//

//
// Discovery

// Source(1) = TPD_Blade
// DeviceID,DisplayID,BiosVersion,KernelVersion,TPD_NodeSystem
Blade.Discovery.Source(1).Type="WBEM"
Blade.Discovery.Source(1).WbemQuery="SELECT Name,Description,BiosVersion,KernelVersion,__PATH FROM TPD_NodeSystem"
Blade.Discovery.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_NodePackage
// Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber,TPD_NodePackage
Blade.Discovery.Source(2).Type="WBEM"
Blade.Discovery.Source(2).WbemQuery="SELECT Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber,__Path FROM TPD_NodePackage"
Blade.Discovery.Source(2).WbemNameSpace="root/tpd"

// Source(3) = TPD_NodeSystemPackage
// TPD_NodePackage,TPD_NodeSystem
Blade.Discovery.Source(3).Type="WBEM"
Blade.Discovery.Source(3).WbemQuery="SELECT Antecedent,Dependent FROM TPD_NodeSystemPackage"
Blade.Discovery.Source(3).WbemNameSpace="root/tpd"

// Source (4) = Join of TPD_NodeSystem and Association Table
// DeviceID,DisplayID,BiosVersion,KernelVersion,TPD_NodeSystem,TPD_NodePackage,TPD_NodeSystem
Blade.Discovery.Source(4).Type="TableJoint"
Blade.Discovery.Source(4).LeftTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Source(4).RightTable=%Blade.Discovery.Source(3)%
Blade.Discovery.Source(4).LeftKeyColumn=5
Blade.Discovery.Source(4).RightKeyColumn=2
Blade.Discovery.Source(4).KeyType="Wbem"
Blade.Discovery.Source(4).DefaultRightLine=";;"

// Source (5) = Join of (4) and TPD_NodePackage
// DeviceID,DisplayID,BiosVersion,KernelVersion,TPD_NodeSystem,TPD_NodePackage,TPD_NodeSystem,Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber,TPD_NodePackage
Blade.Discovery.Source(5).Type="TableJoint"
Blade.Discovery.Source(5).LeftTable=%Blade.Discovery.Source(4)%
Blade.Discovery.Source(5).RightTable=%Blade.Discovery.Source(2)%
Blade.Discovery.Source(5).LeftKeyColumn=6
Blade.Discovery.Source(5).RightKeyColumn=8
Blade.Discovery.Source(5).KeyType="Wbem"
Blade.Discovery.Source(5).DefaultRightLine=";;;;;;;;"


// Remove Paths (Except NodePackage)
//   1         2          3               4            5                6              7           8         9       10          11           12                 13                14                 15
// DeviceID,DisplayID,BiosVersion,KernelVersion,TPD_NodeSystem,TPD_NodePackage,TPD_NodeSystem,Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber
// DeviceID,DisplayID,BiosVersion,KernelVersion,                                              Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber
Blade.Discovery.Source(5).Compute(1).Type="KeepColumns"
Blade.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,8,9,10,11,12,13,14"

// Add identifiers (AdditionalInformation2)
//   1         2          3               4            5       6       7           8               9            10                  11
// DeviceID,DisplayID,BiosVersion,KernelVersion,Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber
Blade.Discovery.Source(5).Compute(2).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(2).Column=3
Blade.Discovery.Source(5).Compute(2).String="Bios Version: "

Blade.Discovery.Source(5).Compute(3).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(3).Column=4
Blade.Discovery.Source(5).Compute(3).String=" - Kernel: "

Blade.Discovery.Source(5).Compute(4).Type="RightConcat"
Blade.Discovery.Source(5).Compute(4).Column=3
Blade.Discovery.Source(5).Compute(4).String=Column(4)

// Add identifiers (AdditionalInformation1)
//   1         2          3                      4                5       6       7           8               9            10                  11
// DeviceID,DisplayID,AdditionalInformation2,KernelVersion,Manufacturer,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber
Blade.Discovery.Source(5).Compute(5).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(5).Column=5
Blade.Discovery.Source(5).Compute(5).String="Manufacturer: "

Blade.Discovery.Source(5).Compute(6).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(6).Column=9
Blade.Discovery.Source(5).Compute(6).String=" - Part Number: "

Blade.Discovery.Source(5).Compute(7).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(7).Column=10
Blade.Discovery.Source(5).Compute(7).String=" - Alternative Part Number: "

Blade.Discovery.Source(5).Compute(8).Type="LeftConcat"
Blade.Discovery.Source(5).Compute(8).Column=11
Blade.Discovery.Source(5).Compute(8).String=" - Alternative Serial Number: "

Blade.Discovery.Source(5).Compute(9).Type="RightConcat"
Blade.Discovery.Source(5).Compute(9).Column=5
Blade.Discovery.Source(5).Compute(9).String=Column(9)

Blade.Discovery.Source(5).Compute(10).Type="RightConcat"
Blade.Discovery.Source(5).Compute(10).Column=5
Blade.Discovery.Source(5).Compute(10).String=Column(10)

Blade.Discovery.Source(5).Compute(11).Type="RightConcat"
Blade.Discovery.Source(5).Compute(11).Column=5
Blade.Discovery.Source(5).Compute(11).String=Column(11)

// Remove whitespaces
// Remove the dash from the systemname
Blade.Discovery.Source(5).Compute(12).Type="Replace"
Blade.Discovery.Source(5).Compute(12).Column=5
Blade.Discovery.Source(5).Compute(12).Replace="  "
Blade.Discovery.Source(5).Compute(12).ReplaceBy=""

// Link Node to System
//  TPD_StorageSystem,TPD_NodeSystem
Blade.Discovery.Source(6).Type="WBEM"
Blade.Discovery.Source(6).WbemQuery="SELECT GroupComponent,PartComponent FROM TPD_NodeComponentCS"
Blade.Discovery.Source(6).WbemNameSpace="root/tpd"

// SystemID to System
// SystemID,TPD_StorageSystem
Blade.Discovery.Source(7).Type="WBEM"
Blade.Discovery.Source(7).WbemQuery="SELECT Name,__PATH FROM TPD_StorageSystem"
Blade.Discovery.Source(7).WbemNameSpace="root/tpd"

// NodeID to NodeSystem
// NodeID,TPD_NodeSystem
Blade.Discovery.Source(8).Type="WBEM"
Blade.Discovery.Source(8).WbemQuery="SELECT Name,__PATH FROM TPD_NodeSystem"
Blade.Discovery.Source(8).WbemNameSpace="root/tpd"

// Node to SystemID
// TPD_StorageSystem,TPD_NodeSystem,SystemID,TPD_StorageSystem
Blade.Discovery.Source(9).Type="TableJoint"
Blade.Discovery.Source(9).LeftTable=%Blade.Discovery.Source(6)%
Blade.Discovery.Source(9).RightTable=%Blade.Discovery.Source(7)%
Blade.Discovery.Source(9).LeftKeyColumn=1
Blade.Discovery.Source(9).RightKeyColumn=2
Blade.Discovery.Source(9).KeyType="Wbem"

// Node to SystemID
// TPD_StorageSystem,TPD_NodeSystem,SystemID,TPD_StorageSystem,NodeID,TPD_NodeSystem
Blade.Discovery.Source(10).Type="TableJoint"
Blade.Discovery.Source(10).LeftTable=%Blade.Discovery.Source(9)%
Blade.Discovery.Source(10).RightTable=%Blade.Discovery.Source(8)%
Blade.Discovery.Source(10).LeftKeyColumn=2
Blade.Discovery.Source(10).RightKeyColumn=2
Blade.Discovery.Source(10).KeyType="Wbem"

// Keep only SystemID and NodeID
// SystemID,NodeID
Blade.Discovery.Source(10).Compute(1).Type="KeepColumns"
Blade.Discovery.Source(10).Compute(1).ColumnNumbers="3,5"

// Attach SystemID to main node discovery
// DeviceID,DisplayID,AdditionalInformation2,KernelVersion,AdditionalInformation1,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber,SystemID,NodeID
Blade.Discovery.Source(11).Type="TableJoint"
Blade.Discovery.Source(11).LeftTable=%Blade.Discovery.Source(5)%
Blade.Discovery.Source(11).RightTable=%Blade.Discovery.Source(10)%
Blade.Discovery.Source(11).LeftKeyColumn=1
Blade.Discovery.Source(11).RightKeyColumn=2
Blade.Discovery.Source(11).KeyType="Wbem"
Blade.Discovery.Source(11).DefaultRightLine=";;"

// Instance Table
//   1         2          3                      4                5                  6       7           8               9            10                  11                12      13
// DeviceID,DisplayID,AdditionalInformation2,KernelVersion,AdditionalInformation1,Model,ModelName,Serialnumber,SparePartNumber,SaleableProductNumber,SaleableSerialNumber,SystemID,NodeID
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(11)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Blade.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Blade.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Blade.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(6)
Blade.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
Blade.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(12)
// Blade.Discovery.Instance.AttachedToDeviceType="Storage"

//
// Collect

// Collect type is multiinstance
Blade.Collect.Type="MultiInstance"

// Source(1) = TPD_NodeSystem
// DeviceID;OperationalStatus;
Blade.Collect.Source(1).Type="Wbem"
Blade.Collect.Source(1).WbemQuery="SELECT Name,OperationalStatus FROM TPD_NodeSystem"
Blade.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
Blade.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Blade.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Blade.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Blade.Collect.Source(1).Compute(2).Column=2
Blade.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
Blade.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Blade.Collect.Source(1).Compute(3).Column=3
Blade.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Blade.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
Blade.Collect.Source(1).Compute(4).Type="Convert"
Blade.Collect.Source(1).Compute(4).Column=2
Blade.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(1)
Blade.Collect.Status=ValueTable.Column(2)
Blade.Collect.StatusInformation=ValueTable.Column(3)




//
//  Batteries
//

//
// Discovery

// Source(1) = TPD_Battery
// DeviceID,Manufacturer,SystemName
Battery.Discovery.Source(1).Type="WBEM"
Battery.Discovery.Source(1).WbemQuery="SELECT DeviceID,Manufacturer,SystemName,__PATH FROM TPD_Battery"
Battery.Discovery.Source(1).WbemNameSpace="root/tpd"

// Duplicate the DeviceID to make DeviceID and DisplayID
// DeviceID,DeviceID,Manufacturer,SystemName,TPD_Battery
Battery.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Discovery.Source(1).Compute(1).Column=1

// Add a dash to the left of the systemname
Battery.Discovery.Source(1).Compute(2).Type="RightConcat"
Battery.Discovery.Source(1).Compute(2).Column=4
Battery.Discovery.Source(1).Compute(2).String="-"

// Remove the SystemName from the DisplayID
// DeviceID,DisplayID,Manufacturer,SystemName,TPD_Battery
Battery.Discovery.Source(1).Compute(3).Type="Replace"
Battery.Discovery.Source(1).Compute(3).Column=2
Battery.Discovery.Source(1).Compute(3).Replace=Column(4)
Battery.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove the dash from the systemname
Battery.Discovery.Source(1).Compute(4).Type="Replace"
Battery.Discovery.Source(1).Compute(4).Column=4
Battery.Discovery.Source(1).Compute(4).Replace="-"
Battery.Discovery.Source(1).Compute(4).ReplaceBy=""

// Add a descriptions
Battery.Discovery.Source(1).Compute(5).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(5).Column=3
Battery.Discovery.Source(1).Compute(5).String="Manufacturer: "

// As this doesn't have a part number, let's see if we can get the associated power supply part number
// TPD_Battery,TPD_NodePowerSupply
Battery.Discovery.Source(2).Type="WBEM"
Battery.Discovery.Source(2).WbemQuery="SELECT Antecedent,Dependent FROM TPD_PowerSupplyBattery"
Battery.Discovery.Source(2).WbemNameSpace="root/tpd"

// PowerSupplyDescription to System
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply
Battery.Discovery.Source(3).Type="WBEM"
Battery.Discovery.Source(3).WbemQuery="SELECT Model,SparePartNumber,SerialNumber,__PATH FROM TPD_NodePowerSupply"
Battery.Discovery.Source(3).WbemNameSpace="root/tpd"

// Battery to PowerSupply
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply,TPD_Battery,TPD_NodePowerSupply
Battery.Discovery.Source(4).Type="TableJoint"
Battery.Discovery.Source(4).LeftTable=%Battery.Discovery.Source(3)%
Battery.Discovery.Source(4).RightTable=%Battery.Discovery.Source(2)%
Battery.Discovery.Source(4).LeftKeyColumn=4
Battery.Discovery.Source(4).RightKeyColumn=2
Battery.Discovery.Source(4).KeyType="Wbem"

// Group all Powersupply Information to a single field
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply,TPD_Battery,TPD_NodePowerSupply
Battery.Discovery.Source(4).Compute(1).Type="LeftConcat"
Battery.Discovery.Source(4).Compute(1).Column=1
Battery.Discovery.Source(4).Compute(1).String="Associated PSU Model: "

Battery.Discovery.Source(4).Compute(2).Type="LeftConcat"
Battery.Discovery.Source(4).Compute(2).Column=2
Battery.Discovery.Source(4).Compute(2).String=" - PSU Part Number: "

Battery.Discovery.Source(4).Compute(3).Type="LeftConcat"
Battery.Discovery.Source(4).Compute(3).Column=3
Battery.Discovery.Source(4).Compute(3).String=" - PSU Serial Number: "

Battery.Discovery.Source(4).Compute(4).Type="RightConcat"
Battery.Discovery.Source(4).Compute(4).Column=1
Battery.Discovery.Source(4).Compute(4).String=Column(2)

Battery.Discovery.Source(4).Compute(5).Type="RightConcat"
Battery.Discovery.Source(4).Compute(5).Column=1
Battery.Discovery.Source(4).Compute(5).String=Column(3)

// Keep only SystemID and NodeID
// PSUInfo,TPD_Battery
Battery.Discovery.Source(4).Compute(6).Type="KeepColumns"
Battery.Discovery.Source(4).Compute(6).ColumnNumbers="1,5"

// Battery to PowerSupplyInformation
// DeviceID,DisplayID,Manufacturer,SystemName,TPD_Battery,PSUInfo,TPD_Battery
Battery.Discovery.Source(5).Type="TableJoint"
Battery.Discovery.Source(5).LeftTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Source(5).RightTable=%Battery.Discovery.Source(4)%
Battery.Discovery.Source(5).LeftKeyColumn=5
Battery.Discovery.Source(5).RightKeyColumn=2
Battery.Discovery.Source(5).KeyType="Wbem"
Battery.Discovery.Source(5).DefaultRightLine=";;"

// Remove Paths
// DeviceID,DisplayID,Manufacturer,SystemName,TPD_Battery,PSUInfo,TPD_Battery
// DeviceID,DisplayID,Manufacturer,SystemName,PSUInfo
Battery.Discovery.Source(5).Compute(1).Type="KeepColumns"
Battery.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,6"


// Instance Table
// DeviceID,DisplayID,Manufacturer,SystemName,PSUInfo
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(5)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Battery.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Battery.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
Battery.Discovery.Instance.AttachedToDeviceType="Blade"

//
// Collect

// Collect type is multiinstance
Battery.Collect.Type="MultiInstance"

// Source(1) = TPD_Battery
// DeviceID;OperationalStatus;
Battery.Collect.Source(1).Type="Wbem"
Battery.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM TPD_Battery"
Battery.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Battery.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
Battery.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Battery.Collect.Source(1).Compute(3).Column=3
Battery.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Battery.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
Battery.Collect.Source(1).Compute(4).Type="Convert"
Battery.Collect.Source(1).Compute(4).Column=2
Battery.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

//
//  CPU
//

//
// Discovery

// Source(1) = TPD_NodeCPU
// DeviceID,DisplayID,Model,SystemName
CPU.Discovery.Source(1).Type="WBEM"
CPU.Discovery.Source(1).WbemQuery="SELECT DeviceID,ElementName,Model,SystemName FROM TPD_NodeCPU"
CPU.Discovery.Source(1).WbemNameSpace="root/tpd"

// Remove (R)
CPU.Discovery.Source(1).Compute(1).Type="Replace"
CPU.Discovery.Source(1).Compute(1).Column=3
CPU.Discovery.Source(1).Compute(1).Replace="(R)"
CPU.Discovery.Source(1).Compute(1).ReplaceBy=""

// Instance Table
// DeviceID,DisplayID,Manufacturer,SystemName
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(2)
CPU.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
CPU.Discovery.Instance.AttachedToDeviceType="Blade"

//
// Collect

// Collect type is multiinstance
CPU.Collect.Type="MultiInstance"

// Source(1) = TPD_NodeCPU
// DeviceID;OperationalStatus;
CPU.Collect.Source(1).Type="Wbem"
CPU.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM TPD_NodeCPU"
CPU.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
CPU.Collect.Source(1).Compute(2).Type="ArrayTranslate"
CPU.Collect.Source(1).Compute(2).Column=2
CPU.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
CPU.Collect.Source(1).Compute(3).Type="ArrayTranslate"
CPU.Collect.Source(1).Compute(3).Column=3
CPU.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
CPU.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
CPU.Collect.Source(1).Compute(4).Type="Convert"
CPU.Collect.Source(1).Compute(4).Column=2
CPU.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(2)
CPU.Collect.StatusInformation=ValueTable.Column(3)


//
//  Memory
//

//
// Discovery


// Source(1) = TPD_PhysicalMemory
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,TPD_PhysicalMemory
Memory.Discovery.Source(1).Type="WBEM"
Memory.Discovery.Source(1).WbemQuery="SELECT Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,__PATH FROM TPD_PhysicalMemory"
Memory.Discovery.Source(1).WbemNameSpace="root/tpd"

// Add Slot Information
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,TPD_PhysicalMemory
Memory.Discovery.Source(1).Compute(1).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(1).Column=7
Memory.Discovery.Source(1).Compute(1).String="Location: "

// Convert Memory to MB
Memory.Discovery.Source(1).Compute(2).Type="Divide"
Memory.Discovery.Source(1).Compute(2).Column=2
Memory.Discovery.Source(1).Compute(2).DivideBy=1048576

// As no systemname is listed, let's find the node by association
// TPD_NodePackage,TPD_PhysicalMemory
Memory.Discovery.Source(2).Type="WBEM"
Memory.Discovery.Source(2).WbemQuery="SELECT GroupComponent,PartComponent FROM TPD_NodePackagedMemory"
Memory.Discovery.Source(2).WbemNameSpace="root/tpd"

// PowerSupplyDescription to System
// NodeID,TPD_NodePackage
Memory.Discovery.Source(3).Type="WBEM"
Memory.Discovery.Source(3).WbemQuery="SELECT Tag,__PATH FROM TPD_NodePackage"
Memory.Discovery.Source(3).WbemNameSpace="root/tpd"

// Memory to PowerSupply
// TPD_NodePackage,TPD_PhysicalMemory,NodeID,TPD_NodePackage
Memory.Discovery.Source(4).Type="TableJoint"
Memory.Discovery.Source(4).LeftTable=%Memory.Discovery.Source(2)%
Memory.Discovery.Source(4).RightTable=%Memory.Discovery.Source(3)%
Memory.Discovery.Source(4).LeftKeyColumn=1
Memory.Discovery.Source(4).RightKeyColumn=2
Memory.Discovery.Source(4).KeyType="Wbem"

// Memory to PowerSupply
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,TPD_PhysicalMemory,TPD_NodePackage,TPD_PhysicalMemory,NodeID,TPD_NodePackage
Memory.Discovery.Source(5).Type="TableJoint"
Memory.Discovery.Source(5).LeftTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Source(5).RightTable=%Memory.Discovery.Source(4)%
Memory.Discovery.Source(5).LeftKeyColumn=8
Memory.Discovery.Source(5).RightKeyColumn=2
Memory.Discovery.Source(5).KeyType="Wbem"
Memory.Discovery.Source(5).DefaultRightLine=";;;;"

// Remove Paths
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,TPD_PhysicalMemory,TPD_NodePackage,TPD_PhysicalMemory,NodeID,TPD_NodePackage
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,                                                      NodeID
Memory.Discovery.Source(5).Compute(1).Type="KeepColumns"
Memory.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,5,6,7,11"

// Instance Table
// Tag,Capacity,ElementName,Manufacturer,PartNumber,SerialNumber,SlotID,NodeID
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(5)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Memory.Discovery.Instance.Size=InstanceTable.Column(2)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(4)
Memory.Discovery.Instance.Model=InstanceTable.Column(5)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)
Memory.Discovery.Instance.AttachedToDeviceType="Blade"

//
// Collect

// Collect type is multiinstance
Memory.Collect.Type="MultiInstance"

// Source(1) = TPD_PhysicalMemory
// DeviceID;OperationalStatus;
Memory.Collect.Source(1).Type="Wbem"
Memory.Collect.Source(1).WbemQuery="SELECT Tag,OperationalStatus FROM TPD_PhysicalMemory"
Memory.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Memory.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
Memory.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Memory.Collect.Source(1).Compute(3).Column=3
Memory.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Memory.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
Memory.Collect.Source(1).Compute(4).Type="Convert"
Memory.Collect.Source(1).Compute(4).Column=2
Memory.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)

//
//  PowerSupply
//

//
// Discovery

// Source(1) = TPD_NodePowerSupply
// DeviceID,ElementName,SystemName,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber
PowerSupply.Discovery.Source(1).Type="WBEM"
PowerSupply.Discovery.Source(1).WbemQuery="SELECT DeviceID,ElementName,SystemName,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber FROM TPD_NodePowerSupply"
PowerSupply.Discovery.Source(1).WbemNameSpace="root/tpd"

// Add SystemType
// DeviceID,ElementName,SystemName,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.Source(1).Compute(1).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(1).Column=8
PowerSupply.Discovery.Source(1).Compute(1).String=";Blade"

// Source(2) = TPD_CagePowerSupply
// DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber
PowerSupply.Discovery.Source(2).Type="WBEM"
PowerSupply.Discovery.Source(2).WbemQuery="SELECT DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber FROM TPD_CagePowerSupply"
PowerSupply.Discovery.Source(2).WbemNameSpace="root/tpd"

// Add SystemType
// DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.Source(2).Compute(1).Type="RightConcat"
PowerSupply.Discovery.Source(2).Compute(1).Column=8
PowerSupply.Discovery.Source(2).Compute(1).String=";Enclosure"

// Extract the SystemName from the Name
// DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.Source(2).Compute(2).Type="Extract"
PowerSupply.Discovery.Source(2).Compute(2).Column=3
PowerSupply.Discovery.Source(2).Compute(2).Subcolumn=1
PowerSupply.Discovery.Source(2).Compute(2).Subseparators="-"

// Union of 1 and 2
// DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.Source(3).Type="TableUnion"
PowerSupply.Discovery.Source(3).Table1=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Source(3).Table2=%PowerSupply.Discovery.Source(2)%

// Add Identifiers
// DeviceID,ElementName,Name,Manufacturer,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.Source(3).Compute(1).Type="LeftConcat"
PowerSupply.Discovery.Source(3).Compute(1).Column=4
PowerSupply.Discovery.Source(3).Compute(1).String="Manufacturer: "

PowerSupply.Discovery.Source(3).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(3).Compute(2).Column=5
PowerSupply.Discovery.Source(3).Compute(2).String=" - Alternative Part Number: "

PowerSupply.Discovery.Source(3).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(3).Compute(3).Column=6
PowerSupply.Discovery.Source(3).Compute(3).String=" - Model: "

PowerSupply.Discovery.Source(3).Compute(4).Type="RightConcat"
PowerSupply.Discovery.Source(3).Compute(4).Column=4
PowerSupply.Discovery.Source(3).Compute(4).String=Column(5)

PowerSupply.Discovery.Source(3).Compute(5).Type="RightConcat"
PowerSupply.Discovery.Source(3).Compute(5).Column=4
PowerSupply.Discovery.Source(3).Compute(5).String=Column(6)

PowerSupply.Discovery.Source(3).Compute(6).Type="LeftConcat"
PowerSupply.Discovery.Source(3).Compute(6).Column=7
PowerSupply.Discovery.Source(3).Compute(6).String="Serial Number: "

PowerSupply.Discovery.Source(3).Compute(7).Type="LeftConcat"
PowerSupply.Discovery.Source(3).Compute(7).Column=8
PowerSupply.Discovery.Source(3).Compute(7).String="Part Number: "

// Instance Table
// DeviceID,ElementName,Name,AdditionalInformation1,ModelName,Model,SerialNumber,SparePartNumber,SystemType
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(3)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(8)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(9)


//
// Collect

// Collect type is multiinstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = TPD_PowerSupply
// DeviceID;OperationalStatus;ACStatus
PowerSupply.Collect.Source(1).Type="Wbem"
PowerSupply.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus,ACStatus FROM TPD_PowerSupply"
PowerSupply.Collect.Source(1).WbemNameSpace="root/tpd"


// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus;ACStatus
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus,ACStatus
PowerSupply.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation,ACStatus
PowerSupply.Collect.Source(1).Compute(3).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
PowerSupply.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Duplicate the "ACStatus" column
// DeviceID,PATROLStatusArray,StatusInformation,ACStatus,ACStatus
PowerSupply.Collect.Source(1).Compute(4).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(4).Column=4

// Then we translate ACStatus into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,StatusInformation,ACStatusPatrol,ACStatus
PowerSupply.Collect.Source(1).Compute(5).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(5).Column=4
PowerSupply.Collect.Source(1).Compute(5).TranslationTable="ACStatusTranslationTable"

ACStatusTranslationTable(1)="|OK"
ACStatusTranslationTable(3)="|ALARM"
ACStatusTranslationTable(Default)="|UNKNOWN"

// Add the AC Status to the main Status Array
// DeviceID,PATROLStatusArray,OperationalStatus,ACStatus
PowerSupply.Collect.Source(1).Compute(6).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(6).Column=2
PowerSupply.Collect.Source(1).Compute(6).String=Column(4)


// Then we translate ACStatus into Status Information
// DeviceID,PATROLStatusArray,StatusInformation,ACStatusPatrol,ACStatus
PowerSupply.Collect.Source(1).Compute(7).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(7).Column=5
PowerSupply.Collect.Source(1).Compute(7).TranslationTable="ACStatusInformationTranslationTable"

ACStatusInformationTranslationTable(1)=""
ACStatusInformationTranslationTable(3)=" AC Failure"
ACStatusInformationTranslationTable(Default)=""

// Add the AC Status to the main StatusInformation Array
// DeviceID,PATROLStatusArray,OperationalStatus,ACStatusPatrol,ACStatusInformation
PowerSupply.Collect.Source(1).Compute(8).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(8).Column=3
PowerSupply.Collect.Source(1).Compute(8).String=Column(5)


// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatusArray,OperationalStatus,ACStatusPatrol,ACStatusInformation
PowerSupply.Collect.Source(1).Compute(9).Type="Convert"
PowerSupply.Collect.Source(1).Compute(9).Column=2
PowerSupply.Collect.Source(1).Compute(9).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
//  Batteries
//

//
// Discovery

// Source(1) = TPD_Fan
// DeviceID,SystemName
Fan.Discovery.Source(1).Type="WBEM"
Fan.Discovery.Source(1).WbemQuery="SELECT DeviceID,SystemCreationClassName,__PATH FROM TPD_Fan"
Fan.Discovery.Source(1).WbemNameSpace="root/tpd"

// Duplicate the DeviceID to make DeviceID and DisplayID
// DeviceID,DeviceID,SystemName,SystemCreationClassName,TPD_Fan
Fan.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(1).Column=1

// Duplicate the DeviceID again to make SystemID
// DeviceID,DeviceID,DeviceID,SystemCreationClassName,TPD_Fan
Fan.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(2).Column=1

// Extract the SystemName from the Name
// DeviceID,DeviceID,SystemID,SystemCreationClassName,TPD_Fan
Fan.Discovery.Source(1).Compute(3).Type="Extract"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).Subcolumn=1
Fan.Discovery.Source(1).Compute(3).Subseparators="-"

// Remove the SystemName from the DisplayID
// DeviceID,DisplayID,SystemID,SystemCreationClassName,TPD_Fan
Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=2
Fan.Discovery.Source(1).Compute(4).Replace=Column(3)
Fan.Discovery.Source(1).Compute(4).ReplaceBy=""

// Add a MSHW to the left of the DisplayID
Fan.Discovery.Source(1).Compute(5).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(5).Column=2
Fan.Discovery.Source(1).Compute(5).String="MSHW"

// Remove the MSHW dash from the DisplayID
Fan.Discovery.Source(1).Compute(6).Type="Replace"
Fan.Discovery.Source(1).Compute(6).Column=2
Fan.Discovery.Source(1).Compute(6).Replace="MSHW-"
Fan.Discovery.Source(1).Compute(6).ReplaceBy=""

// Translate the SystemCreationClassName to SystemType
// DeviceID,DisplayID,SystemID,SystemType,TPD_Fan
Fan.Discovery.Source(1).Compute(7).Type="Translate"
Fan.Discovery.Source(1).Compute(7).Column=4
Fan.Discovery.Source(1).Compute(7).TranslationTable="FanSystemTypeTranslationTable"

FanSystemTypeTranslationTable("TPD_NodeSystem")="Blade"
FanSystemTypeTranslationTable("TPD_StorageSystem")="Enclosure"
FanSystemTypeTranslationTable(Default)="Enclosure"

// As this doesn't have a part number, let's see if we can get the associated power supply part number
// TPD_Fan,TPD_NodePowerSupply
Fan.Discovery.Source(2).Type="WBEM"
Fan.Discovery.Source(2).WbemQuery="SELECT Antecedent,Dependent FROM TPD_PowerSupplyCooling"
Fan.Discovery.Source(2).WbemNameSpace="root/tpd"

// PowerSupplyDescription to System
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply
Fan.Discovery.Source(3).Type="WBEM"
Fan.Discovery.Source(3).WbemQuery="SELECT Model,SparePartNumber,SerialNumber,__PATH FROM TPD_PowerSupply"
Fan.Discovery.Source(3).WbemNameSpace="root/tpd"

// Fan to PowerSupply
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply,TPD_Fan,TPD_NodePowerSupply
Fan.Discovery.Source(4).Type="TableJoint"
Fan.Discovery.Source(4).LeftTable=%Fan.Discovery.Source(3)%
Fan.Discovery.Source(4).RightTable=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(4).LeftKeyColumn=4
Fan.Discovery.Source(4).RightKeyColumn=2
Fan.Discovery.Source(4).KeyType="Wbem"

// Group all Powersupply Information to a single field
// Model,SparePartNumber,SerialNumber,TPD_NodePowerSupply,TPD_Fan,TPD_NodePowerSupply
Fan.Discovery.Source(4).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(4).Compute(1).Column=1
Fan.Discovery.Source(4).Compute(1).String="Associated PSU Model: "

Fan.Discovery.Source(4).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(4).Compute(2).Column=2
Fan.Discovery.Source(4).Compute(2).String=" - PSU Part Number: "

Fan.Discovery.Source(4).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(4).Compute(3).Column=3
Fan.Discovery.Source(4).Compute(3).String=" - PSU Serial Number: "

Fan.Discovery.Source(4).Compute(4).Type="RightConcat"
Fan.Discovery.Source(4).Compute(4).Column=1
Fan.Discovery.Source(4).Compute(4).String=Column(2)

Fan.Discovery.Source(4).Compute(5).Type="RightConcat"
Fan.Discovery.Source(4).Compute(5).Column=1
Fan.Discovery.Source(4).Compute(5).String=Column(3)

// Keep only SystemID and NodeID
// PSUInfo,TPD_Fan
Fan.Discovery.Source(4).Compute(6).Type="KeepColumns"
Fan.Discovery.Source(4).Compute(6).ColumnNumbers="1,5"

// Fan to PowerSupplyInformation
// DeviceID,DisplayID,SystemID,SystemType,TPD_Fan,PSUInfo,TPD_Fan
Fan.Discovery.Source(5).Type="TableJoint"
Fan.Discovery.Source(5).LeftTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(5).RightTable=%Fan.Discovery.Source(4)%
Fan.Discovery.Source(5).LeftKeyColumn=5
Fan.Discovery.Source(5).RightKeyColumn=2
Fan.Discovery.Source(5).KeyType="Wbem"
Fan.Discovery.Source(5).DefaultRightLine=";;"

// Remove Paths
// DeviceID,DisplayID,SystemID,SystemType,TPD_Fan,PSUInfo,TPD_Fan
// DeviceID,DisplayID,SystemID,SystemType,PSUInfo
Fan.Discovery.Source(5).Compute(1).Type="KeepColumns"
Fan.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,6"


// Instance Table
// DeviceID,DisplayID,SystemID,SystemType,PSUInfo
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(5)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(4)

//
// Collect

// Collect type is multiinstance
Fan.Collect.Type="MultiInstance"

// Source(1) = TPD_Fan
// DeviceID;OperationalStatus;
Fan.Collect.Source(1).Type="Wbem"
Fan.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM TPD_Fan"
Fan.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Fan.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
Fan.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Fan.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
Fan.Collect.Source(1).Compute(4).Type="Convert"
Fan.Collect.Source(1).Compute(4).Column=2
Fan.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


//
//  Voltage
//

//
// Discovery

// Source(1) = TPD_SFP
// DeviceID,DisplayID,VoltHighWarn,VoltLowWarn
Voltage.Discovery.Source(1).Type="WBEM"
Voltage.Discovery.Source(1).WbemQuery="SELECT Tag,ElementName,VoltHighWarn,VoltLowWarn FROM TPD_SFP"
Voltage.Discovery.Source(1).WbemNameSpace="root/tpd"

// Add Identifier
// DeviceID,DisplayID,VoltHighWarn,VoltLowWarn
Voltage.Discovery.Source(1).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(1).Compute(1).Column=2
Voltage.Discovery.Source(1).Compute(1).String="SFP "

// Duplicate the DeviceID
// DeviceID,DeviceID,DisplayID,VoltHighWarn,VoltLowWarn
Voltage.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Voltage.Discovery.Source(1).Compute(2).Column=1

// Extract the FCPortID From the DeviceID
// DeviceID,FCPortID,DisplayID,VoltHighWarn,VoltLowWarn
Voltage.Discovery.Source(1).Compute(3).Type="Extract"
Voltage.Discovery.Source(1).Compute(3).Column=2
Voltage.Discovery.Source(1).Compute(3).Subcolumn=1
Voltage.Discovery.Source(1).Compute(3).Subseparators="-"

// Get SystemID from FC Port Class
// FCPortID,NodeID
Voltage.Discovery.Source(2).Type="WBEM"
Voltage.Discovery.Source(2).WbemQuery="SELECT DeviceID,SystemName FROM TPD_FCPort"
Voltage.Discovery.Source(2).WbemNameSpace="root/tpd"

// Attach NodeID to main table
// DeviceID,FCPortID,DisplayID,VoltHighWarn,VoltLowWarn,FCPortID,NodeID
Voltage.Discovery.Source(3).Type="TableJoint"
Voltage.Discovery.Source(3).LeftTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Source(3).RightTable=%Voltage.Discovery.Source(2)%
Voltage.Discovery.Source(3).LeftKeyColumn=2
Voltage.Discovery.Source(3).RightKeyColumn=1
Voltage.Discovery.Source(3).DefaultRightLine=";;"

// Instance Table
// DeviceID,FCPortID,DisplayID,VoltHighWarn,VoltLowWarn,FCPortID,NodeID
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(3)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(7)
Voltage.Discovery.Instance.AttachedToDeviceType="Blade"

//
// Collect

// Collect type is multiinstance
Voltage.Collect.Type="MultiInstance"

// Source(1) = TPD_NodeVoltage
// DeviceID;Voltage;
Voltage.Collect.Source(1).Type="Wbem"
Voltage.Collect.Source(1).WbemQuery="SELECT Tag,Vcc FROM TPD_SFP"
Voltage.Collect.Source(1).WbemNameSpace="root/tpd"

// ValueTable = Source(1)
// DeviceID;Voltage;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)



//
//  PhysicalDisk
//

//
// Discovery

// Source(1) = TPD_DiskDrive
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType
PhysicalDisk.Discovery.Source(1).Type="WBEM"
PhysicalDisk.Discovery.Source(1).WbemQuery="SELECT DeviceID,ElementName,RPM,InterconnectType,DeviceType FROM TPD_DiskDrive"
PhysicalDisk.Discovery.Source(1).WbemNameSpace="root/tpd"

// Translate the InterConnectType
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=4
PhysicalDisk.Discovery.Source(1).Compute(1).TranslationTable="InterconnectTypeTranslationTable"

InterconnectTypeTranslationTable(1)="Other"
InterconnectTypeTranslationTable(2)="N/A"
InterconnectTypeTranslationTable(3)="ATA"
InterconnectTypeTranslationTable(4)="SATA"
InterconnectTypeTranslationTable(5)="SAS"
InterconnectTypeTranslationTable(6)="FC"
InterconnectTypeTranslationTable(7)="SOP"
InterconnectTypeTranslationTable(Default)="Unknown"

// Translate the DeviceType
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=5
PhysicalDisk.Discovery.Source(1).Compute(2).TranslationTable="DeviceTypeTranslationTable"

DeviceTypeTranslationTable(1)="HDD"
DeviceTypeTranslationTable(2)="HDD-NL"
DeviceTypeTranslationTable(4)="SSD"
DeviceTypeTranslationTable(Default)="Unknown"

// Add RPM Unit
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType
PhysicalDisk.Discovery.Source(1).Compute(3).Type="RightConcat"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=3
PhysicalDisk.Discovery.Source(1).Compute(3).String=" RPM"

// Source(2) = TPD_DiskDrivePackage
// DeviceID,Manufacturer,Model,SerialNumber
PhysicalDisk.Discovery.Source(2).Type="WBEM"
PhysicalDisk.Discovery.Source(2).WbemQuery="SELECT Tag,Manufacturer,Model,SerialNumber FROM TPD_DiskDrivePackage"
PhysicalDisk.Discovery.Source(2).WbemNameSpace="root/tpd"

// Source(3) = TPD_DiskStorageExtent
// DeviceID,NumberOfBlocks,BlockSize
PhysicalDisk.Discovery.Source(3).Type="WBEM"
PhysicalDisk.Discovery.Source(3).WbemQuery="SELECT DeviceID,NumberOfBlocks,BlockSize FROM TPD_DiskStorageExtent"
PhysicalDisk.Discovery.Source(3).WbemNameSpace="root/tpd"

// Calculate the Capacity
// DeviceID,Capacity,BlockSize
PhysicalDisk.Discovery.Source(3).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(3).Compute(1).Column=2
PhysicalDisk.Discovery.Source(3).Compute(1).MultiplyBy=Column(3)

// Attach DiskDrive to DiskDrivePackage
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,DeviceID,Manufacturer,Model,SerialNumber
PhysicalDisk.Discovery.Source(4).Type="TableJoint"
PhysicalDisk.Discovery.Source(4).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(4).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(4).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(4).RightKeyColumn=1
PhysicalDisk.Discovery.Source(4).DefaultRightLine=";;;;"

// Attach DiskStorageExtent
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,DeviceID,Manufacturer,Model,SerialNumber,DeviceID,Capacity,BlockSize
PhysicalDisk.Discovery.Source(5).Type="TableJoint"
PhysicalDisk.Discovery.Source(5).LeftTable=%PhysicalDisk.Discovery.Source(4)%
PhysicalDisk.Discovery.Source(5).RightTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Source(5).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(5).RightKeyColumn=1
PhysicalDisk.Discovery.Source(5).DefaultRightLine=";;;"

// Trim down the table
//    1       2        3          4           5           6          7        8          9       10       11       12
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,DeviceID,Manufacturer,Model,SerialNumber,DeviceID,Capacity,BlockSize
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,         Manufacturer,Model,SerialNumber,         Capacity
PhysicalDisk.Discovery.Source(5).Compute(1).Type="KeepColumns"
PhysicalDisk.Discovery.Source(5).Compute(1).ColumnNumbers="1,2,3,4,5,7,8,9,11"

// Build a table to link PhysicalDisks to Enclosures
// DeviceID,TPD_DiskDrivePackage
PhysicalDisk.Discovery.Source(6).Type="WBEM"
PhysicalDisk.Discovery.Source(6).WbemQuery="SELECT Tag,__PATH FROM TPD_DiskDrivePackage"
PhysicalDisk.Discovery.Source(6).WbemNameSpace="root/tpd"

// TPD_Magazine,TPD_DiskDrivePackage
PhysicalDisk.Discovery.Source(7).Type="WBEM"
PhysicalDisk.Discovery.Source(7).WbemQuery="SELECT GroupComponent,PartComponent FROM TPD_MagazineContainer"
PhysicalDisk.Discovery.Source(7).WbemNameSpace="root/tpd"

// MagazineID,TPD_Magazine
PhysicalDisk.Discovery.Source(8).Type="WBEM"
PhysicalDisk.Discovery.Source(8).WbemQuery="SELECT Tag,__PATH FROM TPD_Magazine"
PhysicalDisk.Discovery.Source(8).WbemNameSpace="root/tpd"

// Extract the EnclosureID From the MagazineID
// EnclosureID,TPD_Magazine
PhysicalDisk.Discovery.Source(8).Compute(1).Type="Extract"
PhysicalDisk.Discovery.Source(8).Compute(1).Column=1
PhysicalDisk.Discovery.Source(8).Compute(1).Subcolumn=1
PhysicalDisk.Discovery.Source(8).Compute(1).Subseparators="-"

// Join the Physical Disk to Association Table
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage
PhysicalDisk.Discovery.Source(9).Type="TableJoint"
PhysicalDisk.Discovery.Source(9).LeftTable=%PhysicalDisk.Discovery.Source(6)%
PhysicalDisk.Discovery.Source(9).RightTable=%PhysicalDisk.Discovery.Source(7)%
PhysicalDisk.Discovery.Source(9).LeftKeyColumn=2
PhysicalDisk.Discovery.Source(9).RightKeyColumn=2
PhysicalDisk.Discovery.Source(9).KeyType="Wbem"
PhysicalDisk.Discovery.Source(9).DefaultRightLine=";;"

// Join the above to the Magazine Table
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage,EnclosureID,TPD_Magazine
PhysicalDisk.Discovery.Source(10).Type="TableJoint"
PhysicalDisk.Discovery.Source(10).LeftTable=%PhysicalDisk.Discovery.Source(9)%
PhysicalDisk.Discovery.Source(10).RightTable=%PhysicalDisk.Discovery.Source(8)%
PhysicalDisk.Discovery.Source(10).LeftKeyColumn=3
PhysicalDisk.Discovery.Source(10).RightKeyColumn=2
PhysicalDisk.Discovery.Source(10).KeyType="Wbem"
PhysicalDisk.Discovery.Source(10).DefaultRightLine=";;"

// Trim the Table down
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage,EnclosureID,TPD_Magazine
// DeviceID,                                                       EnclosureID
PhysicalDisk.Discovery.Source(10).Compute(1).Type="KeepColumns"
PhysicalDisk.Discovery.Source(10).Compute(1).ColumnNumbers="1,5"

// Join the Main Physical Disks table to the Enclosure Table
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,Manufacturer,Model,SerialNumber,Capacity,DeviceID,EnclosureID
PhysicalDisk.Discovery.Source(11).Type="TableJoint"
PhysicalDisk.Discovery.Source(11).LeftTable=%PhysicalDisk.Discovery.Source(5)%
PhysicalDisk.Discovery.Source(11).RightTable=%PhysicalDisk.Discovery.Source(10)%
PhysicalDisk.Discovery.Source(11).LeftKeyColumn=1
PhysicalDisk.Discovery.Source(11).RightKeyColumn=1
PhysicalDisk.Discovery.Source(11).DefaultRightLine=";;"

// Add Enclosure Type
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,Manufacturer,Model,SerialNumber,Capacity,DeviceID,EnclosureID,EnclosureType
PhysicalDisk.Discovery.Source(11).Compute(1).Type="RightConcat"
PhysicalDisk.Discovery.Source(11).Compute(1).Column=11
PhysicalDisk.Discovery.Source(11).Compute(1).String=";Enclosure"

// InternalDisks
// Source(11) = TPD_DiskDrive
// DeviceID,DisplayID,Manufacturer,Model,SerialNumber,Capacity
PhysicalDisk.Discovery.Source(12).Type="WBEM"
PhysicalDisk.Discovery.Source(12).WbemQuery="SELECT Tag,ElementName,Manufacturer,Model,SerialNumber,Capacity FROM TPD_IDEDrive"
PhysicalDisk.Discovery.Source(12).WbemNameSpace="root/tpd"

// Add spaces to match the main Physical Disk Discovery
// DeviceID,DisplayID,(RPM),(InterConnectType),(DeviceType),Manufacturer,Model,SerialNumber,Capacity
PhysicalDisk.Discovery.Source(12).Compute(1).Type="RightConcat"
PhysicalDisk.Discovery.Source(12).Compute(1).Column=2
PhysicalDisk.Discovery.Source(12).Compute(1).String=";;;"

// DeviceID,DisplayID,(RPM),(InterConnectType),(DeviceType),Manufacturer,Model,SerialNumber,Capacity,(DeviceID),EnclosureID
PhysicalDisk.Discovery.Source(12).Compute(2).Type="RightConcat"
PhysicalDisk.Discovery.Source(12).Compute(2).Column=9
PhysicalDisk.Discovery.Source(12).Compute(2).String=";;EnclosureID"

// Copy the Device ID to the EnclosureID column
// DeviceID,DisplayID,(RPM),(InterConnectType),(DeviceType),Manufacturer,Model,SerialNumber,Capacity,(DeviceID),DeviceID
PhysicalDisk.Discovery.Source(12).Compute(3).Type="Replace"
PhysicalDisk.Discovery.Source(12).Compute(3).Column=11
PhysicalDisk.Discovery.Source(12).Compute(3).Replace=Column(11)
PhysicalDisk.Discovery.Source(12).Compute(3).ReplaceBy=Column(1)

// Extract the EnclosureID from the DeviceID
// DeviceID,DisplayID,(RPM),(InterConnectType),(DeviceType),Manufacturer,Model,SerialNumber,Capacity,(DeviceID),EnclosureID
PhysicalDisk.Discovery.Source(12).Compute(4).Type="Extract"
PhysicalDisk.Discovery.Source(12).Compute(4).Column=11
PhysicalDisk.Discovery.Source(12).Compute(4).Subcolumn=1
PhysicalDisk.Discovery.Source(12).Compute(4).Subseparators="-"

// Add Enclosure Type
// DeviceID,DisplayID,(RPM),(InterConnectType),(DeviceType),Manufacturer,Model,SerialNumber,Capacity,(DeviceID),EnclosureID,EnclosureType
PhysicalDisk.Discovery.Source(12).Compute(5).Type="RightConcat"
PhysicalDisk.Discovery.Source(12).Compute(5).Column=11
PhysicalDisk.Discovery.Source(12).Compute(5).String=";Blade"

// Union the two discoveries
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,Manufacturer,Model,SerialNumber,Capacity,DeviceID,EnclosureID,EnclosureType
PhysicalDisk.Discovery.Source(13).Type="TableUnion"
PhysicalDisk.Discovery.Source(13).Table1=%PhysicalDisk.Discovery.Source(11)%
PhysicalDisk.Discovery.Source(13).Table2=%PhysicalDisk.Discovery.Source(12)%

// Instance Table
//     1       2       3           4           5            6        7        8        9          10        11         12
// DeviceID,DisplayID,RPM,InterconnectType,DeviceType,Manufacturer,Model,SerialNumber,Capacity,DeviceID,EnclosureID,EnclosureType
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(13)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(11)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(12)

//
// Collect

// Collect type is multiinstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = TPD_DiskDrive
// DeviceID;OperationalStatus;
PhysicalDisk.Collect.Source(1).Type="Wbem"
PhysicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM TPD_DiskDrive"
PhysicalDisk.Collect.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_IDEDrive
// DeviceID;OperationalStatus;
PhysicalDisk.Collect.Source(2).Type="Wbem"
PhysicalDisk.Collect.Source(2).WbemQuery="SELECT Tag,OperationalStatus FROM TPD_IDEDrive"
PhysicalDisk.Collect.Source(2).WbemNameSpace="root/tpd"

// Union of (1) and (2)
// DeviceID;OperationalStatus;
PhysicalDisk.Collect.Source(3).Type="TableUnion"
PhysicalDisk.Collect.Source(3).Table1=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.Source(3).Table2=%PhysicalDisk.Collect.Source(2)%


// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
PhysicalDisk.Collect.Source(3).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(3).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
PhysicalDisk.Collect.Source(3).Compute(2).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(3).Compute(2).Column=2
PhysicalDisk.Collect.Source(3).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
PhysicalDisk.Collect.Source(3).Compute(3).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(3).Compute(3).Column=3
PhysicalDisk.Collect.Source(3).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
PhysicalDisk.Collect.Source(3).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
PhysicalDisk.Collect.Source(3).Compute(4).Type="Convert"
PhysicalDisk.Collect.Source(3).Compute(4).Column=2
PhysicalDisk.Collect.Source(3).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(3)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
//  LogicalDisk
//

//
// Discovery

// Source(1) = TPD_DynamicStoragePool
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,CIM_StoragePool
LogicalDisk.Discovery.Source(1).Type="WBEM"
LogicalDisk.Discovery.Source(1).WbemQuery="SELECT ElementName,PoolID,TotalManagedSpace,Primordial,RaidType,__PATH FROM TPD_DynamicStoragePool"
LogicalDisk.Discovery.Source(1).WbemNameSpace="root/tpd"

// Add Pool Type and Include in Capacity
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(1).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(1).Compute(1).Column=5
LogicalDisk.Discovery.Source(1).Compute(1).String=";CPG;1"

// Source(2) = TPD_StoragePool
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,CIM_StoragePool
LogicalDisk.Discovery.Source(2).Type="WBEM"
LogicalDisk.Discovery.Source(2).WbemQuery="SELECT ElementName,PoolID,TotalManagedSpace,Primordial,RaidType,__PATH FROM TPD_StoragePool"
LogicalDisk.Discovery.Source(2).WbemNameSpace="root/tpd"

// Add Token PoolType and Include in Capacity
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(2).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(2).Compute(1).Column=5
LogicalDisk.Discovery.Source(2).Compute(1).String=";PoolType;0"

// Translate Primordial
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(2).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(2).Compute(2).Column=4
LogicalDisk.Discovery.Source(2).Compute(2).TranslationTable="PrimordialTranslationTable"

PrimordialTranslationTable("true")="Primordial"
PrimordialTranslationTable("false")="Disk Group"
PrimordialTranslationTable(Default)=""

// Put translated primordial in pool type
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(2).Compute(3).Type="Replace"
LogicalDisk.Discovery.Source(2).Compute(3).Column=6
LogicalDisk.Discovery.Source(2).Compute(3).Replace=Column(6)
LogicalDisk.Discovery.Source(2).Compute(3).ReplaceBy=Column(4)

// Source(3) = TPD_DeltaReplicaStoragePool
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,CIM_StoragePool
LogicalDisk.Discovery.Source(3).Type="WBEM"
LogicalDisk.Discovery.Source(3).WbemQuery="SELECT ElementName,PoolID,TotalManagedSpace,Primordial,RaidType,__PATH FROM TPD_DeltaReplicaStoragePool"
LogicalDisk.Discovery.Source(3).WbemNameSpace="root/tpd"

// Add Pool Type and Include in Capacity
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(3).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(3).Compute(1).Column=5
LogicalDisk.Discovery.Source(3).Compute(1).String=";Replica Pool;0"

// Union all the pools
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool
LogicalDisk.Discovery.Source(4).Type="TableUnion"
LogicalDisk.Discovery.Source(4).Table1=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(4).Table2=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(4).Table3=%LogicalDisk.Discovery.Source(3)%

// Link the Pool to the Storage System
// SystemID,TPD_StorageSystem
LogicalDisk.Discovery.Source(5).Type="WBEM"
LogicalDisk.Discovery.Source(5).WbemQuery="SELECT Name,__PATH FROM TPD_StorageSystem"
LogicalDisk.Discovery.Source(5).WbemNameSpace="root/tpd"

// TPD_StorageSystem,CIM_StoragePool
LogicalDisk.Discovery.Source(6).Type="WBEM"
LogicalDisk.Discovery.Source(6).WbemQuery="SELECT GroupComponent,PartComponent FROM TPD_HostedStoragePool"
LogicalDisk.Discovery.Source(6).WbemNameSpace="root/tpd"

// CIM_StoragePool to SystemID
// TPD_StorageSystem,CIM_StoragePool,SystemID,TPD_StorageSystem
LogicalDisk.Discovery.Source(7).Type="TableJoint"
LogicalDisk.Discovery.Source(7).LeftTable=%LogicalDisk.Discovery.Source(6)%
LogicalDisk.Discovery.Source(7).RightTable=%LogicalDisk.Discovery.Source(5)%
LogicalDisk.Discovery.Source(7).LeftKeyColumn=1
LogicalDisk.Discovery.Source(7).RightKeyColumn=2
LogicalDisk.Discovery.Source(7).KeyType="Wbem"

// Attach the association table to the main discovery
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool,TPD_StorageSystem,CIM_StoragePool,SystemID,TPD_StorageSystem
LogicalDisk.Discovery.Source(8).Type="TableJoint"
LogicalDisk.Discovery.Source(8).LeftTable=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Source(8).RightTable=%LogicalDisk.Discovery.Source(7)%
LogicalDisk.Discovery.Source(8).LeftKeyColumn=8
LogicalDisk.Discovery.Source(8).RightKeyColumn=2
LogicalDisk.Discovery.Source(8).KeyType="Wbem"
LogicalDisk.Discovery.Source(8).DefaultRightLine=";;;;"

// Get rid of paths
//    1         2               3           4           5       6              7               8           9             10                11              12
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,CIM_StoragePool,TPD_StorageSystem,CIM_StoragePool,SystemID,TPD_StorageSystem
LogicalDisk.Discovery.Source(8).Compute(1).Type="KeepColumns"
LogicalDisk.Discovery.Source(8).Compute(1).ColumnNumbers="1,2,3,4,5,6,7,11"

// Instance Table
// DisplayID,DeviceID,TotalManagedSpace,Primordial,RaidType,PoolType,IncludeInCapacity,SystemID
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(8)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.LogicalDiskType=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.UseForCapacityReport=InstanceTable.Column(7)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)
LogicalDisk.Discovery.Instance.AttachedToDeviceType="Enclosure"

//
// Collect

// Collect type is multiinstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = CIM_StoragePool
// DeviceID;OperationalStatus;
LogicalDisk.Collect.Source(1).Type="Wbem"
LogicalDisk.Collect.Source(1).WbemQuery="SELECT PoolID,OperationalStatus FROM CIM_StoragePool"
LogicalDisk.Collect.Source(1).WbemNameSpace="root/tpd"

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(3).Column=3
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
LogicalDisk.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
LogicalDisk.Collect.Source(1).Compute(4).Type="Convert"
LogicalDisk.Collect.Source(1).Compute(4).Column=2
LogicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
//  OtherDevice
//

// Other Device
//  TPD_CageInterfaceCard	 __Path, OperationalStatus, Tag
 //  TPD_Magazine	 __Path, ElementName, OperationalStatus, Tag
//  TPD_PCICard
//  TPD_SFP  (BIAS?)


//
// Discovery

// Source(1) = CIM_Card
// DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(1).Type="WBEM"
OtherDevice.Discovery.Source(1).WbemQuery="SELECT ElementName,Tag,Manufacturer,Model,SerialNumber,FirmwareVersion FROM TPD_PCICard"
OtherDevice.Discovery.Source(1).WbemNameSpace="root/tpd"

// Add to display ID
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(1).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).String="Blade;PCI Card;pci-"

// Source(2) = TPD_CageInterfaceCard
// DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(2).Type="WBEM"
OtherDevice.Discovery.Source(2).WbemQuery="SELECT ElementName,Tag,Manufacturer,Model,SerialNumber,FirmwareVersion FROM TPD_CageInterfaceCard"
OtherDevice.Discovery.Source(2).WbemNameSpace="root/tpd"

// Add to display ID
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(2).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(2).Compute(1).Column=1
OtherDevice.Discovery.Source(2).Compute(1).String="Enclosure;Interface Card;ifc-"

// Source(3) = TPD_Magazine
// DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(3).Type="WBEM"
OtherDevice.Discovery.Source(3).WbemQuery="SELECT ElementName,Tag,Manufacturer,Model,SerialNumber,FirmwareVersion FROM TPD_Magazine"
OtherDevice.Discovery.Source(3).WbemNameSpace="root/tpd"

// Add to display ID
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(3).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(3).Compute(1).Column=1
OtherDevice.Discovery.Source(3).Compute(1).String="Enclosure;Magazine;mag-"

// Union the First Group Together
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(4).Type="TableUnion"
OtherDevice.Discovery.Source(4).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(4).Table2=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(4).Table3=%OtherDevice.Discovery.Source(3)%

// Duplicate the "OperationalStatus" column
// AttachedToType,Type,DisplayID,DeviceID,DeviceID,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(4).Compute(1).Type="DuplicateColumn"
OtherDevice.Discovery.Source(4).Compute(1).Column=4

// Extract the SystemName
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(4).Compute(2).Type="Extract"
OtherDevice.Discovery.Source(4).Compute(2).Column=5
OtherDevice.Discovery.Source(4).Compute(2).Subcolumn=1
OtherDevice.Discovery.Source(4).Compute(2).Subseparators="-"

// Add Descriptive
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,FirmwareVersion
OtherDevice.Discovery.Source(4).Compute(3).Type="LeftConcat"
OtherDevice.Discovery.Source(4).Compute(3).Column=9
OtherDevice.Discovery.Source(4).Compute(3).String="Firmware Version: "

// Source(5) = TPD_SFP
// DisplayID,DeviceID,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(5).Type="WBEM"
OtherDevice.Discovery.Source(5).WbemQuery="SELECT ElementName,Tag,Manufacturer,Model,SerialNumber,PartNumber FROM TPD_SFP"
OtherDevice.Discovery.Source(5).WbemNameSpace="root/tpd"

// Add to display ID
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(5).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(5).Compute(1).Column=1
OtherDevice.Discovery.Source(5).Compute(1).String="Blade;SFP;sfp-"

// Add to display ID
// AttachedToType,Type,DisplayID,DeviceID,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(5).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(5).Compute(2).Column=8
OtherDevice.Discovery.Source(5).Compute(2).String="Part Number:"

// Duplicate the deviceID
// AttachedToType,Type,DisplayID,DeviceID,DeviceID,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(5).Compute(3).Type="DuplicateColumn"
OtherDevice.Discovery.Source(5).Compute(3).Column=4

// Extract the FCPortID
// AttachedToType,Type,DisplayID,DeviceID,FCPortID,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(5).Compute(4).Type="Extract"
OtherDevice.Discovery.Source(5).Compute(4).Column=5
OtherDevice.Discovery.Source(5).Compute(4).Subcolumn=1
OtherDevice.Discovery.Source(5).Compute(4).Subseparators="-"

// Link the SFP to the Storage System
// FCPortID,SystemName
OtherDevice.Discovery.Source(6).Type="WBEM"
OtherDevice.Discovery.Source(6).WbemQuery="SELECT DeviceID,SystemName FROM TPD_FCPort"
OtherDevice.Discovery.Source(6).WbemNameSpace="root/tpd"

// Join the FCPortSystem to the SFP table
// AttachedToType,Type,DisplayID,DeviceID,FCPortID,Manufacturer,Model,SerialNumber,PartNumber,FCPortID,SystemName
OtherDevice.Discovery.Source(7).Type="TableJoint"
OtherDevice.Discovery.Source(7).LeftTable=%OtherDevice.Discovery.Source(5)%
OtherDevice.Discovery.Source(7).RightTable=%OtherDevice.Discovery.Source(6)%
OtherDevice.Discovery.Source(7).LeftKeyColumn=5
OtherDevice.Discovery.Source(7).RightKeyColumn=1
OtherDevice.Discovery.Source(7).DefaultRightLine=";;"

// Replace the First FCPortID with the SystemName
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,PartNumber,FCPortID,SystemName
OtherDevice.Discovery.Source(7).Compute(1).Type="Replace"
OtherDevice.Discovery.Source(7).Compute(1).Column=5
OtherDevice.Discovery.Source(7).Compute(1).Replace=Column(5)
OtherDevice.Discovery.Source(7).Compute(1).ReplaceBy=Column(11)

// Trim the columns to match other discovery tables
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,PartNumber
OtherDevice.Discovery.Source(7).Compute(2).Type="KeepColumns"
OtherDevice.Discovery.Source(7).Compute(2).ColumnNumbers="1,2,3,4,5,6,7,8,9"

// Union the first group with the SFP discovery
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.Source(8).Type="TableUnion"
OtherDevice.Discovery.Source(8).Table1=%OtherDevice.Discovery.Source(4)%
OtherDevice.Discovery.Source(8).Table2=%OtherDevice.Discovery.Source(7)%

// Add Decriptives
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.Source(8).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(8).Compute(1).Column=6
OtherDevice.Discovery.Source(8).Compute(1).String="Manufacturer:"

// Add Decriptives
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.Source(8).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(8).Compute(2).Column=7
OtherDevice.Discovery.Source(8).Compute(2).String=" - Model:"

// Join Manufacturer and Model
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer-Model,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.Source(8).Compute(3).Type="RightConcat"
OtherDevice.Discovery.Source(8).Compute(3).Column=6
OtherDevice.Discovery.Source(8).Compute(3).String=Column(7)

// Add Decriptives
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer-Model,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.Source(8).Compute(4).Type="LeftConcat"
OtherDevice.Discovery.Source(8).Compute(4).Column=8
OtherDevice.Discovery.Source(8).Compute(4).String="Serial Number:"

// Instance Table
// AttachedToType,Type,DisplayID,DeviceID,SystemName,Manufacturer-Model,Model,SerialNumber,PartNumber/Firmware
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(8)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
OtherDevice.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(8)
OtherDevice.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
OtherDevice.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(1)


//
// Collect

// Collect type is multiinstance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = CIM_Card   (TPD_PCICard / TPD_CageInterfaceCard)
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(1).Type="Wbem"
OtherDevice.Collect.Source(1).WbemQuery="SELECT Tag,OperationalStatus FROM CIM_Card"
OtherDevice.Collect.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_Magazine
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(2).Type="Wbem"
OtherDevice.Collect.Source(2).WbemQuery="SELECT Tag,OperationalStatus FROM TPD_Magazine"
OtherDevice.Collect.Source(2).WbemNameSpace="root/tpd"

// Source(3) = TPD_Magazine
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(3).Type="Wbem"
OtherDevice.Collect.Source(3).WbemQuery="SELECT Tag,OperationalStatus FROM TPD_SFP"
OtherDevice.Collect.Source(3).WbemNameSpace="root/tpd"

// Union all the collects
// DeviceID;OperationalStatus;
OtherDevice.Collect.Source(4).Type="TableUnion"
OtherDevice.Collect.Source(4).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(4).Table2=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(4).Table3=%OtherDevice.Collect.Source(3)%

// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
OtherDevice.Collect.Source(4).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(4).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
OtherDevice.Collect.Source(4).Compute(2).Type="ArrayTranslate"
OtherDevice.Collect.Source(4).Compute(2).Column=2
OtherDevice.Collect.Source(4).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
OtherDevice.Collect.Source(4).Compute(3).Type="ArrayTranslate"
OtherDevice.Collect.Source(4).Compute(3).Column=3
OtherDevice.Collect.Source(4).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
OtherDevice.Collect.Source(4).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
OtherDevice.Collect.Source(4).Compute(4).Type="Convert"
OtherDevice.Collect.Source(4).Compute(4).Column=2
OtherDevice.Collect.Source(4).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// SystemName,Caption,PATROLStatus,StatusDescriptions
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(4)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)

//
//  NetworkCard
//

//
// Discovery

// Source(1) = CIM_NetworkPort
// DeviceID,DisplayID,Model,SystemName
NetworkCard.Discovery.Source(1).Type="WBEM"
NetworkCard.Discovery.Source(1).WbemQuery="SELECT DeviceID,ElementName,SystemName,CreationClassName FROM CIM_NetworkPort"
NetworkCard.Discovery.Source(1).WbemNameSpace="root/tpd"

// Translate the CreationClassName to a Port Type
// DeviceID,DisplayID,Model,SystemName
NetworkCard.Discovery.Source(1).Compute(1).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(1).Column=4
NetworkCard.Discovery.Source(1).Compute(1).TranslationTable="PortTypeTranslationTable"

PortTypeTranslationTable("TPD_FCPort")="FC Port;WWN"
PortTypeTranslationTable("TPD_SASPort")="SAS Port;"
PortTypeTranslationTable("TPD_EthernetPort")="Ethernet Port;MAC"
PortTypeTranslationTable(Default)=""


// Instance Table
// DeviceID,DisplayID,Manufacturer,SystemName,AddressType
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.AttachedToDeviceType="Blade"
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.PhysicalAddressType=InstanceTable.Column(5)

//
// Collect

// Collect type is multiinstance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = CIM_NetworkPort
// DeviceID;OperationalStatus;
NetworkCard.Collect.Source(1).Type="Wbem"
NetworkCard.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM CIM_NetworkPort"
NetworkCard.Collect.Source(1).WbemNameSpace="root/tpd"



//Before Translation, make sure to not trigger an alarm on stopped (administratively down) Network adapters
// As this is a common translatin table, let's create an operational status dedicated to network cards (99) and translate it to warn as hp do in their Interface

NetworkCard.Collect.Source(1).Compute(1).Type="Replace"
NetworkCard.Collect.Source(1).Compute(1).Column=2
NetworkCard.Collect.Source(1).Compute(1).Replace="10"
NetworkCard.Collect.Source(1).Compute(1).ReplaceBy="99"


// Duplicate the "OperationalStatus" column
// DeviceID,OperationalStatus
NetworkCard.Collect.Source(1).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(2).Column=2


// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
NetworkCard.Collect.Source(1).Compute(3).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(3).Column=2
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PATROLStatusArray,StatusInformation
NetworkCard.Collect.Source(1).Compute(4).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(4).Column=3
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
NetworkCard.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PATROLStatus,StatusInformation
NetworkCard.Collect.Source(1).Compute(5).Type="Convert"
NetworkCard.Collect.Source(1).Compute(5).Column=2
NetworkCard.Collect.Source(1).Compute(5).ConversionType="Array2SimpleStatus"

//collect crcerrors for network cards

// Source(2) = CIM_NetworkPortStatistics
// DeviceID,CRCerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter
NetworkCard.Collect.Source(2).Type="Wbem"
NetworkCard.Collect.Source(2).WbemQuery="SELECT InstanceID,CRCerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter FROM CIM_NetworkPortStatistics"
NetworkCard.Collect.Source(2).WbemNameSpace="root/tpd"

//Remove some extra in deviceid to match the source 1

NetworkCard.Collect.Source(2).Compute(1).Type="Replace"
NetworkCard.Collect.Source(2).Compute(1).Column=1
NetworkCard.Collect.Source(2).Compute(1).Replace="HP_3PAR:"
NetworkCard.Collect.Source(2).Compute(1).ReplaceBy=""

NetworkCard.Collect.Source(2).Compute(2).Type="Replace"
NetworkCard.Collect.Source(2).Compute(2).Column=1
NetworkCard.Collect.Source(2).Compute(2).Replace="-Stats"
NetworkCard.Collect.Source(2).Compute(2).ReplaceBy=""

// sum up all errors with CRC
// DeviceID,Totalerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter
NetworkCard.Collect.Source(2).Compute(3).Type="Add"
NetworkCard.Collect.Source(2).Compute(3).Column=2
NetworkCard.Collect.Source(2).Compute(3).Add=Column(3)

NetworkCard.Collect.Source(2).Compute(4).Type="Add"
NetworkCard.Collect.Source(2).Compute(4).Column=2
NetworkCard.Collect.Source(2).Compute(4).Add=Column(4)

NetworkCard.Collect.Source(2).Compute(4).Type="Add"
NetworkCard.Collect.Source(2).Compute(4).Column=2
NetworkCard.Collect.Source(2).Compute(4).Add=Column(5)

// Source(3) = Table joint of Source(1) and Source(2)
// DeviceID,PATROLStatus,StatusInformation,DeviceID,Totalerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter

NetworkCard.Collect.Source(3).Type="TableJoint"
NetworkCard.Collect.Source(3).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(3).LeftKeyColumn=1
NetworkCard.Collect.Source(3).RightKeyColumn=1
NetworkCard.Collect.Source(3).DefaultRightLine=";;;;;"

//Source(4) now collect network statistics
// Source(2) = CIM_NetworkPortStatistics
// DeviceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData
NetworkCard.Collect.Source(4).Type="Wbem"
NetworkCard.Collect.Source(4).WbemQuery="SELECT InstanceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData"
NetworkCard.Collect.Source(4).WbemNameSpace="root/tpd"

//Remove some extra in deviceid to match the source 1

NetworkCard.Collect.Source(4).Compute(1).Type="Replace"
NetworkCard.Collect.Source(4).Compute(1).Column=1
NetworkCard.Collect.Source(4).Compute(1).Replace="HP_3PAR:"
NetworkCard.Collect.Source(4).Compute(1).ReplaceBy=""

NetworkCard.Collect.Source(4).Compute(2).Type="Replace"
NetworkCard.Collect.Source(4).Compute(2).Column=1
NetworkCard.Collect.Source(4).Compute(2).Replace="-Stats"
NetworkCard.Collect.Source(4).Compute(2).ReplaceBy=""

//now convert KBytes to bytes
// DeviceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData
NetworkCard.Collect.Source(4).Compute(3).Type="Multiply"
NetworkCard.Collect.Source(4).Compute(3).Column=2
NetworkCard.Collect.Source(4).Compute(3).MultiplyBy=1024

//now convert KBytes to bytes
// DeviceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData
NetworkCard.Collect.Source(4).Compute(4).Type="Multiply"
NetworkCard.Collect.Source(4).Compute(4).Column=3
NetworkCard.Collect.Source(4).Compute(4).MultiplyBy=1024

// Source(5) = Table joint of Source(3) and Source(4)
// 1        , 2         ,  3              , 4       , 5       ,  6          , 7                 ,  8              , 9       , 10       ,   11         ,  12    ,  13
// DeviceID,PATROLStatus,StatusInformation,DeviceID,Totalerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter,DeviceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData

NetworkCard.Collect.Source(5).Type="TableJoint"
NetworkCard.Collect.Source(5).LeftTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.Source(5).RightTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(5).LeftKeyColumn=1
NetworkCard.Collect.Source(5).RightKeyColumn=1
NetworkCard.Collect.Source(5).DefaultRightLine=";;;;;"

// ValueTable = Source(5)
// 1        , 2         ,  3              , 4       , 5       ,  6          , 7                 ,  8              , 9       , 10       ,   11         ,  12    ,  13
// DeviceID,PATROLStatus,StatusInformation,DeviceID,Totalerrors,LinkFailures,LossOfSignalCounter,LossOfSyncCounter,DeviceID, KBytesRead, KBytesWritten, ReadIOs, WriteIOs FROM TPD_PortStatisticalData

NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(2)
NetworkCard.Collect.StatusInformation=ValueTable.Column(3)
NetworkCard.Collect.ErrorCount=ValueTable.Column(5)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(10)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(11)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(12)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(13)



//
//  Temperature
//

//
// Discovery

// Source(1) = TPD_SFP
// DisplayID,DeviceID,TempHighAlarm,TempHighWarn
Temperature.Discovery.Source(1).Type="WBEM"
Temperature.Discovery.Source(1).WbemQuery="SELECT ElementName,Tag,TempHighAlarm,TempHighWarn FROM TPD_SFP"
Temperature.Discovery.Source(1).WbemNameSpace="root/tpd"

// Duplicate the deviceID
// DisplayID,DeviceID,DeviceID,TempHighAlarm,TempHighWarn
Temperature.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(1).Column=2

// Extract the FCPortID
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn
Temperature.Discovery.Source(1).Compute(2).Type="Extract"
Temperature.Discovery.Source(1).Compute(2).Column=3
Temperature.Discovery.Source(1).Compute(2).Subcolumn=1
Temperature.Discovery.Source(1).Compute(2).Subseparators="-"

// Link the SFP to the Storage System
// FCPortID,SystemName
Temperature.Discovery.Source(2).Type="WBEM"
Temperature.Discovery.Source(2).WbemQuery="SELECT DeviceID,SystemName FROM TPD_FCPort"
Temperature.Discovery.Source(2).WbemNameSpace="root/tpd"

// Join the FCPortSystem to the SFP table
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemName
Temperature.Discovery.Source(3).Type="TableJoint"
Temperature.Discovery.Source(3).LeftTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).RightTable=%Temperature.Discovery.Source(2)%
Temperature.Discovery.Source(3).LeftKeyColumn=3
Temperature.Discovery.Source(3).RightKeyColumn=1
Temperature.Discovery.Source(3).DefaultRightLine=";;"

// Add SystemType
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType,SystemName
Temperature.Discovery.Source(3).Compute(1).Type="RightConcat"
Temperature.Discovery.Source(3).Compute(1).Column=6
Temperature.Discovery.Source(3).Compute(1).String=";Blade"

// Add a desciptive
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType,SystemName
Temperature.Discovery.Source(3).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(3).Compute(2).Column=1
Temperature.Discovery.Source(3).Compute(2).String="sfp-"

// Source(4) = TPD_SFP
// DisplayID,DeviceID
Temperature.Discovery.Source(4).Type="WBEM"
Temperature.Discovery.Source(4).WbemQuery="SELECT ElementName,DeviceID FROM TPD_DiskDrive"
Temperature.Discovery.Source(4).WbemNameSpace="root/tpd"

// Build a table to link PhysicalDisks to Enclosures
// DeviceID,TPD_DiskDrivePackage
Temperature.Discovery.Source(5).Type="WBEM"
Temperature.Discovery.Source(5).WbemQuery="SELECT Tag,__PATH FROM TPD_DiskDrivePackage"
Temperature.Discovery.Source(5).WbemNameSpace="root/tpd"

// TPD_Magazine,TPD_DiskDrivePackage
Temperature.Discovery.Source(6).Type="WBEM"
Temperature.Discovery.Source(6).WbemQuery="SELECT GroupComponent,PartComponent FROM TPD_MagazineContainer"
Temperature.Discovery.Source(6).WbemNameSpace="root/tpd"

// MagazineID,TPD_Magazine
Temperature.Discovery.Source(7).Type="WBEM"
Temperature.Discovery.Source(7).WbemQuery="SELECT Tag,__PATH FROM TPD_Magazine"
Temperature.Discovery.Source(7).WbemNameSpace="root/tpd"

// Extract the EnclosureID From the MagazineID
// EnclosureID,TPD_Magazine
Temperature.Discovery.Source(7).Compute(1).Type="Extract"
Temperature.Discovery.Source(7).Compute(1).Column=1
Temperature.Discovery.Source(7).Compute(1).Subcolumn=1
Temperature.Discovery.Source(7).Compute(1).Subseparators="-"

// Join the Physical Disk to Association Table
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage
Temperature.Discovery.Source(8).Type="TableJoint"
Temperature.Discovery.Source(8).LeftTable=%Temperature.Discovery.Source(5)%
Temperature.Discovery.Source(8).RightTable=%Temperature.Discovery.Source(6)%
Temperature.Discovery.Source(8).LeftKeyColumn=2
Temperature.Discovery.Source(8).RightKeyColumn=2
Temperature.Discovery.Source(8).KeyType="Wbem"
Temperature.Discovery.Source(8).DefaultRightLine=";;"

// Join the above to the Magazine Table
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage,EnclosureID,TPD_Magazine
Temperature.Discovery.Source(9).Type="TableJoint"
Temperature.Discovery.Source(9).LeftTable=%Temperature.Discovery.Source(8)%
Temperature.Discovery.Source(9).RightTable=%Temperature.Discovery.Source(7)%
Temperature.Discovery.Source(9).LeftKeyColumn=3
Temperature.Discovery.Source(9).RightKeyColumn=2
Temperature.Discovery.Source(9).KeyType="Wbem"
Temperature.Discovery.Source(9).DefaultRightLine=";;"

// Trim the Table down
// DeviceID,TPD_DiskDrivePackage,TPD_Magazine,TPD_DiskDrivePackage,EnclosureID,TPD_Magazine
// DeviceID,                                                       EnclosureID
Temperature.Discovery.Source(9).Compute(1).Type="KeepColumns"
Temperature.Discovery.Source(9).Compute(1).ColumnNumbers="1,5"

// Join the Main Physical Disks table to the Enclosure Table
// DisplayID,DeviceID,DeviceID,EnclosureID
Temperature.Discovery.Source(10).Type="TableJoint"
Temperature.Discovery.Source(10).LeftTable=%Temperature.Discovery.Source(4)%
Temperature.Discovery.Source(10).RightTable=%Temperature.Discovery.Source(9)%
Temperature.Discovery.Source(10).LeftKeyColumn=2
Temperature.Discovery.Source(10).RightKeyColumn=1
Temperature.Discovery.Source(10).DefaultRightLine=";;"

// Trim the Table down
// DisplayID,DeviceID,DeviceID,EnclosureID
// DisplayID,DeviceID,EnclosureID
Temperature.Discovery.Source(10).Compute(1).Type="KeepColumns"
Temperature.Discovery.Source(10).Compute(1).ColumnNumbers="1,2,4"

// Add Blank Columns to match other discovery
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType;SystemName
Temperature.Discovery.Source(10).Compute(2).Type="RightConcat"
Temperature.Discovery.Source(10).Compute(2).Column=2
Temperature.Discovery.Source(10).Compute(2).String=";;;;Enclosure;"

// Add a desciptive
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType,SystemName
Temperature.Discovery.Source(10).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(10).Compute(3).Column=1
Temperature.Discovery.Source(10).Compute(3).String="drive-"

// Union disk and sfp discoveries
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType;SystemName
Temperature.Discovery.Source(11).Type="TableUnion"
Temperature.Discovery.Source(11).Table1=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Source(11).Table2=%Temperature.Discovery.Source(10)%

// Instance Table
// DisplayID,DeviceID,FCPortID,TempHighAlarm,TempHighWarn,FCPortID,SystemType;SystemName
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(11)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)
Temperature.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(7)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(4)

//
// Collect

// Collect type is multiinstance
Temperature.Collect.Type="MultiInstance"

// Source(1) = TPD_SFP
// DeviceID;Temperature;
Temperature.Collect.Source(1).Type="Wbem"
Temperature.Collect.Source(1).WbemQuery="SELECT Tag,Temperature FROM TPD_SFP"
Temperature.Collect.Source(1).WbemNameSpace="root/tpd"

// Source(2) = TPD_DiskDrive
// DeviceID;Temperature;
Temperature.Collect.Source(2).Type="Wbem"
Temperature.Collect.Source(2).WbemQuery="SELECT DeviceID,Temperature FROM TPD_DiskDrive"
Temperature.Collect.Source(2).WbemNameSpace="root/tpd"

// Union SFP and DiskDrive
// DeviceID;Temperature;
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%

// ValueTable = Source(3)
// SystemName,Caption,PATROLStatus,StatusDescriptions
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)






// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
DMTFOperationStatusTranslationTable(6)="ALARM"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="ALARM"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="OK"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(99)="WARN"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
DMTFOperationStatusInformationTranslationTable(6)="Error"
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(99)="Stopped"
DMTFOperationStatusInformationTranslationTable(Default)=""

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = Endlosure Processing AWK
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[;]"}
NF==6 { ElementName = $1
	      IdentifyingDescriptions = $2
	      Name = $3
	      OtherIdentifyingInfo = $4
	      PATH =  $5
	      split(IdentifyingDescriptions,Variables,"|")
	      split(OtherIdentifyingInfo,Values,"|")
	      for (Entry in Variables) {
	      	  if (Variables[Entry] ~ /Node WWN/) { NodeWWN = Values[Entry]}
	      	  if (Variables[Entry] ~ /Ipv4 Address/) { IPv4 = Values[Entry]}
	      	  if (Variables[Entry] ~ /Ipv6 Address/) { Ipv6 = Values[Entry]}
	          if (Variables[Entry] ~ /Fully Qualified Domain Name/) { FQDN = Values[Entry]}
	          if (Variables[Entry] ~ /System ID/) { SystemID = Values[Entry]}
	          }
	      print("MSHW;" ElementName ";" Name ";" NodeWWN ";" IPv4 ";" Ipv6 ";" FQDN ";" SystemID ";" PATH ";" )
	    }
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////////////
