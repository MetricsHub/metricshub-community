//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                MS_HW_LSIUtilUNIX.hdf
//
//      Supports: Linux/Solaris machines
//		Monitors: Physical and logical disks behind a LSI controller with enabled volumes
//      Connects to: lsiutil under Linux/Solaris
//
//

//
// HEADER
//

hdf.DisplayName="LSI Logic - LsiUtil - RAID"
hdf.TypicalPlatform="Any system with LSI lsiutil"
hdf.ReliesOn="lsiutil"
hdf.Comments="Gives information about physical disks and volumes of LSI Logic SAS RAID controllers through the lsiutil utility."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux,Solaris"

// SUDO-ABLE COMMANDS

Sudo(1).Command="lsiutil"

//
// DETECTION
//

Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Linux,Solaris"

Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do %{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"
Detection.Criteria(2).ExpectedResult="^PhysDisk [0-9]"
Detection.Criteria(2).ErrorMessage="Unable to find or execute lsiutil or no LSI Logic controller found"


//
// DISK CONTROLLER
//

//
// Discovery

// Source(1) = output of lsiutil
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"

// Reformat lsiutil's output through awk see EmbeddedFile(1)
// DeviceID;Vendor;Model;FirmwareVersion
DiskController.Discovery.Source(1).Compute(1).Type="Awk"
DiskController.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
DiskController.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
DiskController.Discovery.Source(1).Compute(1).Separators=";"
DiskController.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// InstanceTable = Source(1)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(2)
DiskController.Discovery.Instance.Model=InstanceTable.Column(3)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(4)


//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = lsiutil output
PhysicalDisk.Discovery.Source(1).Type="OsCommand"
PhysicalDisk.Discovery.Source(1).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"

// Reformat lsiutil's output through awk see EmbeddedFile(2)
// ControllerNumber;diskID;model;size;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
PhysicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(1).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// InstanceTable = Source(1)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(3)


//
// Collect

// Collect type is "all instances in one shot"
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = lsiutil output
PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"

// Reformat lsiutil's output through awk see EmbeddedFile(2)
// diskID;Status;
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"
PhysicalDisk.Collect.Source(1).Compute(1).SelectColumns="3,6"

// Duplicate the Status column
// DiskID;Status;Status
PhysicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2

// Remove spaces in the Statys column
// DiskID;Status;Status
PhysicalDisk.Collect.Source(1).Compute(3).Type="Replace"
PhysicalDisk.Collect.Source(1).Compute(3).Column=2
PhysicalDisk.Collect.Source(1).Compute(3).Replace=" "
PhysicalDisk.Collect.Source(1).Compute(3).ReplaceBy=""

// Translate the Status into a PATROL status
// DiskID;PATROLStatus;Status
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=2
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="DiskStatusTranslationTable"

// The PhysicalDiskStatusTranslationTable
DiskStatusTranslationTable("online")="OK"
DiskStatusTranslationTable("optimal")="OK"
DiskStatusTranslationTable("degraded")="WARN"
DiskStatusTranslationTable("missing")="ALARM"
DiskStatusTranslationTable("notcompatible")="ALARM"
DiskStatusTranslationTable("initializing")="WARN"
DiskStatusTranslationTable("offlinerequested")="WARN"
DiskStatusTranslationTable("failedrequested")="ALARM"
DiskStatusTranslationTable("failed")="ALARM"
DiskStatusTranslationTable(Default)="UNKNOWN"

// ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// LOGICAL DISKS
//

//
// Discovery

// Source(1) = lsiutil output
LogicalDisk.Discovery.Source(1).Type="OsCommand"
LogicalDisk.Discovery.Source(1).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"

// Reformat lsiutil's output through awk see EmbeddedFile(3)
// ControllerNumber;diskID;size;raidType
LogicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
LogicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Discovery.Source(1).Compute(1).Separators=";"
LogicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5"

// InstanceTable = Source(1)
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(4)


//
// Collect

// Collect type is "all instances in one shot"
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = lsiutil output
LogicalDisk.Collect.Source(1).Type="OsCommand"
LogicalDisk.Collect.Source(1).CommandLine="for CONTROLLERID in 1 2 3 4 5 6 7 8 9; do /bin/echo MSHW_Controller $CONTROLLERID;%{SUDO:lsiutil}lsiutil -p$CONTROLLERID -a 1,2,0 21; done"

// Reformat lsiutil's output through awk see EmbeddedFile(3)
// diskID;Status;
LogicalDisk.Collect.Source(1).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
LogicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Collect.Source(1).Compute(1).Separators=";"
LogicalDisk.Collect.Source(1).Compute(1).SelectColumns="3,6"

// Duplicate the Status column
// DiskID;Status;Status
LogicalDisk.Collect.Source(1).Compute(2).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(2).Column=2

// Remove spaces in the Statys column
// DiskID;Status;Status
LogicalDisk.Collect.Source(1).Compute(3).Type="Replace"
LogicalDisk.Collect.Source(1).Compute(3).Column=2
LogicalDisk.Collect.Source(1).Compute(3).Replace=" "
LogicalDisk.Collect.Source(1).Compute(3).ReplaceBy=""

// Translate the Status into a PATROL status
// DiskID;PATROLStatus;Status
LogicalDisk.Collect.Source(1).Compute(4).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(4).Column=2
LogicalDisk.Collect.Source(1).Compute(4).TranslationTable="DiskStatusTranslationTable"

// ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes lsiutil as stdin
///    and returns a table with all the disk controllers
///    Takes only into account controllers that have volumes defined
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {
	controllerID = "";
}
/^MSHW_Controller / {
	controllerID = $2
	model = ""
	firmware = ""
}
($1 == controllerID "." && $(NF-6) == "LSI" && $(NF-5) == "Logic") {
	model = $(NF-4)
	firmware = $(NF-1)
}
/^PhysDisk [0-9]/ {
	if (controllerID != "" && model != "")
	{
		print "MSHW;" controllerID ";LSI Logic;" model ";" firmware
		controllerID = ""
		model = ""
	}
}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///	   Shell script that uses lsiutil to retrieve
///    all of the physical disks attached to LSI Logic controllers
///
///////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {
	controllerID = "";
}
/^MSHW_Controller / {
	controllerID = $2
}
/^PhysDisk [0-9]/ {
	if (controllerID != "")
	{
		diskID = $2
		getline
		if ($0 ~ /PhysDisk State:/)
		{
			colonIndex = index($0, ":")
			status = substr($0, colonIndex + 3, length - colonIndex - 2)
			commaIndex = index(status, ",")
			if (commaIndex > 1)
			{
				status = substr(status, 1, commaIndex - 1)
			}
		}
		getline
		if ($0 ~ /PhysDisk Size/)
		{
			diskSize = $3
			sizeUnit = $4
			if (sizeUnit == "MB,") { diskSize = diskSize * 1048576 }
			else if (sizeUnit == "GB,") { diskSize = diskSize * 1048576 * 1024 }
			else if (sizeUnit == "TB,") { diskSize = diskSize * 1048576 * 1048576 }
			colonIndex = index($0, ":")
			if (colonIndex > 10)
			{
				tempDiskModel = substr($0, colonIndex + 2, length - colonIndex - 1)
				n = split(tempDiskModel, diskModelArray, " ")
				diskModel = ""
				for (i=1 ; i<n ; i++)
				{
					diskModel = diskModel diskModelArray[i] " "
				}
				diskModel = diskModel diskModelArray[n]
			}
			print "MSHW;" controllerID ";"  diskID ";" diskModel ";" diskSize ";" status
			status = ""
			diskModel = ""
			diskSize = ""
		}
	}
}
EmbeddedFile(2).End
//////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///	   Shell script that uses lsiutil to retrieve
///    all of the volumes defined in the LSI Logic controllers
///
///////////////////////////////////////////////////////////////
EmbeddedFile(3):
BEGIN {
	controllerID = "";
}
/^MSHW_Controller / {
	controllerID = $2
}
/^Volume [0-9] is / {
	volumeID = $2
	raidType = $9
	enabled = 0
	diskSize = ""
}
/Volume State:/ {
	if ($0 ~ /[Dd]isabled/)
	{
		enabled = 0
	}
	else
	{
		enabled = 1
	}

	colonIndex = index($0, ":")
	status = substr($0, colonIndex + 3, length - colonIndex - 2)
	commaIndex = index(status, ",")
	if (commaIndex > 1)
	{
		status = substr(status, 1, commaIndex - 1)
	}
}
/Volume Size/ {
	diskSize = $3
	sizeUnit = $4
	if (sizeUnit == "MB,") { diskSize = diskSize * 1048576 }
	else if (sizeUnit == "GB,") { diskSize = diskSize * 1048576 * 1024 }
	else if (sizeUnit == "TB,") { diskSize = diskSize * 1048576 * 1048576 }
}
/^ *$/ {
	if (controllerID != "" && volumeID != "" && enabled == 1)
	{
		print "MSHW;" controllerID ";" volumeID ";" diskSize ";" raidType ";" status
		volumeID = ""
	}
}
EmbeddedFile(3).End
//////////////////////////////////////////////////////////////////

