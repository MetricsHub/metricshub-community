//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                  MS_HW_IBMAIXLUN.hdf
//
//      Supports: IBM AIX machines
//		Monitors: network interfaces, processors
//      Connects to: different AIX standard tools
//
//

//
// HEADER
//

hdf.DisplayName="IBM AIX - LUN"
hdf.TypicalPlatform="IBM POWER"
hdf.ReliesOn="IBM AIX lspath system command"
hdf.Comments="Provides LUN MPIO status information on IBM AIX systems."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="RS6000"

//
// DETECTION
//

// OS should be AIX (whatever version)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="RS6000"

// Test the lspath command
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="/usr/sbin/lspath"
Detection.Criteria(2).TimeOut=300
Detection.Criteria(2).ExpectedResult="fscsi"


//  !!!! This code is also used in the VIOS connector.  When making modifications, check if they also apply to VIO SERVERs

//
// LUNs
//

//
// Discovery

// Source(1) = lspath output
// Get the list of Ports from lspath
LUN.Discovery.Source(1).Type="OsCommand"
LUN.Discovery.Source(1).CommandLine="/usr/sbin/lspath"
LUN.Discovery.Source(1).Timeout=300

// AWK it
// LunName;ExpectedPaths;AvailablePaths;
LUN.Discovery.Source(1).Compute(1).Type="Awk"
LUN.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(1).Compute(1).Separators=";"
LUN.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// Remove '1' from ExpectedPaths to get the AvailablePathWarning threshold
// LunName;AvailablePathWarning;AvailablePaths;
LUN.Discovery.Source(1).Compute(2).Type="Substract"
LUN.Discovery.Source(1).Compute(2).Column=2
LUN.Discovery.Source(1).Compute(2).Substract=1

// Source(2) = lsdev/lscfg on disks (which includes LUNs)
LUN.Discovery.Source(2).Type="OsCommand"
LUN.Discovery.Source(2).CommandLine="for DISK in `/usr/sbin/lsdev -C -c disk -F 'name'`; do /usr/sbin/lscfg -vp -l $DISK; done"

// AWK it
// LunName;HardwareLocationCode;DiskArray;WWN;
LUN.Discovery.Source(2).Compute(1).Type="Awk"
LUN.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
LUN.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(2).Compute(1).Separators=";"
LUN.Discovery.Source(2).Compute(1).SelectColumns="2,3,4,5"

// Add "Hardware Location Code: " to the 2nd column
// LunName;HardwareLocationCode;DiskArray;WWN;
LUN.Discovery.Source(2).Compute(2).Type="LeftConcat"
LUN.Discovery.Source(2).Compute(2).Column=2
LUN.Discovery.Source(2).Compute(2).String="Location: "

// Source(3) = Table Joint of Source(1) and Source(2)
// LunName;AvailablePathWarning;AvailablePaths;LunName;HardwareLocationCode;DiskArray;WWN;
LUN.Discovery.Source(3).Type="TableJoint"
LUN.Discovery.Source(3).LeftTable=%LUN.Discovery.Source(1)%
LUN.Discovery.Source(3).RightTable=%LUN.Discovery.Source(2)%
LUN.Discovery.Source(3).LeftKeyColumn=1
LUN.Discovery.Source(3).RightKeyColumn=1
LUN.Discovery.Source(3).DefaultRightLine=";;;;"

// InstanceTable = Source(3)
// LunName;AvailablePathWarning;AvailablePaths;LunName;HardwareLocationCode;DiskArray;WWN;
LUN.Discovery.InstanceTable=%LUN.Discovery.Source(3)%
LUN.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LUN.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
LUN.Discovery.Instance.ArrayName=InstanceTable.Column(6)
LUN.Discovery.Instance.WWN=InstanceTable.Column(7)
LUN.Discovery.Instance.ExpectedPathCount=InstanceTable.Column(2)  // For 1.9.00 and prior versions
LUN.Discovery.Instance.AvailablePathWarning=InstanceTable.Column(2) // for newer versions


// Collect type is multi-instance
LUN.Collect.Type="MultiInstance"

// Get the list of Ports from multipath -l
//
LUN.Collect.Source(1).Type="OsCommand"
LUN.Collect.Source(1).CommandLine="/usr/sbin/lspath"
LUN.Collect.Source(1).TimeOut=300

// AWK it
// LunName;NumberPaths;
LUN.Collect.Source(1).Compute(1).Type="Awk"
LUN.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Collect.Source(1).Compute(1).Separators=";"
LUN.Collect.Source(1).Compute(1).SelectColumns="2,3"

// ValueTable = Source(1)
// LunName;NumberPaths;LunStatus;LunStatusInfo;AvailablePathInformation;
LUN.Collect.ValueTable=%LUN.Collect.Source(1)%
LUN.Collect.DeviceID=ValueTable.Column(1)
LUN.Collect.AvailablePathCount=ValueTable.Column(2)

/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes the wonderful array of objects and returns them in column form
///	   MSHW;LunName;NumberPaths;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
($2 ~ /hdisk[0-9]+/ && $3 ~ /fscsi/) {
	if ($2 in ExpectedPaths == 0)
	{
		ExpectedPaths[$2] = 0;
		AvailablePaths[$2] = 0;
	}

	ExpectedPaths[$2] = ExpectedPaths[$2] + 1;
	if ($1 ~ /[Ee]nabled/)
	{
		AvailablePaths[$2] = AvailablePaths[$2] + 1;
	}
}
END {
	for (id in ExpectedPaths)
	{
		print "MSHW;" id ";" ExpectedPaths[id] ";" AvailablePaths[id] ";"
	}
}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = AWK script that transforms the output of lscfg and returns the characteristics of each LUN
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {
	manufacturer = "";
	model = "";
	hardwareLocationCode = "";
	wwn = "";
	diskId = "";
}
($1 ~ /^hdisk[0-9]+$/) {
	if (diskId != "")
	{
		print "MSHW;" diskId ";" hardwareLocationCode ";" manufacturer " " model ";" wwn;
		manufacturer = "";
		model = "";
		hardwareLocationCode = "";
		wwn = "";
		diskId = "";
	}

	diskId = $1;
	hardwareLocationCode = $2;
}
/^ *Manufacturer/ {
	gsub("\\.+", " ");
	manufacturer = $2;
}
/^ *Machine Type and Model/ {
	gsub("\\.+", " ");
	model = $5;
	for (i=6 ; i<=NF ; i++) { model = model $i; }
}
/^ *Device Specific..Z0/ {
	gsub("\\.+", " ");
	wwn = $4;
}
END {
	print "MSHW;" diskId ";" hardwareLocationCode ";" manufacturer " " model ";" wwn
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
