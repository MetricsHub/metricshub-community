//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//             MS_HW_FusionIO.hdf
//
//      Supports: Fusion IO Based IO drives
//                IBM: IBM High IOPS SSD PCIe Adaptor
//                HP: HP IO Accelerator for BladeSystem c-Class
//                Dell: Fusion-IO ioDrive Memory Card
//                Hitachi: Fusion-IO ioDrive
//                Cisco: Fusion-IO ioDrive
//                Fujitsu: Fusion-IO ioDrive
//      Connects to: fio-status CLI utiltiy
//
//

// HEADER

hdf.DisplayName="Fusion ioDrive (fio-status)"
hdf.TypicalPlatform="Any system with Fusion IO"
hdf.ReliesOn="fio-status CLI utility"
hdf.Version="1.0"
hdf.Comments="This connector monitors the Fusion ioDrive accelerator card."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux,Solaris"
// hdf.Supersedes=""

//
// DETECTION
//

Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="SunOS,Solaris,Linux,NT"

Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:fio-status} fio-status -h"
Detection.Criteria(2).ExpectedResult="usage: fio-status"
Detection.Criteria(2).ErrorMessage="fio-status not installed on this server or not in the Path."

Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="%{SUDO:fio-status} fio-status"
Detection.Criteria(3).ExpectedResult="fct"
Detection.Criteria(3).ErrorMessage="No Fusion IO Controllers detected."



//
// SUDO-able commands
//
Sudo(1).Command="fio-status"

//
// NO COMPUTER
//

//
// DISK CONTROLLERS
//

//
// Discovery


// Source(1) = Output of fio-status
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="%{SUDO:fio-status} fio-status -a"

// Make a copy of the output of fio-status
DiskController.Discovery.Source(2)=%DiskController.Discovery.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(2)
// adapterID;adapterModel;
DiskController.Discovery.Source(2).Compute(1).Type="Awk"
DiskController.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
DiskController.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW_ADAPTER;"
DiskController.Discovery.Source(2).Compute(1).Separators=";"
DiskController.Discovery.Source(2).Compute(1).SelectColumns="2,3"


// Instance Table
// adapterID;adapterModel;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)

//
// Collect

// Collect type is "all instances in one shot"
DiskController.Collect.Type="MultiInstance"

// Source(1) = Output of fio-status

DiskController.Collect.Source(1).Type="OsCommand"
DiskController.Collect.Source(1).CommandLine="%{SUDO:fio-status} fio-status -a"

// Make a copy of the output of fio-status
DiskController.Collect.Source(2)=%DiskController.Collect.Source(1)%

// Reformat lsiutil's output through awk see EmbeddedFile(2)
// adapterID;PatrolStatus;StatusInformation;
DiskController.Collect.Source(2).Compute(1).Type="Awk"
DiskController.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
DiskController.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW_ADAPTER;"
DiskController.Collect.Source(2).Compute(1).Separators=";"
DiskController.Collect.Source(2).Compute(1).SelectColumns="2,4,5"

// ValueTable = Source(1)
// adapterID;PatrolStatus;StatusInformation;
DiskController.Collect.ValueTable=%DiskController.Collect.Source(2)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.ControllerStatus=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)

//
// PHYSICAL DISKS
//

//
// Discovery
// Make a copy of the output of disk controller discover (fio-status -a)
PhysicalDisk.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(1)
// ioDriveID;blockDeviceID;model;addInfo;physicalSize;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
PhysicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_PD;"
PhysicalDisk.Discovery.Source(1).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6"

// Make a copy of the output of disk controller discover (fio-status -a)
PhysicalDisk.Discovery.Source(2)=%DiskController.Discovery.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(2)
// ioDriveID;adapterID;
PhysicalDisk.Discovery.Source(2).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
PhysicalDisk.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW_DISK_TO_ADAPTER;"
PhysicalDisk.Discovery.Source(2).Compute(1).Separators=";"
PhysicalDisk.Discovery.Source(2).Compute(1).SelectColumns="2,3"

// Table Joint the Physical Disk Table Source (1) to the Disk to Controller table source (2)
// ioDriveID;blockDeviceID;model;addInfo;physicalSize;ioDriveID;adapterID;
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn="1"
PhysicalDisk.Discovery.Source(3).RightKeyColumn="1"

// Block Device: <blockDeviceID>
PhysicalDisk.Discovery.Source(3).Compute(1).Type="LeftConcat"
PhysicalDisk.Discovery.Source(3).Compute(1).Column=2
PhysicalDisk.Discovery.Source(3).Compute(1).String="Block Device: "

// Computes 2-6 Deal with column 4 (and 5) to standardize AdditionalInformation2
// (original) Product Number:<productNumber> SN:<serialNumber>
// Part Number: <productNumber> SN:<serialNumber>
PhysicalDisk.Discovery.Source(3).Compute(2).Type="Replace"
PhysicalDisk.Discovery.Source(3).Compute(2).Column=4
PhysicalDisk.Discovery.Source(3).Compute(2).Replace="Product Number:"
PhysicalDisk.Discovery.Source(3).Compute(2).ReplaceBy="Part Number: "

// Part Number: <productNumber>,<serialNumber>
PhysicalDisk.Discovery.Source(3).Compute(3).Type="Replace"
PhysicalDisk.Discovery.Source(3).Compute(3).Column=4
PhysicalDisk.Discovery.Source(3).Compute(3).Replace=" SN:"
PhysicalDisk.Discovery.Source(3).Compute(3).ReplaceBy=","

// ioDriveID;blockDeviceID;model;Part Number <productNumber>,SerialNumber;Part Number <productNumber>MSHW_SerialNumber;physicalSize;ioDriveID;adapterID;
PhysicalDisk.Discovery.Source(3).Compute(4).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(3).Compute(4).Column=4

// ioDriveID;blockDeviceID;model;Part Number <productNumber>;Part Number <productNumber>,SerialNumber;physicalSize;ioDriveID;adapterID;
PhysicalDisk.Discovery.Source(3).Compute(5).Type="Extract"
PhysicalDisk.Discovery.Source(3).Compute(5).Column=4
PhysicalDisk.Discovery.Source(3).Compute(5).SubSeparators=","
PhysicalDisk.Discovery.Source(3).Compute(5).SubColumn=1

// ioDriveID;blockDeviceID;model;Part Number <productNumber>;SerialNumber;physicalSize;ioDriveID;adapterID;
PhysicalDisk.Discovery.Source(3).Compute(6).Type="Extract"
PhysicalDisk.Discovery.Source(3).Compute(6).Column=5
PhysicalDisk.Discovery.Source(3).Compute(6).SubSeparators=","
PhysicalDisk.Discovery.Source(3).Compute(6).SubColumn=2


// Physical Disk Instance Table
// ioDriveID;blockDeviceID;model;Part Number <productNumber>;SerialNumber;physicalSize;ioDriveID;adapterID;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AdditionalInformation3="Type: Fusion ioDrive"
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(5)


//
// Collect

// Collect type is "all instances in one shot"
PhysicalDisk.Collect.Type="MultiInstance"

// Make a copy of the output of disk controller collect (fio-status -a)
PhysicalDisk.Collect.Source(1)=%DiskController.Collect.Source(1)%

// Reformat lsiutil's output through awk see EmbeddedFile(2)
// ioDriveID;PatrolStatus;StatusInformation
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
PhysicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_PD;"
PhysicalDisk.Collect.Source(1).Compute(1).Separators=";"
PhysicalDisk.Collect.Source(1).Compute(1).SelectColumns="2,7,8"

// ValueTable = Source(1)
// adapterID;PatrolStatus;StatusInformation;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// TEMPERATURES
//

//
// Discovery
// Make a copy of the output of disk controller discover (fio-status -a)
Temperature.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(1)
// ID;temperture;upperThreshold
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_TEMP;"
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"

// InstanceTable = Source(1)
// ID;temperture;upperThreshold
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(1)

//
// Collect

// Collect type is multi-instance
Temperature.Collect.Type="MultiInstance"

// Make a copy of the output of disk controller discover (fio-status -a)
Temperature.Collect.Source(1)=%DiskController.Collect.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(1)
// ID;temperture;upperThreshold
Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_TEMP;"
Temperature.Collect.Source(1).Compute(1).Separators=";"
Temperature.Collect.Source(1).Compute(1).SelectColumns="2,3,4"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)

//
// VoltageS
//

//
// Discovery
// Make a copy of the output of disk controller discover (fio-status -a)
Voltage.Discovery.Source(1)=%DiskController.Discovery.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(1)
// ID;
Voltage.Discovery.Source(1).Compute(1).Type="Awk"
Voltage.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Voltage.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_VOLT;"
Voltage.Discovery.Source(1).Compute(1).Separators=";"
Voltage.Discovery.Source(1).Compute(1).SelectColumns="2"

// InstanceTable = Source(1)
// ID;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(1)

//
// Collect

// Collect type is multi-instance
Voltage.Collect.Type="MultiInstance"

// Make a copy of the output of disk controller discover (fio-status -a)
Voltage.Collect.Source(1)=%DiskController.Collect.Source(1)%

// Process fio-status's output through awk see EmbeddedFile(1)
// ID;voltage;
Voltage.Collect.Source(1).Compute(1).Type="Awk"
Voltage.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Voltage.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_VOLT;"
Voltage.Collect.Source(1).Compute(1).Separators=";"
Voltage.Collect.Source(1).Compute(1).SelectColumns="2,3"

// Turn Volt into millivolt
// ID;voltage;
Voltage.Collect.Source(1).Compute(2).Type="Multiply"
Voltage.Collect.Source(1).Compute(2).Column=2
Voltage.Collect.Source(1).Compute(2).MultiplyBy="1000"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)


/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes MegaCli as stdin
///    and returns a table with all the disk controllers
///    MSHW;controllerID;model;serialnumber;firmwareversion;biosversion;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN { ioDriveID=""; blockDeviceID=""; model=""; addInfo=""; physicalSize=""; internalTemp=""; internalVoltage=""; auxVoltage=""; boardTemp=""; status = ""; statusInformation = "";}
$1 ~ /fct[0-9]+/ && $2 ~ /Attached/ && $3 ~ /(as)|(to)/ {
     ioDriveID=$1 ;
     blockDeviceID=$4 ; gsub (/[']/,"",blockDeviceID)
     }
#'
$0 ~ /Product Number:/ {
     model = $0 ; gsub (/,? Product Number:.*/,"",model );gsub (/^ */,"",model )
     addInfo = $0 ; gsub (model,"",addInfo);gsub (/^[ ,]*/,"",addInfo  )
     }

$7 ~ /GBytes/ && $8 ~ /physical/ && $9 ~ /device/ && $10 ~ /size/ {
     physicalSize = $6
     }

$1 ~ /Internal/ && $2 ~ /temperature/ {
     if ($3 ~ /avg/) {internalTemp = $4}
     else {internalTemp = $3}
     }

$1 ~ /Internal/ && $2 ~ /voltage/ {
     if ($3 ~ /avg/) {internalVoltage = $4;gsub(/[Vv,]/,"",internalVoltage)}
     else {internalVoltage = $3}
     }

$1 ~ /Aux/ && $2 ~ /voltage/ {
     if ($3 ~ /avg/) {auxVoltage = $4;gsub(/[Vv,]/,"",auxVoltage)}
     else {auxVoltage = $3}
     }

# Parameter Activated as not always present:
$1 ~ /(Board)|(Ambient)/ && $2 ~ /temperature/ {
     if ($3 ~ /avg/) {boardTemp = $4}
     else {boardTemp = $3}
     }

# Media Status is translated here and print done
($1 ~ /Media/ && $2 ~ /[Ss]tatus/) || ($1 ~ /Reserve/ && $2 ~ /[Ss]pace/ && $3 ~ /[Ss]tatus/) && (ioDriveID != "") {
     mediaStatus = tolower($0); gsub (/^.*status: */,"",mediaStatus);gsub (/;.*$/,"",mediaStatus);
     if (mediaStatus ~ /healthy/) {if (status == "") {status = "OK"}}
     else if (mediaStatus ~ /low.*metadata/ || tolower(status) ~ /reduced.write/ || tolower(status) ~ /nearing wearout/ || tolower(status) ~ /write.reduced/) {if (status != "ALARM") {status = "WARN"}; statusInformation = statusInformation " " mediaStatus}
     else if (mediaStatus ~ /read.*only/) {status = "ALARM"; statusInformation = statusInformation " " mediaStatus}
     else {if (status != "ALARM") {status = "WARN"}; statusInformation = statusInformation " " mediaStatus}

# Print Physical Disk Information
     gsub (/^ */,"",statusInformation);gsub (/  /,"",statusInformation)
     print "MSHW_PD;" ioDriveID ";" blockDeviceID ";" model ";" addInfo ";" physicalSize ";" status ";" statusInformation ";"
# Print Internal Temperature Information (The ioDrive will start throttling write performance at 78C. the ioDrive will shut down at 85C.  So will alarm at 78.
     if (internalTemp != "") {print "MSHW_TEMP;Internal " ioDriveID ";" internalTemp ";78;"}
     if (boardTemp != "") {print "MSHW_TEMP;Board " ioDriveID ";" boardTemp ";;"}
     if (auxVoltage != "") {print "MSHW_VOLT;Aux " ioDriveID ";" auxVoltage ";;"}
     if (internalVoltage != "") {print "MSHW_VOLT;Internal " ioDriveID ";" internalVoltage ";;"}
     ioDriveID=""; blockDeviceID=""; model=""; addInfo=""; physicalSize=""; internalTemp=""; internalVoltage=""; auxVoltage=""; boardTemp=""; status = ""; statusInformation = "";
     }

# Drive STATUS Collection
# Unfortunately the Status of each IO Drive is not always in the same place so we are going to have to search every line for known error messages.
# At least the documentation was nice enough to provide those.
tolower($0) ~ /additional active alarm/ {status = "ALARM"; statusInformation = " " statusInformation $0}
# Generic Catch All:
(tolower($0) ~ /warning/) || (tolower($0) ~ /minimal mode/) {if (status != "ALARM") {status = "WARN"};
	                                                           statusInformation = statusInformation " " $0
	                                                           if (tolower($0) ~ /warning.*temperature is above/) {status = "ALARM";}
                                                             if (tolower($0) ~ /warning.*voltage is out of range/) {status = "ALARM"; }
	                                                          }
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///    AWK script that takes MegaCli as stdin
///    and returns a table with all the disks
///    MSHW;controllernumber;location;type;size;model;status;statusinformation;deviceID;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(2):
$1 ~ /Adapter:/ {adapterModel = $0 ; gsub(/^Adapter: */,"",adapterModel)
	              status = "OK" ; statusInformation = ""
	             }

# Adapter STATUS Collection
# Unfortunately the Status of the adapter is not always in the same place so we are going to have to search every line for known error messages.
# At least the documentation was nice enough to provide those.
# We have to assume that if no error, status is OK
tolower($0) ~ /external power. not connected/ {status = "ALARM"; statusInformation = statusInformation " " $0}

# Generic Catch All:
tolower($0) ~ /warning/ {if (status != "ALARM") {status = "WARN"};
	                        if (statusInformation == "") {statusInformation = statusInformation " " $0}
	                       }


$0 ~ /Connected.*[Mm]odules:/ {adapterID="";
	                             moduleFound="1"
	                             getline
	                             while (moduleFound=="1") {adapterID=adapterID $1;getline;if ($1 !~ /fct[0-9]+/) {moduleFound="0"}}
	                             gsub (/^ */,"",statusInformation);gsub (/  /,"",statusInformation)
                               print "MSHW_ADAPTER;" adapterID ";" adapterModel ";" status ";" statusInformation ";"
                              }

$1 ~ /fct[0-9]+/ && $2 ~ /Attached/ && $3 ~ /(as)|(to)/ {ioDriveID=$1 ;
	                                                       if (statusInformation == "") {statusInformation = "No Warnings Detected"}
	                                                       print "MSHW_DISK_TO_ADAPTER;" ioDriveID ";" adapterID ";"
	                                                      }
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////
