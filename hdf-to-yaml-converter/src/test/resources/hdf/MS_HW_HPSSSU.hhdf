// SSSU should exist and be in Path
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="sssu help"
Detection.Criteria(2).ErrorMessage="SSSU Does not appear to be installed on this system"
Detection.Criteria(2).ExpectedResult="SSSU for HP"
Detection.Criteria(2).ExecuteLocally=1

// SSSU Should be able to connect and list systems
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="sssu ""SELECT Manager %{HOSTNAME} username=%{USERNAME} password=%{PASSWORD}"" ""LS SYSTEM"""
Detection.Criteria(3).ErrorMessage="Unable to connect using SSSU"
Detection.Criteria(3).ExpectedResult="Systems available on this Manager"
Detection.Criteria(3).ExecuteLocally=1


// ENCLOSURE

// Source(1) = the output of "%EmbeddedFile(1)%



// Process the sssu command throug an AWK script
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Discovery.Source(1).Compute(1).Separators=";"

// Enclosure Source 2 = Copy of Source 1
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only Enclosures
// MS_HW_Enclosure;ID;
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).RegExp="^MSHW_ENCLOSURE$"

// The discovery table
// MS_HW_Enclosure;ID;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type="DiskSystem"
Enclosure.Discovery.Instance.Model="EVA System"
Enclosure.Discovery.Instance.Vendor="HP"


// Collect

// Collect type: MultiInstance
Enclosure.Collect.Type="MultiInstance"



// Process the sssu command throug an AWK script
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW"
Enclosure.Collect.Source(1).Compute(1).Separators=";"

// The value table (taken from enclosure.discovery, since we don't actually want to collect anything.
Enclosure.Collect.ValueTable=%Enclosure.Discovery.Source(2)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)


//
//
// DiskController
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Blade.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%


// Keep only DiskControllers
// MSHW_BLADE;Enclosure;DeviceID;Name;Status;Status Information;Model Number;Serial Number;WWN;Location
Blade.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(1).Compute(1).Column=1
Blade.Discovery.Source(1).Compute(1).RegExp="^MSHW_BLADE$"

// The discovery table
// MSHW_BLADE;Enclosure;DeviceID;Name;Status;Status Information;Model Number;Serial Number;WWN;Location
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Blade.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Blade.Discovery.Instance.additionalinformation3="Type: SAN Controller"
Blade.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Blade.Discovery.Instance.AttachedToDeviceType="DiskSystem"
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(7)
Blade.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)
Blade.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(9)
Blade.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
Blade.Discovery.Instance.BladeName=InstanceTable.Column(4)

// Collect

// Collect type: MultiInstance
Blade.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Blade.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_BLADE;Enclosure;Location;Name;Status;Status Information;Model Number;Serial Number;WWN;
Blade.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Collect.Source(1).Compute(1).Column=1
Blade.Collect.Source(1).Compute(1).RegExp="^MSHW_BLADE$"

// Now translate  into OK/Warning/Alarm
// MSHW_BLADE;Enclosure;Location;Name;Status;Status Information;Model Number;Serial Number;WWN;
Blade.Collect.Source(1).Compute(2).Type="Translate"
Blade.Collect.Source(1).Compute(2).Column=5
Blade.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// Now translate Status information
// MSHW_BLADE;Enclosure;Location;Name;Status;Status Information;Model Number;Serial Number;WWN;
Blade.Collect.Source(1).Compute(3).Type="Translate"
Blade.Collect.Source(1).Compute(3).Column=6
Blade.Collect.Source(1).Compute(3).TranslationTable="opStatusInfoTT"

// The value table
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(3)
Blade.Collect.Status=ValueTable.Column(5)
Blade.Collect.StatusInformation=ValueTable.Column(6)

//
//
// Fan
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only Fans
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;Speed;DeviceID;InstallStatus;SystemName;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).RegExp="^MSHW_FAN$"

// Exclude fans not installed
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;Speed;DeviceID;InstallStatus;SystemName;
Fan.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column=7
Fan.Discovery.Source(1).Compute(2).ValueList="no"

Fan.Discovery.Source(1).Compute(3).Type="Translate"
Fan.Discovery.Source(1).Compute(3).Column=4
Fan.Discovery.Source(1).Compute(3).TranslationTable="opStatusTT"

Fan.Discovery.Source(1).Compute(4).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(4).Column=4
Fan.Discovery.Source(1).Compute(4).ValueList="MISSING"

// The discovery table
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;Speed;DeviceID;InstallStatus;SystemName;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(6)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(6)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;Speed;DeviceID;InstallStatus;SystemName;
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).RegExp="^MSHW_FAN$"

// duplicate for status information
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;statusinfo;Speed;DeviceID;InstallStatus;SystemName;
Fan.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(2).Column=4

// Now translate  status information
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;statusinfo;Speed;DeviceID;InstallStatus;SystemName;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=5
Fan.Collect.Source(1).Compute(3).TranslationTable="opStatusInfoTT"

Fan.Collect.Source(1).Compute(4).Type="Translate"
Fan.Collect.Source(1).Compute(4).Column=4
Fan.Collect.Source(1).Compute(4).TranslationTable="opStatusTT"

// The value table
// MSHW_FAN;Enclosure;Name-(Controller Name-Fan Name);Status;Speed;DeviceID;InstallStatus;SystemName;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(7)
Fan.Collect.Status=ValueTable.Column(4)
Fan.Collect.StatusInformation=ValueTable.Column(5)
Fan.Collect.Speed=ValueTable.Column(6)


//
//
// Battery
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Battery.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only Batterys
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=1
Battery.Discovery.Source(1).Compute(1).RegExp="^MSHW_Battery$"

// Exclude Batterys not installed
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(2).Column=4
Battery.Discovery.Source(1).Compute(2).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"

// The discovery table
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Battery.Discovery.Instance.Type=InstanceTable.Column(6)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Battery.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
Battery.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Battery.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Collect.Source(1).Compute(1).Column=1
Battery.Collect.Source(1).Compute(1).RegExp="^MSHW_Battery$"

// Now translate  into OK/Warning/Alarm
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=4
Battery.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// Now translate Status information
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column=5
Battery.Collect.Source(1).Compute(3).TranslationTable="opStatusInfoTT"

// The value table
// MSHW_BATTERY;Enclosure;Name - (Controller Name - Battery Name);Status;Status Information;BatteryType;SystemName;
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(3)
Battery.Collect.Status=ValueTable.Column(4)
Battery.Collect.StatusInformation=ValueTable.Column(5)


//
//
// LogicalDisk
//
//  LOGICAL DISKS have been moved to a seperate discovery and collect batch file as these commands can take forever to execute on large EVA systems


//
// Discovery
// Source(1) = the output of "%EmbeddedFile(3)%


// Awk it and keep only LogicalDisks
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
LogicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_LOGICALDISK"
LogicalDisk.Discovery.Source(1).Compute(1).Separators=";"

// Exclude Snapshots
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
LogicalDisk.Discovery.Source(1).Compute(2).Column=10
LogicalDisk.Discovery.Source(1).Compute(2).ValueList="Demand-allocated Snapshot,Fully-allocated Snapshot,SnapClone"

// Convert Size from Gbytes to bytes
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(3).Column=8
LogicalDisk.Discovery.Source(1).Compute(3).MultiplyBy=1073741824

// Get the Enclosure Discovery for the Primordial Array
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only the Primordials
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(2).Compute(1).Column=1
LogicalDisk.Discovery.Source(2).Compute(1).RegExp="^MSHW_LOGICALDISK$"

// Union the main logical disk discovery with the Primordials
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.Source(3).Type="TableUnion"
LogicalDisk.Discovery.Source(3).Table1=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).Table2=%LogicalDisk.Discovery.Source(2)%



// The discovery table
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(5)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(8)
LogicalDisk.Discovery.Instance.ParameterActivation.UnallocatedSpace=InstanceTable.Column(9)
LogicalDisk.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)
LogicalDisk.Discovery.Instance.LogicalDiskType=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.UseForCapacityReport=InstanceTable.Column(11)


// Collect

// Collect type: MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = the output of "%EmbeddedFile(3)%
//


// Awk it and keep only LogicalDisks
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(1).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
LogicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW_LOGICALDISK"
LogicalDisk.Collect.Source(1).Compute(1).Separators=";"

// Now translate  into OK/Warning/Alarm
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=6
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// Now translate Status information
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column=7
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="opStatusInfoTT"


// Convert Unallocated Space from Gbytes to bytes
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(1).Compute(4).Type="Multiply"
LogicalDisk.Collect.Source(1).Compute(4).Column=9
LogicalDisk.Collect.Source(1).Compute(4).MultiplyBy=1073741824

// Get the Enclosure Discovery for the Primordial Array
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Keep only the Primordials
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(2).Compute(1).Column=1
LogicalDisk.Collect.Source(2).Compute(1).RegExp="^MSHW_LOGICALDISK$"

// Union the main logical disk discovery with the Primordials
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.Source(3).Type="TableUnion"
LogicalDisk.Collect.Source(3).Table1=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Source(3).Table2=%LogicalDisk.Collect.Source(2)%


// The value table
// MSHW_LOGICALDISK;Enclosure;Disk Group/VirtualDisk;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type);UseForCapacityReport;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(3)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(4)
LogicalDisk.Collect.Status=ValueTable.Column(6)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(7)
LogicalDisk.Collect.UnallocatedSpace=ValueTable.Column(9)


//
//
// Memory
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only Memorys
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;SystemName;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).RegExp="^MSHW_MEMORY$"

//exclude not installed
Memory.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(2).Column=5
Memory.Discovery.Source(1).Compute(2).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"


// The discovery table
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;SystemName;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(4)
Memory.Discovery.Instance.Type=InstanceTable.Column(3)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Memory.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
Memory.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Memory.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;SystemName;
Memory.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=1
Memory.Collect.Source(1).Compute(1).RegExp="^MSHW_MEMORY$"

// Duplicate Status Column
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;StatusInfo;SystemName;
Memory.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(2).Column=5

// Now translate  into OK/Warning/Alarm
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;StatusInfo;SystemName;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=5
Memory.Collect.Source(1).Compute(3).TranslationTable="opStatusTT"

// Translate Status info
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;StatusInfo;SystemName;
Memory.Collect.Source(1).Compute(4).Type="Translate"
Memory.Collect.Source(1).Compute(4).Column=6
Memory.Collect.Source(1).Compute(4).TranslationTable="cacheStatusInfoTT"

// The cacheStatusInfoTT translation table
cacheStatusInfoTT("no_mirror")="No Mirror"
cacheStatusInfoTT(Default)=""

// The value table
// MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;SystemName;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(4)
Memory.Collect.Status=ValueTable.Column(5)
Memory.Collect.StatusInformation=ValueTable.Column(6)


//
//
// NetworkCard
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
NetworkCard.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only NetworkCards
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus;SystemName;
NetworkCard.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).RegExp="^MSHW_NETWORKCARD$"


//exclude not installed
NetworkCard.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(2).Column=6
NetworkCard.Discovery.Source(1).Compute(2).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"


// The discovery table
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus;SystemName;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.ParameterActivation.LinkSpeed=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
NetworkCard.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus;SystemName;
NetworkCard.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).RegExp="^MSHW_NetworkCard$"

// Now translate  into OK/Warning/Alarm
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus;SystemName;
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=6
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// Now translate  into OK/Warning/Alarm
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus;SystemName;
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=8
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="linkStatusTT"

// The value table
// MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name;WWN;Status;Speed Mbit;LinkStatus; SystemName;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(4)
// Commented out as Status=Failed if the port is unplugged
// NetworkCard.Collect.Status=ValueTable.Column(6)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(7)
NetworkCard.Collect.LinkStatus=ValueTable.Column(8)

// The linkStatusTT translation table
linkStatusTT("fabric_login")="OK"
linkStatusTT("link_up")="OK"
linkStatusTT("link_down")="WARN"
linkStatusTT("good")="OK"
linkStatusTT("bad")="WARN"



//
//
// PhysicalDisk
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only PhysicalDisks
// MSHW_DISK;Shelf;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1
PhysicalDisk.Discovery.Source(1).Compute(1).RegExp="^MSHW_DISK$"

// Convert Size from Gbytes to bytes
// MSHW_DISK;Shelf;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=9
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=1000000000
// PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy=1073741824

// Source(2) = Enclosure Discovery 1
PhysicalDisk.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep only PhysicalDisks
// MSHW_DISK_TO_BLADE_TABLE;Enclosure;Shelf;
PhysicalDisk.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(2).Compute(1).Column=1
PhysicalDisk.Discovery.Source(2).Compute(1).RegExp="^MSHW_DISK_TO_BLADE_TABLE$"

// Table joint of (1) and (2)
// as disks can ony be allocated to shelves where we need Enclosure
// MSHW_DISK;Shelf;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;Location;MSHW_DISK_TO_BLADE_TABLE;Enclosure;Shelf;
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn=2
PhysicalDisk.Discovery.Source(3).RightKeyColumn=3
PhysicalDisk.Discovery.Source(3).DefaultRightLine=";;;"

//exclude not installed
PhysicalDisk.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(3).Compute(1).Column=5
PhysicalDisk.Discovery.Source(3).Compute(1).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"

// MSHW_DISK;EVA-ES-Shelf1;EVA-ES\Disk Groups\Default Disk Group\Disk 001;Disk 001;good;member_ok;Shelf 1 - Disk 9;Default Disk Group;300000000000;no;HPQ;BF300DA47B;HP02;Disk Type: fibre_channel_disk;J8W55JUC;Disk Group: Default Disk Group;EVA-ES;Location: Shelf 1, Disk 9MSHW_DISK_TO_BLADE_TABLE;EVA-ES-Rack 1\Disk Enclosure 1;EVA-ES-Shelf1;

// The discovery table
//     1         2         3     4     5           6                 7              8         9            10         11     12    13              14        15            16             17     18        19       							20      21
// MSHW_DISK;Shelf;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;Location;MSHW_DISK_TO_BLADE_TABLE;Enclosure;Shelf;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(11)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(12)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(15)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(13)
PhysicalDisk.Discovery.Instance.ParameterActivation.PredictedFailure=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.additionalinformation1=InstanceTable.Column(18)
PhysicalDisk.Discovery.Instance.additionalinformation2=InstanceTable.Column(14)
PhysicalDisk.Discovery.Instance.additionalinformation3=InstanceTable.Column(16)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(20)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_DISK;Enclosure;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column=1
PhysicalDisk.Collect.Source(1).Compute(1).RegExp="^MSHW_DISK$"

// Now translate  into OK/Warning/Alarm
// MSHW_DISK;Enclosure;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=5
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// Now translate Status information
// MSHW_DISK;Enclosure;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=6
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="opStatusInfoTT"

// Now translate  into OK/Warning/Alarm
// MSHW_DISK;Enclosure;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Collect.Source(1).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(4).Column=10
PhysicalDisk.Collect.Source(1).Compute(4).TranslationTable="predictedFailureTT"

// The predictedFailureTT translation table
predictedFailureTT("no")="false"
predictedFailureTT("yes")="true"

// The value table
//     1         2         3     4     5           6                 7              8         9            10         11     12    13              14        15            16        ;
// MSHW_DISK;Enclosure;Location;Name;Status;Status Information;Shelf - Disk Bay;Disk Group;Size GB;failurepredicted;Vendor;Model;firmwareversion;disktype;Serial Number;diskgroupname;SystemName;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(3)
PhysicalDisk.Collect.Status=ValueTable.Column(5)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(6)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(10)

//
//
// PowerSupply
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only PowerSupplys
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^MSHW_PSU$"

// Exclude PowerSupplys not installed
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"

// The discovery table
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=1
PowerSupply.Collect.Source(1).Compute(1).RegExp="^MSHW_PSU$"

// Now translate  into OK/Warning/Alarm
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=4
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;SystemName;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(4)

//
//
// Temperature
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only Temperatures
// MSHW_TEMP;Enclosure;Name;Temperature;Status;SystemName;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).RegExp="^MSHW_TEMP$"

// The discovery table
// MSHW_TEMP;Enclosure;Name;Temperature;Status;SystemName;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
//
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only DiskControllers
// MSHW_TEMP;Enclosure;Name;Temperature;Status;
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).RegExp="^MSHW_TEMP$"

// Now translate  into OK/Warning/Alarm
// MSHW_TEMP;Enclosure;Name;Temperature;Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=5
Temperature.Collect.Source(1).Compute(2).TranslationTable="opStatusTT"

// The value table
// MSHW_TEMP;Enclosure;Name;Temperature;Status;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(3)
Temperature.Collect.Status=ValueTable.Column(5)
Temperature.Collect.Temperature=ValueTable.Column(4)




//
//
// OtherDevice
//

//
// Discovery

// Source(1) = Enclosure Discovery 1
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep only Temperatures
// MSWH_OTHERDEVICE;Enclosure;Type;Name;OpState;SystemName;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).RegExp="^MSHW_OTHERDEVICE$"

//Exclude not installed
OtherDevice.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=5
OtherDevice.Discovery.Source(1).Compute(2).ValueList="not installed,not_installed,not present,not_present,notinstalled,notpresent,Not Present"


// The discovery table
// MSWH_OTHERDEVICE;Enclosure;Type;Name;OpState;SystemName;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AttachedToDeviceType="Blade"

// Collect

// Collect type: MultiInstance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = Enclosure Collect 1
// MSWH_OTHERDEVICE;Enclosure;Type;Name;OpState;SystemName;
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep only Other Devices
// MSWH_OTHERDEVICE;Enclosure;Type;Name;OpState;SystemName;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).RegExp="^MSHW_OTHERDEVICE$"

// Now translate  into OK/Warning/Alarm
// MSWH_OTHERDEVICE;Enclosure;Type;Name;OpState;opState;SystemName;
OtherDevice.Collect.Source(1).Compute(2).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(2).Column=5

// Now translate  into OK/Warning/Alarm
// MSWH_OTHERDEVICE;Enclosure;Type;Name;status;OpState;SystemName;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=5
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="opStatusTT"

// The value table
// MSWH_OTHERDEVICE;Enclosure;Type;Name;status;OpState;SystemName;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(4)
OtherDevice.Collect.Status=ValueTable.Column(5)
OtherDevice.Collect.StatusInformation=ValueTable.Column(6)




// The opStatusTT translation table
opStatusTT("good")="OK"
opStatusTT("bad")="ALARM"
opStatusTT("attention")="WARN"
opStatusTT("failed")="ALARM"
opStatusTT("normal")="OK"
opStatusTT("not installed")="MISSING"
opStatusTT("not_installed")="MISSING"
opStatusTT("notinstalled")="MISSING"
opStatusTT("not present")="MISSING"
opStatusTT("Not Present")="MISSING"
opStatusTT("not_present")="MISSING"
opStatusTT("notpresent")="MISSING"
opStatusTT("DiskenclosureWarn")="WARN"

// Cache Specific
opStatusTT("no_mirror")="WARN"
opStatusTT(Default)="UNKNOWN"

// The opStatusInfoTT translation table
opStatusInfoTT("DiskenclosureWarn")="Not Present"
opStatusInfoTT("not present")="Not Present"
opStatusInfoTT("not_present")="Not Present"
opStatusInfoTT("notpresent")="Not Present"
opStatusInfoTT("initialized_ok")=""
opStatusInfoTT("restoring_ok")="Restoring"
opStatusInfoTT("restoring_attention")="Restoring Error"
opStatusInfoTT("restoring_failed")="Restoring Failed"
opStatusInfoTT("suspended_ok")="Suspended"
opStatusInfoTT("suspended_attention")="Suspended Error"
opStatusInfoTT("suspended_failed")="Suspended Failed"
opStatusInfoTT("initialized_attention")="Initialization Error"
opStatusInfoTT("initialized_failed")="Initialization Failed"
opStatusInfoTT("initialized_unknown")=""
opStatusInfoTT("managed_by_other_agent")="Managed by Other Agent"
opStatusInfoTT("not_redundant_ok")=""
opStatusInfoTT("not_redundant_attention")="Not Redundant"
opStatusInfoTT("not_redundant_failed")="Not Redundant"
opStatusInfoTT("uninitialized_ok")="Unintialized"
opStatusInfoTT("uninitialized_attention")="Uninitialized"
opStatusInfoTT("uninitialized_failed")="Uninitialized"
opStatusInfoTT("not_available")="Not Available"
opStatusInfoTT("not_installed")="Not installed"
opStatusInfoTT("not installed")="Not installed"
opStatusInfoTT("notinstalled")="Not installed"
opStatusInfoTT("unsupported")="Unsupported"
opStatusInfoTT("unknown")="Unknown"
opStatusInfoTT("emu_unsupported")="Environmental Monitoring Unit Unsupported"
opStatusInfoTT("emu_ok")=""
opStatusInfoTT("emu_critical")="Environmental Monitoring Unit Critical"
opStatusInfoTT("emu_non_critical")="Environmental Monitoring Unit Warning"
opStatusInfoTT("emu_unrecoverable")="Environmental Monitoring Unit Unrecoverable Error"
opStatusInfoTT("emu_unknown")="Environmental Monitoring Unit Unknow Error"
opStatusInfoTT("emu_not_available")="Environmental Monitoring Unit Not Available"
opStatusInfoTT("emu_information")=""
opStatusInfoTT("member_ok")=""
opStatusInfoTT("member_attention")="Member Error"
opStatusInfoTT("member_failed")="Member Failed"
opStatusInfoTT("non_member_ok")=""
opStatusInfoTT("non_member_attention")="Non Member Error"
opStatusInfoTT("non_member_failed")="Non Member Failed"
opStatusInfoTT("diskgroup_degraded")="Diskgroup Degraded"
opStatusInfoTT("contains_ilf_disk")="Contains "
opStatusInfoTT("firmware_upgrade")="Firmware Upgrade"
opStatusInfoTT("management_module_installed")="OK"
opStatusInfoTT("management_module_not_installed")="Management Module Not Installed"
opStatusInfoTT("asynch_member_add_in_progress")="OK"
opStatusInfoTT("asynch_member_remove_in_progress")="OK"
opStatusInfoTT("sc_locked")="SC Locked"



/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = The awk script that takes all command output and returns
///						           the various components and status
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN { level=0;Enclosure="" }

function setValue(value) {
	value=$0;
	gsub("^ *<[^<>]+>","",value);
	gsub("</[^<>]+>$","",value);
	gsub(/ *$/,"",value);
	return value
}

function clearArray(level) {
	class[level]="";

	objectid[level]="";
	objectname[level]="";
	objecttype[level]="";
	controllername[level]="";
	operationalstate[level]="";

	operationalstatedetail[level]="";
	objectparentid[level]="";
	modelnumber[level]="";
	serialnumber[level]="";
	cachecondition[level]="";

	wwnodename[level]="";
	portname[level]="";
	wwid[level]="";
	speed[level]="";
	portcondition[level]="";

	topology[level]="";
	fanname[level]="";
	status[level]="";
	speed[level]="";
	name[level]="";

	tempc[level]="";
	type[level]="";
	state[level]="";
	cachebattery[level]="";
	statedetails[level]="";

	diskname[level]="";
	diskbaynumber[level]="";
	shelfnumber[level]="";
	diskgroupname[level]="";
	formattedcapacity[level]="";

	failurepredicted[level]="";
	manufacturer[level]="";
	modelnumber[level]="";
	firmwareversion[level]="";
	disktype[level]="";

	serialnumber[level]="";
	diskgroupname[level]="";
	srclevelactual[level]="";
	diskgrouptype[level]="";
	totalstoragespacegb[level]="";

	usedstoragespacegb[level]="";
	familyname[level]="";
	allocatedcapacity[level]="";
	virtualdisktype[level]="";
	installstatus[level]="";

	failprediction[level]="";
	outputlink[level]="";
	inputlink[level]="";
	diskshelfname[level]="";
	shelfnumber[level]="";

	XXXXX[level]="";
	XXXXX[level]="";
	XXXXX[level]="";
	XXXXX[level]="";
	XXXXX[level]="";
}

function printPrimordial (Enclosure,primordialSize,primordialUnallocated) {
	if (primordialSize > 0 && Enclosure!="" ) {
#           MSHW_LOGICALDISK; Enclosure ;Disk Group;Location;Name;Status;Status Information;Size GB;Unallocated Space;AddInfo2 (Disk Group Type) ;
		print ("MSHW_LOGICALDISK;"Enclosure";Primordial;"Enclosure" - Primordial;"";"";"";"primordialSize";"primordialUnallocated";"";0;")
	}
}

$0 ~ /.*. LS CONTROLLER FULL XML$/ || $0 ~ /.*. LS VDISK FULL XML$/ {
#  Print Existing Primordials and Zero variables
	printPrimordial(Enclosure,primordialSize,primordialUnallocated)
	primordialSize=0
	primordialUnallocated=0
#  Set the Enclosure
	Enclosure=$0
	gsub (/> LS CONTROLLER FULL XML$/,"",Enclosure)
	gsub (/> LS VDISK FULL XML$/,"",Enclosure)
	print ("MSHW_ENCLOSURE;"Enclosure";")
#  Clear the defaultController
	defaultController=""
}

#  Set the BlockSize for the Enclosure
$0 ~ /<datablocksize>/ { datablocksize[enclosure]=setValue($0) }

#  Go up a level
$0 ~ "^ *<[^/][^<>]+>$" {
	greatGrandParentLevel=level-2;
	grandParentLevel=level-1;
	parentLevel=level;
	level=level+1;
	childLevel=level+1;
	class[level]=$0;
	gsub(/(^ *<)|(> *$)/,"",class[level]) ;
}

$0 ~ /<objectid>/ { objectid[level]=setValue($0) }
$0 ~ /<objectname>/ { objectname[level]=setValue($0) }
$0 ~ /<objecttype>/ {
	objecttype[level]=setValue($0);
	if (objecttype[level] ~ /^diskshelf$/) {
		controllername[1]=objectname[level];
		gsub (/.Hardware./,"",controllername[1])
	}
}

$0 ~ /<controllername>/ {
	controllername[level]=setValue($0);
	if (defaultController == "") {
		defaultController=setValue($0)
	}
}

$0 ~ /<operationalstate>/ { operationalstate[level]=setValue($0) }

$0 ~ /<operationalstatedetail>/ { operationalstatedetail[level]=setValue($0) }
$0 ~ /<objectparentid>/ { objectparentid[level]=setValue($0) }
$0 ~ /<modelnumber>/ { modelnumber[level]=setValue($0) }
$0 ~ /<serialnumber>/ { serialnumber[level]=setValue($0) }
$0 ~ /<cachecondition>/ { cachecondition[level]=setValue($0) }

$0 ~ /<wwnodename>/ { wwnodename[level]=setValue($0) }
$0 ~ /<portname>/ { portname[level]=setValue($0) }
$0 ~ /<wwid>/ {
	wwid[level]=setValue($0);
	gsub(/[^A-Fa-f0-9]/,"",wwid[level])
}
$0 ~ /<speed>/ { speed[level]=setValue($0) }
$0 ~ /<portcondition>/ { portcondition[level]=setValue($0) }

$0 ~ /<topology>/ { topology[level]=setValue($0) }
$0 ~ /<fanname>/ { fanname[level]=setValue($0) }
$0 ~ /<status>/ { status[level]=setValue($0) }
$0 ~ /<name>/ { name[level]=setValue($0) }

$0 ~ /<tempc>/ { tempc[level]=setValue($0) }
$0 ~ /<type>/ { type[level]=setValue($0) }
$0 ~ /<state>/ { state[level]=setValue($0) }
$0 ~ /<cachebattery>/ { cachebattery[level]=setValue($0) }
$0 ~ /<statedetails>/ { statedetails[level]=setValue($0) }

$0 ~ /<diskname>/ { diskname[level]=setValue($0) }
$0 ~ /<diskbaynumber>/ { diskbaynumber[level]=setValue($0) }
$0 ~ /<shelfnumber>/ { shelfnumber[level]=setValue($0) }
$0 ~ /<diskgroupname>/ { diskgroupname[level]=setValue($0) }
$0 ~ /<formattedcapacity>/ {
	formattedcapacity[level]=setValue($0);
	formattedcapacity[level]=formattedcapacity[level] * datablocksize[enclosure] / 1000000000
}

$0 ~ /<failurepredicted>/ { failurepredicted[level]=setValue($0) }
$0 ~ /<manufacturer>/ { manufacturer[level]=setValue($0) }
$0 ~ /<modelnumber>/ { modelnumber[level]=setValue($0) }
$0 ~ /<firmwareversion>/ { firmwareversion[level]=setValue($0) }
$0 ~ /<disktype>/ { disktype[level]=setValue($0) }

$0 ~ /<serialnumber>/ { serialnumber[level]=setValue($0) }
$0 ~ /<diskgroupname>/ { diskgroupname[level]=setValue($0) }
$0 ~ /<srclevelactual>/ {
	srclevelactual[level]=setValue($0)
	srclevelactual[level]=gsub(/[^0-9]/,"",srclevelactual[level])
}
$0 ~ /<diskgrouptype>/ { diskgrouptype[level]=setValue($0) }
$0 ~ /<totalstoragespacegb>/ { totalstoragespacegb[level]=setValue($0) }

$0 ~ /<usedstoragespacegb>/ { usedstoragespacegb[level]=setValue($0) }
$0 ~ /<familyname>/ { familyname[level]=setValue($0) }
$0 ~ /<allocatedcapacity>/ { allocatedcapacity[level]=setValue($0) }
$0 ~ /<virtualdisktype>/ { virtualdisktype[level]=setValue($0) }
$0 ~ /<installstatus>/ { installstatus[level]=setValue($0) }

$0 ~ /<failprediction>/ { failprediction[level]=setValue($0) }
$0 ~ /<outputlink>/ { outputlink[level]=setValue($0) }
$0 ~ /<inputlink>/ { inputlink[level]=setValue($0) }
$0 ~ /<diskshelfname>/ { diskshelfname[level]=setValue($0) }
$0 ~ /<shelfnumber>/ { shelfnumber[level]=setValue($0) }

$0 ~ /<XXXXXXXX>/ { XXXXXXXX[level]=setValue($0) }
$0 ~ /<XXXXXXXX>/ { XXXXXXXX[level]=setValue($0) }
$0 ~ /<XXXXXXXX>/ { XXXXXXXX[level]=setValue($0) }
$0 ~ /<XXXXXXXX>/ { XXXXXXXX[level]=setValue($0) }
$0 ~ /<XXXXXXXX>/ { XXXXXXXX[level]=setValue($0) }


#  Printing Section

#  Exceptions

$0 ~ /<controllertemperaturestatus>/ {
	controllertemperaturestatus=setValue($0)
# 	      MSHW_TEMP;Enclosure;Name - (Controller Name - TempSensor Name);Temperature;Status;
	print ("MSHW_TEMP;"Enclosure"-"controllername[1]";" controllername[1] " - Temperature Status;"";"controllertemperaturestatus ";"Enclosure";")
}

#  Properly formatted sensors & go down a level
$0 ~ "^ *</[^<>]+>$" {

#  LS CONTROLLER SECTION
# if (class[level] ~ /^object$/ && objecttype[level] ~ /^controller$/) {
#           MSHW_CONTROLLER;Enclosure;Location;Name;Status;Status Information;Model Number;Serial Number;WWN;
#		print ("MSHW_CONTROLLER;"Enclosure";"Enclosure objectname[level]";"controllername[level]";"operationalstate[level]";"operationalstatedetail[level]";"modelnumber[level]";"serialnumber[level]";"wwnodename[level]";"Enclosure";")
#	}

	if (class[level] ~ /^object$/ && objecttype[level] ~ /^controller$/) {
		#       MSHW_BLADE;Enclosure;Location;Name;Status;Status Information;Model Number;Serial Number;WWN;
		print ("MSHW_BLADE;"Enclosure";"Enclosure"-"controllername[level]";"controllername[level]";"operationalstate[level]";"operationalstatedetail[level]";"modelnumber[level]";"serialnumber[level]";WWN: "wwnodename[level]";Location: "Enclosure"-"controllername[level])
	}

	if (class[level] ~ /^cachememory$/) {
		#       MSHW_MEMORY;Enclosure;MemoryType(cachememory);Name(Controller Name);Status;
		print ("MSHW_MEMORY;"Enclosure"-"controllername[1]";"class[level]";"Enclosure" - "controllername[1]";"cachecondition[level]";"Enclosure";")
	}

	if (class[level] ~ /^hostport$/ || class[level] ~ /^deviceport$/) {
#           MSHW_NETWORKCARD;Enclosure;NcType(hostport);Name - (Controller Name - Port Name);WWN;Status;Speed Mbit;LinkStatus;
		print ("MSHW_NETWORKCARD;"Enclosure"-"controllername[1]";"class[level]";"Enclosure" - "controllername[1]" - "portname[level]";"wwid[level]";"operationalstate[level]";"speed[level]*1000";"portcondition[level]";"Enclosure";" )
	}

	if (class[level] ~ /^fan$/ && status[level] != "") {
		if ( controllername[1] ~ /./ ) {
			printID = Enclosure" - "controllername[1]" - "fanname[level];
			printEnclosure = Enclosure" - "controllername[1]
		}
		else {
			printID = Enclosure " - " fanname[level];
			printEnclosure = Enclosure"-"defaultController
		}
#         MSHW_FAN;Enclosure;Name - (Controller Name - Fan Name);Status;Speed;DeviceID;installstatus;
		print ("MSHW_FAN;"printEnclosure";"printID";"status[level]";"speed[level]";"Enclosure"-"controllername[1]"-"fanname[level]";"installstatus[level]";"Enclosure";")
	}

	if (class[level] ~ /^sensor$/ && tempc[level] != "") {
		if ( controllername[1] ~ /./ ) {
			printID = Enclosure" - "controllername[1]" - "name[level];
			printEnclosure = Enclosure" - "controllername[1]
		}
		else {
			printID = Enclosure" - " name[level];
			printEnclosure = Enclosure"-"defaultController
		}
#         MSHW_TEMP;Enclosure;Name - (Controller Name - TempSensor Name);Temperature;Status;
		print ("MSHW_TEMP;"printEnclosure";" printID ";" tempc[level] ";;"Enclosure";")
	}

	if (class[level] ~ /^source$/ && state[level] != "") {
		if ( controllername[1] ~ /./ ) {
			printID = Enclosure" - "controllername[1]" - "type[level];
			printEnclosure = Enclosure" - "controllername[1]
		}
		else {
			printID = Enclosure" - " type[level];
			printEnclosure = Enclosure"-"defaultController
		}
#         MSHW_PSU;Enclosure;Name - (Controller Name - PSU Name);Status;
		print ("MSHW_PSU;" printEnclosure ";" printID ";" state[level] ";"Enclosure";")
	}


	if (class[level] ~ /^cachebattery$/ && status[level] != "" ) {
#						MSHW_BATTERY; Enclosure ;Name - (Controller Name - Battery Name);   Status       ;Status Information;
		print ("MSHW_BATTERY;"Enclosure"-"controllername[1]";"Enclosure" - "controllername[1]" - CacheBattery;" operationalstate[level] ";;Battery System;"Enclosure";")
	}

	if (class[level] ~ /^module$/ && (class[grandParentLevel] ~ /^cachebattery$/ || class[greatGrandParentLevel] ~ /^cachebattery$/ ) ) {
		if ( controllername[1] ~ /./ ) {
			printID = Enclosure" - " controllername[1] " - " name[level];
			printEnclosure = Enclosure" - "controllername[1]
		}
		else {
			printID = Enclosure " - " name[level];
			printEnclosure = Enclosure " - " defaultController;
		}
#						MSHW_BATTERY; Enclosure ;Name - (Controller Name - Battery Name);Status      ;  Status Information ;
		print ("MSHW_BATTERY;" printEnclosure ";" printID ";" operationalstate[level] ";"statedetails[level]";Battery Module;"Enclosure";")
	}

#  LS DISK SECTION
#						MSHW_DISK; Enclosure ;    Location       ;      Name             ;    Status               ;   Status Information    ;    Shelf, Disk Bay                                    ;    Disk Group        ;  Size GB                   ; failurepredicted          ;  Vendor               ;    Model             ; firmwareversion          ;  disktype       ; Serial Number       ;  diskgroupname                    ;
	if (class[level] ~ /^object$/ && objecttype[level] ~ /^disk$/) {
# 	String is too long for one line. Editor failed to highligh syntax error.
		part1 = "MSHW_DISK;"Enclosure"-Shelf"shelfnumber[level]";"Enclosure objectname[level]";"diskname[level]";"operationalstate[level]";"operationalstatedetail[level];
		part2 = ";Shelf "shelfnumber[level]" - Disk "diskbaynumber[level]";"diskgroupname[level]";" formattedcapacity[level] ";" failurepredicted[level] ";" manufacturer[level];
		part3 = ";" modelnumber[level] ";" firmwareversion[level] ";Disk Type: "disktype[level]";"serialnumber[level]";Disk Group: "diskgroupname[level]";" Enclosure";Location: Shelf "shelfnumber[level]", Disk "diskbaynumber[level]";";
		print (part1 part2 part3)
		primordialSize = primordialSize + formattedcapacity[level];
		if (diskgroupname[level] ~ /^Ungrouped Disks$/) {
			primordialUnallocated = primordialUnallocated + formattedcapacity[level]
		}
	}

#  LS DISK_GROUP SECTION
	if (class[level] ~ /^object$/ && objecttype[level] ~ /^diskgroupfolder$/) {
#					  MSHW_LOGICALDISK; Enclosure ;Disk Group;    Location       ;      Name             ;    Status               ;   Status Information         ; Size GB                    ;  Unallocated Space                                     ; AddInfo2 (Disk Group Type) ;
		print ("MSHW_LOGICALDISK;"Enclosure";Disk Group;"Enclosure objectname[level]";"diskgroupname[level]";"operationalstate[level]";"operationalstatedetail[level]";"totalstoragespacegb[level]";"totalstoragespacegb[level] - usedstoragespacegb[level]";Disk Group Type: " diskgrouptype[level]";1;")
	}

#  LS VDISK SECTION
	if (class[level] ~ /^object$/ && objecttype[level] ~ /^virtualdisk$/) {
#						MSHW_LOGICALDISK; Enclosure ;Virtual Disk;    Location       ;      Name         ;    Status               ;   Status Information          ; Size GB                  ;  (Unallocated Space)  ; AddInfo2 (Disk Group Type) ;
		print ("MSHW_LOGICALDISK;"Enclosure";Virtual Disk;"Enclosure objectname[level]";"familyname[level]";"operationalstate[level]";"operationalstatedetail[level]";"allocatedcapacity[level]";"                     ";Type " virtualdisktype[level]";0;")
	}

#  LS DISK SHELF SECTION
	if (class[level] ~ /^bus$/) {
		if (failprediction[level] ~ /[Yy]es/ && operationalstate[level] ~ /[Gg]ood/) {
			operationalstate[level] = "bad"
		}
#           MSHW_OTHERDEVICE ; Enclosure ;Type;   Name                                          ;   OpState               ;
		print ("MSHW_OTHERDEVICE;"Enclosure" - "controllername[1]";Bus;"Enclosure" - " controllername[1] " - " name[level] ";"operationalstate[level] ";"Enclosure";")
	}

	if (class[level] ~ /^module$/ && class[parentLevel] ~ /^iomodules$/ && name[level] != "" ) {
		if (failprediction[level] ~ /[Yy]es/ && operationalstate[level] ~ /[Gg]ood/) {
			operationalstate[level] = "bad"
		}
 # 					MSWH_OTHERDEVICE ; Enclosure ;Type;Name;OpState;
		print ("MSWH_OTHERDEVICE;"Enclosure " - " controllername[1]";IO Module;"Enclosure" - " controllername[1] " - " name[level] ";"operationalstate[level] ";"Enclosure";")
	}

	if (class[level] ~ /^port$/) {
		if (failprediction[level] ~ /[Yy]es/ && operationalstate[level] ~ /[Gg]ood/) {
			operationalstate[level] = "bad"
		}
#						MSHW_NETWORKCARD; Enclosure ; NcType(hostport)   ; Name - (Controller Name - Port Name); WWN  ;  Status          ;  Speed Mbit; LinkStatus    ;
		print ("MSHW_NETWORKCARD;"Enclosure"-"controllername[1]";"class[level]";"Enclosure" - "controllername[1]" - "name[level]" Input Link;;"operationalstate[level]";;"inputlink[level]";" Enclosure";" )
		print ("MSHW_NETWORKCARD;"Enclosure"-"controllername[1]";"class[level]";"Enclosure" - "controllername[1]" - "name[level]" Output Link;;"operationalstate[level]";;"outputlink[level]";" Enclosure";")
	}

	if (class[level] ~ /^emu$/) {
		if (failprediction[level] ~ /[Yy]es/ && operationalstate[level] ~ /[Gg]ood/) {
			operationalstate[level] = "bad"
		}
 #					MSHW_OTHERDEVICE;Enclosure;Type;Name;OpState;
		print ("MSHW_OTHERDEVICE;"Enclosure" - "controllername[1]";EMU;"Enclosure" - " controllername[1] " - EMU;"operationalstate[level] ";"Enclosure";")
	}

	if (class[level] ~ /^fan$/ && operationalstate[level] ~ /^[Nn]ot*[Ii]ns*/) {
		operationalstate[level] = "DiskenclosureWarn"
	}
	if (class[level] ~ /^fan$/ && name[level] != "" && operationalstate[level] != "" ) {
		if ( controllername[1] ~ /./ ) {
			printID = Enclosure" - "controllername[1]" - "name[level]
		}
		else {
			printID = Enclosure " - " name[level];
			printEnclosure = Enclosure"-"defaultController
		}
#						MSHW_FAN; Enclosure;Name - (Controller Name - Fan Name);Status;Speed;DeviceID;installstatus;
		print ("MSHW_FAN;" printEnclosure ";" printID ";"operationalstate[level]";;"Enclosure"-"controllername[1]"-"name[level]";;"Enclosure";")
	}

	if (class[level] ~ /^powersupply$/ && operationalstate[level] ~ /^[Nn]ot*[Ii]ns*/) {
		operationalstate[level] = "DiskenclosureWarn"
	}
	if (class[level] ~ /^powersupply$/ && operationalstate[level] != "") {
		#				MSHW_PSU; Enclosure ;Name - (Controller Name - PSU Name);   Status       ;
		print ("MSHW_PSU;"Enclosure"-"controllername[1]";"Enclosure" - "controllername[1]" - "name[level]";" operationalstate[level] ";"Enclosure";")
	}

	if (class[level] ~ /^object$/ && objecttype[level] ~ /^diskshelf$/) {
		#       MSHW_BLADE; Enclosure ;    Location                    ;      Name             ;    Status               ;   Status Information          ;    (Model Number)  ;    (Serial Number)  ; (WWN)     ;
		print ("MSHW_BLADE;"Enclosure";"Enclosure"-"controllername[level]";"diskshelfname[level]";"operationalstate[level]";"operationalstatedetail[level]";Disk Shelf"       ";"                   ";"         ";")
		print ("MSHW_DISK_TO_BLADE_TABLE;"Enclosure"-"controllername[level]";"Enclosure"-Shelf"shelfnumber[level]";")
	}

	clearArray(level)
	level=level-1 ;
}

level < 0 {
	print "Error:  Level is negative";
	exit
}

END {
	printPrimordial(Enclosure,primordialSize,primordialUnallocated)
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
