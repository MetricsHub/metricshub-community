//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//             MS_HW_LenovoThinkSystem.hdf
//
//         Supports: Lenovo ThinkSystem Rack Mount Server
//
//

// HEADER

hdf.DisplayName="Lenovo ThinkSystem Rack Mount Server"
hdf.TypicalPlatform="Lenovo Server"
hdf.ReliesOn="Lenovo ThinkSystem SNMP Agent"
hdf.Comments="This connector provides the hardware monitoring of the Lenovo ThinkSystem Server through the SNMP Agent."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

// DETECTION
// Does a get_next to see if there that there is come CPU information

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.19046.11.1.1.5.20.1"

// ENCLOSURE: Rack Mount Server Unit

// Get the model name and manufacturer of the rack mount unit along with serial and part numbers
// ID;MachineType;MachineModel;SerialNumber;ProductName
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.5.2.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,3,5"

// Add ChassisType to Model
// ID;MachineType;MachineModel;SerialNumber;ProductName
Enclosure.Discovery.Source(1).Compute(1).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=2
Enclosure.Discovery.Source(1).Compute(1).String="-"

Enclosure.Discovery.Source(1).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=2
Enclosure.Discovery.Source(1).Compute(2).String=Column(3)

//Enclosure power consumption
//id,PowerConsumption
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.10.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="ID,10"

// Join the Chassis to the Power Consumption
// ID;MachineType;MachineModel;SerialNumber;ProductName;id,PowerConsumption
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;"

// Instance Table
// ID;MachineType;MachineModel;SerialNumber;ProductName;id,PowerConsumption
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID="Server"
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Vendor="Lenovo"
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(7)

// Collect
Enclosure.Collect.Type="MultiInstance"

// Source(1) = SystemHealth
// ID;SystemHealth
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.4"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="ID,1"

Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// ID;PATROLStatus;OperState
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="enclosureStatusTranslationTable"

// Translate second StatusCode into a more readable string
// ID;PATROLStatus;StatusInformation
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="enclosureStatusInformationTranslationTable"

// The statusTranslationTable
enclosureStatusTranslationTable(0)="ALARM"
enclosureStatusTranslationTable(2)="ALARM"
enclosureStatusTranslationTable(4)="WARN"
enclosureStatusTranslationTable(255)="OK"
enclosureStatusTranslationTable(Default)="UNKNOWN"

// The statusTranslationTable
enclosureStatusInformationTranslationTable(0)="nonRecoverable"
enclosureStatusInformationTranslationTable(2)="critical"
enclosureStatusInformationTranslationTable(4)="nonCritical"
enclosureStatusInformationTranslationTable(255)="normal"

// Source(2) = PowerConsumption Collect
// ID;PowerInUse
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.10.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="ID,10"

// Source(3) = TableJoint of 1 & 2
// ID;PATROLStatus;StatusInformation;ID;PowerInUse
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";;;"

// Value Table
// ID;PATROLStatus;StatusInformation;ID;PowerInUse
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.DeviceID="Server"
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)
Enclosure.Collect.PowerConsumption=ValueTable.Column(5)

//
// Memory
//

// Memory discovery

// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.5.21.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="2,8,7,6,9,4,3"


// Translate Status into PATROLStatus
// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.Source(1).Compute(1).Type="Translate"
Memory.Discovery.Source(1).Compute(1).Column=2
Memory.Discovery.Source(1).Compute(1).TranslationTable="StatusTranslationTable"

// Convert size from GB to MB
// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.Source(1).Compute(2).Type="Multiply"
Memory.Discovery.Source(1).Compute(2).Column=3
Memory.Discovery.Source(1).Compute(2).MultiplyBy=1024

// Add some descriptors to Part Number in additionnal information
// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.Source(1).Compute(3).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(3).Column=7
Memory.Discovery.Source(1).Compute(3).String="Part Number: "

// Add memory unit
// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.Source(1).Compute(4).Type="RightConcat"
Memory.Discovery.Source(1).Compute(4).Column=5
Memory.Discovery.Source(1).Compute(4).String=" Mhz"

Memory.Discovery.Source(1).Compute(5).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(5).Column=5
Memory.Discovery.Source(1).Compute(5).String="Speed: "

// InstanceTable = Source(1)
// Description;Status;CapacityGB;MemoryType;Frequency;SerialNumber;PartNumber
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Memory.Discovery.Instance.Size=InstanceTable.Column(3)
Memory.Discovery.Instance.Type=InstanceTable.Column(4)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Memory.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)

// Memory collect

// Collect type is MultiInstance
Memory.Collect.Type="MultiInstance"

// Description,Status
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.5.21.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="2,8"

// Duplicate status
// Description;Status;Status;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)

//
// Fans
//

// Fan discovery

// Source(1)
// Description;FanStatus;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.3.2.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="2,10"

// And Finally, remove Temp from the ID
// Description;FanStatus;
Fan.Discovery.Source(1).Compute(1).Type="Replace"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).Replace=" Tach"
Fan.Discovery.Source(1).Compute(1).ReplaceBy=""

// Instance table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(1)

//
// Fan collect
//

// Collect type is MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.3.2.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="2,10"

// Duplicate status
// Description;Status;Status;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// And Finally, remove Tach from the ID
// Description;PATROLStatus;Status;
Fan.Collect.Source(1).Compute(3).Type="Replace"
Fan.Collect.Source(1).Compute(3).Column=1
Fan.Collect.Source(1).Compute(3).Replace=" Tach"
Fan.Collect.Source(1).Compute(3).ReplaceBy=""

// The ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)

// Voltages

// Voltage discovery

// Source(1)
// Description;LowerThreshold;UpperThreshold,CurrentReading,Status
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.2.2.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="2,9,6,3,11"

// Convert Volt to mV
Voltage.Discovery.Source(1).Compute(1).Type="Multiply"
Voltage.Discovery.Source(1).Compute(1).Column=2
Voltage.Discovery.Source(1).Compute(1).MultiplyBy="1000"

// Convert Volt to mV
Voltage.Discovery.Source(1).Compute(2).Type="Multiply"
Voltage.Discovery.Source(1).Compute(2).Column=3
Voltage.Discovery.Source(1).Compute(2).MultiplyBy="1000"

//awk everything to have status activated if sensors!=null and deduct controller id
// Description;LowerThreshold;UpperThreshold,CurrentReading,Status
Voltage.Discovery.Source(1).Compute(3).Type="Awk"
Voltage.Discovery.Source(1).Compute(3).AwkScript=EmbeddedFile(1)

// Translate Status into PATROLStatus
// Description;LowerThreshold;UpperThreshold,CurrentReading,Status
Voltage.Discovery.Source(1).Compute(4).Type="Translate"
Voltage.Discovery.Source(1).Compute(4).Column=5
Voltage.Discovery.Source(1).Compute(4).TranslationTable="statusTranslationTable"

// Instance table = Source(1)
// Description;LowerThreshold;UpperThreshold,CurrentReading,Status
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(2)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(4)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)


// Voltage collect

// Collect type is MultiInstance
Voltage.Collect.Type="MultiInstance"

// Source(1)
// Description;CurrentReading;Status
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.2.2.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="2,3,11"

// Convert Volt to mV
Voltage.Collect.Source(1).Compute(1).Type="Multiply"
Voltage.Collect.Source(1).Compute(1).Column=2
Voltage.Collect.Source(1).Compute(1).MultiplyBy="1000"

// Translate Status into PATROLStatus
// Description;CurrentReading;Status
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column=3
Voltage.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
// Description;CurrentReading;Status
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)
Voltage.Collect.Status=ValueTable.Column(3)

//
// CPUs
//

// CPU Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.Source(1).Type="SnmpTable"
cpu.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.5.20.1"
cpu.Discovery.Source(1).SnmpTableSelectColumns="2,3,6,7,8,11"

// Add some descriptors
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.Source(1).Compute(1).Type="LeftConcat"
cpu.Discovery.Source(1).Compute(1).Column=4
cpu.Discovery.Source(1).Compute(1).String="Cores: "

cpu.Discovery.Source(1).Compute(2).Type="LeftConcat"
cpu.Discovery.Source(1).Compute(2).Column=5
cpu.Discovery.Source(1).Compute(2).String="Threads: "


// InstanceTable = Source(1)
// Description;Speed;Family;Cores;Threads;Status;
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(1)
cpu.Discovery.Instance.DisplayID=InstanceTable.Column(1)
cpu.Discovery.Instance.Model=InstanceTable.Column(3)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(2)
cpu.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
cpu.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(5)

// CPU collect

// Collect type is MultiInstance
cpu.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
cpu.Collect.Source(1).Type="SnmpTable"
cpu.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.5.20.1"
cpu.Collect.Source(1).SnmpTableSelectColumns="2,11"

// Duplicate status
// Description;Status;Status;
cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
cpu.Collect.Source(1).Compute(2).Type="Translate"
cpu.Collect.Source(1).Compute(2).Column=2
cpu.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(2)
cpu.Collect.StatusInformation=ValueTable.Column(3)

//
// PowerSupplys
//

// PowerSupplys Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.11.2.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="2,3,4,5,6"

// Add some descriptors
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).String="Part Number: "

PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=3
PowerSupply.Discovery.Source(1).Compute(2).String="Alternative Part Number: "

PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=4
PowerSupply.Discovery.Source(1).Compute(3).String="Serial Number: "

// InstanceTable = Source(1)
// Description;PartNumber;FruNumber;SerialNumber;Status;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(4)

// PowerSupply collect

// Collect type is MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.11.2.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="2,6"

// Duplicate status
// Description;Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

//
// DiskControllers
//

// DiskControllers Discovery

// Source(1)
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.2.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="2,4,6,9,10,13"

// Add some descriptors
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.Source(1).Compute(1).Type="LeftConcat"
DiskController.Discovery.Source(1).Compute(1).Column=3
DiskController.Discovery.Source(1).Compute(1).String="Manufacturer: "

DiskController.Discovery.Source(1).Compute(2).Type="LeftConcat"
DiskController.Discovery.Source(1).Compute(2).Column=5
DiskController.Discovery.Source(1).Compute(2).String="Serial: "

// Replace Unknown with blank to deactivate DiskController status
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.Source(1).Compute(3).Type="Replace"
DiskController.Discovery.Source(1).Compute(3).Column=6
DiskController.Discovery.Source(1).Compute(3).Replace="Unknown"
DiskController.Discovery.Source(1).Compute(3).ReplaceBy=""

// InstanceTable = Source(1)
// Description;Firmware;Manufacturer;Model;SerialNumber;CacheStatus;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(2)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(3)
DiskController.Discovery.Instance.ParameterActivation.ControllerStatus=InstanceTable.Column(6)

// DiskController collect

// Collect type is MultiInstance
DiskController.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
DiskController.Collect.Source(1).Type="SnmpTable"
DiskController.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.2.1"
DiskController.Collect.Source(1).SnmpTableSelectColumns="2,13"

// Duplicate status
// Description;Status;Status;
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
DiskController.Collect.Source(1).Compute(2).Type="Translate"
DiskController.Collect.Source(1).Compute(2).Column=2
DiskController.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(1)
DiskController.Collect.Status=ValueTable.Column(2)
DiskController.Collect.StatusInformation=ValueTable.Column(3)

//
// LogicalDisks
//

// LogicalDisks Discovery

// Source(1)
// Description;ControllerName;Size;
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.7.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="2,3,5"

// Split the size units from the size
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
LogicalDisk.Discovery.Source(1).Compute(1).Column=3
LogicalDisk.Discovery.Source(1).Compute(1).Replace=" "
LogicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=";"

// Convert the Size units to a multiplier factor
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
LogicalDisk.Discovery.Source(1).Compute(2).Column=4
LogicalDisk.Discovery.Source(1).Compute(2).TranslationTable="SizeUnitsTranslationTable"

// The SizeUnitsTranslationTable
SizeUnitsTranslationTable("MB")="1048576"
SizeUnitsTranslationTable("GB")="1073741824"
SizeUnitsTranslationTable("TB")="1099511627776"
SizeUnitsTranslationTable(Default)="1"

// Multiply the Size by the Size Units Multiplier
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(3).Column=3
LogicalDisk.Discovery.Source(1).Compute(3).MultiplyBy=Column(4)

// InstanceTable = Source(1)
// Description;ControllerName;Size;SizeUnits;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.AttachedToDeviceType="DiskController"

// LogicalDisk collect

// Collect type is MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.7.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,4"

// Duplicate status
// Description;Status;Status;
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// PhysicalDisks
//

// PhysicalDisks Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.3.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="2,3,5,7,8,9,11,13,14,17,18,19,12"

// Split the size units from the size
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=13
PhysicalDisk.Discovery.Source(1).Compute(1).Replace=" "
PhysicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=";"

// Convert the Size units to a multiplier factor
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=14
PhysicalDisk.Discovery.Source(1).Compute(2).TranslationTable="SizeUnitsTranslationTable"

// Multiply the Size by the Size Units Multiplier
// Description;Model;Slot;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=13
PhysicalDisk.Discovery.Source(1).Compute(3).MultiplyBy=Column(14)

// Create the Location
// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=3
PhysicalDisk.Discovery.Source(1).Compute(4).String=" - Slot: "

PhysicalDisk.Discovery.Source(1).Compute(5).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(5).Column=3
PhysicalDisk.Discovery.Source(1).Compute(5).String=Column(9)

PhysicalDisk.Discovery.Source(1).Compute(6).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(6).Column=3
PhysicalDisk.Discovery.Source(1).Compute(6).String="Enclosure: "

// Create Drive Type
// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
// ,<type>
PhysicalDisk.Discovery.Source(1).Compute(7).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(7).Column=4
PhysicalDisk.Discovery.Source(1).Compute(7).String=", "

// <hdd/ssd>,<type>
PhysicalDisk.Discovery.Source(1).Compute(8).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(8).Column=4
PhysicalDisk.Discovery.Source(1).Compute(8).String=Column(5)

// Disk Type: <hdd/ssd>,<type>
PhysicalDisk.Discovery.Source(1).Compute(9).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(9).Column=4
PhysicalDisk.Discovery.Source(1).Compute(9).String="Disk Type: "

// - Disk Type: <hdd/ssd>,<type>
PhysicalDisk.Discovery.Source(1).Compute(10).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(10).Column=4
PhysicalDisk.Discovery.Source(1).Compute(10).String=" - "

//<speed> - Disk Type: <hdd/ssd>,<type>
PhysicalDisk.Discovery.Source(1).Compute(11).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(11).Column=4
PhysicalDisk.Discovery.Source(1).Compute(11).String=Column(6)

//Speed: <speed> - Disk Type: <hdd/ssd>,<type>
PhysicalDisk.Discovery.Source(1).Compute(12).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(12).Column=4
PhysicalDisk.Discovery.Source(1).Compute(12).String="Speed: "

// Create the Model/FRU Number
PhysicalDisk.Discovery.Source(1).Compute(13).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(13).Column=11
PhysicalDisk.Discovery.Source(1).Compute(13).String=" - Alternative Part Number: "

PhysicalDisk.Discovery.Source(1).Compute(14).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(14).Column=11
PhysicalDisk.Discovery.Source(1).Compute(14).String=Column(12)

PhysicalDisk.Discovery.Source(1).Compute(15).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(15).Column=11
PhysicalDisk.Discovery.Source(1).Compute(15).String="Part Number: "


// InstanceTable = Source(1)
// Description;Model;Location;Type;HDD/SSD;Speed;Status;Manufacturer;EnclosureID;SerialNumber;FRU;PartNumber;Size;SizeUnits;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(13)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(11)

// PhysicalDisk collect

// Collect type is MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.3.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,4"

// Duplicate status
// Description;Status;Status;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
// Batterys
//

// Batterys Discovery

// Source(1) = the processorDeviceTable snmp table
// Description;Model;Manufacturer;Status:Serial
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.2.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="2,22,23,24,27"

// Add some descriptors
// Description;Model;Manufacturer;Status:Serial
Battery.Discovery.Source(1).Compute(1).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(1).Column=2
Battery.Discovery.Source(1).Compute(1).String="Part Number: "

Battery.Discovery.Source(1).Compute(2).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(2).Column=3
Battery.Discovery.Source(1).Compute(2).String="Alternative Part Number: "

Battery.Discovery.Source(1).Compute(3).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(3).Column=4
Battery.Discovery.Source(1).Compute(3).String="Serial Number: "

// Translate Status into PATROLStatus
// Description;Model;Manufacturer;Status:Serial
Battery.Discovery.Source(1).Compute(4).Type="Translate"
Battery.Discovery.Source(1).Compute(4).Column=4
Battery.Discovery.Source(1).Compute(4).TranslationTable="statusTranslationTable"

// InstanceTable = Source(1)
// Description;Model;Manufacturer;Status:Serial
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Battery.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
Battery.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
Battery.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(4)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.AttachedToDeviceType="DiskController"

// Battery collect

// Collect type is MultiInstance
Battery.Collect.Type="MultiInstance"

// Source(1)
// Description;Status;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.13.1.2.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="2,24"

// Duplicate status
// Description;Status;Status;
Battery.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// Description;PATROLStatus;Status;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=2
Battery.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// The ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)


//
// LEDs (The first connector to explore this mysterious area)
//

//
// LEDs Discovery

// Source(1)
// Description;Color;
LED.Discovery.Source(1).Type="SnmpTable"
LED.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.8.2.1"
LED.Discovery.Source(1).SnmpTableSelectColumns="4,6"

// Duplicate Color
// Description;Color;Color;
LED.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
LED.Discovery.Source(1).Compute(1).Column=2

// Translate the Color to
// Description;Color;ON;BLINKING;OFF;
LED.Discovery.Source(1).Compute(2).Type="Translate"
LED.Discovery.Source(1).Compute(2).Column=3
LED.Discovery.Source(1).Compute(2).TranslationTable="LEDColorTranslationTable"

LEDColorTranslationTable("yellow")="ALARM;ALARM;OK"
LEDColorTranslationTable("blue")="OK;OK;OK"
LEDColorTranslationTable("green")="OK;OK;ALARM"

// The Instance Table
// Description;Color;ON;BLINKING;OFF;
LED.Discovery.InstanceTable=%LED.Discovery.Source(1)%
LED.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LED.Discovery.Instance.DisplayID=InstanceTable.Column(1)
LED.Discovery.Instance.Color=InstanceTable.Column(2)
LED.Discovery.Instance.OnStatus=InstanceTable.Column(3)
LED.Discovery.Instance.BlinkingStatus=InstanceTable.Column(4)
LED.Discovery.Instance.OffStatus=InstanceTable.Column(5)

//
// LEDs Collect

// Collect type is multi-instance
LED.Collect.Type="MultiInstance"

// Source(1)
// Description;State;
LED.Collect.Source(1).Type="SnmpTable"
LED.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.8.2.1"
LED.Collect.Source(1).SnmpTableSelectColumns="4,5"

// Translate the State
// Description;State;
LED.Collect.Source(1).Compute(1).Type="Translate"
LED.Collect.Source(1).Compute(1).Column=2
LED.Collect.Source(1).Compute(1).TranslationTable="LEDStateTranslationTable"

// The LEDStateTranslationTable
LEDStateTranslationTable(0)="Off"
LEDStateTranslationTable(1)="On"
LEDStateTranslationTable(2)="Blinking"

// ValueTable = Source(1)
// Description;State;
LED.Collect.ValueTable=%LED.Collect.Source(1)%
LED.Collect.DeviceID=ValueTable.Column(1)
LED.Collect.Status=ValueTable.Column(2)

// TEMPERATURES

// Temperature discovery

// Source(1)
// Description;AlarmThreshold;WarningThreshold;CurrentReading;Status;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.1.2.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="2,6,7,3,11"

// Remove Temp from description
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Discovery.Source(1).Compute(1).Type="Replace"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).Replace=" Temp"
Temperature.Discovery.Source(1).Compute(1).ReplaceBy=""

//awk everything to have status activated if sensors!=null and deduct controller id
// Description;LowerThreshold;UpperThreshold,CurrentReading,Status
Temperature.Discovery.Source(1).Compute(2).Type="Awk"
Temperature.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(1)

// Translate Status into PATROLStatus
// Description;AlarmThreshold;WarningThreshold;CurrentReading;Status;
Temperature.Discovery.Source(1).Compute(3).Type="Translate"
Temperature.Discovery.Source(1).Compute(3).Column=5
Temperature.Discovery.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Instance table = Source(1)
// Description;AlarmThreshold;WarningThreshold;CurrentReading;Status;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(2)
// Activate Temperature if a current reading exists
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
// Activate Status only if no thresholds exist
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)

// Temperature collect

// Collect type is MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1)
// Description;CurrentReading;Status
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.19046.11.1.1.1.2.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="2,3,11"

// Duplicate status
// Description;CurrentReading;Status;Status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=3

// Translate Status into PATROLStatus
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// And Finally, remove Temp from the ID
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(3).Type="Replace"
Temperature.Collect.Source(1).Compute(3).Column=1
Temperature.Collect.Source(1).Compute(3).Replace=" Temp"
Temperature.Collect.Source(1).Compute(3).ReplaceBy=""


// The ValueTable = Source(1)
// Description;CurrentReading;PATROLStatus;Status;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)

// The statusTranslationTable
statusTranslationTable("Normal")="OK"
statusTranslationTable("Unknown")="UNKNOWN"
statusTranslationTable("Critical")="ALARM"
statusTranslationTable("Operational")="OK"
statusTranslationTable("Optimal")="OK"
statusTranslationTable("Unconfigured Good")="OK"
statusTranslationTable("Online")="OK"
statusTranslationTable("Warning")="WARN"
statusTranslationTable("NoCurrentReading")=""
statusTranslationTable(Default)="UNKNOWN"


/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = activate status if voltage = 0 or 0.0 or use voltage threshold instead
//    Input Voltage : Description;LowerThreshold;UpperThreshold,CurrentReading,Status
//	  Input Temperature : Description;AlarmThreshold;WarningThreshold;CurrentReading;Status;
//
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";";}
{
       gsub("^0.?0*$","",$4)
       if ($4 == "" || $4 <= 0)
       {
        print  $1";"";"";"";"$5
       }
       else
       {
			if ($2 == "N/A" && $3 == "N/A" || $2 == "" && $3 == "" )
			{
			print $1";"";"";"";"$5
			}
			else
			{
			print $1";"$2";"$3";"$4";""NoCurrentReading"
			}
		}
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////
