//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                  MS_HW_DellCMC.hdf
//
//      Supports: Dell Blade chassis with DRAC
//		Monitors: the chassis'environment (temperatures, fans, power supplies)
//      Connects to: the DRAC through Telnet
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun ZFS Storage Appliance"
hdf.TypicalPlatform="Oracle ZFS Storage Appliance"
hdf.ReliesOn="Oracle ZFS Command Line (SSH)"
hdf.Comments="Provides chassis, CPU, disk, fan, memory, PSU and PCIe cards status for ZFS Storage Appliances"
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

//
// DETECTION
//

Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="maintenance hardware show"
Detection.Criteria(1).ExpectedResult=" *NAME *STATE *MANUFACTURER *MODEL *SERIAL *"


// Enclosures
// Run the maintenance hardware show command
Enclosure.Discovery.Source(1).Type="OSCommand"
Enclosure.Discovery.Source(1).ForceSerialization=1
Enclosure.Discovery.Source(1).CommandLine="maintenance hardware show"
// AWK it
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Discovery.Source(1).Compute(1).Separators=";"


// Make a copy so that other discoveries can use the raw results
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=3
Enclosure.Discovery.Source(2).Compute(1).RegExp="chassis-[0-9]+$"

// Make a copy so that other discoveries can use the Primary Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.Source(3)=%Enclosure.Discovery.Source(2)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(3).Compute(1).Column=2
Enclosure.Discovery.Source(3).Compute(1).RegExp="chassis-[0-9]+$"

// The discovery table = source(2)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(7)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(8)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
Enclosure.Discovery.Instance.Type="Chassis"


//
// COLLECT

// Collect type is multi-instance
Enclosure.Collect.Type="MultiInstance"

// Run the maintenance hardware show command
Enclosure.Collect.Source(1).Type="OSCommand"
Enclosure.Collect.Source(1).ForceSerialization=1
Enclosure.Collect.Source(1).CommandLine="maintenance hardware show"

// AWK it
// chassis;id;state;state;rpm;
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Collect.Source(1).Compute(1).Separators=";"
Enclosure.Collect.Source(1).Compute(1).SelectColumns="2,3,5,6,10"

// Make a copy so that other discoveries can use the raw results
// chassis;id;state;state;rpm;
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=2
Enclosure.Collect.Source(2).Compute(1).RegExp="chassis-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
Enclosure.Collect.Source(2).Compute(2).Type="Translate"
Enclosure.Collect.Source(2).Compute(2).Column=3
Enclosure.Collect.Source(2).Compute(2).TranslationTable="StatusTranslationTable"


// The StatusTranslationTable
StatusTranslationTable("ok")="OK"
StatusTranslationTable("faulted")="ALARM"
StatusTranslationTable("absent")="ALARM"
StatusTranslationTable(Default)="ALARM"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)
Enclosure.Collect.Status=ValueTable.Column(3)
Enclosure.Collect.StatusInformation=ValueTable.Column(4)


// Fans

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=3
Fan.Discovery.Source(1).Compute(1).RegExp="fan-[0-9]+$"

// Add Serial Number to Addtional Infomation
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Fan.Discovery.Source(1).Compute(2).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(2).Column=9
Fan.Discovery.Source(1).Compute(2).String="Serial Number: "

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Fan.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(3).Column=5
Fan.Discovery.Source(1).Compute(3).ValueList="absent"


// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=2
Fan.Collect.Source(1).Compute(1).RegExp="fan-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=3
Fan.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)

// PowerSupply

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=3
PowerSupply.Discovery.Source(1).Compute(1).RegExp="psu-[0-9]+$"

// Add Serial Number to Addtional Infomation
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=9
PowerSupply.Discovery.Source(1).Compute(2).String="Serial Number: "

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PowerSupply.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(3).Column=5
PowerSupply.Discovery.Source(1).Compute(3).ValueList="absent"

PowerSupply.Discovery.Source(1).Compute(4).Type="LeftConcat"
PowerSupply.Discovery.source(1).Compute(4).Column=7
PowerSupply.Discovery.Source(1).Compute(4).String="Vendor: "

PowerSupply.Discovery.Source(1).Compute(5).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(5).Column=8
PowerSupply.Discovery.Source(1).Compute(5).String="Model: "

// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(8)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=2
PowerSupply.Collect.Source(1).Compute(1).RegExp="psu-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=3
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(2)
PowerSupply.Collect.Status=ValueTable.Column(3)
PowerSupply.Collect.StatusInformation=ValueTable.Column(4)

// OtherDevice

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=3
OtherDevice.Discovery.Source(1).Compute(1).RegExp="slot-[0-9]+$"

// Add Serial Number to Addtional Infomation
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
OtherDevice.Discovery.Source(1).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(2).Column=9
OtherDevice.Discovery.Source(1).Compute(2).String="Serial Number: "

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
OtherDevice.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
OtherDevice.Discovery.Source(1).Compute(3).Column=5
OtherDevice.Discovery.Source(1).Compute(3).ValueList="absent"

OtherDevice.Discovery.Source(1).Compute(4).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(4).Column=7
OtherDevice.Discovery.Source(1).Compute(4).String="Vendor: "

// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.AdditionalLabel=InstanceTable.Column(8)
OtherDevice.Discovery.Instance.DeviceType="Slot"
OtherDevice.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(9)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)
OtherDevice.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=2
OtherDevice.Collect.Source(1).Compute(1).RegExp="slot-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=3
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(2)
OtherDevice.Collect.Status=ValueTable.Column(3)
OtherDevice.Collect.StatusInformation=ValueTable.Column(4)

// CPUs

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
CPU.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
CPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=3
CPU.Discovery.Source(1).Compute(1).RegExp="cpu-[0-9]+$"

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
CPU.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
CPU.Discovery.Source(1).Compute(2).Column=5
CPU.Discovery.Source(1).Compute(2).ValueList="absent"

// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(3)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(4)
CPU.Discovery.Instance.Model=InstanceTable.Column(8)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(7)
CPU.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
CPU.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
CPU.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
CPU.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Collect.Source(1).Compute(1).Column=2
CPU.Collect.Source(1).Compute(1).RegExp="cpu-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column=3
CPU.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(2)
CPU.Collect.Status=ValueTable.Column(3)
CPU.Collect.StatusInformation=ValueTable.Column(4)

// Memory

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).RegExp="memory-[0-9]+$"

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Memory.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(2).Column=5
Memory.Discovery.Source(1).Compute(2).ValueList="absent"

// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(4)
Memory.Discovery.Instance.Model=InstanceTable.Column(8)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(7)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
Memory.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
Memory.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
Memory.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
Memory.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=2
Memory.Collect.Source(1).Compute(1).RegExp="memory-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=3
Memory.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(2)
Memory.Collect.Status=ValueTable.Column(3)
Memory.Collect.StatusInformation=ValueTable.Column(4)


// Memory

// Discovery

// Take list of components from Enclosure 1
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only Chassis
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=3
PhysicalDisk.Discovery.Source(1).Compute(1).RegExp="disk-[0-9]+$"

// Exclude absent instances
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PhysicalDisk.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=5
PhysicalDisk.Discovery.Source(1).Compute(2).ValueList="absent"

// Convert size from GB to B
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(3).Column=11
PhysicalDisk.Discovery.Source(1).Compute(3).MultiplyBy="1000000000"

// "RPM: " to the rpm field
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;RPM: rpm;size;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=10
PhysicalDisk.Discovery.Source(1).Compute(4).String="RPM: "

// The discovery table = source(1)
// MSHW;chassis;id;name;state;state;manufacturer;model;serial;rpm;size;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(8)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(9)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(11)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// COLLECT

// Collect type is multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Take the component status list from Enclosure 1
// chassis;id;state;state;rpm;
PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Keep Only Chassis
// chassis;id;PATROLStatus;state;rpm;
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2
PhysicalDisk.Collect.Source(1).Compute(1).RegExp="disk-[0-9]+$"

// Translate the first Status code into a PATROLStatus
// chassis;id;PATROLStatus;state;rpm;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=3
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// ValueTable = Source(1)
// chassis;id;PATROLStatus;state;rpm;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(3)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(4)

// Logical Disks

// LogicalDisk
// Run the status storage show command
LogicalDisk.Discovery.Source(1).Type="OSCommand"
LogicalDisk.Discovery.Source(1).ForceSerialization=1
LogicalDisk.Discovery.Source(1).CommandLine="status storage show"

// AWK it
// pool;Available;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
LogicalDisk.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Discovery.Source(1).Compute(1).Separators=";"
LogicalDisk.Discovery.Source(1).Compute(1).SelectColumns="2,6"

// Convert the size into bytes
// pool;Available;
LogicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(2).Column=2
LogicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1073741824"

// Run the configuration storage show command
LogicalDisk.Discovery.Source(2).Type="OSCommand"
LogicalDisk.Discovery.Source(2).ForceSerialization=1
LogicalDisk.Discovery.Source(2).CommandLine="Configuration storage show"
// AWK it
// pool;RaidLevel;
LogicalDisk.Discovery.Source(2).Compute(1).Type="Awk"
LogicalDisk.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
LogicalDisk.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Discovery.Source(2).Compute(1).Separators=";"
LogicalDisk.Discovery.Source(2).Compute(1).SelectColumns="2,3"

// Join 1 & 2
// pool;Available;pool;RaidLevel;
LogicalDisk.Discovery.Source(3).Type="TableJoint"
LogicalDisk.Discovery.Source(3).LeftTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).RightTable=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Source(3).LeftKeyColumn=1
LogicalDisk.Discovery.Source(3).RightKeyColumn=1
LogicalDisk.Discovery.Source(3).DefaultRightLine=";;"

// Add PrimaryChassis to the right of the table
// pool;Available;pool;RaidLevel;PrimaryChassis;
LogicalDisk.Discovery.Source(3).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(3).Compute(1).Column=4
LogicalDisk.Discovery.Source(3).Compute(1).String=";PrimaryChassis"

// Join Logical Disk Source with Enclosure Discovery 1
// pool;Available;pool;RaidLevel;PrimaryChassis;MSHW;PrimaryChassis;Chassis;
LogicalDisk.Discovery.Source(4).Type="TableJoint"
LogicalDisk.Discovery.Source(4).LeftTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
LogicalDisk.Discovery.Source(4).LeftKeyColumn=5
LogicalDisk.Discovery.Source(4).RightKeyColumn=2
LogicalDisk.Discovery.Source(4).DefaultRightLine=";;;"


// InstanceTable = Source(3)
// pool;Available;pool;RaidLevel;PrimaryChassis;MSHW;PrimaryChassis;Chassis;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(8)

//
// COLLECT

// Collect type is multi-instance
LogicalDisk.Collect.Type="MultiInstance"

// Run the maintenance hardware show command
LogicalDisk.Collect.Source(1).Type="OSCommand"
LogicalDisk.Collect.Source(1).ForceSerialization=1
LogicalDisk.Collect.Source(1).CommandLine="status storage show"

// AWK it
// pool;State;State;Free;
LogicalDisk.Collect.Source(1).Compute(1).Type="Awk"
LogicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)
LogicalDisk.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Collect.Source(1).Compute(1).Separators=";"
LogicalDisk.Collect.Source(1).Compute(1).SelectColumns="2,3,4,7"

// Translate the first Status code into a PATROLStatus
// pool;PatrolStatus;State;Free;
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable("online")="OK"
LogicalDiskStatusTranslationTable("faulted")="ALARM"
LogicalDiskStatusTranslationTable(Default)="ALARM"

// Convert the free space into bytes
// pool;PatrolStatus;State;Free;
LogicalDisk.Collect.Source(1).Compute(3).Type="Multiply"
LogicalDisk.Collect.Source(1).Compute(3).Column=4
LogicalDisk.Collect.Source(1).Compute(3).MultiplyBy="1073741824"

// ValueTable = Source(1)
// pool;PatrolStatus;State;Free;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)
LogicalDisk.Collect.UnallocatedSpace=ValueTable.Column(4)


// NetworkCards / FC POrts

// FC POrts
// Run the configuration san targets fc list
NetworkCard.Discovery.Source(1).Type="OSCommand"
NetworkCard.Discovery.Source(1).ForceSerialization=1
NetworkCard.Discovery.Source(1).CommandLine="configuration san targets fc list"
// AWK it
// DeviceID;Address;DisplayID;Mode;AddressType;
NetworkCard.Discovery.Source(1).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
NetworkCard.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(1).Compute(1).Separators=";"
NetworkCard.Discovery.Source(1).Compute(1).SelectColumns="2,3,5,6,8"

// Run the configuration net devices list
NetworkCard.Discovery.Source(2).Type="OSCommand"
NetworkCard.Discovery.Source(2).ForceSerialization=1
NetworkCard.Discovery.Source(2).CommandLine="configuration net devices list"

// AWK it
// DeviceID;Address;DisplayID;Mode;AddressType;
NetworkCard.Discovery.Source(2).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(5)
NetworkCard.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(2).Compute(1).Separators=";"
NetworkCard.Discovery.Source(2).Compute(1).SelectColumns="2,3,5,6,8"

// Union 1 & 2
// DeviceID;Address;DisplayID;Mode;AddressType;
NetworkCard.Discovery.Source(3).Type="TableUnion"
NetworkCard.Discovery.Source(3).Table1=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(3).Table2=%NetworkCard.Discovery.Source(2)%


// Add PrimaryChassis to the right of the table
// DeviceID;Address;DisplayID;Mode;AddressType;PrimaryChassis;
NetworkCard.Discovery.Source(3).Compute(1).Type="RightConcat"
NetworkCard.Discovery.Source(3).Compute(1).Column=5
NetworkCard.Discovery.Source(3).Compute(1).String=";PrimaryChassis"

// Join Logical Disk Source with Enclosure Discovery 1
// DeviceID;Address;DisplayID;Mode;AddressType;PrimaryChassis;MSHW;PrimaryChassis;Chassis;
NetworkCard.Discovery.Source(4).Type="TableJoint"
NetworkCard.Discovery.Source(4).LeftTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(2)%
NetworkCard.Discovery.Source(4).LeftKeyColumn=6
NetworkCard.Discovery.Source(4).RightKeyColumn=2
NetworkCard.Discovery.Source(4).DefaultRightLine=";;;"

// InstanceTable = Source(3)
// DeviceID;Address;DisplayID;Mode;AddressType;PrimaryChassis;MSHW;PrimaryChassis;Chassis;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.PhysicalAddressType=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)

//
// COLLECT

// Collect type is multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Run the configuration san targets fc list command
NetworkCard.Collect.Source(1).Type="OSCommand"
NetworkCard.Collect.Source(1).ForceSerialization=1
NetworkCard.Collect.Source(1).CommandLine="configuration san targets fc list"

// AWK it
// ID;speed;link(speed);
NetworkCard.Collect.Source(1).Compute(1).Type="Awk"
NetworkCard.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
NetworkCard.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(1).Compute(1).Separators=";"
NetworkCard.Collect.Source(1).Compute(1).SelectColumns="2,4,7"

// Translate the link(speed) code into a LinkStatus
// ID;speed;LinkStatus;
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=3
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="FCspeedTranslationTable"

// The FCspeedTranslationTable
FCspeedTranslationTable(0)="WARN"
FCspeedTranslationTable(Default)="OK"

// Run the configuration net devices list command
NetworkCard.Collect.Source(2).Type="OSCommand"
NetworkCard.Collect.Source(2).ForceSerialization=1
NetworkCard.Collect.Source(2).CommandLine="configuration net devices list"

// AWK it
// ID;speed;linkUP;
NetworkCard.Collect.Source(2).Compute(1).Type="Awk"
NetworkCard.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(5)
NetworkCard.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(2).Compute(1).Separators=";"
NetworkCard.Collect.Source(2).Compute(1).SelectColumns="2,4,7"

// Translate the linkUP code into a LinkStatus
// ID;speed;LinkStatus;
NetworkCard.Collect.Source(2).Compute(2).Type="Translate"
NetworkCard.Collect.Source(2).Compute(2).Column=3
NetworkCard.Collect.Source(2).Compute(2).TranslationTable="linkUPTranslationTable"

// The FCspeedTranslationTable
linkUPTranslationTable("true")="OK"
linkUPTranslationTable("false")="WARN"

// Union 1 & 2
// ID;speed;LinkStatus;
NetworkCard.Collect.Source(3).Type="TableUnion"
NetworkCard.Collect.Source(3).Table1=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).Table2=%NetworkCard.Collect.Source(2)%

// ValueTable = 3(1)
// ID;speed;LinkStatus;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.LinkStatus=ValueTable.Column(3)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(2)


/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    Awk script to parse maintenance hardware show Command Output
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {valid="";chassis="";primarychassis="";typeStart=""}
# Get Chassis
$1 ~ /chassis-[0-9]+/ { chassis = $1}

#Find the Primary Chassis (the one with CPUs)
$1 ~ /cpu-[0-9]+/ {primarychassis = chassis};

# Process instances
valid != "" && NF > 4 && chassis != "" {
    if ( $1 ~ /^chassis/ ) { id = $1}
       else {id = chassis "-" $1}
    name = substr($0,nameStart,nameLength) ; gsub(/ +$/,"",name);
    state = substr($0,stateStart,stateLength) ; gsub(/ +$/,"",state );
    manufacturer = substr($0,manufacturerStart,manufacturerLength ) ; gsub(/ +$/,"",manufacturer );
    model = substr($0,modelStart,modelLength) ; gsub(/ +$/,"",model );
    if (valid=="withoutRPM") {serialLength = length ($0) - serialStart }
       else {if (typeStart == 0){rpm = substr($0,rpmStart) ; gsub(/ +$/,"",rpm ); gsub(/^ +/,"",rpm );} else {rpm = substr($0,rpmStart,rpmLength) ; gsub(/ +$/,"",rpm ); gsub(/^ +/,"",rpm );}}
    serial = substr($0,serialStart,serialLength ) ; gsub(/ +$/,"",serial );
    print "MSHW;" chassis ";" id ";" name ";" state ";" state ";" manufacturer ";" model ";" serial ";" rpm ";"
    }

# Check for header with RPM
$0 ~ / *NAME *STATE *MANUFACTURER *MODEL *SERIAL *RPM */ {
     valid="withRPM"
     nameStart = index($0,"NAME")
     stateStart = index($0,"STATE")
     manufacturerStart = index($0,"MANUFACTURER")
     modelStart = index($0,"MODEL")
     serialStart = index($0,"SERIAL")
     rpmStart = index($0,"RPM")
	 typeStart = index($0,"TYPE")
     nameLength = stateStart - nameStart - 1
     stateLength = manufacturerStart - stateStart - 1
     manufacturerLength = modelStart - manufacturerStart - 1
     modelLength = serialStart - modelStart - 1
     serialLength = rpmStart - serialStart - 1
	 rpmLength = typeStart - rpmStart - 1
    };

# Check for header without RPM
$0 ~ / *NAME *STATE *MANUFACTURER *MODEL *SERIAL *$/ {
     valid="withoutRPM"
     nameStart = index($0,"NAME")
     stateStart = index($0,"STATE")
     manufacturerStart = index($0,"MANUFACTURER")
     modelStart = index($0,"MODEL")
     serialStart = index($0,"SERIAL")
     nameLength = stateStart - nameStart - 1
     stateLength = manufacturerStart - stateStart - 1
     manufacturerLength = modelStart - manufacturerStart - 1
     modelLength = serialStart - modelStart - 1
     serialLength = rpmStart - serialStart - 1
    };

END {print "MSHW;PrimaryChassis;"primarychassis";"}
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 2
///
///    Awk script to parse configuration storage show Command Output
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(2):
$1 ~ /pool/ && $2 ~ /=/ {pool = $3}
$1 ~ /status/ && $2 ~ /=/ {status= $3}
$1 ~ /profile/ && $2 ~ /=/ && pool != "" {
                            profile= $3
                            print "MSHW;" pool ";" profile ";"
                            pool = "" ; status = ""
                           }
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 3
///
///    Awk script to parse status storage show Command Output
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(3):
function sizeConvert(size)
{
if (size ~ /P$/) {gsub(/P/,"",size); size = size * 1048576 }
else if (size ~ /T$/) {gsub(/T/,"",size); size = size * 1024}
else if (size ~ /G$/) {gsub(/G/,"",size); size = size }
else if (size ~ /M$/) {gsub(/M/,"",size); size = size / 1024}
else if (size ~ /K$/) {gsub(/K/,"",size); size = size / 1048576 }
else {size = size / 1073741824 }
return size
}

$1 ~ /:/ && $1 !~ /Storage:/ {pool = $1 ; gsub(/:/,"",pool)}
$1 ~ /^Used/ && $2 ~ /^[0-9.]+/ && $3 ~ /bytes/ {Used = sizeConvert($2);}
$1 ~ /^Avail/ && $2 ~ /^[0-9.]+/ && $3 ~ /bytes/ {Available = sizeConvert($2);}
$1 ~ /^Free/ && $2 ~ /^[0-9.]+/ && $3 ~ /bytes/ {Free = sizeConvert($2);}




$1 ~ /State/ && pool != "" {
                            State = $2
                            print "MSHW;" pool ";" State";" State";" Used ";" Available ";" Free ";"
                            pool = "" ; State= ""
                           }
EmbeddedFile(3).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 4
///
///    Awk script to parse configuration san targets fc list
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN {valid=""}

# Process instances
valid != "" && NF > 4 && $1 ~ /target-/ {
    name = substr($0,nameStart,nameLength) ; gsub(/ +$/,"",name);
    mode = substr($0,modeStart,modeLength) ; gsub(/ +$/,"",mode);
    WWN = substr($0,WWNStart,WWNLength ) ; gsub(/ +$/,"",WWN); gsub(/wwn./,"",WWN);
    port = substr($0,portStart,portLength) ; gsub(/ +$/,"",port);
    speed = substr($0,speedStart) ; gsub(/ +$/,"",speed); gsub(/ Gbit.*/,"",speed); speed = speed * 1000;
    print "MSHW;" name ";" WWN ";" speed ";" port ";FC " mode ";" speed ";WWN;"
    }

# Check for header
$0 ~ /^ *NAME +MODE +WWN +PORT +SPEED/ {
     valid="1"
     nameStart = index($0,"NAME")
     modeStart = index($0,"MODE")
     WWNStart = index($0,"WWN")
     portStart = index($0,"PORT")
     speedStart = index($0,"SPEED")
     nameLength = modeStart - nameStart - 1
     modeLength = WWNStart - modeStart - 1
     WWNLength = portStart - WWNStart - 1
     portLength = speedStart - portStart - 1
    };
EmbeddedFile(4).End
///////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
///
///    Embedded File 5
///
///    Awk script to parse configuration configuration net devices list
///
///
/////////////////////////////////////////////////////////////
EmbeddedFile(5):
BEGIN {valid=""}

# Process instances
valid != "" && NF > 4 && $1 ~ /[A-Za-z]+[0-9]+/ {
    device = substr($0,deviceStart,deviceLength) ; gsub(/ +$/,"",device );
    up = substr($0,upStart,upLength) ; gsub(/ +$/,"",up);
    speed = substr($0,speedStart,speedLength ) ; gsub(/ +$/,"",speed);
    if (speed ~ /Mbit/) {  gsub(/ Mbit.*/,"",speed);  }
    else if (speed ~ /Gbit/) {  gsub(/ Gbit.*/,"",speed); speed = speed * 1000  }
    mac= substr($0,macStart) ; gsub(/ +$/,"",mac); gsub(/:/,"",mac); mac = toupper(mac);
    print "MSHW;" device ";" mac";" speed ";" device ";IP target;" up ";MAC;"
    }

# Check for header
$0 ~ /^ *DEVICE +UP +SPEED +MAC/ {
     valid="1"
     deviceStart = index($0,"DEVICE")
     upStart = index($0,"UP")
     speedStart = index($0,"SPEED")
     macStart = index($0,"MAC")
     deviceLength = upStart - deviceStart - 1
     upLength = speedStart - upStart - 1
     speedLength = macStart - speedStart - 1
    };
EmbeddedFile(5).End
///////////////////////////////////////////////////////////////
