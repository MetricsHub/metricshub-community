//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_HPUXWBEM.hdf
//
//      Supports: HP-UX machines
//		  Monitors: HP Integrity BL860c i2, BL870c i2 & BL890c i2 Server Blades, rx2800 i2 and HP Integrity Superdome 2
//    Connects to:  HP-UW integrated WBEM Service
//
//
//  SUPPORT TEAM:
//  run the following to get a list of classes available on the server:
//  /opt/propplus/bin/cprop -list
//  to get information about a particular class:
//  /opt/propplus/bin/cprop -summary -c "CLASSNAME"


//
// HEADER
//

hdf.DisplayName="HP-UX (WBEM)"
hdf.TypicalPlatform="HP 9000,HP Integrity,HP SuperDome"
hdf.ReliesOn="HP-UX WBEM Provider"
hdf.Comments=""
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="HP"
hdf.Supersedes="MS_HW_HPUX.hdf,MS_HW_HPUXDisk.hdf,MS_HW_HPUXSasMgr.hdf,MS_HW_HPUXSAUtil.hdf,MS_HW_HPUXStm.hdf"
hdf.Comments="Provides the monitoring of HP-UX servers through the HP-UX WBEM Provider."

// Checking the version of ESXi
Detection.Criteria(1).Type="WBEM"
Detection.Criteria(1).WbemNameSpace="root/cimv2"
Detection.Criteria(1).WbemQuery="SELECT DeviceID FROM HPUX_Processor"




// Enclosure: computer

// Source(1) PG_ComputerSystem class
// model;serialNumber;
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemNameSpace="root/cimv2"
Enclosure.Discovery.Source(1).WbemQuery="SELECT caption,SerialNumber FROM PG_ComputerSystem"

// InstanceTable = Source(1)
// model;serialNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="HPServer"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor="HP"
Enclosure.Discovery.Instance.Type="Computer"

// CPU Cores

// Discovery

// ID;MaxClockSpeed;Description;CurrentClockSpeed
cpu.Discovery.Source(1).Type="WBEM"
cpu.Discovery.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus,Name,CurrentClockSpeed FROM HPUX_Processor"
cpu.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Exclude any "Dormant" CPUs Operation Status contains 15|
// ID;MaxClockSpeed;Description;CurrentClockSpeed
cpu.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
cpu.Discovery.Source(1).Compute(1).Column=2
cpu.Discovery.Source(1).Compute(1).RegExp="15\\\|"

cpu.Discovery.Source(1).Compute(2).Type="Replace"
cpu.Discovery.Source(1).Compute(2).Column=2
cpu.Discovery.Source(1).Compute(2).Replace="(R)"
cpu.Discovery.Source(1).Compute(2).ReplaceBy=""


// InstanceTable = Source(1)
// ID;MaxClockSpeed;Description;CurrentClockSpeed
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(1)
cpu.Discovery.Instance.DisplayID=InstanceTable.Column(1)
cpu.Discovery.Instance.Model=InstanceTable.Column(3)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(2)
cpu.Discovery.Instance.ParameterActivation.CurrentSpeed=InstanceTable.Column(4)

// Collect

cpu.Collect.Type="MultiInstance"

// DeviceID,CurrentClockSpeed,OperationalStatus
cpu.Collect.Source(1).Type="WBEM"
cpu.Collect.Source(1).WbemQuery="SELECT DeviceID,CurrentClockSpeed,OperationalStatus FROM HPUX_Processor"
cpu.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column=3

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,CurrentClockSpeed,PATROLStatusArray,OperationalStatus
cpu.Collect.Source(1).Compute(2).Type="ArrayTranslate"
cpu.Collect.Source(1).Compute(2).Column=3
cpu.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,CurrentClockSpeed,PatrolStatus,OperationalStatus
cpu.Collect.Source(1).Compute(3).Type="Convert"
cpu.Collect.Source(1).Compute(3).Column=3
cpu.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,CurrentClockSpeed,PatrolStatus,StatusInformation
cpu.Collect.Source(1).Compute(4).Type="ArrayTranslate"
cpu.Collect.Source(1).Compute(4).Column=4
cpu.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
cpu.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Instance ,Table
// DeviceID,CurrentClockSpeed,PatrolStatus,StatusInformation
cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(3)
cpu.Collect.StatusInformation=ValueTable.Column(4)
cpu.Collect.CurrentSpeed=ValueTable.Column(2)


// Memory

// Discovery
// Source 1 = HP_PhysicalMemory
// ID,PartNumber,Capacity
Memory.Discovery.Source(1).Type="WBEM"
Memory.Discovery.Source(1).WbemQuery="SELECT Tag,PartNumber,Capacity FROM HP_PhysicalMemory"
Memory.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Convert Capacity from bytes to MBytes
// ID,PartNumber,Capacity
Memory.Discovery.Source(1).Compute(1).Type="Divide"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).DivideBy="1048576"

// Source 2 = HP_MemoryLocation
// ID,Location
Memory.Discovery.Source(2).Type="WBEM"
Memory.Discovery.Source(2).WbemQuery="SELECT PhysicalPosition,Name FROM HP_MemoryLocation"
Memory.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Source 3 = Table Joint of 1 and 2
// ID,PartNumber,Capacity,ID,Location
Memory.Discovery.Source(3).Type="TableJoint"
Memory.Discovery.Source(3).LeftTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Source(3).RightTable=%Memory.Discovery.Source(2)%
Memory.Discovery.Source(3).LeftKeyColumn="1"
Memory.Discovery.Source(3).RightKeyColumn="1"
Memory.Discovery.Source(3).DefaultRightLine=";;"

// ID,PartNumber,Capacity,ID,Label,Location,
Memory.Discovery.Source(3).Compute(1).Type="DuplicateColumn"
Memory.Discovery.Source(3).Compute(1).Column="5"

Memory.Discovery.Source(3).Compute(2).Type="Replace"
Memory.Discovery.Source(3).Compute(2).Column=6
Memory.Discovery.Source(3).Compute(2).Replace=":"
Memory.Discovery.Source(3).Compute(2).ReplaceBy=""

Memory.Discovery.Source(3).Compute(3).Type="Replace"
Memory.Discovery.Source(3).Compute(3).Column=6
Memory.Discovery.Source(3).Compute(3).Replace="-"
Memory.Discovery.Source(3).Compute(3).ReplaceBy=""

Memory.Discovery.Source(3).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(3).Compute(4).Column=6
Memory.Discovery.Source(3).Compute(4).String="Location: "

// InstanceTable = Source(1)
// ID,PartNumber,Capacity,ID,Location
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(3)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Model=InstanceTable.Column(2)
Memory.Discovery.Instance.Size=InstanceTable.Column(3)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(5)

// Collect

Memory.Collect.Type="MultiInstance"

// DeviceID,OperationalStatus
Memory.Collect.Source(1).Type="WBEM"
Memory.Collect.Source(1).WbemQuery="SELECT Tag,OperationalStatus FROM HP_PhysicalMemory"
Memory.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Memory.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PatrolStatus,OperationalStatus
Memory.Collect.Source(1).Compute(3).Type="Convert"
Memory.Collect.Source(1).Compute(3).Column=2
Memory.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PatrolStatus,StatusInformation
Memory.Collect.Source(1).Compute(4).Type="ArrayTranslate"
Memory.Collect.Source(1).Compute(4).Column=3
Memory.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Memory.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Instance Table
// DeviceID,PatrolStatus,StatusInformation
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)


// Power Supplies

// Discovery

// ID;DisplayName;PartNumber;Location;
PowerSupply.Discovery.Source(1).Type="WBEM"
PowerSupply.Discovery.Source(1).WbemQuery="SELECT Tag,ElementName,PartNumber,Description FROM HP_PowerSupplyModule"
PowerSupply.Discovery.Source(1).WbemNameSpace="root/cimv2"

PowerSupply.Discovery.Source(1).Compute(1).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(1).Column=4
PowerSupply.Discovery.Source(1).Compute(1).Replace="This is a power supply device with following details: "
PowerSupply.Discovery.Source(1).Compute(1).ReplaceBy=""

PowerSupply.Discovery.Source(1).Compute(2).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).Replace=":"
PowerSupply.Discovery.Source(1).Compute(2).ReplaceBy=" "

PowerSupply.Discovery.Source(1).Compute(3).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(3).Column=4
PowerSupply.Discovery.Source(1).Compute(3).Replace="-"
PowerSupply.Discovery.Source(1).Compute(3).ReplaceBy=""

PowerSupply.Discovery.Source(1).Compute(4).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(4).Column=4
PowerSupply.Discovery.Source(1).Compute(4).String="Location: "

PowerSupply.Discovery.Source(1).Compute(5).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(5).Column=3
PowerSupply.Discovery.Source(1).Compute(5).String="Part Number: "

// InstanceTable = Source(1)
// ID;DisplayName;PartNumber;Location;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)
// Collect

PowerSupply.Collect.Type="MultiInstance"

// DeviceID,OperationalStatus
PowerSupply.Collect.Source(1).Type="WBEM"
PowerSupply.Collect.Source(1).WbemQuery="SELECT Tag,OperationalStatus FROM HP_PowerSupplyModule"
PowerSupply.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="2"

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
PowerSupply.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PatrolStatus,OperationalStatus
PowerSupply.Collect.Source(1).Compute(3).Type="Convert"
PowerSupply.Collect.Source(1).Compute(3).Column=2
PowerSupply.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PatrolStatus,StatusInformation
PowerSupply.Collect.Source(1).Compute(4).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(4).Column=3
PowerSupply.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
PowerSupply.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Instance Table
// DeviceID,PatrolStatus,StatusInformation
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


// Temperatures

// Discovery

// DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Type="WBEM"
Temperature.Discovery.Source(1).WbemQuery="SELECT DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical FROM HP_NumericSensor"
Temperature.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only SensorType (2) temperature
// DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=5
Temperature.Discovery.Source(1).Compute(1).ValueList="2"

// Remove Thresholds of zero
// DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(2).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(2).Column=6
Temperature.Discovery.Source(1).Compute(2).String="MSHW_"

Temperature.Discovery.Source(1).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(3).Column=7
Temperature.Discovery.Source(1).Compute(3).String="MSHW_"

// Remove 0 value
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=6
Temperature.Discovery.Source(1).Compute(4).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(5).Type="Replace"
Temperature.Discovery.Source(1).Compute(5).Column=7
Temperature.Discovery.Source(1).Compute(5).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(5).ReplaceBy=""

// Remove MSHW_ for non 0 values
Temperature.Discovery.Source(1).Compute(6).Type="Replace"
Temperature.Discovery.Source(1).Compute(6).Column=6
Temperature.Discovery.Source(1).Compute(6).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(6).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(7).Type="Replace"
Temperature.Discovery.Source(1).Compute(7).Column=7
Temperature.Discovery.Source(1).Compute(7).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(7).ReplaceBy=""

// Remove the String "TempSensorInfo " from the Name
// DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(8).Type="Replace"
Temperature.Discovery.Source(1).Compute(8).Column=2
Temperature.Discovery.Source(1).Compute(8).Replace="TempSensorInfo "
Temperature.Discovery.Source(1).Compute(8).ReplaceBy=""


// InstanceTable = Source(1)
// DeviceID,Name,CurrentReading,OperationalStatus,SensorType,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(3)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(7)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(6)

// Collect

Temperature.Collect.Type="MultiInstance"

// DeviceID,CurrentReading,OperationalStatus,SensorType
Temperature.Collect.Source(1).Type="WBEM"
Temperature.Collect.Source(1).WbemQuery="SELECT DeviceID,CurrentReading,OperationalStatus,SensorType FROM HP_NumericSensor"
Temperature.Collect.Source(1).WbemNameSpace="root/cimv2"

// Keep only SensorType (2) temperature
// DeviceID,CurrentReading,OperationalStatus,SensorType
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=4
Temperature.Collect.Source(1).Compute(1).ValueList="2"

// DeviceID,CurrentReading,OperationalStatus,OperationalStatus,SensorType
Temperature.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(2).Column=3

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,CurrentReading,PatrolStatusArray,OperationalStatus,SensorType
Temperature.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Temperature.Collect.Source(1).Compute(3).Column=3
Temperature.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,CurrentReading,PatrolStatus,OperationalStatus,SensorType
Temperature.Collect.Source(1).Compute(4).Type="Convert"
Temperature.Collect.Source(1).Compute(4).Column=3
Temperature.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,CurrentReading,PatrolStatus,StatusInformation,SensorType
Temperature.Collect.Source(1).Compute(5).Type="ArrayTranslate"
Temperature.Collect.Source(1).Compute(5).Column=4
Temperature.Collect.Source(1).Compute(5).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Temperature.Collect.Source(1).Compute(5).ResultSeparator=" - "

// Instance Table
// DeviceID,CurrentReading,PatrolStatus,StatusInformation,SensorType
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)



// Voltages

// Discovery

// Only Voltage Collections seem to exist on our test server

// InstanceID,Caption
Voltage.Discovery.Source(1).Type="WBEM"
Voltage.Discovery.Source(1).WbemQuery="SELECT InstanceID,Caption FROM HP_SystemVoltageCollection"
Voltage.Discovery.Source(1).WbemNameSpace="root/cimv2"


// InstanceTable = Source(1)
// ID;MaxClockSpeed;Description;CurrentClockSpeed
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)

// Collect

Voltage.Collect.Type="MultiInstance"

// DeviceID,OperationalStatus
Voltage.Collect.Source(1).Type="WBEM"
Voltage.Collect.Source(1).WbemQuery="SELECT InstanceID,GroupOperationalStatus FROM HP_SystemVoltageCollection"
Voltage.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Voltage.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Voltage.Collect.Source(1).Compute(2).Column=2
Voltage.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PatrolStatus,OperationalStatus
Voltage.Collect.Source(1).Compute(3).Type="Convert"
Voltage.Collect.Source(1).Compute(3).Column=2
Voltage.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PatrolStatus,StatusInformation
Voltage.Collect.Source(1).Compute(4).Type="ArrayTranslate"
Voltage.Collect.Source(1).Compute(4).Column=3
Voltage.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Voltage.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Instance Table
// DeviceID,PatrolStatus,StatusInformation
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)


// Fans
// Discovery

// OUR TEST SYSTEM Does NOT have Fans Sensors, so this is just guess work for now....

// ID;Location;Display;
Fan.Discovery.Source(1).Type="WBEM"
Fan.Discovery.Source(1).WbemQuery="SELECT DeviceID,Description,Caption FROM HP_Fan"
Fan.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Add the Device ID to the Display ID
// ID;Location;Display;
Fan.Discovery.Source(1).Compute(1).Type="RightConcat"
Fan.Discovery.Source(1).Compute(1).Column=3
Fan.Discovery.Source(1).Compute(1).String=" "

// ID;Location;Display;
Fan.Discovery.Source(1).Compute(2).Type="RightConcat"
Fan.Discovery.Source(1).Compute(2).Column=3
Fan.Discovery.Source(1).Compute(2).String=Column(1)

Fan.Discovery.Source(1).Compute(3).Type="Replace"
Fan.Discovery.Source(1).Compute(3).Column=2
Fan.Discovery.Source(1).Compute(3).Replace="This is a cooling device with following details: "
Fan.Discovery.Source(1).Compute(3).ReplaceBy=""

Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=2
Fan.Discovery.Source(1).Compute(4).Replace=":"
Fan.Discovery.Source(1).Compute(4).ReplaceBy=" "

Fan.Discovery.Source(1).Compute(5).Type="Replace"
Fan.Discovery.Source(1).Compute(5).Column=2
Fan.Discovery.Source(1).Compute(5).Replace="-"
Fan.Discovery.Source(1).Compute(5).ReplaceBy=""

Fan.Discovery.Source(1).Compute(6).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(6).Column=2
Fan.Discovery.Source(1).Compute(6).String="Location: "

// InstanceTable = Source(1)
// ID;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)


// Collect

Fan.Collect.Type="MultiInstance"

// DeviceID,OperationalStatus
Fan.Collect.Source(1).Type="WBEM"
Fan.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM HP_Fan"
Fan.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID,PATROLStatusArray,OperationalStatus
Fan.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID,PatrolStatus,OperationalStatus
Fan.Collect.Source(1).Compute(3).Type="Convert"
Fan.Collect.Source(1).Compute(3).Column=2
Fan.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID,PatrolStatus,StatusInformation
Fan.Collect.Source(1).Compute(4).Type="ArrayTranslate"
Fan.Collect.Source(1).Compute(4).Column=3
Fan.Collect.Source(1).Compute(4).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Fan.Collect.Source(1).Compute(4).ResultSeparator=" - "

// Instance Table
// DeviceID,PatrolStatus,StatusInformation
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


// Disk Controller
// Note:  This is very similar to SMI-S Disks, but has been simplified and designed to work with HP's interpretation of SMI-S

// Source(1) =  CIM_PortController
// DeviceID,OperationalStatus,ProductName,HWPath
DiskController.Discovery.Source(1).Type="Wbem"
DiskController.Discovery.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus,ProductName,HWPath FROM CIM_PortController"
DiskController.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Get a List of Physical Disks (We will only keep controllers with associated Disks)
// LegacyHardwarePath
DiskController.Discovery.Source(2).Type="Wbem"
DiskController.Discovery.Source(2).WbemQuery="SELECT LegacyHardwarePath FROM HP_DiskDrive"
DiskController.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Remove Everything after the first . to get the controller ID
// ControllerHWPath
DiskController.Discovery.Source(2).Compute(1).Type="Extract"
DiskController.Discovery.Source(2).Compute(1).Column=1
DiskController.Discovery.Source(2).Compute(1).Subcolumn=1
DiskController.Discovery.Source(2).Compute(1).Subseparators="."

// Source 3 = Table Joint of 1 and 2
// DeviceID,OperationalStatus,ProductName,HWPath,ControllerHWPath
DiskController.Discovery.Source(3).Type="TableJoint"
DiskController.Discovery.Source(3).LeftTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(3).LeftKeyColumn=4
DiskController.Discovery.Source(3).RightKeyColumn=1

// The Instance table
// DeviceID,OperationalStatus,ProductName,HWPath,ControllerHWPath
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(4)
DiskController.Discovery.Instance.Model=InstanceTable.Column(3)
DiskController.Discovery.Instance.ParameterActivation.ControllerStatus=InstanceTable.Column(2)


//
// Collect

// The DiskController collect is a "MultiInstance" collect
DiskController.Collect.Type="MultiInstance"

// Source(1) =  VMWare_HHRCController
// OperationalStatus,DeviceID
// The info we wish to use in creating the Controller
DiskController.Collect.Source(1).Type="Wbem"
DiskController.Collect.Source(1).WbemQuery="SELECT OperationalStatus,DeviceID FROM CIM_PortController"
DiskController.Collect.Source(1).WbemNameSpace="root/cimv2"

// OperationalStatus,OperationalStatus,DeviceID
DiskController.Collect.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Collect.Source(1).Compute(1).Column=1

// PatrolStatusArray,OperationalStatus,DeviceID
DiskController.Collect.Source(1).Compute(2).Type="ArrayTranslate"
DiskController.Collect.Source(1).Compute(2).Column=1
DiskController.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// PatrolStatusArray,StatusInformation,DeviceID
DiskController.Collect.Source(1).Compute(3).Type="ArrayTranslate"
DiskController.Collect.Source(1).Compute(3).Column=2
DiskController.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"

// PatrolStatus,OperationalStatus,DeviceID
DiskController.Collect.Source(1).Compute(4).Type="Convert"
DiskController.Collect.Source(1).Compute(4).Column=1
DiskController.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
DiskController.Collect.ValueTable=%DiskController.Collect.Source(1)%
DiskController.Collect.DeviceID=ValueTable.Column(3)
DiskController.Collect.ControllerStatus=ValueTable.Column(1)
DiskController.Collect.StatusInformation=ValueTable.Column(2)

// PhysicalDisk

// Source(1) =  HP_DiskDrive
// DeviceID,Capacity,ProductID,SerialNumber,VendorID,LegacyHardwarePath
// The info we wish to use in creating the Controller
PhysicalDisk.Discovery.Source(1).Type="Wbem"
PhysicalDisk.Discovery.Source(1).WbemQuery="SELECT DeviceID,Capacity,ProductID,SerialNumber,VendorID,LegacyHardwarePath FROM HP_DiskDrive"
PhysicalDisk.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Convert GigaBytes to Bytes
// DeviceID,Capacity,ProductID,SerialNumber,VendorID,LegacyHardwarePath
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=2
PhysicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1073741824"

// Remove Everything after the first . to get the controller ID
// DeviceID,Capacity,ProductID,SerialNumber,VendorID,LegacyHardwarePath
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Extract"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=6
PhysicalDisk.Discovery.Source(1).Compute(2).Subcolumn=1
PhysicalDisk.Discovery.Source(1).Compute(2).Subseparators="."

// The Instance table
// DeviceID,Capacity,ProductID,SerialNumber,VendorID,ControllerPath
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(6)

//
// Collect

// The DiskController collect is a "MultiInstance" collect
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) =  HP_DiskDrive
// DeviceID,OperationalStatus
PhysicalDisk.Collect.Source(1).Type="Wbem"
PhysicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM HP_DiskDrive"
PhysicalDisk.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// DeviceID,PatrolStatusArray,OperationalStatus
PhysicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// DeviceID,PatrolStatusArray,StatusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"

// DeviceID,PatrolStatus,OperationalStatus
PhysicalDisk.Collect.Source(1).Compute(4).Type="Convert"
PhysicalDisk.Collect.Source(1).Compute(4).Column=2
PhysicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DeviceID,PatrolStatus,StatusInformation
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


// LogicalDisk

// Source(1) =  HPUX_PhysicalVolume
// DeviceID
// The info we wish to use in creating the Controller
LogicalDisk.Discovery.Source(1).Type="Wbem"
LogicalDisk.Discovery.Source(1).WbemQuery="SELECT DeviceID FROM HPUX_PhysicalVolume"
LogicalDisk.Discovery.Source(1).WbemNameSpace="root/cimv2"

// The Instance table
// DeviceID,Capacity,ProductID,SerialNumber,VendorID,ControllerPath
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)

//
// Collect

// The DiskController collect is a "MultiInstance" collect
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) =  HPUX_PhysicalVolume
// DeviceID,OperationalStatus
LogicalDisk.Collect.Source(1).Type="Wbem"
LogicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,OperationalStatus FROM HPUX_PhysicalVolume"
LogicalDisk.Collect.Source(1).WbemNameSpace="root/cimv2"

// DeviceID,OperationalStatus,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// DeviceID,PatrolStatusArray,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// DeviceID,PatrolStatusArray,StatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="ArrayTranslate"
LogicalDisk.Collect.Source(1).Compute(3).Column=3
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"

// DeviceID,PatrolStatus,OperationalStatus
LogicalDisk.Collect.Source(1).Compute(4).Type="Convert"
LogicalDisk.Collect.Source(1).Compute(4).Column=2
LogicalDisk.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// DeviceID,PatrolStatus,StatusInformation
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)



// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
DMTFOperationStatusTranslationTable(6)="ALARM"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="ALARM"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="OK"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"



// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
DMTFOperationStatusInformationTranslationTable(6)="Error"
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)=""
