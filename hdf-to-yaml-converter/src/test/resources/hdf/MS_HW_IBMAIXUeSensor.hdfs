//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//               MS_HW_IBMAIXUeSensor.hdf
//
//      Supports: IBM AIX machines with the uesensor program
//		Monitors: temperatures, voltages, fans and power supplies (environment)
//      Connects to: uesensor
//
//

//
// HEADER
//

hdf.DisplayName="IBM AIX - Environment (uesensor)"
hdf.TypicalPlatform="IBM POWER"
hdf.ReliesOn="IBM AIX system commands (uesensor)"
hdf.Comments="Provides hardware environment information (temperature sensors, voltage sensors, fans, power supplies) on IBM AIX systems."
hdf.Version="1.1"
hdf.RemoteSupport="true"
hdf.AppliesToOS="RS6000"

//
// DETECTION
//

// OS should be RS6000 (for AIX, whatever version)
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="RS6000"

// The uesensor utility have to be present
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="/bin/ls /usr/lpp/diagnostics/bin/uesensor"
Detection.Criteria(2).ExpectedResult="^/usr/lpp/diagnostics/bin/uesensor$"

// And uesensor must be returning something interesting
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Detection.Criteria(3).ExpectedResult="^3 \|^9001 \|^9002 \|^9004 "


//
// No COMPUTER enclosure (should be created by the IBMAIX HDF)
//

//
// TEMPERATURES
//

//
// Discovery

// Source(1) = uesensor -a|grep "^3 " (keep only temperatures)
Temperature.Discovery.Source(1).Type="OsCommand"
Temperature.Discovery.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Temperature.Discovery.Source(1).KeepOnlyRegExp="^3 "
Temperature.Discovery.Source(1).Separators=" "
Temperature.Discovery.Source(1).SelectColumns="2,5"

// Instance Table = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold="55"
Temperature.Discovery.Instance.AlarmThreshold="65"

//
// Collect

// Collect type = multi-instance (one pass for all temperatures)
Temperature.Collect.Type="MultiInstance"

// Source(1) = usensor -a, again
Temperature.Collect.Source(1).Type="OsCommand"
Temperature.Collect.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Temperature.Collect.Source(1).KeepOnlyRegExp="^3 "
Temperature.Collect.Source(1).Separators=" "
Temperature.Collect.Source(1).SelectColumns="2,4"

// ValueTable = Source(1) (easy enough)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)





//
// FANS
//

//
// Discovery

// Source(1) = uesensor -a|grep "^9001 " (keep only fans)
Fan.Discovery.Source(1).Type="OsCommand"
Fan.Discovery.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Fan.Discovery.Source(1).KeepOnlyRegExp="^9001 "
Fan.Discovery.Source(1).Separators=" "
Fan.Discovery.Source(1).SelectColumns="2,5"

// Instance Table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)
Fan.Discovery.Instance.WarningThreshold="1000"
Fan.Discovery.Instance.AlarmThreshold="100"

//
// Collect

// Collect type = multi-instance (one pass for all fans)
Fan.Collect.Type="MultiInstance"

// Source(1) = usensor -a, again
Fan.Collect.Source(1).Type="OsCommand"
Fan.Collect.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Fan.Collect.Source(1).KeepOnlyRegExp="^9001 "
Fan.Collect.Source(1).Separators=" "
Fan.Collect.Source(1).SelectColumns="2,4"

// ValueTable = Source(1) (easy enough)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(2)


//
// VOLTAGES
//

//
// Discovery

// Source(1) = uesensor -a|grep "^9002 " (keep only voltages)
Voltage.Discovery.Source(1).Type="OsCommand"
Voltage.Discovery.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Voltage.Discovery.Source(1).KeepOnlyRegExp="^9002 "
Voltage.Discovery.Source(1).Separators=" "
Voltage.Discovery.Source(1).SelectColumns="2,5"

// Instance Table = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(2)

//
// Collect

// Collect type = multi-instance (one pass for all voltages)
Voltage.Collect.Type="MultiInstance"

// Source(1) = usensor -a, again
// DeviceID;StatusNumber;Voltage
Voltage.Collect.Source(1).Type="OsCommand"
Voltage.Collect.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
Voltage.Collect.Source(1).KeepOnlyRegExp="^9002 "
Voltage.Collect.Source(1).Separators=" "
Voltage.Collect.Source(1).SelectColumns="2,3,4"

// Duplicate the status column
// DeviceID;StatusNumber;StatusNumber;Voltage
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Translate the first StatusNumber column into a PATROL Status
// DeviceID;PATROLStatus;StatusNumber;Voltage
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="2"
Voltage.Collect.Source(1).Compute(2).TranslationTable="VoltageStatusTranslationTable"

// Translate the second StatusNumber column into a more readable string
// DeviceID;PATROLStatus;StatusInformation;Voltage
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="VoltageStatusInformationTranslationTable"

// ValueTable = Source(1) (easy enough)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)
Voltage.Collect.Voltage=ValueTable.Column(4)

// The VoltageStatusTranslationTable
VoltageStatusTranslationTable(11)="OK"
VoltageStatusTranslationTable(Default)="ALARM"

// The VoltageStatusInformationTranslationTable
VoltageStatusInformationTranslationTable(11)="Normal"
VoltageStatusInformationTranslationTable(Default)="Failed"


//
// POWER SUPPLIES
//

//
// Discovery

// Source(1) = uesensor -a|grep "^9004 " (keep only power supplies)
PowerSupply.Discovery.Source(1).Type="OsCommand"
PowerSupply.Discovery.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
PowerSupply.Discovery.Source(1).KeepOnlyRegExp="^9004 "
PowerSupply.Discovery.Source(1).Separators=" "
PowerSupply.Discovery.Source(1).SelectColumns="2,5"

// Instance Table = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(2)

//
// Collect

// Collect type = multi-instance (one pass for all power supplies)
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = uesensor -a, again
// DeviceID;StatusNumber
PowerSupply.Collect.Source(1).Type="OsCommand"
PowerSupply.Collect.Source(1).CommandLine="/usr/lpp/diagnostics/bin/uesensor -a"
PowerSupply.Collect.Source(1).KeepOnlyRegExp="^9004 "
PowerSupply.Collect.Source(1).Separators=" "
PowerSupply.Collect.Source(1).SelectColumns="2,3"

// Duplicate the status column
// DeviceID;StatusNumber;StatusNumber
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="2"

// Translate the first StatusNumber column into a PATROL Status
// DeviceID;PATROLStatus;StatusNumber
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="2"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// Translate the second StatusNumber column into a more readable string
// DeviceID;PATROLStatus;StatusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="3"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// ValueTable = Source(1) (easy enough)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(11)="OK"
PowerSupplyStatusTranslationTable(Default)="ALARM"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(11)="Normal"
PowerSupplyStatusInformationTranslationTable(Default)="Failed"
