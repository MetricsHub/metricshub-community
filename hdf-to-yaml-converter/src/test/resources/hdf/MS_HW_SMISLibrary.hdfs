////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: SMI-S compliant storage libraries
//                Connects to a SMI-S WBEM agent
//				  (namespace is supposed to be dynamically discovered)
//

// Constants
#define _COMPUTERSYSTEM_DEDICATED_REGEXP "\(^22|\)\|\(|22|\)\|\(^35|\)\|\(|35|\)"
#define _FCPORT_TYPE_VALUELIST "10,11,12"

// Includes
#include MS_HW_SMISShared.hhdf


//
// Header
//

hdf.DisplayName="SMI-S Compliant Storage Libraries"
hdf.TypicalPlatform="Any SMI-S compliant storage library"
hdf.ReliesOn="SMI-S Agent provided by the library vendor"
hdf.Version="1.1"
hdf.Comments="This connector discovers the enclosure of a storage library as well as its specialized devices: tape drives, cartridges, media changers, etc. It will also discover and monitor the FC ports of the array and the various environment sensors when available (temperatures, fans, power supplies, etc.). It relies on the WBEM technology and supports SMI-S compliant tape libraries only."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"

//
// Detection
//

// Verify that there is a CIM_ComputerSystem instance where Dedicated == 3 (Storage)
// Use this request to find the namespace automatically
Detection.Criteria(1).Type="WBEM"
Detection.Criteria(1).WbemNameSpace=Automatic
Detection.Criteria(1).WbemQuery="SELECT Name,Dedicated FROM CIM_ComputerSystem"
Detection.Criteria(1).ExpectedResult="[;|]\(22\|35\)|[0-9|]*;$"

// There also must be disk drives declared in this namespace
Detection.Criteria(2).Type="WBEM"
Detection.Criteria(2).WbemQuery="SELECT DeviceID FROM CIM_TapeDrive"
Detection.Criteria(2).WbemNameSpace=Automatic



//
// TAPE DRIVES
//

//
// Discovery

// Source(1) = CIM_TapeDrive
// TapeID;MountCount;NeedsCleaning;
TapeDrive.Discovery.Source(1).Type="Wbem"
TapeDrive.Discovery.Source(1).WbemQuery="SELECT __PATH,MountCount,NeedsCleaning FROM CIM_TapeDrive"
TapeDrive.Discovery.Source(1).WbemNameSpace=Automatic

// Source(2) = Table joint of Source(1) and Enclosure.Discovery.Source(18)
// TapeID;MountCount;NeedsCleaning;LogicalDeviceID;ComputerSystemID;Manufacturer;Model;SerialNumber;
TapeDrive.Discovery.Source(2).Type="TableJoint"
TapeDrive.Discovery.Source(2).LeftTable=%TapeDrive.Discovery.Source(1)%
TapeDrive.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(18)%
TapeDrive.Discovery.Source(2).LeftKeyColumn=1
TapeDrive.Discovery.Source(2).RightKeyColumn=1
TapeDrive.Discovery.Source(2).KeyType="Wbem"
TapeDrive.Discovery.Source(2).DefaultRightLine=";;;;;"

// InstanceTable = Source(2)
TapeDrive.Discovery.InstanceTable=%TapeDrive.Discovery.Source(2)%
TapeDrive.Discovery.Instance.DeviceID=InstanceTable.Column(1)
TapeDrive.Discovery.Instance.Vendor=InstanceTable.Column(6)
TapeDrive.Discovery.Instance.Model=InstanceTable.Column(7)
TapeDrive.Discovery.Instance.SerialNumber=InstanceTable.Column(8)
TapeDrive.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(5)
TapeDrive.Discovery.Instance.ParameterActivation.MountCount=InstanceTable.Column(2)
TapeDrive.Discovery.Instance.ParameterActivation.NeedsCleaning=InstanceTable.Column(3)


//
// Collect

// Collect type is multi-instance
TapeDrive.Collect.Type="MultiInstance"

// Source(1) = CIM_TapeDrive
// TapeID;OperationalStatus;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Type="Wbem"
TapeDrive.Collect.Source(1).WbemQuery="SELECT __PATH,OperationalStatus,MountCount,NeedsCleaning FROM CIM_TapeDrive"
TapeDrive.Collect.Source(1).WbemNameSpace=Automatic

// Duplicate the "OperationalStatusArray" column
// DeviceID;OperationalStatusArray;OperationalStatusArray;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Compute(1).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID;PATROLStatusArray;Status;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Compute(2).Type="ArrayTranslate"
TapeDrive.Collect.Source(1).Compute(2).Column=2
TapeDrive.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID;PATROLStatusArray;StatusInformation;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Compute(3).Type="ArrayTranslate"
TapeDrive.Collect.Source(1).Compute(3).Column=3
TapeDrive.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
TapeDrive.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID;PATROLStatus;StatusInformation;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Compute(4).Type="Convert"
TapeDrive.Collect.Source(1).Compute(4).Column=2
TapeDrive.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// Translate the NeedsCleaning column into 0 or 1
// DeviceID;PATROLStatus;StatusInformation;MountCount;NeedsCleaning;
TapeDrive.Collect.Source(1).Compute(5).Type="Translate"
TapeDrive.Collect.Source(1).Compute(5).Column=5
TapeDrive.Collect.Source(1).Compute(5).TranslationTable="TapeDriveNeedsCleaningTranslationTable"

// The TapeDriveNeedsCleaningTranslationTable
TapeDriveNeedsCleaningTranslationTable("true")=1
TapeDriveNeedsCleaningTranslationTable("false")=0
TapeDriveNeedsCleaningTranslationTable(Default)=0

// Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
TapeDrive.Collect.ValueTable=%TapeDrive.Collect.Source(1)%
TapeDrive.Collect.DeviceID=ValueTable.Column(1)
TapeDrive.Collect.Status=ValueTable.Column(2)
TapeDrive.Collect.StatusInformation=ValueTable.Column(3)
TapeDrive.Collect.MountCount=ValueTable.Column(4)
TapeDrive.Collect.NeedsCleaning=ValueTable.Column(5)



//
// ROBOTICS
//

//
// Discovery
// Source(1) = CIM_MediaTransferDevice
// ChangerDeviceID;
Robotic.Discovery.Source(1).Type="Wbem"
Robotic.Discovery.Source(1).WbemQuery="SELECT __PATH FROM CIM_MediaTransferDevice"
Robotic.Discovery.Source(1).WbemNameSpace=Automatic

// Source(2) = Table joint of Source(5) and Enclosure.Discovery.Source(18)
// ChangerDeviceID;LogicalDeviceID;ComputerSystemID;Manufacturer;Model;SerialNumber;
Robotic.Discovery.Source(2).Type="TableJoint"
Robotic.Discovery.Source(2).LeftTable=%Robotic.Discovery.Source(1)%
Robotic.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(18)%
Robotic.Discovery.Source(2).LeftKeyColumn=1
Robotic.Discovery.Source(2).RightKeyColumn=1
Robotic.Discovery.Source(2).KeyType="Wbem"
Robotic.Discovery.Source(2).DefaultRightLine=";;;;;"

// InstanceTable = Source(2)
Robotic.Discovery.InstanceTable=%Robotic.Discovery.Source(2)%
Robotic.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Robotic.Discovery.Instance.Vendor=InstanceTable.Column(4)
Robotic.Discovery.Instance.Model=InstanceTable.Column(5)
Robotic.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Robotic.Discovery.Instance.RoboticType="Media Transfer"
Robotic.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)


//
// Collect

// Collect type is multi-instance
Robotic.Collect.Type="MultiInstance"

// Source(1) = CIM_MediaTransferDevice
// MediaChangerID;OperationalStatus;
Robotic.Collect.Source(1).Type="Wbem"
Robotic.Collect.Source(1).WbemQuery="SELECT __PATH,OperationalStatus FROM CIM_MediaTransferDevice"
Robotic.Collect.Source(1).WbemNameSpace=Automatic

// Duplicate the "OperationalStatusArray" column
// DeviceID;OperationalStatusArray;OperationalStatusArray;
Robotic.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Robotic.Collect.Source(1).Compute(1).Column=2

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// DeviceID;PATROLStatusArray;Status
Robotic.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Robotic.Collect.Source(1).Compute(2).Column=2
Robotic.Collect.Source(1).Compute(2).TranslationTable="DMTFOperationStatusTranslationTable"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// DeviceID;PATROLStatusArray;StatusInformation
Robotic.Collect.Source(1).Compute(3).Type="ArrayTranslate"
Robotic.Collect.Source(1).Compute(3).Column=3
Robotic.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
Robotic.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// DeviceID;PATROLStatus;StatusInformation
Robotic.Collect.Source(1).Compute(4).Type="Convert"
Robotic.Collect.Source(1).Compute(4).Column=2
Robotic.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"

// Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
Robotic.Collect.ValueTable=%Robotic.Collect.Source(1)%
Robotic.Collect.DeviceID=ValueTable.Column(1)
Robotic.Collect.Status=ValueTable.Column(2)
Robotic.Collect.StatusInformation=ValueTable.Column(3)



