////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: SMI-S compliant HBAs
//                Connects to a SMI-S WBEM agent
//				  (namespace is supposed to be dynamically discovered)
//


//
// Header
//

hdf.DisplayName="SMI-S Compliant HBAs"
hdf.TypicalPlatform="Any system with Emulex,Any system with QLogic"
hdf.ReliesOn="SMI-S Agent provided by the HBA vendor"
hdf.Version="1.0"
hdf.Comments="This connector discovers the HBAs of a server. It relies on the WBEM technology and supports SMI-S compliant HBAs only."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux,RS6000,HP,OSF1,VMS,Solaris,OOB"

//
// Detection
//

// There must be FC Ports declared in the automatically discovered namespace
Detection.Criteria(1).Type="WBEM"
Detection.Criteria(1).WbemQuery="SELECT PortType FROM CIM_FCPort"
Detection.Criteria(1).WbemNameSpace=Automatic
Detection.Criteria(1).ExpectedResult="\(0\)\|\(1\)\|\(10\)\|\(11\)\|\(12\);"

// Ensure that the creation class contains "HBA"
// This should match NetworkCard.Discovery.Source(1).Compute(1)
Detection.Criteria(2).Type="WBEM"
Detection.Criteria(2).WbemQuery="SELECT CreationClassName FROM CIM_FCPort"
Detection.Criteria(2).WbemNameSpace=Automatic
Detection.Criteria(2).ExpectedResult="\([Hh][Bb][Aa]\)\|\([Qq][Ll]ogic\)\|\(IBM_FCPort\)\|\(HPUX_FCPort\)\|\(ELX\)"



//
// FC Ports ("Network cards")
//

// Source(1) = CIM_FCPort
// PortID;PortTypeCode;Speed;PermanentAddress;EnabledState;CreationClassName;DeviceID;SystemCreationClassName;SystemName;
NetworkCard.Discovery.Source(1).Type="WBEM"
NetworkCard.Discovery.Source(1).WbemQuery="SELECT __PATH,PortType,Speed,PermanentAddress,EnabledState,CreationClassName,DeviceID,SystemCreationClassName,SystemName FROM CIM_FCPort"
NetworkCard.Discovery.Source(1).WbemNameSpace=Automatic

// Let's empty the path and rebuild it.  (Many providers have an issue with the __PATH for FCPorts)
// PortID;PortTypeCode;Speed;PermanentAddress;EnabledState;CreationClassName;DeviceID;SystemCreationClassName;SystemName;
NetworkCard.Discovery.Source(1).Compute(1).Type="Replace"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).Replace=Column(1)
NetworkCard.Discovery.Source(1).Compute(1).ReplaceBy=""

//  Rebuild the PATH
//    1       2          3       4                5             6                7       8                        9
// PortID;PortTypeCode;Speed;PermanentAddress;EnabledState;CreationClassName;DeviceID;SystemCreationClassName;SystemName;
NetworkCard.Discovery.Source(1).Compute(2).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(2).Column=1
NetworkCard.Discovery.Source(1).Compute(2).String=Column(6)

NetworkCard.Discovery.Source(1).Compute(3).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(3).Column=1
NetworkCard.Discovery.Source(1).Compute(3).String=".CreationClassName="""

NetworkCard.Discovery.Source(1).Compute(4).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(4).Column=1
NetworkCard.Discovery.Source(1).Compute(4).String=Column(6)

NetworkCard.Discovery.Source(1).Compute(5).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(5).Column=1
NetworkCard.Discovery.Source(1).Compute(5).String=""",DeviceID="""

NetworkCard.Discovery.Source(1).Compute(6).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(6).Column=1
NetworkCard.Discovery.Source(1).Compute(6).String=Column(7)

NetworkCard.Discovery.Source(1).Compute(7).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(7).Column=1
NetworkCard.Discovery.Source(1).Compute(7).String=""",SystemCreationClassName="""

NetworkCard.Discovery.Source(1).Compute(8).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(8).Column=1
NetworkCard.Discovery.Source(1).Compute(8).String=Column(8)

NetworkCard.Discovery.Source(1).Compute(9).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(9).Column=1
NetworkCard.Discovery.Source(1).Compute(9).String=""",SystemName="""

NetworkCard.Discovery.Source(1).Compute(10).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(10).Column=1
NetworkCard.Discovery.Source(1).Compute(10).String=Column(9)

NetworkCard.Discovery.Source(1).Compute(11).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(11).Column=1
NetworkCard.Discovery.Source(1).Compute(11).String=""""

NetworkCard.Discovery.Source(1).Compute(12).Type="KeepColumns"
NetworkCard.Discovery.Source(1).Compute(12).ColumnNumbers="1,2,3,4,5,6"

// Keep only HBA port
// This should match Detection.Criteria(2)
// PortID;PortTypeCode;Speed;PermanentAddress;EnabledState;CreationClassName;
NetworkCard.Discovery.Source(1).Compute(13).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(13).Column=6
NetworkCard.Discovery.Source(1).Compute(13).RegExp="\([Hh][Bb][Aa]\)\|\([Qq][Ll]ogic\)\|\(IBM_FCPort\)\|\(HPUX_FCPort\)\|\(ELX\)"

// Keep only activated ports
// PortID;PortTypeCode;Speed;PermanentAddress;EnabledState;CreationClassName;
NetworkCard.Discovery.Source(1).Compute(14).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(14).Column=5
NetworkCard.Discovery.Source(1).Compute(14).ValueList="3"

// Translate PortType into a more readable string
// PortID;PortType;Speed;PermanentAddress;EnabledState;CreationClassName;
NetworkCard.Discovery.Source(1).Compute(15).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(15).Column=2
NetworkCard.Discovery.Source(1).Compute(15).TranslationTable="PortTypeTranslationTable"

// The PortTypeTranslationTable
PortTypeTranslationTable(10)="HBA FC Port N"
PortTypeTranslationTable(11)="HBA FC Port NL"
PortTypeTranslationTable(12)="HBA FC Port F/NL"
PortTypeTranslationTable(Default)="HBA FC Port"

// Convert Speed from bps to Mbps (divide by 1000000)
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;
NetworkCard.Discovery.Source(1).Compute(16).Type="Divide"
NetworkCard.Discovery.Source(1).Compute(16).Column=3
NetworkCard.Discovery.Source(1).Compute(16).DivideBy=1000000

// Source(2) = CIM_PhysicalPackage
// PackageID;Manufacturer;Model;SerialNumber;
NetworkCard.Discovery.Source(2).Type="WBEM"
NetworkCard.Discovery.Source(2).WbemQuery="SELECT __PATH,Manufacturer,Model,SerialNumber FROM CIM_PhysicalPackage"
NetworkCard.Discovery.Source(2).WbemNameSpace=Automatic

// Keep only the first word of the Manufacturer name (to avoid stuff like "Corporations, Inc. and blah blah blah)
// PackageID;Manufacturer;Model;SerialNumber;
NetworkCard.Discovery.Source(2).Compute(1).Type="Extract"
NetworkCard.Discovery.Source(2).Compute(1).Column=2
NetworkCard.Discovery.Source(2).Compute(1).Subcolumn=1
NetworkCard.Discovery.Source(2).Compute(1).Subseparators=" "

// Source(3) = CIM_Realizes
// PackageID;PortControllerID or Port ID;
NetworkCard.Discovery.Source(3).Type="WBEM"
NetworkCard.Discovery.Source(3).WbemQuery="SELECT Antecedent,Dependent FROM CIM_Realizes"
NetworkCard.Discovery.Source(3).WbemNameSpace=Automatic

// Source(4) = CIM_ControlledBy
// PortControllerID;PortID;
NetworkCard.Discovery.Source(4).Type="WBEM"
NetworkCard.Discovery.Source(4).WbemQuery="SELECT Antecedent,Dependent FROM CIM_ControlledBy"
NetworkCard.Discovery.Source(4).WbemNameSpace=Automatic

// Source(5) = Table joint of Source(2) and Source(3)
// PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
NetworkCard.Discovery.Source(5).Type="TableJoint"
NetworkCard.Discovery.Source(5).LeftTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(5).RightTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Source(5).LeftKeyColumn=1
NetworkCard.Discovery.Source(5).RightKeyColumn=1
NetworkCard.Discovery.Source(5).KeyType="Wbem"

// Source(6) = Table joint of Source(1) and Source(4)
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;
NetworkCard.Discovery.Source(6).Type="TableJoint"
NetworkCard.Discovery.Source(6).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(6).RightTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Source(6).LeftKeyColumn=1
NetworkCard.Discovery.Source(6).RightKeyColumn=2
NetworkCard.Discovery.Source(6).KeyType="Wbem"
NetworkCard.Discovery.Source(6).DefaultRightLine=";;"

// The Physical package can either match the Port ID or the Port Controller ID

// Will take those that match Port Controller ID in Source 7
// Source(7) = Table joint of Source(6) and Source(5) By Port Controller
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
NetworkCard.Discovery.Source(7).Type="TableJoint"
NetworkCard.Discovery.Source(7).LeftTable=%NetworkCard.Discovery.Source(6)%
NetworkCard.Discovery.Source(7).RightTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Source(7).LeftKeyColumn=7
NetworkCard.Discovery.Source(7).RightKeyColumn=6
NetworkCard.Discovery.Source(7).KeyType="Wbem"

// Will take those that match Port ID or do not match anything in Source 8
// Source(8) = Table joint of Source(6) and Source(5) by Port ID
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
NetworkCard.Discovery.Source(8).Type="TableJoint"
NetworkCard.Discovery.Source(8).LeftTable=%NetworkCard.Discovery.Source(6)%
NetworkCard.Discovery.Source(8).RightTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Source(8).LeftKeyColumn=8
NetworkCard.Discovery.Source(8).RightKeyColumn=6
NetworkCard.Discovery.Source(8).KeyType="Wbem"
NetworkCard.Discovery.Source(8).DefaultRightLine=";;;;;;"


// Will match up any Source (8) lines with Source (5) by Port Controller, any that match are the same that matched in Source 7 and thus should be excluded.
// Source(9) = Table joint of Source(8) and Source(5) by Port Controller
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
NetworkCard.Discovery.Source(9).Type="TableJoint"
NetworkCard.Discovery.Source(9).LeftTable=%NetworkCard.Discovery.Source(8)%
NetworkCard.Discovery.Source(9).RightTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Source(9).LeftKeyColumn=7
NetworkCard.Discovery.Source(9).RightKeyColumn=6
NetworkCard.Discovery.Source(9).KeyType="Wbem"
NetworkCard.Discovery.Source(9).DefaultRightLine=";;;;;;"

// Exclude lines that matched.  Any lines that do match are taken care of in Source 7
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
//    1  ;  2     ;   3     ;    4           ;     5      ;      6          ;      7         ;  8   ;   9     ;   10       ;  11 ;  12        ;  13     ;                14         ;   15    ;  16        ; 17  ; 18         ;  19     ;   20                      ;
NetworkCard.Discovery.Source(9).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(9).Compute(1).Column=20
NetworkCard.Discovery.Source(9).Compute(1).RegExp="."

// Remove the Columns Added to perform KeepOnly
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
//    1  ;  2     ;   3     ;    4           ;     5      ;      6          ;      7         ;  8   ;   9     ;   10       ;  11 ;  12        ;  13     ;                14         ;
NetworkCard.Discovery.Source(9).Compute(2).Type="KeepColumns"
NetworkCard.Discovery.Source(9).Compute(2).ColumnNumbers="1,2,3,4,5,6,7,8,9,10,11,12,13,14"

// Source(10) = Table union of Source(9) and Source(7)
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID or Port ID;
//    1  ;  2     ;   3     ;    4           ;     5      ;      6          ;      7         ;  8   ;   9     ;   10       ;  11 ;  12        ;  13     ;                14         ;
NetworkCard.Discovery.Source(10).Type="TableUnion"
NetworkCard.Discovery.Source(10).Table1=%NetworkCard.Discovery.Source(9)%
NetworkCard.Discovery.Source(10).Table2=%NetworkCard.Discovery.Source(7)%

// InstanceTable = Source(10)
// PortID;PortType;SpeedMbps;PermanentAddress;EnabledState;CreationClassName;PortControllerID;PortID;PackageID;Manufacturer;Model;SerialNumber;PackageID;PortControllerID;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(10)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.Vendor=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.Model=InstanceTable.Column(11)
NetworkCard.Discovery.Instance.BandWidth=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(2)


//
// Collect

// The NetworkCard collect is a "MultiInstance" collect
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = CIM_FCPort
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;CreationClassName;DeviceID;SystemCreationClassName;SystemName;ElementID;
NetworkCard.Collect.Source(1).Type="WBEM"
NetworkCard.Collect.Source(1).WbemQuery="SELECT __PATH,PortType,EnabledState,Speed,OperationalStatus,CreationClassName,DeviceID,SystemCreationClassName,SystemName,DeviceID FROM CIM_FCPort"
NetworkCard.Collect.Source(1).WbemNameSpace=Automatic

// Let's empty the path and rebuild it.  (Many providers have an issue with the __PATH for FCPorts)
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;CreationClassName;DeviceID;SystemCreationClassName;SystemName;ElementID;
NetworkCard.Collect.Source(1).Compute(1).Type="Replace"
NetworkCard.Collect.Source(1).Compute(1).Column=1
NetworkCard.Collect.Source(1).Compute(1).Replace=Column(1)
NetworkCard.Collect.Source(1).Compute(1).ReplaceBy=""

//  Rebuild the PATH
//    1       2          3           4                5             6                7       8                        9          10
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;CreationClassName;DeviceID;SystemCreationClassName;SystemName;ElementID;
NetworkCard.Collect.Source(1).Compute(2).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(2).Column=1
NetworkCard.Collect.Source(1).Compute(2).String=Column(6)

NetworkCard.Collect.Source(1).Compute(3).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(3).Column=1
NetworkCard.Collect.Source(1).Compute(3).String=".CreationClassName="""

NetworkCard.Collect.Source(1).Compute(4).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(4).Column=1
NetworkCard.Collect.Source(1).Compute(4).String=Column(6)

NetworkCard.Collect.Source(1).Compute(5).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(5).Column=1
NetworkCard.Collect.Source(1).Compute(5).String=""",DeviceID="""

NetworkCard.Collect.Source(1).Compute(6).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(6).Column=1
NetworkCard.Collect.Source(1).Compute(6).String=Column(7)

NetworkCard.Collect.Source(1).Compute(7).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(7).Column=1
NetworkCard.Collect.Source(1).Compute(7).String=""",SystemCreationClassName="""

NetworkCard.Collect.Source(1).Compute(8).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(8).Column=1
NetworkCard.Collect.Source(1).Compute(8).String=Column(8)

NetworkCard.Collect.Source(1).Compute(9).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(9).Column=1
NetworkCard.Collect.Source(1).Compute(9).String=""",SystemName="""

NetworkCard.Collect.Source(1).Compute(10).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(10).Column=1
NetworkCard.Collect.Source(1).Compute(10).String=Column(9)

NetworkCard.Collect.Source(1).Compute(11).Type="RightConcat"
NetworkCard.Collect.Source(1).Compute(11).Column=1
NetworkCard.Collect.Source(1).Compute(11).String=""""

NetworkCard.Collect.Source(1).Compute(12).Type="KeepColumns"
NetworkCard.Collect.Source(1).Compute(12).ColumnNumbers="1,2,3,4,5,10"

// Switch to Source (2) to avoid renumbering
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2)=%NetworkCard.Collect.Source(1)%

// Keep only activated ports
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Collect.Source(2).Compute(1).Column=3
NetworkCard.Collect.Source(2).Compute(1).ValueList="3"

// Duplicate the "OperationalStatusArray" column Twice
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;OperationalStatusArray;OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(2).Type="DuplicateColumn"
NetworkCard.Collect.Source(2).Compute(2).Column=5
NetworkCard.Collect.Source(2).Compute(3).Type="DuplicateColumn"
NetworkCard.Collect.Source(2).Compute(3).Column=5

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatusArray;Status;OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(4).Type="ArrayTranslate"
NetworkCard.Collect.Source(2).Compute(4).Column=5
NetworkCard.Collect.Source(2).Compute(4).TranslationTable="DMTFOperationStatusTranslationTable"

// The DMTFOperationStatusTranslationTable
DMTFOperationStatusTranslationTable(0)="OK"
DMTFOperationStatusTranslationTable(1)="OK"
DMTFOperationStatusTranslationTable(2)="OK"
DMTFOperationStatusTranslationTable(3)="WARN"
DMTFOperationStatusTranslationTable(4)="WARN"
DMTFOperationStatusTranslationTable(5)="WARN"
// DMTFOperationStatusTranslationTable(6) has been changed to OK as Qlogic HBAs will report a status of 6 if the cable is unplugged.
DMTFOperationStatusTranslationTable(6)="OK"
DMTFOperationStatusTranslationTable(7)="ALARM"
DMTFOperationStatusTranslationTable(8)="WARN"
DMTFOperationStatusTranslationTable(9)="WARN"
DMTFOperationStatusTranslationTable(10)="OK"
DMTFOperationStatusTranslationTable(11)="WARN"
DMTFOperationStatusTranslationTable(12)="ALARM"
DMTFOperationStatusTranslationTable(13)="ALARM"
DMTFOperationStatusTranslationTable(14)="ALARM"
DMTFOperationStatusTranslationTable(15)="WARN"
DMTFOperationStatusTranslationTable(16)="WARN"
DMTFOperationStatusTranslationTable(17)="OK"
DMTFOperationStatusTranslationTable(18)="OK"
DMTFOperationStatusTranslationTable(Default)="UNKNOWN"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatusArray;StatusInformation.OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(5).Type="ArrayTranslate"
NetworkCard.Collect.Source(2).Compute(5).Column=6
NetworkCard.Collect.Source(2).Compute(5).TranslationTable="DMTFOperationStatusInformationTranslationTable"
NetworkCard.Collect.Source(2).Compute(5).ResultSeparator=" - "

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(0)=""
DMTFOperationStatusInformationTranslationTable(1)=""
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
// DMTFOperationStatusTranslationTable(6) has been changed to "" as Qlogic HBAs will report a status of 6 if the cable is unplugged.
DMTFOperationStatusInformationTranslationTable(6)=""
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)="Unknown Status"

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatus;StatusInformation.OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(6).Type="Convert"
NetworkCard.Collect.Source(2).Compute(6).Column=5
NetworkCard.Collect.Source(2).Compute(6).ConversionType="Array2SimpleStatus"

// Duplicate the Speed Column
// PortID;PortTypeCode;EnabledState;Speed;Speed;PATROLStatus;StatusInformation.OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(7).Type="DuplicateColumn"
NetworkCard.Collect.Source(2).Compute(7).Column=4

// Finally, we check whether we have a 'Speed' number, meaning that the link is up
// Otherwise, if no speed, it means that the link is down
// PortID;PortTypeCode;EnabledState;LinkStatus;Speed;PATROLStatusArray;Status.OperationalStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(8).Type="Translate"
NetworkCard.Collect.Source(2).Compute(8).Column=4
NetworkCard.Collect.Source(2).Compute(8).TranslationTable="SpeedToLinkStatusTranslationTable"

// The SpeedToLinkStatusTranslationTable
SpeedToLinkStatusTranslationTable(0)="WARN"
SpeedToLinkStatusTranslationTable("")="WARN"
SpeedToLinkStatusTranslationTable(Default)="OK"

// Then we translate DMTF's OperationStatus code into OK/WARN (for the LINK Status)
// PortID;PortTypeCode;EnabledState;LinkStatus;Speed;PATROLStatusArray;Status;OperationalLinkStatusArray;ElementID;
NetworkCard.Collect.Source(2).Compute(9).Type="ArrayTranslate"
NetworkCard.Collect.Source(2).Compute(9).Column=8
NetworkCard.Collect.Source(2).Compute(9).TranslationTable="DMTFOperationToLinkStatusTranslationTable"

// The DMTFOperationToLinkStatusTranslationTable
// This is for EMULEX cards, as the link speed does not go to 0 when unplugged, but OpStatus goes to 1.
DMTFOperationToLinkStatusTranslationTable(1)="WARN"
DMTFOperationToLinkStatusTranslationTable(Default)=""

// Add the Speed State to the OperationalLinkStatus Array
// PortID;PortTypeCode;EnabledState;LinkStatus;Speed;PATROLStatusArray;Status;OperationalLinkStatusArray|LinkStatus;ElementID;
NetworkCard.Collect.Source(2).Compute(10).Type="RightConcat"
NetworkCard.Collect.Source(2).Compute(10).Column=8
NetworkCard.Collect.Source(2).Compute(10).String="|"
NetworkCard.Collect.Source(2).Compute(11).Type="RightConcat"
NetworkCard.Collect.Source(2).Compute(11).Column=8
NetworkCard.Collect.Source(2).Compute(11).String=Column(4)

// Convert bits/sec into Mbps
// PortID;PortTypeCode;EnabledState;LinkStatus;SpeedMBps;PATROLStatusArray;Status;OperationalLinkStatusArray|LinkStatus;ElementID;
NetworkCard.Collect.Source(2).Compute(12).Type="Divide"
NetworkCard.Collect.Source(2).Compute(12).Column=5
NetworkCard.Collect.Source(2).Compute(12).DivideBy=1000000

// Switch to Source (3) for debugging purposes
NetworkCard.Collect.Source(3)=%NetworkCard.Collect.Source(2)%

// Convert OperationalLinkStatus|SpeedStatus to a simple (unique) LinKStatus
// Thus if the Speed = 0 OR the OperationalLink Status indicates a link down, LinkStatus = WARN.
// LinkStatus will only = "OK" if speed > 0 and OperationalLink Status is not WARN
// PortID;PortTypeCode;EnabledState;LinkStatus;SpeedMBps;PATROLStatusArray;Status;OverallLinkStatus;ElementID;
NetworkCard.Collect.Source(3).Compute(1).Type="Convert"
NetworkCard.Collect.Source(3).Compute(1).Column=8
NetworkCard.Collect.Source(3).Compute(1).ConversionType="Array2SimpleStatus"

// Now let's get some statistics
// Source(4) = CIM_FCPortStatistics
// ElementName;BytesReceived;BytesTransmitted;PacketsReceived;PacketsTransmitted;PrimitiveSeqProtocolErrCount;CRCErrors;InvalidTransmissionWords;
NetworkCard.Collect.Source(4).Type="WBEM"
NetworkCard.Collect.Source(4).WbemQuery="SELECT ElementName,BytesReceived,BytesTransmitted,PacketsReceived,PacketsTransmitted,PrimitiveSeqProtocolErrCount,CRCErrors,InvalidTransmissionWords FROM CIM_FCPortStatistics"
NetworkCard.Collect.Source(4).WbemNameSpace=Automatic

// Add the errorcounts together
//   1                2             3                  4            5                      6                     7         8
// ElementName;BytesReceived;BytesTransmitted;PacketsReceived;PacketsTransmitted;PrimitiveSeqProtocolErrCount;CRCErrors;InvalidTransmissionWords;
NetworkCard.Collect.Source(4).Compute(1).Type="Add"
NetworkCard.Collect.Source(4).Compute(1).Column=6
NetworkCard.Collect.Source(4).Compute(1).Add=Column(7)

NetworkCard.Collect.Source(4).Compute(2).Type="Add"
NetworkCard.Collect.Source(4).Compute(2).Column=6
NetworkCard.Collect.Source(4).Compute(2).Add=Column(8)

// Remove unneeded columns
// ElementName;BytesReceived;BytesTransmitted;PacketsReceived;PacketsTransmitted;ErrorCount;
NetworkCard.Collect.Source(4).Compute(3).Type="KeepColumns"
NetworkCard.Collect.Source(4).Compute(3).ColumnNumbers="1,2,3,4,5,6"

// Because of issues with the PATH, we will Joint by ElementName
// Linking Port Status / Speed to Statistics
//   1          2            3            4        5              6           7          8              9        10           11            12               13               14                 15
// PortID;PortTypeCode;EnabledState;LinkStatus;SpeedMBps;PATROLStatusArray;Status;OverallLinkStatus;ElementID;ElementName;BytesReceived;BytesTransmitted;PacketsReceived;PacketsTransmitted;Errorcount;
NetworkCard.Collect.Source(5).Type="TableJoint"
NetworkCard.Collect.Source(5).LeftTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.Source(5).RightTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(5).LeftKeyColumn=9
NetworkCard.Collect.Source(5).RightKeyColumn=1
NetworkCard.Collect.Source(5).DefaultRightLine=";;;;;;"

// ValueTable = Source(1)
//   1          2            3            4        5              6           7          8              9        10           11            12               13               14                 15
// PortID;PortTypeCode;EnabledState;LinkStatus;SpeedMBps;PATROLStatusArray;Status;OverallLinkStatus;ElementID;ElementName;BytesReceived;BytesTransmitted;PacketsReceived;PacketsTransmitted;Errorcount;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(6)
NetworkCard.Collect.StatusInformation=ValueTable.Column(7)
NetworkCard.Collect.LinkStatus=ValueTable.Column(4)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(5)
NetworkCard.Collect.ErrorCount=ValueTable.Column(15)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(13)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(14)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(11)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(12)



