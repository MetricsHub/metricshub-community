//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_HuaweiiMana.hdf
//
//      Supports: Huawei iMana Servers
//
//

//
// HEADER
//

hdf.DisplayName="Huawei Servers - Management Card"
hdf.TypicalPlatform="Huawei"
hdf.ReliesOn="Huawei iMana or iBMC Management Card"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through Huawei iMana Management Card using SNMP."
hdf.RemoteSupport="true"
hdf.AppliesToOS="OOB"
hdf.Supersedes="MS_HW_IpmiTool.hdf"


//
// DETECTION
//

// check that we got at least one CPU declared here
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.2011.2.235.1.1.15.50"

//
// Enclosure: computer
//

// Get the model name
// ModelName;SerialNumber;DeviceSlotID;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="6,7,15"

// InstanceTable = Source(5)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Vendor="Huawei"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)

//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MultiInstance"

// Get a list of Enclosures
// State;PowerConsumption;DeviceSlotID;
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="1,13,15"

// Duplicate status, because we will translate it two times
// State;State;PowerConsumption;DeviceSlotID;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=1

// Translate Status into PATROLStatus
// PatrolStatus;State;PowerConsumption;DeviceSlotID;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=1
Enclosure.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// PatrolStatus;StatusInformation;PowerConsumption;DeviceSlotID;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=2
Enclosure.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// PatrolStatus;StatusInformation;PowerConsumption;DeviceSlotID;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(4)
Enclosure.Collect.PowerConsumption=ValueTable.Column(3)
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)

// The StatusTranslationTable
StatusTranslationTable(1)="OK"
StatusTranslationTable(2)="WARN"
StatusTranslationTable(3)="ALARM"
StatusTranslationTable(4)="ALARM"
StatusTranslationTable(5)="ALARM"
StatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
StatusInformationTranslationTable(1)=""
StatusInformationTranslationTable(2)="Minor Fault"
StatusInformationTranslationTable(3)="Major Fault"
StatusInformationTranslationTable(4)="Critical Fault"
StatusInformationTranslationTable(5)="Device Missing"
StatusInformationTranslationTable(Default)="Unknown Status"

//
// CPUS
//

//
// CPU discovery

// Source(1) = cpuDescriptionEntry SNMP table
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.15.50.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,4,5,10"


// Remove (R) from Manufacturer and Family
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.Source(1).Compute(1).Type="Replace"
CPU.Discovery.Source(1).Compute(1).Column=2
CPU.Discovery.Source(1).Compute(1).Replace="(R)"
CPU.Discovery.Source(1).Compute(1).ReplaceBy=""

CPU.Discovery.Source(1).Compute(2).Type="Replace"
CPU.Discovery.Source(1).Compute(2).Column=3
CPU.Discovery.Source(1).Compute(2).Replace="(R)"
CPU.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove GHz from ClockRate and Multiply by 1000
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.Source(1).Compute(3).Type="Replace"
CPU.Discovery.Source(1).Compute(3).Column=5
CPU.Discovery.Source(1).Compute(3).Replace="GHz"
CPU.Discovery.Source(1).Compute(3).ReplaceBy=""

CPU.Discovery.Source(1).Compute(4).Type="Multiply"
CPU.Discovery.Source(1).Compute(4).Column=5
CPU.Discovery.Source(1).Compute(4).MultiplyBy="1000"

// Concat the type to family
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.Source(1).Compute(5).Type="RightConcat"
CPU.Discovery.Source(1).Compute(5).Column=3
CPU.Discovery.Source(1).Compute(5).String=" "

CPU.Discovery.Source(1).Compute(6).Type="RightConcat"
CPU.Discovery.Source(1).Compute(6).Column=3
CPU.Discovery.Source(1).Compute(6).String=Column(4)

// Keep Only  CPUs with a Manufacturer
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.Source(1).Compute(7).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(7).Column=2
CPU.Discovery.Source(1).Compute(7).RegExp="."

// Instance Table
// ID;Manufacturer;Family;Type;ClockRate;DeviceName;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(6)
CPU.Discovery.Instance.Model=InstanceTable.Column(3)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(2)
CPU.Discovery.Instance.MaximumSpeed=InstanceTable.Column(5)

//
// Collect

// Collect type is mono-instance
CPU.Collect.Type="MultiInstance"

// Get a list of CPUs
// ID;Status;
CPU.Collect.Source(1).Type="SnmpTable"
CPU.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.15.50.1"
CPU.Collect.Source(1).SnmpTableSelectColumns="1,6"

// Duplicate status, because we will translate it two times
// ID;State;State;
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// ID;PatrolStatus;State;
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column=2
CPU.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=3
CPU.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;StatusInformation;
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(1)
CPU.Collect.Status=ValueTable.Column(2)
CPU.Collect.StatusInformation=ValueTable.Column(3)

//
// PowerSupply discovery

// Source(1) = PowerSupplyDescriptionEntry SNMP table
// ID;Manufacturer;Model;Present;DeviceName;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.6.50.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="1,2,4,9,13"

// Keep only present supplies
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=4
PowerSupply.Discovery.Source(1).Compute(1).ValueList="2"

PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).String="Vendor: "

PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=3
PowerSupply.Discovery.Source(1).Compute(3).String="Model: "


// Instance Table
// ID;Manufacturer;Model;Present;DeviceName;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(5)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(3)


//
// Collect

// Collect type is mono-instance
PowerSupply.Collect.Type="MultiInstance"

// Get a list of PowerSupplys
// ID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.6.50.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="1,7"

// Duplicate status, because we will translate it two times
// ID;State;State;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// ID;PatrolStatus;State;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;StatusInformation;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

//
// Fan discovery

// Source(1) = FanDescriptionEntry SNMP table
// ID;Present;DeviceName;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.8.50.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="1,3,7"

// Keep only present supplies
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).ValueList="2"

// Instance Table
// ID;Present;DeviceName;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)



//
// Collect

// Collect type is mono-instance
Fan.Collect.Type="MultiInstance"

// Get a list of Fans
// ID;Speed;Status;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.8.50.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="1,2,4"

// Duplicate status, because we will translate it two times
// ID;Speed;State;State;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=3

// Translate Status into PATROLStatus
// ID;Speed;PatrolStatus;State;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=3
Fan.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;Speed;PatrolStatus;StatusInformation;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=4
Fan.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;Speed;PatrolStatus;StatusInformation;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)
Fan.Collect.Speed=ValueTable.Column(2)


//
// Memory discovery

// Source(1) = MemoryDescriptionEntry SNMP table
// ID;Manufacturer;Size;Clock;Status;DeviceName;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.16.50.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="1,3,4,5,6,10"

// Keep only modules with a valid status
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=5
Memory.Discovery.Source(1).Compute(1).ValueList="1,2,3,4"

// Remove MB from the size
Memory.Discovery.Source(1).Compute(2).Type="Replace"
Memory.Discovery.Source(1).Compute(2).Column=3
Memory.Discovery.Source(1).Compute(2).Replace=" MB"
Memory.Discovery.Source(1).Compute(2).ReplaceBy=""

Memory.Discovery.Source(1).Compute(3).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(3).Column=4
Memory.Discovery.Source(1).Compute(3).String="Speed: "


// Instance Table
// ID;Manufacturer;Size;Clock;Status;DeviceName;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(6)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(2)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Memory.Discovery.Instance.Size=InstanceTable.Column(3)


//
// Collect

// Collect type is mono-instance
Memory.Collect.Type="MultiInstance"

// Get a list of Memorys
// ID;Status;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.16.50.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="1,6"

// Duplicate status, because we will translate it two times
// ID;State;State;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// ID;PatrolStatus;State;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=3
Memory.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;StatusInformation;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)


//
// Temperature discovery

// Source(1) = TemperatureDescriptionEntry SNMP table
// ObjectID;Reading;UpperNR;UpperC;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.26.50.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="2,3,4,5"

// Replace  65535 Thresholds
// ObjectID;Reading;UpperNR;UpperC;
Temperature.Discovery.Source(1).Compute(1).Type="Replace"
Temperature.Discovery.Source(1).Compute(1).Column=3
Temperature.Discovery.Source(1).Compute(1).Replace="65535"
Temperature.Discovery.Source(1).Compute(1).ReplaceBy=""

Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column=4
Temperature.Discovery.Source(1).Compute(2).Replace="65535"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy=""

// Divide the threholds by 10
// ObjectID;Reading;UpperNR;UpperC;
Temperature.Discovery.Source(1).Compute(3).Type="Divide"
Temperature.Discovery.Source(1).Compute(3).Column=3
Temperature.Discovery.Source(1).Compute(3).DivideBy=10

Temperature.Discovery.Source(1).Compute(4).Type="Divide"
Temperature.Discovery.Source(1).Compute(4).Column=4
Temperature.Discovery.Source(1).Compute(4).DivideBy=10

// Duplicate the UpperC threshold
// ObjectID;Reading;UpperNR;UpperC;UpperC;
Temperature.Discovery.Source(1).Compute(5).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(5).Column=4

// Concat UpperNR to the Second UpperC
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.Source(1).Compute(6).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(6).Column=5
Temperature.Discovery.Source(1).Compute(6).String=Column(3)

// Keep only sensors with a valid tbreshold
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.Source(1).Compute(7).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(7).Column=5
Temperature.Discovery.Source(1).Compute(7).RegExp="."

// Because the temperature specific table is missing alot of thresholds, let's also take the general sensor table
// Source(2) = GeneralSensorTable SNMP table
// ObjectID;Reading;UpperNR;UpperC;Type;
Temperature.Discovery.Source(2).Type="SnmpTable"
Temperature.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.13.50.1"
Temperature.Discovery.Source(2).SnmpTableSelectColumns="1,2,3,4,10"

// Keep only temperature sensors
Temperature.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=5
Temperature.Discovery.Source(2).Compute(1).ValueList="1"

// Replace  na Thresholds
// ObjectID;Reading;UpperNR;UpperC;Type;
Temperature.Discovery.Source(2).Compute(2).Type="Replace"
Temperature.Discovery.Source(2).Compute(2).Column=3
Temperature.Discovery.Source(2).Compute(2).Replace="na"
Temperature.Discovery.Source(2).Compute(2).ReplaceBy=""

Temperature.Discovery.Source(2).Compute(3).Type="Replace"
Temperature.Discovery.Source(2).Compute(3).Column=4
Temperature.Discovery.Source(2).Compute(3).Replace="na"
Temperature.Discovery.Source(2).Compute(3).ReplaceBy=""

// Replace Type with UpperC
// ObjectID;Reading;UpperNR;UpperC;UpperC;
Temperature.Discovery.Source(2).Compute(4).Type="Replace"
Temperature.Discovery.Source(2).Compute(4).Column=5
Temperature.Discovery.Source(2).Compute(4).Replace=Column(5)
Temperature.Discovery.Source(2).Compute(4).ReplaceBy=Column(4)

// Concat UpperNR to the Second UpperC
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.Source(2).Compute(5).Type="RightConcat"
Temperature.Discovery.Source(2).Compute(5).Column=5
Temperature.Discovery.Source(2).Compute(5).String=Column(3)

// Keep only sensors with a valid tbreshold
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.Source(2).Compute(6).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(6).Column=5
Temperature.Discovery.Source(2).Compute(6).RegExp="."

// Exclude temperatures with negative values
Temperature.Discovery.Source(2).Compute(7).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(2).Compute(7).Column=2
Temperature.Discovery.Source(2).Compute(7).RegExp="-"


// Union 1 and 2
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%

// Instance Table
// ObjectID;Reading;UpperNR;UpperC;BothThresholds;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(3)


//
// Collect

// Collect type is mono-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = TemperatureDescriptionEntry SNMP table
// ObjectID;Reading;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.26.50.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="2,3"

// Divide the reading by 10
// ObjectID;Reading;
Temperature.Collect.Source(1).Compute(1).Type="Divide"
Temperature.Collect.Source(1).Compute(1).Column=2
Temperature.Collect.Source(1).Compute(1).DivideBy=10

// Source(2) = GeneralSensorTable SNMP table
// ObjectID;Reading;
Temperature.Collect.Source(2).Type="SnmpTable"
Temperature.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.13.50.1"
Temperature.Collect.Source(2).SnmpTableSelectColumns="1,2"

// Union 1 and 2
// ObjectID;Reading;
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%


// ValueTable = Source(1)
// ObjectID;Reading;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)


//
// PhysicalDisk discovery

// Source(1) = PhysicalDiskDescriptionEntry SNMP table
// ID;Present;DeviceName;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.18.50.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="1,2,6"

// Keep only present supplies
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=2
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="2"

// Instance Table
// ID;Present;DeviceName;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)



//
// Collect

// Collect type is mono-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Get a list of PhysicalDisks
// ID;Status;
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.18.50.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="1,3"

// Duplicate status, because we will translate it two times
// ID;State;State;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// ID;PatrolStatus;State;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;StatusInformation;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//
// OtherDevice discovery

// Source(1) = OtherDeviceDescriptionEntry SNMP table
// ID;Presence;Status;DeviceName;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.24.50.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,7"

// Keep only present cards
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=2
OtherDevice.Discovery.Source(1).Compute(1).ValueList="2"

// Keep only cards with a valid status
OtherDevice.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(2).Column=2
OtherDevice.Discovery.Source(1).Compute(2).ValueList="1,2,3,4"

// Instance Table
// ID;Manufacturer;Model;Present;DeviceName;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.DeviceType="PCI-E Card"


//
// Collect

// Collect type is mono-instance
OtherDevice.Collect.Type="MultiInstance"

// Get a list of OtherDevices
// ID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.2011.2.235.1.1.24.50.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="1,3"

// Duplicate status, because we will translate it two times
// ID;State;State;
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column=2

// Translate Status into PATROLStatus
// ID;PatrolStatus;State;
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=2
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// ID;PatrolStatus;StatusInformation;
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=3
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;StatusInformation;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)
