////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Equallogic (Dell) Storage Systems
//                Connects to a SNMP agent
//
//

//
// Header
//

hdf.DisplayName="Dell EqualLogic PS Series"
hdf.TypicalPlatform="Dell EqualLogic"
hdf.ReliesOn="Dell EqualLogic SNMP Agent (EQLGROUP-MIB)"
hdf.Version="1.0"
hdf.Comments="Because multiple PS Systems can be managed by the same controller, the connector can discover multiple enclosures."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

//
// DETECTION
// Does a get_next to see if there that the Chassis OID is populated.
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.12740.2.1.11.1"

//
// Enclosure
//

// Source(1) = 	eqlMemberChassisTable SNMP table
// ID;Model;SerialNumber;ServiceTag
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.11.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2,8"

// Add an "E" to avoid the ID being interpretted as a number.
// ID;Model;SerialNumber;ServiceTag
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).String="E"

Enclosure.Discovery.Source(1).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=4
Enclosure.Discovery.Source(1).Compute(2).String="Alternative Serial Number: "


// Source(2) = Table union of Source(1) and A "Global" Enclosure for the Logical Disks
// ID;Model;SerialNumber;ServiceTag
Enclosure.Discovery.Source(2).Type="TableUnion"
Enclosure.Discovery.Source(2).Table1=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(2).Table2="Global;Global;;"


// InstanceTable = Source(1)
// ID;Model;SerialNumber:ServiceTag
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="Dell Equallogic"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Storage"


//
//
// FANS
//

//
// Discovery

// Source(1) = Fan Table
// ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.7.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,7,8"

// Duplicate the ID column twice
// ID;ID;ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(2).Column=2

// Replace Status value of 0 (Unknown) with blank
// ID;ID;ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(3).Type="Replace"
Fan.Discovery.Source(1).Compute(3).Column=6
Fan.Discovery.Source(1).Compute(3).Replace="0"
Fan.Discovery.Source(1).Compute(3).ReplaceBy=""

// Replace a Speed Value of 0 with a blank to deactivate the parameter
// ID;ID;ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=5
Fan.Discovery.Source(1).Compute(4).Replace="0"
Fan.Discovery.Source(1).Compute(4).ReplaceBy=""

// The next steps are to extract the Enclosure ID (the first two numbers of the ID)
// Extract the first integer from the ID.
// ID(Part 1);ID;ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(5).Type="Extract"
Fan.Discovery.Source(1).Compute(5).Column="1"
Fan.Discovery.Source(1).Compute(5).SubColumn="1"
Fan.Discovery.Source(1).Compute(5).SubSeparators="."

// Add an "E" to avoid the ID being interpretted as a number.
// ID(Part 1);ID;ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(6).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(6).Column=1
Fan.Discovery.Source(1).Compute(6).String="E"

// Extract the second integer from the ID.
// ID(Part 1);ID(Part 2);ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(7).Type="Extract"
Fan.Discovery.Source(1).Compute(7).Column="2"
Fan.Discovery.Source(1).Compute(7).SubColumn="2"
Fan.Discovery.Source(1).Compute(7).SubSeparators="."

// Right Concat a . and the second part of the ID to form the enclosure ID
// EnclosureID;ID(Part 2);ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.Source(1).Compute(8).Type="RightConcat"
Fan.Discovery.Source(1).Compute(8).Column=1
Fan.Discovery.Source(1).Compute(8).String="."
Fan.Discovery.Source(1).Compute(9).Type="RightConcat"
Fan.Discovery.Source(1).Compute(9).Column=1
Fan.Discovery.Source(1).Compute(9).String=Column(2)


// The discovery table
// EnclosureID;ID(Part 2);ID;Name;Value;Status;LowCritical;LowWarning;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.FanType=InstanceTable.Column(4)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(8)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(7)

// Collect

// Collect type: MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1) =
// ID;Value;Status;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.7.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Now translate Status
// ID;Value;Status;
Fan.Collect.Source(1).Compute(1).Type="Translate"
Fan.Collect.Source(1).Compute(1).Column=3
Fan.Collect.Source(1).Compute(1).TranslationTable="fanStatusTranslationTable"

// The Fan status translation table
fanStatusTranslationTable(0)="UNKNOWN"
fanStatusTranslationTable(1)="OK"
fanStatusTranslationTable(2)="WARN"
fanStatusTranslationTable(3)="ALARM"
fanStatusTranslationTable(Default)="UNKNOWN"

// The value table
// ID;Value;Status;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.Speed=ValueTable.Column(2)


//
//
// TemperatureS
//

//
// Discovery

// Source(1) =
// ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.6.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5,6"

// Replace Status value of 0 (Unknown) with blank
// ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(1).Type="Replace"
Temperature.Discovery.Source(1).Compute(1).Column=4
Temperature.Discovery.Source(1).Compute(1).Replace="0"
Temperature.Discovery.Source(1).Compute(1).ReplaceBy=""

// Replace Temperature value of 0 (Unknown) with blank to deactivate parameter
// ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column=3
Temperature.Discovery.Source(1).Compute(2).Replace="0"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy=""

// The next steps are to extract the Enclosure ID (the first two numbers of the ID)
// Duplicate the ID column twice
// ID;ID;ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(3).Column=1
Temperature.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Temperature.Discovery.Source(1).Compute(4).Column=2

// Extract the first integer from the ID.
// ID(Part 1);ID;ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(5).Type="Extract"
Temperature.Discovery.Source(1).Compute(5).Column="1"
Temperature.Discovery.Source(1).Compute(5).SubColumn="1"
Temperature.Discovery.Source(1).Compute(5).SubSeparators="."

// Add an "E" to avoid the ID being interpretted as a number.
// ID(Part 1);ID;ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(6).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(6).Column=1
Temperature.Discovery.Source(1).Compute(6).String="E"

// Extract the second integer from the ID.
// ID(Part 1);ID(Part 2);ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(7).Type="Extract"
Temperature.Discovery.Source(1).Compute(7).Column="2"
Temperature.Discovery.Source(1).Compute(7).SubColumn="2"
Temperature.Discovery.Source(1).Compute(7).SubSeparators="."

// Right Concat a . and the second part of the ID to form the enclosure ID
// EnclosureID;ID(Part 2);ID;Name;Value;Status;HighAlarm;HighWarning;
Temperature.Discovery.Source(1).Compute(8).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(8).Column=1
Temperature.Discovery.Source(1).Compute(8).String="."
Temperature.Discovery.Source(1).Compute(9).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(9).Column=1
Temperature.Discovery.Source(1).Compute(9).String=Column(2)

// The discovery table
// EnclosureID;ID(Part 2);ID;Name;Value;Status;LowCritical;LowWarning;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(4)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(5)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(8)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(7)

// Collect

// Collect type: MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1) =
// ID;Value;Status;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.6.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Now translate Status
// ID;Value;Status;
Temperature.Collect.Source(1).Compute(1).Type="Translate"
Temperature.Collect.Source(1).Compute(1).Column=3
Temperature.Collect.Source(1).Compute(1).TranslationTable="temperatureStatusTranslationTable"

// The Temperature status translation table
temperatureStatusTranslationTable(0)="UNKNOWN"
temperatureStatusTranslationTable(1)="OK"
temperatureStatusTranslationTable(2)="WARN"
temperatureStatusTranslationTable(3)="ALARM"
temperatureStatusTranslationTable(Default)="UNKNOWN"

Temperature.Collect.Source(1).Compute(2).Type="LeftConcat"
Temperature.Collect.Source(1).Compute(2).Column=2
Temperature.Collect.Source(1).Compute(2).String="MSHW_"

// Remove 0 value
Temperature.Collect.Source(1).Compute(3).Type="Replace"
Temperature.Collect.Source(1).Compute(3).Column=2
Temperature.Collect.Source(1).Compute(3).Replace="MSHW_0"
Temperature.Collect.Source(1).Compute(3).ReplaceBy=""

// Remove MSHW_ for non 0 values
Temperature.Collect.Source(1).Compute(4).Type="Replace"
Temperature.Collect.Source(1).Compute(4).Column=2
Temperature.Collect.Source(1).Compute(4).Replace="MSHW_"
Temperature.Collect.Source(1).Compute(4).ReplaceBy=""


// The value table
// ID;Value;Status;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.Temperature=ValueTable.Column(2)


//
//
// PowerSupplies
//

//
// Discovery

// Source(1) = Power Supply
// ID;Name;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.8.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// The next steps are to extract the Enclosure ID (the first two numbers of the ID)
// Duplicate the ID column twice
// ID;ID;ID;Name;
PowerSupply.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(2).Column=2

// Extract the first integer from the ID.
// ID(Part 1);ID;ID;Name;
PowerSupply.Discovery.Source(1).Compute(3).Type="Extract"
PowerSupply.Discovery.Source(1).Compute(3).Column="1"
PowerSupply.Discovery.Source(1).Compute(3).SubColumn="1"
PowerSupply.Discovery.Source(1).Compute(3).SubSeparators="."

// Add an "E" to avoid the ID being interpretted as a number.
// ID(Part 1);ID;ID;Name;
PowerSupply.Discovery.Source(1).Compute(4).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(4).Column=1
PowerSupply.Discovery.Source(1).Compute(4).String="E"

// Extract the second integer from the ID.
// ID(Part 1);ID(Part 2);ID;Name;
PowerSupply.Discovery.Source(1).Compute(5).Type="Extract"
PowerSupply.Discovery.Source(1).Compute(5).Column="2"
PowerSupply.Discovery.Source(1).Compute(5).SubColumn="2"
PowerSupply.Discovery.Source(1).Compute(5).SubSeparators="."

// Right Concat a . and the second part of the ID to form the enclosure ID
// EnclosureID;ID(Part 2);ID;Name;
PowerSupply.Discovery.Source(1).Compute(6).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(6).Column=1
PowerSupply.Discovery.Source(1).Compute(6).String="."
PowerSupply.Discovery.Source(1).Compute(7).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(7).Column=1
PowerSupply.Discovery.Source(1).Compute(7).String=Column(2)

// The discovery table
// EnclosureID;ID(Part 2);ID;Name;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(4)

// Collect

// Collect type: MultiInstance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) =
// ID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.2.1.8.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,3"

// Duplicate Status
// ID;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=2

// Now translate Status
// ID;PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="psStatusTranslationTable"

// The psStatusTranslationTable status translation table
psStatusTranslationTable(1)="OK"
psStatusTranslationTable(2)="WARN"
psStatusTranslationTable(3)="ALARM"
psStatusTranslationTable(Default)="UNKNOWN"

// Now translate Status Information
// ID;Status;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="psStatusInformationTranslationTable"

// The psStatusInformationTranslationTable status translation table
psStatusInformationTranslationTable(1)=""
psStatusInformationTranslationTable(2)="No AC Power"
psStatusInformationTranslationTable(3)="Failed or No Data"
psStatusInformationTranslationTable(Default)="Unknown"

// The value table
// ID;Value;Status;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)



//
//
// PhysicalDisk
//

//
// Discovery

// Source(1) = PhysicalDisk
// ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.3.1.1.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,3,4,5,6,11"

// The next steps are to extract the Enclosure ID (the first two numbers of the ID)
// Duplicate the ID column twice
// ID;ID;ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1
PhysicalDisk.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
PhysicalDisk.Discovery.Source(1).Compute(2).Column=2

// Extract the first integer from the ID.
// ID(Part 1);ID;ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Extract"
PhysicalDisk.Discovery.Source(1).Compute(3).Column="1"
PhysicalDisk.Discovery.Source(1).Compute(3).SubColumn="1"
PhysicalDisk.Discovery.Source(1).Compute(3).SubSeparators="."

// Add an "E" to avoid the ID being interpretted as a number.
// ID(Part 1);ID;ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(4).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(4).Column=1
PhysicalDisk.Discovery.Source(1).Compute(4).String="E"

// Extract the second integer from the ID.
// ID(Part 1);ID(Part 2);ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(5).Type="Extract"
PhysicalDisk.Discovery.Source(1).Compute(5).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(5).SubColumn="2"
PhysicalDisk.Discovery.Source(1).Compute(5).SubSeparators="."

// Right Concat a . and the second part of the ID to form the enclosure ID
// EnclosureID;ID(Part 2);ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(6).Type="RightConcat"
PhysicalDisk.Discovery.Source(1).Compute(6).Column=1
PhysicalDisk.Discovery.Source(1).Compute(6).String="."
PhysicalDisk.Discovery.Source(1).Compute(7).Type="RightConcat"
PhysicalDisk.Discovery.Source(1).Compute(7).Column=1
PhysicalDisk.Discovery.Source(1).Compute(7).String=Column(2)

// Convert size from MB to B
// EnclosureID;ID(Part 2);ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(8).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(8).Column=7
PhysicalDisk.Discovery.Source(1).Compute(8).MultiplyBy=1048576

// Add a decriptor to slot
// ID(Part 1);ID;ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.Source(1).Compute(9).Type="LeftConcat"
PhysicalDisk.Discovery.Source(1).Compute(9).Column=8
PhysicalDisk.Discovery.Source(1).Compute(9).String="Location: "

// The discovery table
// ID(Part 1);ID;ID;Model;Firmware;Serial;Size;Slot;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.AttachedToDeviceType="Enclosure"
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.FirmwareVersion=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(8)


// Collect

// Collect type: MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) =
// ID;Status;ErrorCount
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.3.1.1.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8,9"

// Duplicate Status
// ID;Status;Status;ErrorCount;
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=2

// Now translate Status
// ID;PATROLStatus;Status;ErrorCount;
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=2
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="diskStatusTranslationTable"

// The diskStatusTranslationTable status translation table
diskStatusTranslationTable(1)="OK"
diskStatusTranslationTable(2)="OK"
diskStatusTranslationTable(3)="ALARM"
diskStatusTranslationTable(4)="ALARM"
diskStatusTranslationTable(5)="ALARM"
diskStatusTranslationTable(6)="ALARM"
diskStatusTranslationTable(7)="WARN"
diskStatusTranslationTable(8)="WARN"
diskStatusTranslationTable(9)="ALARM"
diskStatusTranslationTable(10)="WARN"
diskStatusTranslationTable(11)="WARN"
diskStatusTranslationTable(12)="ALARM"
diskStatusTranslationTable(13)="WARN"
diskStatusTranslationTable(Default)="UNKNOWN"

// Now translate Status Information
// ID;Status;StatusInformation;ErrorCount;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=3
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="diskStatusInformationTranslationTable"

// The diskStatusInformationTranslationTable translation table
diskStatusInformationTranslationTable(1)=""
diskStatusInformationTranslationTable(2)="Spare"
diskStatusInformationTranslationTable(3)="Failed"
diskStatusInformationTranslationTable(4)="Off-Line"
diskStatusInformationTranslationTable(5)="Altered Signature"
diskStatusInformationTranslationTable(6)="Disk Too Small"
diskStatusInformationTranslationTable(7)="Disk has a History of Failures"
diskStatusInformationTranslationTable(8)="Unsupported Drive Label Version"
diskStatusInformationTranslationTable(9)="Unhealthy"
diskStatusInformationTranslationTable(10)="Rebuilding"
diskStatusInformationTranslationTable(11)="Encrypted"
diskStatusInformationTranslationTable(12)="Not Approved"
diskStatusInformationTranslationTable(13)="Preempt-failed"
diskStatusInformationTranslationTable(Default)="Unknown"

// The value table
// ID;Status;StatusInformation;ErrorCount;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)
PhysicalDisk.Collect.ErrorCount=ValueTable.Column(4)


//
//
// LogicalDisk
//

//
// Discovery

// Source(1) = LogicalDisk
// ID;Name;Size;
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.5.1.7.1.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,4,8"

// Convert size from MB to B
// ID;Name;Size;
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column=3
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy=1048576

// The discovery table
// ID;Name;Size;
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.AttachedToDeviceID="Global"
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.LogicalDiskType=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.AttachedToDeviceType="Enclosure"

// Collect

// Collect type: MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) =
// ID;Status
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.5.1.7.7.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,8"

// Duplicate Status
// ID;Status;Status
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column=2

// Now translate Status
// ID;PATROLStatus;Status;
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="logicalDiskStatusTranslationTable"

// The logicalDiskStatusTranslationTable status translation table
logicalDiskStatusTranslationTable(1)="OK"
logicalDiskStatusTranslationTable(2)="ALARM"
logicalDiskStatusTranslationTable(3)="ALARM"
logicalDiskStatusTranslationTable(4)="ALARM"
logicalDiskStatusTranslationTable(5)="ALARM"
logicalDiskStatusTranslationTable(6)="ALARM"
logicalDiskStatusTranslationTable(7)="ALARM"
logicalDiskStatusTranslationTable(8)="ALARM"
logicalDiskStatusTranslationTable(Default)="UNKNOWN"

// Now translate Status Information
// ID;Status;StatusInformation;
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column=3
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="logicalDiskStatusInformationTranslationTable"

// The logicalDiskStatusInformationTranslationTable translation table
logicalDiskStatusInformationTranslationTable(1)=""
logicalDiskStatusInformationTranslationTable(2)="Not Available"
logicalDiskStatusInformationTranslationTable(3)="Not Available (Snap Reserve Met)"
logicalDiskStatusInformationTranslationTable(4)="Not Available (Members Offline)"
logicalDiskStatusInformationTranslationTable(5)="Not Available (Lost Cached Blocks)"
logicalDiskStatusInformationTranslationTable(6)="Not Available (Thin Max Growth Met)"
logicalDiskStatusInformationTranslationTable(7)="Not Available (No Space for Auto Grow)"
logicalDiskStatusInformationTranslationTable(8)="Not Available (Missing Pages)"
logicalDiskStatusInformationTranslationTable(Default)="Unknown"

// The value table
// ID;Status;StatusInformation;
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)

//
//
// Battery
//

//
// Discovery

// Source(1) = Controller Batteries
// ID;Status
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.4.1.1.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="ID,5"

// Exclude lines with Status of Missing
// ID;Status
Battery.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=2
Battery.Discovery.Source(1).Compute(1).ValueList="6"

// Duplicate the ID column x 3
// ID;ID;ID;ID;Status
Battery.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
Battery.Discovery.Source(1).Compute(2).Column=1
Battery.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
Battery.Discovery.Source(1).Compute(3).Column=1
Battery.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Battery.Discovery.Source(1).Compute(4).Column=1


// Add an "B" to the ID to distinguish it from the NVRAM Battery
// ID;ID;ID;ID;Status
Battery.Discovery.Source(1).Compute(5).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(5).Column=3
Battery.Discovery.Source(1).Compute(5).String="B"

// Extract the third integer from the ID. This will now become the Battery Name
// ID;ID;ID;Name;Status
Battery.Discovery.Source(1).Compute(6).Type="Extract"
Battery.Discovery.Source(1).Compute(6).Column=4
Battery.Discovery.Source(1).Compute(6).SubColumn="3"
Battery.Discovery.Source(1).Compute(6).SubSeparators="."

// Add an "Battery " to the Name to identify it
// ID;ID;ID;Name;Status
Battery.Discovery.Source(1).Compute(7).Type="LeftConcat"
Battery.Discovery.Source(1).Compute(7).Column=4
Battery.Discovery.Source(1).Compute(7).String="Battery "

// Source(2) = NVram Batteries
// ID;Status
Battery.Discovery.Source(2).Type="SnmpTable"
Battery.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.12740.4.1.1.1"
Battery.Discovery.Source(2).SnmpTableSelectColumns="ID,32"

// Exclude lines with Status of Not Present
// ID;Status
Battery.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(2).Compute(1).Column=2
Battery.Discovery.Source(2).Compute(1).ValueList="1,2,3"

// Duplicate the ID column x 3
// ID;ID;ID;ID;Status
Battery.Discovery.Source(2).Compute(2).Type="DuplicateColumn"
Battery.Discovery.Source(2).Compute(2).Column=1
Battery.Discovery.Source(2).Compute(3).Type="DuplicateColumn"
Battery.Discovery.Source(2).Compute(3).Column=1
Battery.Discovery.Source(2).Compute(4).Type="DuplicateColumn"
Battery.Discovery.Source(2).Compute(4).Column=1


// Add an "NVB" to the ID to distinguish it from the main Battery
// ID;ID;ID;ID;Status
Battery.Discovery.Source(2).Compute(5).Type="LeftConcat"
Battery.Discovery.Source(2).Compute(5).Column=3
Battery.Discovery.Source(2).Compute(5).String="NVB"

// Extract the third integer from the ID. This will now become the Battery Name
// ID;ID;ID;Name;Status
Battery.Discovery.Source(2).Compute(6).Type="Extract"
Battery.Discovery.Source(2).Compute(6).Column=4
Battery.Discovery.Source(2).Compute(6).SubColumn="3"
Battery.Discovery.Source(2).Compute(6).SubSeparators="."

// Add an "NVRAM Battery " to the Name to identify it
// ID;ID;ID;Name;Status
Battery.Discovery.Source(2).Compute(7).Type="LeftConcat"
Battery.Discovery.Source(2).Compute(7).Column=4
Battery.Discovery.Source(2).Compute(7).String="NVRAM Battery "

// Source(3) = Table union of Source(1) and Source(2)
// ID;ID;ID;Name;Status
Battery.Discovery.Source(3).Type="TableUnion"
Battery.Discovery.Source(3).Table1=%Battery.Discovery.Source(1)%
Battery.Discovery.Source(3).Table2=%Battery.Discovery.Source(2)%

// Add an "C" to avoid the ID being interpretted as a number.
// ControllerID;ID;ID;Name;Status;
Battery.Discovery.Source(3).Compute(1).Type="LeftConcat"
Battery.Discovery.Source(3).Compute(1).Column=1
Battery.Discovery.Source(3).Compute(1).String="C"

// The discovery table
// ControllerID;ID;ID;Name;Status;
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(3)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(3)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Battery.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.AttachedToDeviceType="DiskController"
Battery.Discovery.Instance.Type=InstanceTable.Column(4)


// Collect

// Collect type: MultiInstance
Battery.Collect.Type="MultiInstance"

// Source(1) =
// ID;Status
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.4.1.1.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="ID,5"

// Add an "B" to the ID to distinguish it from the NVRAM Battery
// ID;Status
Battery.Collect.Source(1).Compute(1).Type="LeftConcat"
Battery.Collect.Source(1).Compute(1).Column=1
Battery.Collect.Source(1).Compute(1).String="B"

// Duplicate Status
// ID;Status;Status
Battery.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Battery.Collect.Source(1).Compute(2).Column=2

// Now translate Status
// ID;PATROLStatus;Status;
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column=2
Battery.Collect.Source(1).Compute(3).TranslationTable="BatteryStatusTranslationTable"

// The BatteryStatusTranslationTable status translation table
BatteryStatusTranslationTable(1)="OK"
BatteryStatusTranslationTable(2)="ALARM"
BatteryStatusTranslationTable(3)="OK"
BatteryStatusTranslationTable(4)="WARN"
BatteryStatusTranslationTable(5)="WARN"
BatteryStatusTranslationTable(6)="ALARM"
BatteryStatusTranslationTable(Default)="UNKNOWN"

// Now translate Status Information
// ID;Status;StatusInformation;
Battery.Collect.Source(1).Compute(4).Type="Translate"
Battery.Collect.Source(1).Compute(4).Column=3
Battery.Collect.Source(1).Compute(4).TranslationTable="BatteryStatusInformationTranslationTable"

// The BatteryStatusInformationTranslationTable translation table
BatteryStatusInformationTranslationTable(1)=""
BatteryStatusInformationTranslationTable(2)="Failed"
BatteryStatusInformationTranslationTable(3)="Charging"
BatteryStatusInformationTranslationTable(4)="Low Voltage"
BatteryStatusInformationTranslationTable(5)="Low Voltage - Charging"
BatteryStatusInformationTranslationTable(6)="Missing"
BatteryStatusInformationTranslationTable(Default)="Unknown"


// Source(2) =
// ID;Status
Battery.Collect.Source(2).Type="SnmpTable"
Battery.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.12740.4.1.1.1"
Battery.Collect.Source(2).SnmpTableSelectColumns="ID,32"

// Add an "B" to the ID to distinguish it from the NVRAM Battery
// ID;Status
Battery.Collect.Source(2).Compute(1).Type="LeftConcat"
Battery.Collect.Source(2).Compute(1).Column=1
Battery.Collect.Source(2).Compute(1).String="NVB"

// Duplicate Status
// ID;Status;Status
Battery.Collect.Source(2).Compute(2).Type="DuplicateColumn"
Battery.Collect.Source(2).Compute(2).Column=2

// Now translate Status
// ID;PATROLStatus;Status;
Battery.Collect.Source(2).Compute(3).Type="Translate"
Battery.Collect.Source(2).Compute(3).Column=2
Battery.Collect.Source(2).Compute(3).TranslationTable="NVBatteryStatusTranslationTable"

// The NVBatteryStatusTranslationTable status translation table
NVBatteryStatusTranslationTable(0)="ALARM"
NVBatteryStatusTranslationTable(1)="OK"
NVBatteryStatusTranslationTable(2)="ALARM"
NVBatteryStatusTranslationTable(3)="UNKNOWN"
NVBatteryStatusTranslationTable(Default)="UNKNOWN"

// Now translate Status Information
// ID;Status;StatusInformation;
Battery.Collect.Source(2).Compute(4).Type="Translate"
Battery.Collect.Source(2).Compute(4).Column=3
Battery.Collect.Source(2).Compute(4).TranslationTable="NVBatteryStatusInformationTranslationTable"

// The NVBatteryStatusInformationTranslationTable translation table
NVBatteryStatusInformationTranslationTable(0)="Missing"
NVBatteryStatusInformationTranslationTable(1)=""
NVBatteryStatusInformationTranslationTable(2)="Bad"
NVBatteryStatusInformationTranslationTable(3)="Unknown"
NVBatteryStatusInformationTranslationTable(Default)="Unknown"

// Source(3) = Table union of Source(1) and Source(2)
// ID;Name;Status;Status Infromation;
Battery.Collect.Source(3).Type="TableUnion"
Battery.Collect.Source(3).Table1=%Battery.Collect.Source(1)%
Battery.Collect.Source(3).Table2=%Battery.Collect.Source(2)%

// The value table
// ID;Status;StatusInformation;
Battery.Collect.ValueTable=%Battery.Collect.Source(3)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)

//
//
// DiskController (Controller)
//

//
// Discovery

// Source(1) = Controller Batteries
// ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.12740.4.1.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,2,33"


// Duplicate the ID Twice
// ID;ID;ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(1).Type="DuplicateColumn"
DiskController.Discovery.Source(1).Compute(1).Column=1
DiskController.Discovery.Source(1).Compute(2).Type="DuplicateColumn"
DiskController.Discovery.Source(1).Compute(2).Column=1

// Extract the first integer from the ID.
// ID(Part 1);ID;ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(3).Type="Extract"
DiskController.Discovery.Source(1).Compute(3).Column=1
DiskController.Discovery.Source(1).Compute(3).SubColumn=1
DiskController.Discovery.Source(1).Compute(3).SubSeparators="."

// Add an "E" to avoid the ID being interpretted as a number.
// ID(Part 1);ID;ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(4).Type="LeftConcat"
DiskController.Discovery.Source(1).Compute(4).Column=1
DiskController.Discovery.Source(1).Compute(4).String="E"

// Extract the second integer from the ID.
// ID(Part 1);ID(Part 2);ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(5).Type="Extract"
DiskController.Discovery.Source(1).Compute(5).Column=2
DiskController.Discovery.Source(1).Compute(5).SubColumn=2
DiskController.Discovery.Source(1).Compute(5).SubSeparators="."

// Right Concat a . and the second part of the ID to form the enclosure ID
// EnclosureID;ID(Part 2);ID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(6).Type="RightConcat"
DiskController.Discovery.Source(1).Compute(6).Column=1
DiskController.Discovery.Source(1).Compute(6).String="."
DiskController.Discovery.Source(1).Compute(7).Type="RightConcat"
DiskController.Discovery.Source(1).Compute(7).Column=1
DiskController.Discovery.Source(1).Compute(7).String=Column(2)

// Add an "C" to avoid the ID being interpretted as a number.
// EnclosureID;ID(Part 2);DeviceID;Model;Revision;SerialNumber;
DiskController.Discovery.Source(1).Compute(8).Type="LeftConcat"
DiskController.Discovery.Source(1).Compute(8).Column=3
DiskController.Discovery.Source(1).Compute(8).String="C"

// Instance Table
// EnclosureID;(ID);DeviceID;Model;Revision;SerialNumber;
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(3)
DiskController.Discovery.Instance.DisplayID=InstanceTable.Column(3)
DiskController.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
DiskController.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(4)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(5)


// Collect (None)
