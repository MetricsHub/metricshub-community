//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//              MS_HW_StorageTekStreamLine.hdf
//
//      Supports: the StreamLine (SL) Tape Libraries from Storage Tek
//		Requires: Remote monitoring
//		1.1: Move TapeDrives from OtherDevices to TapeDrives (added element ID, hardware version and
//				 I did not add Robotics as everything in the MIB seems depracted and I could not find any documentation about the enumeration of status (what's a '1'?).

// HEADER

hdf.DisplayName="StorageTek StreamLine Tape Library"
hdf.TypicalPlatform="StorageTek StreamLine"
hdf.ReliesOn="StorageTek StreamLine SNMP Agent"
hdf.Version="1.1"
hdf.Comments="This connector provides basic hardware monitoring of the StorageTek StreamLine tape libraries through their built-in SNMP agent. Needs to run remotely."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.1211.1.15.3.1"


//
// ENCLOSURE

// Get the model name and manufacturer of the tape library
// Model;SerialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1211.1.15.3"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,2"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="STKStreamLine"
Enclosure.Discovery.Instance.Vendor="StorageTek"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type="Storage"


// Collect
Enclosure.Collect.Type="MonoInstance"

// Retrieve the slTapeLibraryTopLevelCondition
// slTapeLibraryTopLevelCondition
Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.4.1.1211.1.15.3.4.0"

// Duplicate the slTapeLibraryTopLevelCondition column
// slTapeLibraryTopLevelCondition;slTapeLibraryTopLevelCondition
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column="1"

// Translate the first slTapeLibraryTopLevelCondition into a PATROL status
// PATROLStatus;slTapeLibraryTopLevelCondition
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="1"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="LibraryStatusTranslationTable"

// The LibraryStatusTranslationTable
LibraryStatusTranslationTable(0)="OK"
LibraryStatusTranslationTable(1)="WARN"
LibraryStatusTranslationTable(2)="ALARM"
LibraryStatusTranslationTable(Default)="UNKNOWN"

// Translate the second slTapeLibraryTopLevelCondition into a PATROL status
// PATROLStatus;statusInformation
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column="2"
Enclosure.Collect.Source(1).Compute(3).TranslationTable="LibraryStatusInformationTranslationTable"

// The LibraryStatusInformationTranslationTable
LibraryStatusInformationTranslationTable(0)=""
LibraryStatusInformationTranslationTable(1)="Degraded"
LibraryStatusInformationTranslationTable(2)="Not Operative"
LibraryStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)

//
// TAPE DRIVES
//

//
// Discovery

// Source(1) = slDriveTable
// ID;ElementID;Model;Vendor;SerialNumber;HardwareVersion;FibreNodeName
TapeDrive.Discovery.Source(1).Type="SnmpTable"
TapeDrive.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1211.1.15.4.18.1"
TapeDrive.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5,12,22"

TapeDrive.Discovery.Source(1).Compute(1).Type="LeftConcat"
TapeDrive.Discovery.Source(1).Compute(1).Column="2"
TapeDrive.Discovery.Source(1).Compute(1).String="Element ID: "

TapeDrive.Discovery.Source(1).Compute(2).Type="LeftConcat"
TapeDrive.Discovery.Source(1).Compute(2).Column="6"
TapeDrive.Discovery.Source(1).Compute(2).String="Version: "

TapeDrive.Discovery.Source(1).Compute(3).Type="LeftConcat"
TapeDrive.Discovery.Source(1).Compute(3).Column="7"
TapeDrive.Discovery.Source(1).Compute(3).String="Fibre Node: "

// InstanceTable = Source(1)
TapeDrive.Discovery.InstanceTable=%TapeDrive.Discovery.Source(1)%
TapeDrive.Discovery.Instance.DeviceID=InstanceTable.Column(1)
TapeDrive.Discovery.Instance.Model=InstanceTable.Column(3)
TapeDrive.Discovery.Instance.Vendor=InstanceTable.Column(4)
TapeDrive.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
TapeDrive.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
TapeDrive.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)
TapeDrive.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(6)
TapeDrive.Discovery.Instance.AttachedToDeviceID="STKStreamLine"
TapeDrive.Discovery.Instance.AttachedToDeviceType="Computer"

//
// Collect

// Collect type is "multi-instance"
TapeDrive.Collect.Type="MultiInstance"

// Source(1) = slDriveTable
// ID;slDriveStateEnum;MountCount
TapeDrive.Collect.Source(1).Type="SnmpTable"
TapeDrive.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1211.1.15.4.18.1"
TapeDrive.Collect.Source(1).SnmpTableSelectColumns="ID,10,21"

// Duplicate the slDriveState column
// ID;slDriveStateEnum;slDriveStateEnum;MountCount
TapeDrive.Collect.Source(1).Compute(1).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(1).Column="2"

// Translate the first slDriveStateEnum into a PATROLStatus
// ID;PATROLStatus;slDriveStateEnum;MountCount
TapeDrive.Collect.Source(1).Compute(2).Type="Translate"
TapeDrive.Collect.Source(1).Compute(2).Column="2"
TapeDrive.Collect.Source(1).Compute(2).TranslationTable="DriveStatusTranslationTable"

// The DriveStatusTranslationTable
DriveStatusTranslationTable(0)="UNKNOWN"
DriveStatusTranslationTable(1)="OK"
DriveStatusTranslationTable(2)="OK"
DriveStatusTranslationTable(3)="OK"
DriveStatusTranslationTable(4)="OK"
DriveStatusTranslationTable(5)="OK"
DriveStatusTranslationTable(6)="OK"
DriveStatusTranslationTable(7)="OK"
DriveStatusTranslationTable(8)="OK"
DriveStatusTranslationTable(9)="ALARM"
DriveStatusTranslationTable(10)="ALARM"
DriveStatusTranslationTable(11)="ALARM"

// Translate the second slDriveStateEnum into a StatusInformation
// ID;PATROLStatus;StatusInformation;MountCount
TapeDrive.Collect.Source(1).Compute(3).Type="Translate"
TapeDrive.Collect.Source(1).Compute(3).Column="3"
TapeDrive.Collect.Source(1).Compute(3).TranslationTable="DriveStatusInformationTranslationTable"

// The DriveStatusTranslationTable
DriveStatusInformationTranslationTable(0)="Unknown"
DriveStatusInformationTranslationTable(1)="Initializing"
DriveStatusInformationTranslationTable(2)="Empty"
DriveStatusInformationTranslationTable(3)="Cartridge Present"
DriveStatusInformationTranslationTable(4)="Loading"
DriveStatusInformationTranslationTable(5)="Loaded"
DriveStatusInformationTranslationTable(6)="Cleaning"
DriveStatusInformationTranslationTable(7)="Rewinding"
DriveStatusInformationTranslationTable(8)="Unloading"
DriveStatusInformationTranslationTable(9)="Inoperative"
DriveStatusInformationTranslationTable(10)="Not Loadable"
DriveStatusInformationTranslationTable(11)="Not Unloadable"

// ValueTable = Source(3)
TapeDrive.Collect.ValueTable=%TapeDrive.Collect.Source(1)%
TapeDrive.Collect.DeviceID=ValueTable.Column(1)
TapeDrive.Collect.Status=ValueTable.Column(2)
TapeDrive.Collect.StatusInformation=ValueTable.Column(3)
TapeDrive.Collect.MountCount=ValueTable.Column(4)



// Robotic
// Discovery

// Source(1) = lserDriveTable
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.Source(1).Type="SnmpTable"
Robotic.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1211.1.15.4.10.1"
Robotic.Discovery.Source(1).SnmpTableSelectColumns="2,3,5,11"

// Add Position string
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.Source(1).Compute(1).Type="LeftConcat"
Robotic.Discovery.Source(1).Compute(1).Column=2
Robotic.Discovery.Source(1).Compute(1).String="Location: "

// Add firmware version string
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.Source(1).Compute(2).Type="LeftConcat"
Robotic.Discovery.Source(1).Compute(2).Column=4
Robotic.Discovery.Source(1).Compute(2).String="Firmware Version: "

// Delete a Location of -1 as these are single-robot libraries and position has no relevance
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.Source(1).Compute(3).Type="Replace"
Robotic.Discovery.Source(1).Compute(3).Column=2
Robotic.Discovery.Source(1).Compute(3).Replace="Location: -1"
Robotic.Discovery.Source(1).Compute(3).ReplaceBy=""

// Delete a Firmware Version of N/A
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.Source(1).Compute(4).Type="Replace"
Robotic.Discovery.Source(1).Compute(4).Column=4
Robotic.Discovery.Source(1).Compute(4).Replace="Firmware Version: <N/A>"
Robotic.Discovery.Source(1).Compute(4).ReplaceBy=""

// InstanceTable = Source(1)
// ElementID;Position;SerialNumber;FirmwareVersion;
Robotic.Discovery.InstanceTable=%Robotic.Discovery.Source(1)%
Robotic.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Robotic.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Robotic.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
Robotic.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
Robotic.Discovery.Instance.AttachedToDeviceID="STKStreamLine"
Robotic.Discovery.Instance.AttachedToDeviceType="Computer"

// Collect
// Collect-type = mono-instance
Robotic.Collect.Type="MultiInstance"

// Robotic Status Table
// ElementID;Status;
Robotic.Collect.Source(1).Type="SnmpTable"
Robotic.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1211.1.15.4.10.1"
Robotic.Collect.Source(1).SnmpTableSelectColumns="2,8"

// Duplicate the slTapeLibraryTopLevelCondition column
// ElementID;Status;Status;
Robotic.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Robotic.Collect.Source(1).Compute(1).Column="2"

// Translate the first slTapeLibraryTopLevelCondition into a PATROL status
// ElementID;PatrolStatus;Status;
Robotic.Collect.Source(1).Compute(2).Type="Translate"
Robotic.Collect.Source(1).Compute(2).Column="2"
Robotic.Collect.Source(1).Compute(2).TranslationTable="RoboticStatusTranslationTable"

// The RoboticStatusTranslationTable
RoboticStatusTranslationTable(0)="OK"
RoboticStatusTranslationTable(1)="WARN"
RoboticStatusTranslationTable(2)="ALARM"
RoboticStatusTranslationTable(3)="OK"
RoboticStatusTranslationTable(4)="OK"
RoboticStatusTranslationTable(Default)="UNKNOWN"

// Translate the second slTapeLibraryTopLevelCondition into a PATROL status
// ElementID;PatrolStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(3).Type="Translate"
Robotic.Collect.Source(1).Compute(3).Column="3"
Robotic.Collect.Source(1).Compute(3).TranslationTable="RoboticStatusInformationTranslationTable"

// The RoboticStatusInformationTranslationTable
RoboticStatusInformationTranslationTable(0)=""
RoboticStatusInformationTranslationTable(1)="Degraded"
RoboticStatusInformationTranslationTable(2)="Not Operative"
RoboticStatusInformationTranslationTable(3)="Info"
RoboticStatusInformationTranslationTable(4)="Trace"
RoboticStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
// ElementID;PatrolStatus;StatusInformation;
Robotic.Collect.ValueTable=%Robotic.Collect.Source(1)%
Robotic.Collect.DeviceID=ValueTable.Column(1)
Robotic.Collect.Status=ValueTable.Column(2)
Robotic.Collect.StatusInformation=ValueTable.Column(3)
