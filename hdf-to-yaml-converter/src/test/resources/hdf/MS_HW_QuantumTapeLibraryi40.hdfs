////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Quantum i40/i80 Based Tape Libraries MIB (ADIC-TAPE-LIBRARY-MIB)
//                Connects to a SNMP agent
//
//


//
// Header
//

hdf.DisplayName="Quantum i40/i80 (ADIC) based Tape Libraries"
hdf.TypicalPlatform="Quantum i40/i80 (ADIC) Scalar Tape Library"
hdf.ReliesOn="Quantum SNMP Agent (ADIC-TAPE-LIBRARY-MIB)"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"
hdf.Comments="Provides monitoring of i40/i80 Quantum Tape Libraries through the SNMP Agent (ADIC)."

//
// DETECTION
// Does a get_next to see if the model OID is populated.
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.3697.1.10.10.1.6"

//
// Enclosure
//

// Source(1) = 	tapeLibrarySystem SNMP table
// Vendor;SerialNumber;Model;Firmware Revision
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3697.1.10.10.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="4,5,7,11"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="Quantum Library"
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)
Enclosure.Discovery.Instance.BiosVersion=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Storage"

//
// Collect


Enclosure.Collect.Type="MultiInstance"

// Source(1) = 	libraryGlobalStatus SNMP OID
// Status

Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.8.0"

// Duplicate status, because we will translate it two times
// Status;Status;
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column="1"

// Translate Status into PATROLStatus
// PATROLStatus;Status;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="1"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column="2"
Enclosure.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID="Quantum Library"
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)


//
// FANS
//

//
// Discovery

// Source = Get the Cooling Status
// Status

Fan.Discovery.Source(1).Type="SnmpGet"
Fan.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.2.0"

// Add the device ID
// ID;Status
Fan.Discovery.Source(1).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).String="Overall Cooling Status;"

//  Only keep Overall Cooling Status if there is a valid status
// ID;Status
Fan.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column=2
Fan.Discovery.Source(1).Compute(2).ValueList="1,2,3,4,5"

// InstanceTable = Discovery.Source(1)
// ID;Status
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.FanType="Overall Cooling Status"
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.AttachedToDeviceID="Quantum Library"

//
// Collect


Fan.Collect.Type="MultiInstance"

// Source(1) = 	coolingStatus SNMP OID
// Status

Fan.Collect.Source(1).Type="SnmpGet"
Fan.Collect.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.2.0"


// Duplicate status, because we will translate it two times
// Status;Status;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="1"

// Translate Status into PATROLStatus
// PATROLStatus;Status;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="1"
Fan.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;StatusInformation;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="2"
Fan.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID="Overall Cooling Status"
Fan.Collect.Status=ValueTable.Column(1)
Fan.Collect.StatusInformation=ValueTable.Column(2)

//
// PowerSupplies
//

//
// Discovery

// Source = Get the Power Status
// Status

PowerSupply.Discovery.Source(1).Type="SnmpGet"
PowerSupply.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.1.0"

// Add the device ID
// ID;Status
PowerSupply.Discovery.Source(1).Compute(1).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).String="Overall Power Status;"

//  Only keep Overall Power Status if there is a valid status
// ID;Status
PowerSupply.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).ValueList="1,2,3,4,5"

PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.PowerSupplyType="Overall Power Status"
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="Quantum Library"

//
// Collect


PowerSupply.Collect.Type="MultiInstance"

// Source(1) = 	coolingStatus SNMP OID
// Status

PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.1.0"


// Duplicate status, because we will translate it two times
// Status;Status;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="1"

// Translate Status into PATROLStatus
// PATROLStatus;Status;
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="1"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;StatusInformation;
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="2"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID="Overall Power Status"
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)

//
// Robotics
//

// Source = Get the Robotics Status
// Status

Robotic.Discovery.Source(1).Type="SnmpGet"
Robotic.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.5.0"

// Add the device ID
// ID;Status
Robotic.Discovery.Source(1).Compute(1).Type="LeftConcat"
Robotic.Discovery.Source(1).Compute(1).Column=1
Robotic.Discovery.Source(1).Compute(1).String="Overall Cassette Robotics Status;"

//  Only keep Overall Cassette Robot Status if there is a valid status
// ID;Status
Robotic.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Robotic.Discovery.Source(1).Compute(2).Column=2
Robotic.Discovery.Source(1).Compute(2).ValueList="1,2,3,4,5"

// Instance Table
// ID;Status
Robotic.Discovery.InstanceTable=%Robotic.Discovery.Source(1)%
Robotic.Discovery.Instance.RoboticType="Overall Robotics Status"
Robotic.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Robotic.Discovery.Instance.AttachedToDeviceID="Quantum Library"

//
// Collect

Robotic.Collect.Type="MultiInstance"

// Get the Robotics status
Robotic.Collect.Source(1).Type="SnmpGet"
Robotic.Collect.Source(1).SnmpOid="1.3.6.1.4.1.3697.1.10.10.1.15.10.5.0"

// Duplicate status, because we will translate it two times
// Status;Status;
Robotic.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Robotic.Collect.Source(1).Compute(1).Column="1"

// Translate Status into PATROLStatus
// deviceID;PATROLStatus;Status;
Robotic.Collect.Source(1).Compute(2).Type="Translate"
Robotic.Collect.Source(1).Compute(2).Column="1"
Robotic.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// deviceID;PATROLStatus;StatusInformation;
Robotic.Collect.Source(1).Compute(3).Type="Translate"
Robotic.Collect.Source(1).Compute(3).Column="2"
Robotic.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Value Table
Robotic.Collect.ValueTable=%Robotic.Collect.Source(1)%
Robotic.Collect.DeviceID="Overall Cassette Robotics Status"
Robotic.Collect.Status=ValueTable.Column(1)
Robotic.Collect.StatusInformation=ValueTable.Column(2)
// Robotic.Collect.MoveCount=""

//
// Tape Drives
//

// Source(1) = 	physicalDriveEntry SNMP table
// phDriveSerialNumber;phDriveModel;phDriveVendor;phDriveLocation;
TapeDrive.Discovery.Source(1).Type="SnmpTable"
TapeDrive.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.3697.1.10.10.1.15.6.4.1"
TapeDrive.Discovery.Source(1).SnmpTableSelectColumns="9,3,4,2"

// phDriveSerialNumber;phDriveModel;phDriveVendor;phDriveLocation;
TapeDrive.Discovery.InstanceTable=%TapeDrive.Discovery.Source(1)%
TapeDrive.Discovery.Instance.DeviceID=InstanceTable.Column(4)
TapeDrive.Discovery.Instance.Vendor=InstanceTable.Column(3)
TapeDrive.Discovery.Instance.Model=InstanceTable.Column(2)
TapeDrive.Discovery.Instance.SerialNumber=InstanceTable.Column(1)
// TapeDrive.Discovery.Instance.ControllerNumber=InstanceTable.Column()
TapeDrive.Discovery.Instance.AttachedToDeviceID="Quantum Library"


//
// Collect

TapeDrive.Collect.Type="MultiInstance"

// Source(1) = 	physicalDriveEntry SNMP table
// phDriveLocation;RAS Status;Cleaning Status;Loads
TapeDrive.Collect.Source(1).Type="SnmpTable"
TapeDrive.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.3697.1.10.10.1.15.6.4.1"
TapeDrive.Collect.Source(1).SnmpTableSelectColumns="2,13,15,14"

// Duplicate status, because we will translate it two times
// phDriveLocation;Status;RAS Status;Cleaning Status;Loads
TapeDrive.Collect.Source(1).Compute(1).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(1).Column="2"

// Translate Status into PATROLStatus
// phDriveLocation;Patrol Status;RAS Status;Cleaning Status;Loads
TapeDrive.Collect.Source(1).Compute(2).Type="Translate"
TapeDrive.Collect.Source(1).Compute(2).Column="2"
TapeDrive.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Translate second Status into more readable string
// deviceID;PATROLStatus;StatusInformation;Cleaning Status;Loads
TapeDrive.Collect.Source(1).Compute(3).Type="Translate"
TapeDrive.Collect.Source(1).Compute(3).Column="3"
TapeDrive.Collect.Source(1).Compute(3).TranslationTable="StatusInformationTranslationTable"

// Duplicate Cleaning status, because we will translate it two times
// deviceID;PATROLStatus;StatusInformation;Cleaning Status;Cleaning Status;Loads
TapeDrive.Collect.Source(1).Compute(4).Type="DuplicateColumn"
TapeDrive.Collect.Source(1).Compute(4).Column="4"

// Translate Status into PATROLStatus
// deviceID;PATROLStatus;StatusInformation;Cleaning Status (0,1,2);Cleaning Status;Loads
TapeDrive.Collect.Source(1).Compute(5).Type="Translate"
TapeDrive.Collect.Source(1).Compute(5).Column="4"
TapeDrive.Collect.Source(1).Compute(5).TranslationTable="CleaningStatusTranslationTable"

// Translate second Status into more readable string
// deviceID;PATROLStatus;StatusInformation;Cleaning Status (0,1,2);Cleaning Status Information;Loads
TapeDrive.Collect.Source(1).Compute(6).Type="Translate"
TapeDrive.Collect.Source(1).Compute(6).Column="5"
TapeDrive.Collect.Source(1).Compute(6).TranslationTable="CleaningStatusInformationTranslationTable"

// Merge Drive Status Information and Cleaning Status Information
// deviceID;PATROLStatus;StatusInformation (incl cleaning);Cleaning Status (0,1,2);Cleaning Status Information;Loads
TapeDrive.Collect.Source(1).Compute(7).Type="RightConcat"
TapeDrive.Collect.Source(1).Compute(7).Column="3"
TapeDrive.Collect.Source(1).Compute(7).String=Column(5)

// Value Table
// deviceID;PATROLStatus;Status Information (incl cleaning);Cleaning Status (0,1,2);Cleaning Status Information;Loads
TapeDrive.Collect.ValueTable=%TapeDrive.Collect.Source(1)%
TapeDrive.Collect.DeviceID=ValueTable.Column(1)
TapeDrive.Collect.Status=ValueTable.Column(2)
TapeDrive.Collect.StatusInformation=ValueTable.Column(3)
TapeDrive.Collect.NeedsCleaning=ValueTable.Column(4)
TapeDrive.Collect.MountCount=ValueTable.Column(6)
// TapeDrive.Collect.UnmountCount=ValueTable.Column(1)


// The StatusTranslationTable
CleaningStatusTranslationTable(1)="1"
CleaningStatusTranslationTable(2)="0"
CleaningStatusTranslationTable(3)="2"
CleaningStatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
CleaningStatusInformationTranslationTable(1)=" Cleaning Required"
CleaningStatusInformationTranslationTable(2)=""
CleaningStatusInformationTranslationTable(3)=" Immediate Cleaning Required"
CleaningStatusInformationTranslationTable(Default)=" Unknown Cleaning Status"


// The StatusTranslationTable
StatusTranslationTable(1)="OK"
StatusTranslationTable(2)="ALARM"
StatusTranslationTable(3)="WARN"
StatusTranslationTable(4)="WARN"
StatusTranslationTable(5)="WARN"
StatusTranslationTable(6)="UNKNOWN"
StatusTranslationTable(7)="ALARM"
StatusTranslationTable(Default)="UNKNOWN"

// The StatusInformationTranslationTable
StatusInformationTranslationTable(1)=""
StatusInformationTranslationTable(2)="Failed"
StatusInformationTranslationTable(3)="Degraded"
StatusInformationTranslationTable(4)="Warning"
StatusInformationTranslationTable(5)="Informational"
StatusInformationTranslationTable(6)="Unknown"
StatusInformationTranslationTable(7)="Invalid"
StatusInformationTranslationTable(Default)="Unknown Status"
