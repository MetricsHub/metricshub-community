//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//             Cisco UCS Blade connector
//
//
//      Supports: Cisco UCS Blade Chassis and Fabric Interconnect switch
//
//      Connects to: Cisco UCS Manager (XML API)
//
//

//
// HEADER

hdf.DisplayName="Cisco UCS Manager (Fabric Interconnect Switch)"
hdf.TypicalPlatform="Cisco UCS"
hdf.ReliesOn="Cisco UCS Manager (XML API)"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring for Cisco UCS Blade chassis (as well as the Cisco Fabric Interconnect Switch) through the UCS Manager (running on the Fabric Interconnect Switch)."
hdf.AppliesToOS="OOB"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"


// Only for type storage
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="OOB"

// Checks that Cisco UCS Manager responds
Detection.Criteria(2).Type="UCS"
Detection.Criteria(2).Query="SELECT dn FROM networkElement"
Detection.Criteria(2).ExpectedResult="^networkElement;sys/"
Detection.Criteria(2).ErrorMessage="Couldn't connect to UCS Manager on the Fabric Interconnect Switch."


//
//
// ENCLOSURES
//

//
// Discovery

// Source(1) = ALL UCS queries that we will need in later discoveries
// This is to "mutualize" the UCS connection
Enclosure.Discovery.Source(1).Type="UCS"
Enclosure.Discovery.Source(1).Query1="SELECT dn,model,serial FROM equipmentChassis"
Enclosure.Discovery.Source(1).Query2="SELECT dn,model,serial FROM networkElement"
Enclosure.Discovery.Source(1).Query3="SELECT presence,dn,model,serial,intType,tray,module,id FROM equipmentFan"
Enclosure.Discovery.Source(1).Query4="SELECT dn FROM equipmentFanStats"
Enclosure.Discovery.Source(1).Query5="SELECT presence,dn,model,vendor,serial FROM equipmentPsu"
Enclosure.Discovery.Source(1).Query6="SELECT dn,fanCtrlrInlet1,fanCtrlrInlet2,fanCtrlrInlet3,fanCtrlrInlet4,mainBoardOutlet1,mainBoardOutlet2 FROM swEnvStats"
Enclosure.Discovery.Source(1).Query7="SELECT dn,fmTempSenIo,fmTempSenRear FROM computeMbTempStats"
Enclosure.Discovery.Source(1).Query8="SELECT presence,dn,model,serial,slotId,usrLbl FROM computeBlade"
Enclosure.Discovery.Source(1).Query9="SELECT ifType,dn,ifRole,mac,operState,peerDn,portId,slotId,operSpeed FROM etherPIo"
Enclosure.Discovery.Source(1).Query10="SELECT ifType,dn,ifRole,wwn,operState,peerDn,portId,slotId,operSpeed FROM fcPIo"
Enclosure.Discovery.Source(1).Query11="SELECT model,productName FROM equipmentBladeBiosCapProvider"
Enclosure.Discovery.Source(1).Query12="SELECT dn,model,serial FROM equipmentFex"

// equipmentIOCard
// equipmentFex

// Source(2) = SELECT dn,model,serial FROM equipmentChassis
// Get that from Enclosure.Discovery.Source(1)
// DeviceID;Model;SerialNumber;
Enclosure.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).ValueList="equipmentChassis"
Enclosure.Discovery.Source(2).Compute(2).Type="KeepColumns"
Enclosure.Discovery.Source(2).Compute(2).ColumnNumbers="2,3,4"

// Add ";Blade" after SerialNumber
// DeviceID;Model;SerialNumber;EnclosureType;
Enclosure.Discovery.Source(2).Compute(3).Type="RightConcat"
Enclosure.Discovery.Source(2).Compute(3).Column=3
Enclosure.Discovery.Source(2).Compute(3).String=";Blade"

// Source(3) = SELECT dn,model,serial FROM networkElement
// Get that from Enclosure.Discovery.Source(1)
// DeviceID;Model;SerialNumber;
Enclosure.Discovery.Source(3)=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(3).Compute(1).Column=1
Enclosure.Discovery.Source(3).Compute(1).ValueList="networkElement,equipmentFex"
Enclosure.Discovery.Source(3).Compute(2).Type="KeepColumns"
Enclosure.Discovery.Source(3).Compute(2).ColumnNumbers="2,3,4"

// Add ";Switch" after SerialNumber
// DeviceID;Model;SerialNumber;EnclosureType;
Enclosure.Discovery.Source(3).Compute(3).Type="RightConcat"
Enclosure.Discovery.Source(3).Compute(3).Column=3
Enclosure.Discovery.Source(3).Compute(3).String=";Switch"


// Source(4) = Union of Source(2) and Source(3)
// DeviceID;Model;SerialNumber;EnclosureType;
Enclosure.Discovery.Source(4).Type="TableUnion"
Enclosure.Discovery.Source(4).Table1=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(4).Table2=%Enclosure.Discovery.Source(3)%

// Duplicate DeviceID to build DisplayID
// DeviceID;DisplayID;Model;SerialNumber;EnclosureType;
Enclosure.Discovery.Source(4).Compute(1).Type="DuplicateColumn"
Enclosure.Discovery.Source(4).Compute(1).Column=1

// Remove "sys/" from the DisplayID
// DeviceID;DisplayID;Model;SerialNumber;EnclosureType;
Enclosure.Discovery.Source(4).Compute(2).Type="Replace"
Enclosure.Discovery.Source(4).Compute(2).Column=2
Enclosure.Discovery.Source(4).Compute(2).Replace="sys/"
Enclosure.Discovery.Source(4).Compute(2).ReplaceBy=""

// Source(5) = Copy of Source(1) = SELECT model,productName FROM equipmentBladeBiosCapProvider
// modelCode;modelName;
Enclosure.Discovery.Source(5)=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(5).Compute(1).Column=1
Enclosure.Discovery.Source(5).Compute(1).ValueList="equipmentBladeBiosCapProvider"
Enclosure.Discovery.Source(5).Compute(2).Type="KeepColumns"
Enclosure.Discovery.Source(5).Compute(2).ColumnNumbers="2,3"

// Source(6) = TableJoint of Source(4) and Source(5) to translate the model code into a real model name
// DeviceID;DisplayID;Model;SerialNumber;EnclosureType;modelCode;modelName;
//Enclosure.Discovery.Source(6).Type="TableJoint"
//Enclosure.Discovery.Source(6).LeftTable=%Enclosure.Discovery.Source(4)%
//Enclosure.Discovery.Source(6).RightTable=%Enclosure.Discovery.Source(5)%
//Enclosure.Discovery.Source(6).LeftKeyColumn=3
//Enclosure.Discovery.Source(6).RightKeyColumn=1
//Enclosure.Discovery.Source(6).DefaultRightLine=";;"

// The discovery table = Source(4)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor="Cisco"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type=InstanceTable.Column(5)


//
// Collect

// Collect type: MultiInstance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = All UCS queries that we're going to make later
// Same principle as for the discovery. This is to limit the number of connections we do.
// Because the Cisco UCS 6120 switches are sensible things, you know.
Enclosure.Collect.Source(1).Type="UCS"
Enclosure.Collect.Source(1).Query1="SELECT dn,severity,cause FROM faultInst"
Enclosure.Collect.Source(1).Query2="SELECT dn,inputPower FROM equipmentChassisStats"
Enclosure.Collect.Source(1).Query3="SELECT dn,power FROM equipmentPsuInputStats"
Enclosure.Collect.Source(1).Query4="SELECT dn,speed FROM equipmentFanStats"
Enclosure.Collect.Source(1).Query5="SELECT dn,fanCtrlrInlet1,fanCtrlrInlet2,fanCtrlrInlet3,fanCtrlrInlet4,mainBoardOutlet1,mainBoardOutlet2 FROM swEnvStats"
Enclosure.Collect.Source(1).Query6="SELECT dn,fmTempSenIo,fmTempSenRear FROM computeMbTempStats"
Enclosure.Collect.Source(1).Query7="SELECT ifType,dn,operState,operSpeed FROM etherPIo"
Enclosure.Collect.Source(1).Query8="SELECT ifType,dn,operState,operSpeed FROM fcPIo"
Enclosure.Collect.Source(1).Query9="SELECT dn,totalBytes,totalPackets FROM etherRxStats"
Enclosure.Collect.Source(1).Query10="SELECT dn,totalBytes,totalPackets FROM etherTxStats"
Enclosure.Collect.Source(1).Query11="SELECT dn,bytesRx,packetsRx,bytesTx,packetsTx FROM fcStats"

// Source(2) = SELECT dn,severity,cause FROM faultInst
// FaultDeviceID;Severity;StatusInformation
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(2).Compute(1).Column=1
Enclosure.Collect.Source(2).Compute(1).ValueList="faultInst"
Enclosure.Collect.Source(2).Compute(2).Type="KeepColumns"
Enclosure.Collect.Source(2).Compute(2).ColumnNumbers="2,3,4"

// Extract the DeviceID from the FaultDeviceID by removing the /fault-... string
// DeviceID;Severity;StatusInformation;
Enclosure.Collect.Source(2).Compute(3).Type="Replace"
Enclosure.Collect.Source(2).Compute(3).Column=1
Enclosure.Collect.Source(2).Compute(3).Replace="/fault-"
Enclosure.Collect.Source(2).Compute(3).ReplaceBy=""

Enclosure.Collect.Source(2).Compute(4).Type="Extract"
Enclosure.Collect.Source(2).Compute(4).Column=1
Enclosure.Collect.Source(2).Compute(4).SubSeparators=""
Enclosure.Collect.Source(2).Compute(4).SubColumn=1

// Translate Severity into a PATROL Status
// DeviceID;Status;StatusInformation;
Enclosure.Collect.Source(2).Compute(5).Type="Translate"
Enclosure.Collect.Source(2).Compute(5).Column=2
Enclosure.Collect.Source(2).Compute(5).TranslationTable="faultInstSeverityTranslationTable"

// The faultInstSeverityTranslationTable
faultInstSeverityTranslationTable("info")="OK"
faultInstSeverityTranslationTable("minor")="OK"
faultInstSeverityTranslationTable("major")="ALARM"
faultInstSeverityTranslationTable("warning")="WARN"
faultInstSeverityTranslationTable("critical")="ALARM"
faultInstSeverityTranslationTable("cleared")="OK"
faultInstSeverityTranslationTable(Default)="UNKNOWN"

// Remove "link-down" lines, because it's not really an error
// DeviceID;Status;StatusInformation;
Enclosure.Collect.Source(2).Compute(6).Type="ExcludeMatchingLines"
Enclosure.Collect.Source(2).Compute(6).Column=3
Enclosure.Collect.Source(2).Compute(6).ValueList="link-down"

// Source(3) = Table joint of Enclosure.Discovery.Source(4) and Source(2)
// DeviceID;DisplayID;Model;SerialNumber;EnclosureType;DeviceID;Status;StatusInformation;
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Discovery.Source(4)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";OK;;"

// Source(4) = SELECT dn,inputPower FROM equipmentChassisStats
// EnclosureID/stats;Power;
Enclosure.Collect.Source(4)=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(4).Compute(1).Column=1
Enclosure.Collect.Source(4).Compute(1).ValueList="equipmentChassisStats"
Enclosure.Collect.Source(4).Compute(2).Type="KeepColumns"
Enclosure.Collect.Source(4).Compute(2).ColumnNumbers="2,3"

// Remove the "/stats" from the EnclosureID
// EnclosureID;Power;
Enclosure.Collect.Source(4).Compute(3).Type="Replace"
Enclosure.Collect.Source(4).Compute(3).Column=1
Enclosure.Collect.Source(4).Compute(3).Replace="/stats"
Enclosure.Collect.Source(4).Compute(3).ReplaceBy=""

// Source(5) = SELECT dn,power FROM equipmentPsuInputStats
// PsuID;Power;
Enclosure.Collect.Source(5)=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(5).Compute(1).Column=1
Enclosure.Collect.Source(5).Compute(1).ValueList="equipmentPsuInputStats"
Enclosure.Collect.Source(5).Compute(2).Type="KeepColumns"
Enclosure.Collect.Source(5).Compute(2).ColumnNumbers="2,3"

// Parse the result of equipmentPsuInputStats to sum up the power consumption per chassis
// EnclosureID;Power;
Enclosure.Collect.Source(5).Compute(3).Type="Awk"
Enclosure.Collect.Source(5).Compute(3).AwkScript=EmbeddedFile(2)
Enclosure.Collect.Source(5).Compute(3).KeepOnlyRegExp="^MSHW;"
Enclosure.Collect.Source(5).Compute(3).Separators=";"
Enclosure.Collect.Source(5).Compute(3).SelectColumns="2,3"

// Source(6) = Union of Source(4) and Source(5)
// EnclosureID;Power;
Enclosure.Collect.Source(6).Type="TableUnion"
Enclosure.Collect.Source(6).Table1=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(6).Table2=%Enclosure.Collect.Source(5)%

// Source(7) = Table joint of Source(3) and Source(6)
// DeviceID;DisplayID;Model;SerialNumber;EnclosureType;DeviceID;Status;StatusInformation;EnclosureID;Power;
Enclosure.Collect.Source(7).Type="TableJoint"
Enclosure.Collect.Source(7).LeftTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(7).RightTable=%Enclosure.Collect.Source(6)%
Enclosure.Collect.Source(7).LeftKeyColumn=1
Enclosure.Collect.Source(7).RightKeyColumn=1
Enclosure.Collect.Source(7).DefaultRightLine=";;"


// ValueTable=Source(7)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(7)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(7)
Enclosure.Collect.StatusInformation=ValueTable.Column(8)
Enclosure.Collect.PowerConsumption=ValueTable.Column(10)



//
// Fans
//

//
// Discovery

// Source(1) = SELECT dn,model FROM equipmentFan
// DeviceID;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).ValueList="equipmentFan"
Fan.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column=2
Fan.Discovery.Source(1).Compute(2).ValueList="equipped"
Fan.Discovery.Source(1).Compute(3).Type="KeepColumns"
Fan.Discovery.Source(1).Compute(3).ColumnNumbers="3,4,5,6,7,8,9"

// Duplicate DeviceID, twice
// DeviceID;DeviceID;DeviceID;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(4).Column=1
Fan.Discovery.Source(1).Compute(5).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(5).Column=1

// Extract the root from the DeviceID path in column(2)
// DeviceID;ParentID1;DeviceID;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(6).Type="Extract"
Fan.Discovery.Source(1).Compute(6).Column=2
Fan.Discovery.Source(1).Compute(6).SubSeparators="/"
Fan.Discovery.Source(1).Compute(6).SubColumn=1

// Extract the second-level element from the DeviceID path in column(3)
// DeviceID;ParentID1;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(7).Type="Extract"
Fan.Discovery.Source(1).Compute(7).Column=3
Fan.Discovery.Source(1).Compute(7).SubSeparators="/"
Fan.Discovery.Source(1).Compute(7).SubColumn=2

// Concat ParentID1 "/" ParentID2 to form ParentID
// DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(8).Type="RightConcat"
Fan.Discovery.Source(1).Compute(8).Column=2
Fan.Discovery.Source(1).Compute(8).String="/"

Fan.Discovery.Source(1).Compute(9).Type="RightConcat"
Fan.Discovery.Source(1).Compute(9).Column=2
Fan.Discovery.Source(1).Compute(9).String=Column(3)

// Build a good looking location string from location, tray, module and fanID
// DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(10).Type="RightConcat"
Fan.Discovery.Source(1).Compute(10).Column=6
Fan.Discovery.Source(1).Compute(10).String=", Tray "

Fan.Discovery.Source(1).Compute(11).Type="RightConcat"
Fan.Discovery.Source(1).Compute(11).Column=6
Fan.Discovery.Source(1).Compute(11).String=Column(7)

Fan.Discovery.Source(1).Compute(12).Type="RightConcat"
Fan.Discovery.Source(1).Compute(12).Column=6
Fan.Discovery.Source(1).Compute(12).String=", Module "

Fan.Discovery.Source(1).Compute(13).Type="RightConcat"
Fan.Discovery.Source(1).Compute(13).Column=6
Fan.Discovery.Source(1).Compute(13).String=Column(8)

Fan.Discovery.Source(1).Compute(14).Type="RightConcat"
Fan.Discovery.Source(1).Compute(14).Column=6
Fan.Discovery.Source(1).Compute(14).String=", Fan "

Fan.Discovery.Source(1).Compute(15).Type="RightConcat"
Fan.Discovery.Source(1).Compute(15).Column=6
Fan.Discovery.Source(1).Compute(15).String=Column(9)

// Duplicate DeviceID (again) to build DisplayID
// DeviceID;DeviceID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(16).Type="DuplicateColumn"
Fan.Discovery.Source(1).Compute(16).Column=1

// Remove the (useless) mention of ParentID in DeviceID, to build DisplayID
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(17).Type="Replace"
Fan.Discovery.Source(1).Compute(17).Column=2
Fan.Discovery.Source(1).Compute(17).Replace=Column(3)
Fan.Discovery.Source(1).Compute(17).ReplaceBy=""

// Remove the leading "/"
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;
Fan.Discovery.Source(1).Compute(18).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(18).Column=2
Fan.Discovery.Source(1).Compute(18).String="~"

Fan.Discovery.Source(1).Compute(19).Type="Replace"
Fan.Discovery.Source(1).Compute(19).Column=2
Fan.Discovery.Source(1).Compute(19).Replace="~/"
Fan.Discovery.Source(1).Compute(19).ReplaceBy=""

Fan.Discovery.Source(1).Compute(20).Type="Replace"
Fan.Discovery.Source(1).Compute(20).Column=2
Fan.Discovery.Source(1).Compute(20).Replace="~"
Fan.Discovery.Source(1).Compute(20).ReplaceBy=""


// Source(2) = SELECT dn FROM equipmentFanStats
// FanStatID;
Fan.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%
Fan.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(2).Compute(1).Column=1
Fan.Discovery.Source(2).Compute(1).ValueList="equipmentFanStats"
Fan.Discovery.Source(2).Compute(2).Type="KeepColumns"
Fan.Discovery.Source(2).Compute(2).ColumnNumbers="2"

// Remove the /stats in the FanStatID to get the FanDeviceID
// FanDeviceID;
Fan.Discovery.Source(2).Compute(3).Type="Replace"
Fan.Discovery.Source(2).Compute(3).Column=1
Fan.Discovery.Source(2).Compute(3).Replace="/stats"
Fan.Discovery.Source(2).Compute(3).ReplaceBy=""

// Source(3) = Table joint of Source(1) and Source(2)
// If we find a FanDeviceID (stats) in Source(2) matching with Source(1), then we activate the Speed parameter
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
Fan.Discovery.Source(3).Type="TableJoint"
Fan.Discovery.Source(3).LeftTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(3).RightTable=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(3).LeftKeyColumn=1
Fan.Discovery.Source(3).RightKeyColumn=1
Fan.Discovery.Source(3).DefaultRightLine=";"

// Exclude componnent in a "rack unit" as these are components from a rack server.
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
Fan.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(3).Compute(1).Column=1
Fan.Discovery.Source(3).Compute(1).RegExp="^sys/rack-unit"

// InstanceTable = Source(3)
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;HasStats;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(3)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
Fan.Discovery.Instance.Model=InstanceTable.Column(5)
Fan.Discovery.Instance.SerialNumber=InstanceTable.Column(6)
Fan.Discovery.Instance.FanType=InstanceTable.Column(7)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(11)


//
// Collect
Fan.Collect.Type="MultiInstance"

// Source(1) = Table joint of Fan.Discovery.Source(1) and Enclosure.Collect.Source(2)
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;DeviceID;Status;StatusInformation;
Fan.Collect.Source(1).Type="TableJoint"
Fan.Collect.Source(1).LeftTable=%Fan.Discovery.Source(1)%
Fan.Collect.Source(1).RightTable=%Enclosure.Collect.Source(2)%
Fan.Collect.Source(1).LeftKeyColumn=1
Fan.Collect.Source(1).RightKeyColumn=1
Fan.Collect.Source(1).DefaultRightLine=";OK;;"

// Source(2) = SELECT dn,speed FROM equipmentFanStats
// FanStatID;Speed;
Fan.Collect.Source(2)=%Enclosure.Collect.Source(1)%
Fan.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(2).Compute(1).Column=1
Fan.Collect.Source(2).Compute(1).ValueList="equipmentFanStats"
Fan.Collect.Source(2).Compute(2).Type="KeepColumns"
Fan.Collect.Source(2).Compute(2).ColumnNumbers="2,3"

// Remove the /stats in the FanStatID to get the FanDeviceID
// FanDeviceID;Speed;
Fan.Collect.Source(2).Compute(3).Type="Replace"
Fan.Collect.Source(2).Compute(3).Column=1
Fan.Collect.Source(2).Compute(3).Replace="/stats"
Fan.Collect.Source(2).Compute(3).ReplaceBy=""

// Source(3) = Table joint of Source(1) and Source(2)
// DeviceID;DisplayID;ParentID;ParentID2;Model;Serial;Location;Tray;Module;FanID;DeviceID;Status;StatusInformation;FanDeviceID;Speed;
Fan.Collect.Source(3).Type="TableJoint"
Fan.Collect.Source(3).LeftTable=%Fan.Collect.Source(1)%
Fan.Collect.Source(3).RightTable=%Fan.Collect.Source(2)%
Fan.Collect.Source(3).LeftKeyColumn=1
Fan.Collect.Source(3).RightKeyColumn=1
Fan.Collect.Source(3).DefaultRightLine=";;"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(3)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(12)
Fan.Collect.StatusInformation=ValueTable.Column(13)
Fan.Collect.Speed=ValueTable.Column(15)


//
// Power Supplies
//

//
// Discovery

// Source(1) = SELECT presence,dn,model,vendor,serial FROM equipmentPsu
// DeviceID;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).ValueList="equipmentPsu"
PowerSupply.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).ValueList="equipped"
PowerSupply.Discovery.Source(1).Compute(3).Type="KeepColumns"
PowerSupply.Discovery.Source(1).Compute(3).ColumnNumbers="3,4,5,6"

// Duplicate DeviceID, twice
// DeviceID;DeviceID;DeviceID;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(4).Column=1
PowerSupply.Discovery.Source(1).Compute(5).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(5).Column=1

// Extract the root from the DeviceID path in column(2)
// DeviceID;ParentID1;DeviceID;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(6).Type="Extract"
PowerSupply.Discovery.Source(1).Compute(6).Column=2
PowerSupply.Discovery.Source(1).Compute(6).SubSeparators="/"
PowerSupply.Discovery.Source(1).Compute(6).SubColumn=1

// Extract the second-level element from the DeviceID path in column(3)
// DeviceID;ParentID1;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(7).Type="Extract"
PowerSupply.Discovery.Source(1).Compute(7).Column=3
PowerSupply.Discovery.Source(1).Compute(7).SubSeparators="/"
PowerSupply.Discovery.Source(1).Compute(7).SubColumn=2

// Concat ParentID1 "/" ParentID2 to form ParentID
// DeviceID;ParentID;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(8).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(8).Column=2
PowerSupply.Discovery.Source(1).Compute(8).String="/"

PowerSupply.Discovery.Source(1).Compute(9).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(9).Column=2
PowerSupply.Discovery.Source(1).Compute(9).String=Column(3)

// Now, duplicate DeviceID to form DisplayID
// DeviceID;DeviceID;ParentID;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(10).Type="DuplicateColumn"
PowerSupply.Discovery.Source(1).Compute(10).Column=1

// Remove mentions of ParentID in DeviceID to get DisplayID
// DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(11).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(11).Column=2
PowerSupply.Discovery.Source(1).Compute(11).Replace=Column(3)
PowerSupply.Discovery.Source(1).Compute(11).ReplaceBy=""

// Remove the leading "/"
// DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(12).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(12).Column=2
PowerSupply.Discovery.Source(1).Compute(12).String="~"

PowerSupply.Discovery.Source(1).Compute(13).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(13).Column=2
PowerSupply.Discovery.Source(1).Compute(13).Replace="~/"
PowerSupply.Discovery.Source(1).Compute(13).ReplaceBy=""

PowerSupply.Discovery.Source(1).Compute(14).Type="Replace"
PowerSupply.Discovery.Source(1).Compute(14).Column=2
PowerSupply.Discovery.Source(1).Compute(14).Replace="~"
PowerSupply.Discovery.Source(1).Compute(14).ReplaceBy=""

// Exclude componnent in a "rack unit" as these are components from a rack server.
// DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;
PowerSupply.Discovery.Source(1).Compute(15).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(15).Column=1
PowerSupply.Discovery.Source(1).Compute(15).RegExp="^sys/rack-unit"

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(5)
PowerSupply.Discovery.Instance.SerialNumber=InstanceTable.Column(7)


//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = Table joint of PowerSupply.Discovery.Source(1) and Enclosure.Collect.Source(2)
// DeviceID;DisplayID;ParentID;ParentID2;Model;Vendor;SerialNumber;DeviceID;Status;StatusInformation;
PowerSupply.Collect.Source(1).Type="TableJoint"
PowerSupply.Collect.Source(1).LeftTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Collect.Source(1).RightTable=%Enclosure.Collect.Source(2)%
PowerSupply.Collect.Source(1).LeftKeyColumn=1
PowerSupply.Collect.Source(1).RightKeyColumn=1
PowerSupply.Collect.Source(1).DefaultRightLine=";OK;;"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(9)
PowerSupply.Collect.StatusInformation=ValueTable.Column(10)


//
// Temperatures
//

//
// Discovery

// Source(1) = SELECT dn,fanCtrlrInlet1,fanCtrlrInlet2,fanCtrlrInlet3,fanCtrlrInlet4,mainBoardOutlet1,mainBoardOutlet2 FROM swEnvStats
// swEnvStats;swEnvStatsID;fanCtrlrInlet1;fanCtrlrInlet2;fanCtrlrInlet3;fanCtrlrInlet4;mainBoardOutlet1;mainBoardOutlet2;
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).ValueList="swEnvStats"
Temperature.Discovery.Source(1).Compute(2).Type="KeepColumns"
Temperature.Discovery.Source(1).Compute(2).ColumnNumbers="1,2,3,4,5,6,7,8"

// Source(2) = SELECT dn,fmTempSenIo,fmTempSenRear FROM computeMbTempStats
// computeMbTempStats;tempStatsID;fmTempSenIo;fmTempSenRear;
Temperature.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%
Temperature.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=1
Temperature.Discovery.Source(2).Compute(1).ValueList="computeMbTempStats"
Temperature.Discovery.Source(2).Compute(2).Type="KeepColumns"
Temperature.Discovery.Source(2).Compute(2).ColumnNumbers="1,2,3,4"
Temperature.Discovery.Source(2).Compute(3).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(2).Compute(3).Column=3
Temperature.Discovery.Source(2).Compute(3).ValueList="not-applicable"
Temperature.Discovery.Source(2).Compute(4).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(2).Compute(4).Column=4
Temperature.Discovery.Source(2).Compute(4).ValueList="not-applicable"

// Source(3) = Union of Source(1), Source(2)
// Various formats to be processed by the awk script
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%


// Process these couple lines to have one line per temperature sensor
// TemperatureID;DisplayID;ParentID;Location;
Temperature.Discovery.Source(3).Compute(1).Type="Awk"
Temperature.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(3).Compute(1).Separators=";"
Temperature.Discovery.Source(3).Compute(1).SelectColumns="2,3,4,5"

// Exclude componnent in a "rack unit" as these are components from a rack server.
// TemperatureID;DisplayID;ParentID;Location;
Temperature.Discovery.Source(3).Compute(2).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(3).Compute(2).Column=1
Temperature.Discovery.Source(3).Compute(2).RegExp="^sys/rack-unit"

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(4)


//
// Collect

// Collect type is: multiinstance
Temperature.Collect.Type="MultiInstance"

// Source(1) = SELECT dn,fanCtrlrInlet1,fanCtrlrInlet2,fanCtrlrInlet3,fanCtrlrInlet4,mainBoardOutlet1,mainBoardOutlet2 FROM swEnvStats
// SwitchEnclosureID;fanCtrlrInlet1;fanCtrlrInlet2;fanCtrlrInlet3;fanCtrlrInlet4;mainBoardOutlet1;mainBoardOutlet2;
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(1)%
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).ValueList="swEnvStats"
Temperature.Collect.Source(1).Compute(2).Type="KeepColumns"
Temperature.Collect.Source(1).Compute(2).ColumnNumbers="1,2,3,4,5,6,7,8"

// Source(2) = SELECT dn,fmTempSenIo,fmTempSenRear FROM computeMbTempStats
// computeMbTempStats;tempStatsID;fmTempSenIo;fmTempSenRear;
Temperature.Collect.Source(2)=%Enclosure.Collect.Source(1)%
Temperature.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(2).Compute(1).Column=1
Temperature.Collect.Source(2).Compute(1).ValueList="computeMbTempStats"
Temperature.Collect.Source(2).Compute(2).Type="KeepColumns"
Temperature.Collect.Source(2).Compute(2).ColumnNumbers="1,2,3,4"

// Source(3) = Union of Source(1), Source(2)
// Various formats to be processed by the awk script
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Discovery.Source(2)%

// Process these couple lines to have one line per temperature sensor
// DeviceID;Temperature;
Temperature.Collect.Source(3).Compute(1).Type="Awk"
Temperature.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Temperature.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Collect.Source(3).Compute(1).Separators=";"
Temperature.Collect.Source(3).Compute(1).SelectColumns="2,6"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)



//
// Blades
//

//
// Discovery

// Source(1) = SELECT presence,dn,model,serial,slotId,usrLbl FROM computeBlade
// BladeID;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%
Blade.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(1).Compute(1).Column=1
Blade.Discovery.Source(1).Compute(1).ValueList="computeBlade"
Blade.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Blade.Discovery.Source(1).Compute(2).Column=2
Blade.Discovery.Source(1).Compute(2).ValueList="equipped"

Blade.Discovery.Source(1).Compute(3).Type="KeepColumns"
Blade.Discovery.Source(1).Compute(3).ColumnNumbers="3,4,5,6,7"

// Duplicate BladeID, twice
// BladeID;BladeID;BladeID;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Blade.Discovery.Source(1).Compute(4).Column=1

Blade.Discovery.Source(1).Compute(5).Type="DuplicateColumn"
Blade.Discovery.Source(1).Compute(5).Column=1

// Extract the root from the BladeID path in column(2)
// BladeID;ParentID1;BladeID;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(6).Type="Extract"
Blade.Discovery.Source(1).Compute(6).Column=2
Blade.Discovery.Source(1).Compute(6).SubSeparators="/"
Blade.Discovery.Source(1).Compute(6).SubColumn=1

// Extract the second-level element from the DeviceID path in column(3)
// BladeID;ParentID1;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(7).Type="Extract"
Blade.Discovery.Source(1).Compute(7).Column=3
Blade.Discovery.Source(1).Compute(7).SubSeparators="/"
Blade.Discovery.Source(1).Compute(7).SubColumn=2

// Concat ParentID1 "/" ParentID2 to form ParentID
// BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(8).Type="RightConcat"
Blade.Discovery.Source(1).Compute(8).Column=2
Blade.Discovery.Source(1).Compute(8).String="/"

Blade.Discovery.Source(1).Compute(9).Type="RightConcat"
Blade.Discovery.Source(1).Compute(9).Column=2
Blade.Discovery.Source(1).Compute(9).String=Column(3)

// Add "Slot " in from of the location column
// BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(10).Type="LeftConcat"
Blade.Discovery.Source(1).Compute(10).Column=6
Blade.Discovery.Source(1).Compute(10).String="Location: "

// Duplicate BladeID to form DisplayID
// BladeID;BladeID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(11).Type="DuplicateColumn"
Blade.Discovery.Source(1).Compute(11).Column=1

// Remove mentions of ParentID in BladeID to obtain DisplayID
// BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(12).Type="Replace"
Blade.Discovery.Source(1).Compute(12).Column=2
Blade.Discovery.Source(1).Compute(12).Replace=Column(3)
Blade.Discovery.Source(1).Compute(12).ReplaceBy=""

// Remove the leading "/" from DisplayID
// BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;
Blade.Discovery.Source(1).Compute(13).Type="Replace"
Blade.Discovery.Source(1).Compute(13).Column=2
Blade.Discovery.Source(1).Compute(13).Replace="/"
Blade.Discovery.Source(1).Compute(13).ReplaceBy=""

// Source(2) = Table Joint of Source(1) and Enclosure.Discovery.Source(5)
// This is to retrieve the actual model name, instead of the cryptic model code
// BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;modelCode;modelName;
Blade.Discovery.Source(2).Type="TableJoint"
Blade.Discovery.Source(2).LeftTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(5)%
Blade.Discovery.Source(2).LeftKeyColumn=5
Blade.Discovery.Source(2).RightKeyColumn=1
Blade.Discovery.Source(2).DefaultRightLine=";;"

Blade.Discovery.Source(2).Compute(1).Type="LeftConcat"
Blade.Discovery.Source(2).Compute(1).Column=4
Blade.Discovery.Source(2).Compute(1).String="Parent ID: "

// InstanceTable = Source(1)
// BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;modelCode;modelName;
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(2)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Blade.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Blade.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
Blade.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Blade.Discovery.Instance.BladeName=InstanceTable.Column(8)
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(10)
Blade.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
Blade.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)


//
// Collect

// Collect type is multi-instance
Blade.Collect.Type="MultiInstance"

// Source(1) = Table joint of PowerSupply.Discovery.Source(1) and Enclosure.Collect.Source(1)
// BladeID;DisplayID;ParentID;ParentID2;Model;SerialNumber;Location;usrLbl;DeviceID;Status;StatusInformation;
Blade.Collect.Source(1).Type="TableJoint"
Blade.Collect.Source(1).LeftTable=%Blade.Discovery.Source(1)%
Blade.Collect.Source(1).RightTable=%Enclosure.Collect.Source(2)%
Blade.Collect.Source(1).LeftKeyColumn=1
Blade.Collect.Source(1).RightKeyColumn=1
Blade.Collect.Source(1).DefaultRightLine=";OK;"

// ValueTable = Source(1)
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(1)
Blade.Collect.Status=ValueTable.Column(10)
Blade.Collect.StatusInformation=ValueTable.Column(11)



//
// Network Ports (Ethernet and FC)
//

//
// Discovery

// Source(1) = SELECT ifType,dn,ifRole,mac,operState,peerDn,portId,slotId,operSpeed FROM etherPIo
// NetworkCardID;Type;PhysicalAddress;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%
NetworkCard.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=1
NetworkCard.Discovery.Source(1).Compute(1).ValueList="etherPIo"
NetworkCard.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(1).Compute(2).Column=2
NetworkCard.Discovery.Source(1).Compute(2).ValueList="physical"
NetworkCard.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(3).Column=6
NetworkCard.Discovery.Source(1).Compute(3).ValueList="sfp-not-present"
NetworkCard.Discovery.Source(1).Compute(4).Type="KeepColumns"
NetworkCard.Discovery.Source(1).Compute(4).ColumnNumbers="3,4,5,6,7,8,9,10"

// Translate Type into a DeviceType
// NetworkCardID;DeviceType;PhysicalAddress;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(1).Compute(5).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(5).Column=2
NetworkCard.Discovery.Source(1).Compute(5).TranslationTable="EthernetTypeTranslationTable"

// The EthernetTypeTranslationTable
EthernetTypeTranslationTable("server")="Ethernet Port (Server)"
EthernetTypeTranslationTable("network")="Ethernet Port (Uplink)"
EthernetTypeTranslationTable("mgmt")="Ethernet Port (Management)"
EthernetTypeTranslationTable(Default)="Ethernet Port"

// Add "MAC" as the PhysicalAddressType
// NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(1).Compute(6).Type="RightConcat"
NetworkCard.Discovery.Source(1).Compute(6).Column=3
NetworkCard.Discovery.Source(1).Compute(6).String=";MAC"

// Source(2) = SELECT ifType,dn,ifRole,wwn,operState,peerDn,portId,slotId,operSpeed FROM fcPIo
// NetworkCardID;Type;PhysicalAddress;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(2)=%Enclosure.Discovery.Source(1)%
NetworkCard.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(2).Compute(1).Column=1
NetworkCard.Discovery.Source(2).Compute(1).ValueList="fcPIo"
NetworkCard.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
NetworkCard.Discovery.Source(2).Compute(2).Column=2
NetworkCard.Discovery.Source(2).Compute(2).ValueList="physical"
NetworkCard.Discovery.Source(2).Compute(3).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(2).Compute(3).Column=6
NetworkCard.Discovery.Source(2).Compute(3).ValueList="sfp-not-present"
NetworkCard.Discovery.Source(2).Compute(4).Type="KeepColumns"
NetworkCard.Discovery.Source(2).Compute(4).ColumnNumbers="3,4,5,6,7,8,9,10"

// Translate Type into a DeviceType
// NetworkCardID;DeviceType;PhysicalAddress;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(2).Compute(5).Type="Translate"
NetworkCard.Discovery.Source(2).Compute(5).Column=2
NetworkCard.Discovery.Source(2).Compute(5).TranslationTable="FCTypeTranslationTable"

// The FCTypeTranslationTable
FCTypeTranslationTable("server")="FC Port (Server)"
FCTypeTranslationTable("network")="FC Port (Uplink)"
FCTypeTranslationTable("mgmt")="FC Port (Management)"
FCTypeTranslationTable(Default)="FC Port"

// Add "WWN" as the PhysicalAddressType
// NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(2).Compute(6).Type="RightConcat"
NetworkCard.Discovery.Source(2).Compute(6).Column=3
NetworkCard.Discovery.Source(2).Compute(6).String=";WWN"

// Source(3) = Union of Source(1) and Source(2)
// NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Type="TableUnion"
NetworkCard.Discovery.Source(3).Table1=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(3).Table2=%NetworkCard.Discovery.Source(2)%

// Duplicate NetworkCardID, twice
// NetworkCardID;NetworkCardID;NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(1).Type="DuplicateColumn"
NetworkCard.Discovery.Source(3).Compute(1).Column=1
NetworkCard.Discovery.Source(3).Compute(2).Type="DuplicateColumn"
NetworkCard.Discovery.Source(3).Compute(2).Column=1

// Extract the root from the NetworkCardID path in column(2)
// NetworkCardID;ParentID1;NetworkCardID;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(3).Type="Extract"
NetworkCard.Discovery.Source(3).Compute(3).Column=2
NetworkCard.Discovery.Source(3).Compute(3).SubSeparators="/"
NetworkCard.Discovery.Source(3).Compute(3).SubColumn=1

// Extract the second-level element from the DeviceID path in column(3)
// NetworkCardID;ParentID1;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(4).Type="Extract"
NetworkCard.Discovery.Source(3).Compute(4).Column=3
NetworkCard.Discovery.Source(3).Compute(4).SubSeparators="/"
NetworkCard.Discovery.Source(3).Compute(4).SubColumn=2

// Concat ParentID1 "/" ParentID2 to form ParentID
// NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;PortNumber;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(5).Type="RightConcat"
NetworkCard.Discovery.Source(3).Compute(5).Column=2
NetworkCard.Discovery.Source(3).Compute(5).String="/"

NetworkCard.Discovery.Source(3).Compute(6).Type="RightConcat"
NetworkCard.Discovery.Source(3).Compute(6).Column=2
NetworkCard.Discovery.Source(3).Compute(6).String=Column(3)

// Build a location string from PortNumber and SlotNumber
// NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(7).Type="LeftConcat"
NetworkCard.Discovery.Source(3).Compute(7).Column=9
NetworkCard.Discovery.Source(3).Compute(7).String=" - Port: "

NetworkCard.Discovery.Source(3).Compute(8).Type="LeftConcat"
NetworkCard.Discovery.Source(3).Compute(8).Column=9
NetworkCard.Discovery.Source(3).Compute(8).String=Column(10)

NetworkCard.Discovery.Source(3).Compute(9).Type="LeftConcat"
NetworkCard.Discovery.Source(3).Compute(9).Column=9
NetworkCard.Discovery.Source(3).Compute(9).String="Location: "

// Duplicate NetworkCardID to build DisplayID
// NetworkCardID;NetworkCardID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(10).Type="DuplicateColumn"
NetworkCard.Discovery.Source(3).Compute(10).Column=1

// Remove mentions of ParentID in NetworkCardID to get DisplayID
// NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(11).Type="Replace"
NetworkCard.Discovery.Source(3).Compute(11).Column=2
NetworkCard.Discovery.Source(3).Compute(11).Replace=Column(3)
NetworkCard.Discovery.Source(3).Compute(11).ReplaceBy=""

// Remove the leading "/"
// NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
NetworkCard.Discovery.Source(3).Compute(12).Type="LeftConcat"
NetworkCard.Discovery.Source(3).Compute(12).Column=2
NetworkCard.Discovery.Source(3).Compute(12).String="~"

NetworkCard.Discovery.Source(3).Compute(13).Type="Replace"
NetworkCard.Discovery.Source(3).Compute(13).Column=2
NetworkCard.Discovery.Source(3).Compute(13).Replace="~/"
NetworkCard.Discovery.Source(3).Compute(13).ReplaceBy=""

NetworkCard.Discovery.Source(3).Compute(14).Type="Replace"
NetworkCard.Discovery.Source(3).Compute(14).Column=2
NetworkCard.Discovery.Source(3).Compute(14).Replace="~"
NetworkCard.Discovery.Source(3).Compute(14).ReplaceBy=""

// InstanceTable = Source(3)
// NetworkCardID;DisplayID;ParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.PhysicalAddressType=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.RemotePhysicalAddress=InstanceTable.Column(9)
NetworkCard.Discovery.Instance.RemotePhysicalAddressType="UCS ID"
NetworkCard.Discovery.Instance.Model=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.ParameterActivation.LinkSpeed=InstanceTable.Column(12)

//
// Collect

// Collect type is multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = Table joint of NetworkCard.Discovery.Source(1) and Enclosure.Collect.Source(1)
// NetworkCardID;DisplayIDParentID;ParentID2;DeviceType;PhysicalAddress;PhysicalAddressType;State;RemotePhysicalAddress;Location;SlotNumber;Speed;DeviceID;Status;StatusInformation;
NetworkCard.Collect.Source(1).Type="TableJoint"
NetworkCard.Collect.Source(1).LeftTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Collect.Source(1).RightTable=%Enclosure.Collect.Source(2)%
NetworkCard.Collect.Source(1).LeftKeyColumn=1
NetworkCard.Collect.Source(1).RightKeyColumn=1
NetworkCard.Collect.Source(1).DefaultRightLine=";OK;;"

// For easier reading, we're going to remove all unnecessary columns
// NetworkCardID;Status;StatusInformation;
NetworkCard.Collect.Source(1).Compute(1).Type="KeepColumns"
NetworkCard.Collect.Source(1).Compute(1).ColumnNumbers="1,14,15"

// Source(2) = SELECT ifType,dn,operState,operSpeed FROM portPIo
// NetworkCardID;State;SpeedGbps
NetworkCard.Collect.Source(2)=%Enclosure.Collect.Source(1)%
NetworkCard.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(2).Compute(1).Column=1
NetworkCard.Collect.Source(2).Compute(1).ValueList="etherPIo,fcPIo"
NetworkCard.Collect.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(2).Compute(2).Column=2
NetworkCard.Collect.Source(2).Compute(2).ValueList="physical"
NetworkCard.Collect.Source(2).Compute(3).Type="ExcludeMatchingLines"
NetworkCard.Collect.Source(2).Compute(3).Column=4
NetworkCard.Collect.Source(2).Compute(3).ValueList="sfp-not-present"
NetworkCard.Collect.Source(2).Compute(4).Type="KeepColumns"
NetworkCard.Collect.Source(2).Compute(4).ColumnNumbers="3,4,5"

// Translate operState to LinkStatus
// NetworkCardID;LinkStatus;SpeedGbps
NetworkCard.Collect.Source(2).Compute(5).Type="Translate"
NetworkCard.Collect.Source(2).Compute(5).Column=2
NetworkCard.Collect.Source(2).Compute(5).TranslationTable="LinkStatusTranslationTable"

// The LinkStatusTranslationTable
LinkStatusTranslationTable("link-down")="WARN"
LinkStatusTranslationTable(Default)="OK"

// Remove the "gbps" from the SpeedGbps column
// NetworkCardID;LinkStatus;LinkSpeed;
NetworkCard.Collect.Source(2).Compute(6).Type="Replace"
NetworkCard.Collect.Source(2).Compute(6).Column=3
NetworkCard.Collect.Source(2).Compute(6).Replace="gbps"
NetworkCard.Collect.Source(2).Compute(6).ReplaceBy="000"

// Same for "mbps", even though we haven't seen it during our tests
// NetworkCardID;LinkStatus;LinkSpeed;
NetworkCard.Collect.Source(2).Compute(7).Type="Replace"
NetworkCard.Collect.Source(2).Compute(7).Column=3
NetworkCard.Collect.Source(2).Compute(7).Replace="mbps"
NetworkCard.Collect.Source(2).Compute(7).ReplaceBy=""

// Change "indeterminate" for an empty string (as we don't have anything better)
// NetworkCardID;LinkStatus;LinkSpeed;
NetworkCard.Collect.Source(2).Compute(8).Type="Replace"
NetworkCard.Collect.Source(2).Compute(8).Column=3
NetworkCard.Collect.Source(2).Compute(8).Replace="indeterminate"
NetworkCard.Collect.Source(2).Compute(8).ReplaceBy=""


// Source(3) = Table Joint of Source(1) and Source(2)
// NetworkCardID;Status;StatusInformation;NetworkCardID;LinkStatus;LinkSpeed;
NetworkCard.Collect.Source(3).Type="TableJoint"
NetworkCard.Collect.Source(3).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(3).LeftKeyColumn=1
NetworkCard.Collect.Source(3).RightKeyColumn=1

// Source(4) = SELECT dn,totalBytes,totalPackets FROM etherRxStats
// NetworkCardID/rx-stats;ReceivedBytes;ReceivedPackets;
NetworkCard.Collect.Source(4)=%Enclosure.Collect.Source(1)%
NetworkCard.Collect.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(4).Compute(1).Column=1
NetworkCard.Collect.Source(4).Compute(1).ValueList="etherRxStats"
NetworkCard.Collect.Source(4).Compute(2).Type="KeepColumns"
NetworkCard.Collect.Source(4).Compute(2).ColumnNumbers="2,3,4"

// Remove the /rx-stats from the ID
// NetworkCardID;ReceivedBytes;ReceivedPackets;
NetworkCard.Collect.Source(4).Compute(3).Type="Replace"
NetworkCard.Collect.Source(4).Compute(3).Column=1
NetworkCard.Collect.Source(4).Compute(3).Replace="/rx-stats"
NetworkCard.Collect.Source(4).Compute(3).ReplaceBy=""

// Source(5) = SELECT dn,totalBytes,totalPackets FROM etherTxStats
// NetworkCardID/tx-stats;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(5)=%Enclosure.Collect.Source(1)%
NetworkCard.Collect.Source(5).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(5).Compute(1).Column=1
NetworkCard.Collect.Source(5).Compute(1).ValueList="etherTxStats"
NetworkCard.Collect.Source(5).Compute(2).Type="KeepColumns"
NetworkCard.Collect.Source(5).Compute(2).ColumnNumbers="2,3,4"

// Remove the /tx-stats from the ID
// NetworkCardID;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(5).Compute(3).Type="Replace"
NetworkCard.Collect.Source(5).Compute(3).Column=1
NetworkCard.Collect.Source(5).Compute(3).Replace="/tx-stats"
NetworkCard.Collect.Source(5).Compute(3).ReplaceBy=""

// Source(6) = Table joint of Source(4) and Source(5)
// NetworkCardID;ReceivedBytes;ReceivedPackets;NetworkCardID;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(6).Type="TableJoint"
NetworkCard.Collect.Source(6).LeftTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(6).RightTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.Source(6).LeftKeyColumn=1
NetworkCard.Collect.Source(6).RightKeyColumn=1

// Keep only useful columns that will match with what we get from fcStats
// NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(6).Compute(1).Type="KeepColumns"
NetworkCard.Collect.Source(6).Compute(1).ColumnNumbers="1,2,3,5,6"

// Source(7) = SELECT dn,bytesRx,packetsRx,bytesTx,packetsTx FROM fcStats
// NetworkCardID/stats;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(7)=%Enclosure.Collect.Source(1)%
NetworkCard.Collect.Source(7).Compute(1).Type="KeepOnlyMatchingLines"
NetworkCard.Collect.Source(7).Compute(1).Column=1
NetworkCard.Collect.Source(7).Compute(1).ValueList="fcStats"
NetworkCard.Collect.Source(7).Compute(2).Type="KeepColumns"
NetworkCard.Collect.Source(7).Compute(2).ColumnNumbers="2,3,4,5,6"

// Remove the /stats from the ID
// NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(7).Compute(3).Type="Replace"
NetworkCard.Collect.Source(7).Compute(3).Column=1
NetworkCard.Collect.Source(7).Compute(3).Replace="/stats"
NetworkCard.Collect.Source(7).Compute(3).ReplaceBy=""

// Source(8) = Table Union of Source(6) and Source(7)
// NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittedBytes;TransmittedPackets;
NetworkCard.Collect.Source(8).Type="TableUnion"
NetworkCard.Collect.Source(8).Table1=%NetworkCard.Collect.Source(6)%
NetworkCard.Collect.Source(8).Table2=%NetworkCard.Collect.Source(7)%

// Source(9) = Table Joint of Source(3) and Source(8)
// NetworkCardID;Status;StatusInformation;NetworkCardID;LinkStatus;LinkSpeed;NetworkCardID;ReceivedBytes;ReceivedPackets;TransmittededBytes;TransmittedPackets;
NetworkCard.Collect.Source(9).Type="TableJoint"
NetworkCard.Collect.Source(9).LeftTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.Source(9).RightTable=%NetworkCard.Collect.Source(8)%
NetworkCard.Collect.Source(9).LeftKeyColumn=1
NetworkCard.Collect.Source(9).RightKeyColumn=1

// ValueTable = Source(9)
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(9)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(2)
NetworkCard.Collect.StatusInformation=ValueTable.Column(3)
NetworkCard.Collect.LinkStatus=ValueTable.Column(5)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(6)
NetworkCard.Collect.DuplexMode="full"
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(8)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(9)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(10)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(11)




/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that takes swEnvStats instances
///						           and returns a line per temperature sensor
///						           (instead of having 6 sensors in the same line)
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN { FS = ";" }
/^swEnvStats;/ {
	split($2, pathArray, "/");
	parentID = pathArray[1] "/" pathArray[2];

	if ($3 ~ /^[0-9]/) { print "MSHW;" parentID "/fanCtrlrInlet1;fanCtrlrInlet1;" parentID ";Fan Controller Inlet 1;" $3 }
	if ($4 ~ /^[0-9]/) { print "MSHW;" parentID "/fanCtrlrInlet2;fanCtrlrInlet2;" parentID ";Fan Controller Inlet 2;" $4 }
	if ($5 ~ /^[0-9]/) { print "MSHW;" parentID "/fanCtrlrInlet3;fanCtrlrInlet3;" parentID ";Fan Controller Inlet 3;" $5 }
	if ($6 ~ /^[0-9]/) { print "MSHW;" parentID "/fanCtrlrInlet4;fanCtrlrInlet4;" parentID ";Fan Controller Inlet 4;" $6 }
	if ($7 ~ /^[0-9]/) { print "MSHW;" parentID "/mainBoardOutlet1;mainBoardOutlet1;" parentID ";Main Board Outlet 1;" $7 }
	if ($8 ~ /^[0-9]/) { print "MSHW;" parentID "/mainBoardOutlet2;mainBoardOutlet2;" parentID ";Main Board Outlet 2;" $8 }

}
/^computeMbTempStats;/ {
	split($2, pathArray, "/");
	parentID = pathArray[1] "/" pathArray[2];
	bladeID = pathArray[3];

	print "MSHW;" parentID "/" bladeID "/fmTempSenIo;" bladeID "/fmTempSenIo;" parentID ";" bladeID " - MB Front;" $3
	print "MSHW;" parentID "/" bladeID "/fmTempSenRear;" bladeID "/fmTempSenRead;" parentID ";" bladeID " - MB Rear;" $4

}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that takes equipmentPsuInputStats (per PSU)
///						           and returns a line per chassis with its power consumption
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {
	FS = ";"
	split(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", enclosureNameArray, ";");
	split(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", enclosurePowerArray, ";");
	enclosureCount = 0;
}
/.+;[0-9]+/ {
	split($1, pathArray, "/");
	enclosureID = pathArray[1] "/" pathArray[2];
	enclosureAlreadyListed = 0;
	for (i=1 ; i<=enclosureCount ; i++)
	{
		if (enclosureNameArray[i] == enclosureID)
		{
			enclosureAlreadyListed = 1;
			enclosurePowerArray[i] = enclosurePowerArray[i] + $2;
		}
	}
	if (enclosureAlreadyListed == 0)
	{
		enclosureCount++;
		enclosureNameArray[enclosureCount] = enclosureID;
		enclosurePowerArray[enclosureCount] = $2;
	}
}
END {
	for (i=1 ; i<=enclosureCount ; i++)
	{
		print "MSHW;" enclosureNameArray[i] ";" enclosurePowerArray[i] ";"
	}
}
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////
