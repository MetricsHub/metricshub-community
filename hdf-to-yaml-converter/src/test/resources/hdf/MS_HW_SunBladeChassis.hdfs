//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//             MS_HW_SUNBladeChassis.hdf
//
//         Supports: Sun Blade Chassis via the CMM card.
//
//

// HEADER

hdf.DisplayName="Oracle/Sun Blade Chassis"
hdf.TypicalPlatform="Oracle/Sun Blade"
hdf.ReliesOn="Sun Blade Chassis CMM SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring for the Sun Blade Chassis through the CMM SNMP Agent."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

// DETECTION
// Does a get to see if there is some chassis information
// This was purposefully changed to instance 2 as some Chassis have an "unknown" value at one

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGet="1.3.6.1.4.1.42.2.70.101.1.1.2.1.5.2"
Detection.Criteria(1).ExpectedResult="^/CH"


// Blocks new SUN ILOM SNMP connector
hdf.Supersedes="MS_HW_SunILOMSNMP.hdf"

//
// ENCLOSURES
//
//
// Discovery

// Getting the Master Sensor list table.  This will be used everywhere else to apply names to IDs.

Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,5,3"

// Getting rid of tags we don't want

Enclosure.Discovery.Source(1).Compute(1).Type="Replace"
Enclosure.Discovery.Source(1).Compute(1).Column="2"
Enclosure.Discovery.Source(1).Compute(1).Replace="/CH/"
Enclosure.Discovery.Source(1).Compute(1).ReplaceBy=""

Enclosure.Discovery.Source(1).Compute(2).Type="Replace"
Enclosure.Discovery.Source(1).Compute(2).Column="2"
Enclosure.Discovery.Source(1).Compute(2).Replace="/SPEED"
Enclosure.Discovery.Source(1).Compute(2).ReplaceBy=""


// Getting the first line (/CH) to create the Chassis

// Enclosure.Discovery.Source(2).Type="SnmpGet"
// Enclosure.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1.5.1"

// The InstanceTable - Faked as we just want a chassis of any description.
Enclosure.Discovery.InstanceTable="/CH"
Enclosure.Discovery.Instance.DeviceID="/CH"
Enclosure.Discovery.Instance.Vendor="Sun"
Enclosure.Discovery.Instance.Model="Blade Chassis"
// Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
// Enclosure.Discovery.Instance.Type=InstanceTable.Column(4)

//
// TEMPERATURES

// Temperature discovery

// Source(1) = sunPlatSensorTable
// ID;Sensor Type
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Keep Only Sensors of type 3 (Temperatures)
// ID;Sensor Type
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=2
Temperature.Discovery.Source(1).Compute(1).ValueList="3"

// Source(2) = sunPlatNumericSensorTable
// ID;Warn Threshold;Alarm Threshold
Temperature.Discovery.Source(2).Type="SnmpTable"
Temperature.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Temperature.Discovery.Source(2).SnmpTableSelectColumns="ID,11,13"

// Exclude lines with Zero thresholds
// ID;Warn Threshold;Alarm Threshold
Temperature.Discovery.Source(2).Compute(1).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=3
Temperature.Discovery.Source(2).Compute(1).ValueList="0"

// Source(3) = Table joint of Source(1) and Source(2)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold
Temperature.Discovery.Source(3).Type="TableJoint"
Temperature.Discovery.Source(3).LeftTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).RightTable=%Temperature.Discovery.Source(2)%
Temperature.Discovery.Source(3).LeftKeyColumn=1
Temperature.Discovery.Source(3).RightKeyColumn=1
Temperature.Discovery.Source(3).DefaultRightLine=";;;"

// Source(4) = Table joint of Source(1) and Source(2)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;
Temperature.Discovery.Source(4).Type="TableJoint"
Temperature.Discovery.Source(4).LeftTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(1)%
Temperature.Discovery.Source(4).LeftKeyColumn=1
Temperature.Discovery.Source(4).RightKeyColumn=1
Temperature.Discovery.Source(4).DefaultRightLine=";;"


// InstanceTable = Source(4)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(4)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(7)



//
// COLLECT
//
// Collect type is "multi-instance"
Temperature.Collect.Type="MultiInstance"

// Source(1) = sunPlatNumericSensorTable
// ID;Temperature
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,4"

// Source(2) = Table joint of Source(1) and Discovery Table
// ID;Temperature;ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name
Temperature.Collect.Source(2).Type="TableJoint"
Temperature.Collect.Source(2).LeftTable=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(2).RightTable=%Temperature.Discovery.Source(4)%
Temperature.Collect.Source(2).LeftKeyColumn=1
Temperature.Collect.Source(2).RightKeyColumn=1

// The ValueTable
// ID;Temperature;ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name
Temperature.Collect.ValueTable=%Temperature.Collect.Source(2)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)

//
// FanS

//  INDIVIDUAL FANS
//  Now going to get a list of individual fans, located within fan modules.

// Source(1) = sunPlatSensorTable
// ID;Sensor Type
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Keep Only Sensors of type 6 (Fans / Tachometers)
// ID;Sensor Type
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).ValueList="6"

// Source(2) = sunPlatNumericSensorTable
// ID;Warn Threshold;Alarm Threshold;Critical Threshold
Fan.Discovery.Source(2).Type="SnmpTable"
Fan.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Fan.Discovery.Source(2).SnmpTableSelectColumns="ID,8,10,12"

// Replace Lower Critical with Lower Fatal if Lower Critical = 0
// Using a left concat, replace of Zero only values, then remove for non 0
// ID;Warn Threshold;Alarm Threshold;Critical Threshold

Fan.Discovery.Source(2).Compute(1).Type="LeftConcat"
Fan.Discovery.Source(2).Compute(1).Column="3"
Fan.Discovery.Source(2).Compute(1).String="MSHW_"

Fan.Discovery.Source(2).Compute(2).Type="Replace"
Fan.Discovery.Source(2).Compute(2).Column="3"
Fan.Discovery.Source(2).Compute(2).Replace="MSHW_0"
Fan.Discovery.Source(2).Compute(2).ReplaceBy=Column(4)

Fan.Discovery.Source(2).Compute(3).Type="Replace"
Fan.Discovery.Source(2).Compute(3).Column="3"
Fan.Discovery.Source(2).Compute(3).Replace="MSHW_"
Fan.Discovery.Source(2).Compute(3).ReplaceBy=""

// Exclude lines with Zero thresholds
// ID;Warn Threshold;Alarm Threshold;Critical Threshold
Fan.Discovery.Source(2).Compute(4).Type="ExcludeMatchingLines"
Fan.Discovery.Source(2).Compute(4).Column=3
Fan.Discovery.Source(2).Compute(4).ValueList="0"

// Remove the Critical Threshold Column
// ID;Warn Threshold;Alarm Threshold
Fan.Discovery.Source(2).Compute(5).Type="KeepColumns"
Fan.Discovery.Source(2).Compute(5).ColumnNumbers="1,2,3"

// Removes Zero values from Warning
// Using a left concat, replace of Zero only values, then remove for non 0
// ID;Warn Threshold;Alarm Threshold;

Fan.Discovery.Source(2).Compute(6).Type="LeftConcat"
Fan.Discovery.Source(2).Compute(6).Column="2"
Fan.Discovery.Source(2).Compute(6).String="MSHW_"

Fan.Discovery.Source(2).Compute(7).Type="Replace"
Fan.Discovery.Source(2).Compute(7).Column="2"
Fan.Discovery.Source(2).Compute(7).Replace="MSHW_0"
Fan.Discovery.Source(2).Compute(7).ReplaceBy=Column(4)

Fan.Discovery.Source(2).Compute(8).Type="Replace"
Fan.Discovery.Source(2).Compute(8).Column="2"
Fan.Discovery.Source(2).Compute(8).Replace="MSHW_"
Fan.Discovery.Source(2).Compute(8).ReplaceBy=""


// Source(3) = Table joint of Source(1) and Source(2)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold
Fan.Discovery.Source(3).Type="TableJoint"
Fan.Discovery.Source(3).LeftTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(3).RightTable=%Fan.Discovery.Source(2)%
Fan.Discovery.Source(3).LeftKeyColumn=1
Fan.Discovery.Source(3).RightKeyColumn=1
Fan.Discovery.Source(3).DefaultRightLine=";;;"

//  FAN MODULES
//  Now going to get a list of fan modules

Fan.Discovery.Source(4)=%Enclosure.Discovery.Source(1)%

// Keep Only the main PSU Status Line (FM[0-9]/STATUS )
// ID;Name;EnclosureTableStatus;
Fan.Discovery.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(4).Compute(1).Column=2
Fan.Discovery.Source(4).Compute(1).RegExp="^FM[0-9]/FAIL$"

// Exclude lines with status of indeterminate (4)
// ID;Name;EnclosureTableStatus;
Fan.Discovery.Source(4).Compute(2).Type="ExcludeMatchingLines"
Fan.Discovery.Source(4).Compute(2).Column=3
Fan.Discovery.Source(4).Compute(2).ValueList="4"

// Remove the /Fail
// ID;Name;EnclosureTableStatus;
Fan.Discovery.Source(4).Compute(3).Type="Replace"
Fan.Discovery.Source(4).Compute(3).Column="2"
Fan.Discovery.Source(4).Compute(3).Replace="/FAIL"
Fan.Discovery.Source(4).Compute(3).ReplaceBy=""

// Add a few columns so that it matches Source(5)
// ID;(Sensor Type);(ID);(Warn Threshold);(Alarm Threshold);(ID);Name;EnclosureTableStatus;
Fan.Discovery.Source(4).Compute(4).Type="RightConcat"
Fan.Discovery.Source(4).Compute(4).Column="1"
Fan.Discovery.Source(4).Compute(4).String=";;;;;"

// Add a column to activate the status / speed activation parameters
// ID;(Sensor Type);(ID);(Warn Threshold);(Alarm Threshold);(ID);Name;EnclosureTableStatus;Status Activation;SpeedActivation
Fan.Discovery.Source(4).Compute(5).Type="RightConcat"
Fan.Discovery.Source(4).Compute(5).Column="8"
Fan.Discovery.Source(4).Compute(5).String=";1;"

// Source(5) = Table joint of Source(1) and Source(2)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;
Fan.Discovery.Source(5).Type="TableJoint"
Fan.Discovery.Source(5).LeftTable=%Fan.Discovery.Source(3)%
Fan.Discovery.Source(5).RightTable=%Enclosure.Discovery.Source(1)%
Fan.Discovery.Source(5).LeftKeyColumn=1
Fan.Discovery.Source(5).RightKeyColumn=1
Fan.Discovery.Source(5).DefaultRightLine=";;"

// Add a column to activate the status / speed activation parameters
//  ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;Status Activation;SpeedActivation
Fan.Discovery.Source(5).Compute(1).Type="RightConcat"
Fan.Discovery.Source(5).Compute(1).Column="8"
Fan.Discovery.Source(5).Compute(1).String=";;1"

// Source(6) = Table union of Source(4) and Source(5)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;Status Activation;SpeedActivation
Fan.Discovery.Source(6).Type="TableUnion"
Fan.Discovery.Source(6).Table1=%Fan.Discovery.Source(4)%
Fan.Discovery.Source(6).Table2=%Fan.Discovery.Source(5)%

// InstanceTable = Source(4)
// ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;Status Activation;SpeedActivation
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(6)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)
Fan.Discovery.Instance.FanType=InstanceTable.Column(7)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(9)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(10)


//
// COLLECT
//
// Collect type is "multi-instance"
Fan.Collect.Type="MultiInstance"

//  INDIVIDUAL FANS
// Source(1) = sunPlatNumericSensorTable
// ID;Speed
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,4"

// Source(2) = Table joint of Source(1) and Discovery Table
// ID;Speed;ID;Sensor Type;ID;Warn Threshold;Alarm Threshold;ID;Name;EnclosureTableStatus;
Fan.Collect.Source(2).Type="TableJoint"
Fan.Collect.Source(2).LeftTable=%Fan.Collect.Source(1)%
Fan.Collect.Source(2).RightTable=%Fan.Discovery.Source(6)%
Fan.Collect.Source(2).LeftKeyColumn=1
Fan.Collect.Source(2).RightKeyColumn=1

// Keep only useful information
// ID;Speed;Name

Fan.Collect.Source(2).Compute(1).Type="KeepColumns"
Fan.Collect.Source(2).Compute(1).ColumnNumbers="1,2,9"

// Add Blank Status Columns
// ID;Speed;Name;(Status);(Status Information);
Fan.Collect.Source(2).Compute(2).Type="RightConcat"
Fan.Collect.Source(2).Compute(2).Column="3"
Fan.Collect.Source(2).Compute(2).String=";;"

//  FAN MODULES
//  Source (3) - Main Sensor Table
//  ID;Name;Status;
Fan.Collect.Source(3).Type="SnmpTable"
Fan.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1"
Fan.Collect.Source(3).SnmpTableSelectColumns="ID,5,3"

// Source(4) = Table joint of Source(3) and Discovery Table (4)
// ID;Name;Status;ID;(Sensor Type);(ID);(Warn Threshold);(Alarm Threshold);(ID);Name;EnclosureTableStatus;Status Activation;SpeedActivation
Fan.Collect.Source(4).Type="TableJoint"
Fan.Collect.Source(4).LeftTable=%Fan.Collect.Source(3)%
Fan.Collect.Source(4).RightTable=%Fan.Discovery.Source(4)%
Fan.Collect.Source(4).LeftKeyColumn=1
Fan.Collect.Source(4).RightKeyColumn=1

// Get rid of the Discovery information
// ID;Name;Status;
Fan.Collect.Source(4).Compute(1).Type="KeepColumns"
Fan.Collect.Source(4).Compute(1).ColumnNumbers="1,2,3"

// Add Blank Speed Column
// ID;(Speed);Name;Status;
Fan.Collect.Source(4).Compute(2).Type="RightConcat"
Fan.Collect.Source(4).Compute(2).Column="1"
Fan.Collect.Source(4).Compute(2).String=";"

// Duplicate the Status column
// ID;(Speed);Name;Status;Status;
Fan.Collect.Source(4).Compute(3).Type="DuplicateColumn"
Fan.Collect.Source(4).Compute(3).Column="4"

// Translate Condition into a PATROL Status
// ID;(Speed);Name;PatrolStatus;Status;
Fan.Collect.Source(4).Compute(4).Type="Translate"
Fan.Collect.Source(4).Compute(4).Column="4"
Fan.Collect.Source(4).Compute(4).TranslationTable="StatusTranslationTable"

// Translate the 2nd Condition column into a more readable string
// ID;(Speed);Name;PatrolStatus;Status Information;
Fan.Collect.Source(4).Compute(5).Type="Translate"
Fan.Collect.Source(4).Compute(5).Column="5"
Fan.Collect.Source(4).Compute(5).TranslationTable="StatusInformationTranslationTable"

// Source (4) Union of Source(2) Fans and Source(3) Fan Modules
Fan.Collect.Source(5).Type="TableUnion"
Fan.Collect.Source(5).Table1=%Fan.Collect.Source(2)%
Fan.Collect.Source(5).Table2=%Fan.Collect.Source(4)%

// The ValueTable
// ID;Speed;Name
Fan.Collect.ValueTable=%Fan.Collect.Source(5)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(4)
Fan.Collect.StatusInformation=ValueTable.Column(5)

//
// PowerSupplies

// PowerSupply discovery

// Source(1) = sunPlatSensorTable
// ID;Name;EnclosureTableStatus;
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(1)%

// Keep Only the main PSU Status Line (PS[0-9]/STATUS )
// ID;Name;EnclosureTableStatus;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).RegExp="^PS[0-9]"

// Exclude lines with status of indeterminate (4)
// ID;Name;EnclosureTableStatus;
PowerSupply.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=3
PowerSupply.Discovery.Source(1).Compute(2).ValueList="4"


// Source(2) = sunPlatSensorTable
// ID;Sensor Type
PowerSupply.Discovery.Source(2).Type="SnmpTable"
PowerSupply.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
PowerSupply.Discovery.Source(2).SnmpTableSelectColumns="ID,2"

// Keep Only Sensors of type 1 (Other, i.e. Discrete)
// ID;Sensor Type
PowerSupply.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(2).Compute(1).Column=2
PowerSupply.Discovery.Source(2).Compute(1).ValueList="1"

// Source(3) = Table joint of Source(1) and Source (2)
// ID;Name;EnclosureTableStatus;ID;Sensor Type;
PowerSupply.Discovery.Source(3).Type="TableJoint"
PowerSupply.Discovery.Source(3).LeftTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Source(3).RightTable=%PowerSupply.Discovery.Source(2)%
PowerSupply.Discovery.Source(3).LeftKeyColumn=1
PowerSupply.Discovery.Source(3).RightKeyColumn=1

// Process Source (3) which is a list of all Power Supply Sensors of type "other"
// So that only one line is returned for each Power Supply with the lowest value (i.e. most severe) status number
PowerSupply.Discovery.Source(3).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
PowerSupply.Discovery.Source(3).Compute(1).Separators=";"
PowerSupply.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Discovery.Source(3).Compute(1).SelectColumns="2"

// InstanceTable = Source(1)
// PowerSupplyName;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(3)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)

//
// COLLECT
//
// Collect type is "Multi-instance"
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = sunPlatSensorTable
// ID;Name;EnclosureTableStatus;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,5,3"

// Getting rid of tags we don't want
PowerSupply.Collect.Source(1).Compute(1).Type="Replace"
PowerSupply.Collect.Source(1).Compute(1).Column="2"
PowerSupply.Collect.Source(1).Compute(1).Replace="/CH/"
PowerSupply.Collect.Source(1).Compute(1).ReplaceBy=""

// Keep Only the main PSU Status Line (PS[0-9]/STATUS )
// ID;Name;EnclosureTableStatus;
PowerSupply.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).RegExp="^PS[0-9]"

// Exclude lines with status of indeterminate (4)
// ID;Name;EnclosureTableStatus;
PowerSupply.Collect.Source(1).Compute(3).Type="ExcludeMatchingLines"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).ValueList="4"


// Source(2) = sunPlatSensorTable
// ID;Sensor Type
PowerSupply.Collect.Source(2).Type="SnmpTable"
PowerSupply.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
PowerSupply.Collect.Source(2).SnmpTableSelectColumns="ID,2"

// Keep Only Sensors of type 1 (Other, i.e. Discrete)
// ID;Sensor Type
PowerSupply.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(2).Compute(1).Column=2
PowerSupply.Collect.Source(2).Compute(1).ValueList="1"

// Source(3) = Table joint of Source(1) and Source (2)
// ID;Name;EnclosureTableStatus;ID;Sensor Type;
PowerSupply.Collect.Source(3).Type="TableJoint"
PowerSupply.Collect.Source(3).LeftTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Source(3).RightTable=%PowerSupply.Collect.Source(2)%
PowerSupply.Collect.Source(3).LeftKeyColumn=1
PowerSupply.Collect.Source(3).RightKeyColumn=1

// Process Source (3) which is a list of all Power Supply Sensors of type "other"
// So that only one line is returned for each Power Supply with the lowest value (i.e. most severe) status number
// ID;Status;
PowerSupply.Collect.Source(3).Compute(1).Type="Awk"
PowerSupply.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
PowerSupply.Collect.Source(3).Compute(1).Separators=";"
PowerSupply.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Collect.Source(3).Compute(1).SelectColumns="2,3"

// Duplicate the Status column
// // ID;Status;Status;
PowerSupply.Collect.Source(3).Compute(2).Type="DuplicateColumn"
PowerSupply.Collect.Source(3).Compute(2).Column=2

// Translate Condition into a PATROL Status
// ID;PATROLStatus;Status;
PowerSupply.Collect.Source(3).Compute(3).Type="Translate"
PowerSupply.Collect.Source(3).Compute(3).Column=2
PowerSupply.Collect.Source(3).Compute(3).TranslationTable="StatusTranslationTable"

// Translate the 2nd Condition column into a more readable string
// ID;PATROLStatus;Status Information;
PowerSupply.Collect.Source(3).Compute(4).Type="Translate"
PowerSupply.Collect.Source(3).Compute(4).Column=3
PowerSupply.Collect.Source(3).Compute(4).TranslationTable="StatusInformationTranslationTable"

// The ValueTable
// ID;PATROLStatus;Status Information;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(3)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


//
// VoltageS

// Voltage discovery

// Source(1) = sunPlatSensorTable
// ID;Sensor Type
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Keep Only Sensors of type 4 (Voltages)
// ID;Sensor Type
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=2
Voltage.Discovery.Source(1).Compute(1).ValueList="4"

// Source(2) = Table joint of Source(1) and Enclosure Source (1)
// ID;Sensor Type;ID;Name;EnclosureTableStatus;
Voltage.Discovery.Source(2).Type="TableJoint"
Voltage.Discovery.Source(2).LeftTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Source(2).RightTable=%Enclosure.Discovery.Source(1)%
Voltage.Discovery.Source(2).LeftKeyColumn=1
Voltage.Discovery.Source(2).RightKeyColumn=1
Voltage.Discovery.Source(2).DefaultRightLine=";;"


// InstanceTable = Source(4)
// ID;Sensor Type;ID;Name;EnclosureTableStatus;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(2)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(4)



//
// COLLECT
//
// Collect type is "Mono-instance"
Voltage.Collect.Type="MonoInstance"

// Getting each Voltage's Status
Voltage.Collect.Source(1).Type="SnmpGet"
Voltage.Collect.Source(1).SnmpOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1.3.%Voltage.Collect.DeviceID%"

// Add Fake ID
// Status;ID;
Voltage.Collect.Source(1).Compute(1).Type="RightConcat"
Voltage.Collect.Source(1).Compute(1).Column="1"
Voltage.Collect.Source(1).Compute(1).String=";ID"

// Getting each Voltage's Voltage
Voltage.Collect.Source(2).Type="SnmpGet"
Voltage.Collect.Source(2).SnmpOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1.4.%Voltage.Collect.DeviceID%"

// Add Fake ID
// Voltage;ID;
Voltage.Collect.Source(2).Compute(1).Type="RightConcat"
Voltage.Collect.Source(2).Compute(1).Column="1"
Voltage.Collect.Source(2).Compute(1).String=";ID"

// Source(3) = Table joint of Source(1) and Source (2)
// Status;ID;Voltage;ID;
Voltage.Collect.Source(3).Type="TableJoint"
Voltage.Collect.Source(3).LeftTable=%Voltage.Collect.Source(1)%
Voltage.Collect.Source(3).RightTable=%Voltage.Collect.Source(2)%
Voltage.Collect.Source(3).LeftKeyColumn=2
Voltage.Collect.Source(3).RightKeyColumn=2
Voltage.Collect.Source(3).DefaultRightLine=";;"

// Remove the Critical Threshold Column
// Status;Voltage
Voltage.Collect.Source(3).Compute(1).Type="KeepColumns"
Voltage.Collect.Source(3).Compute(1).ColumnNumbers="1,3"

// Duplicate the Status column
// Status;Status;Voltage
Voltage.Collect.Source(3).Compute(2).Type="DuplicateColumn"
Voltage.Collect.Source(3).Compute(2).Column="1"

// Translate Condition into a PATROL Status
// PATROLStatus;Status;Voltage
Voltage.Collect.Source(3).Compute(3).Type="Translate"
Voltage.Collect.Source(3).Compute(3).Column="1"
Voltage.Collect.Source(3).Compute(3).TranslationTable="StatusTranslationTable"

// Translate the 2nd Condition column into a more readable string
// PATROLStatus;Status Information;Voltage
Voltage.Collect.Source(3).Compute(4).Type="Translate"
Voltage.Collect.Source(3).Compute(4).Column="2"
Voltage.Collect.Source(3).Compute(4).TranslationTable="StatusInformationTranslationTable"

// The ValueTable
// PATROLStatus;Status Information;Voltage
Voltage.Collect.ValueTable=%Voltage.Collect.Source(3)%
Voltage.Collect.Status=ValueTable.Column(1)
Voltage.Collect.StatusInformation=ValueTable.Column(2)
Voltage.Collect.Voltage=ValueTable.Column(3)





StatusTranslationTable(1)="ALARM"
StatusTranslationTable(2)="ALARM"
StatusTranslationTable(3)="WARN"
StatusTranslationTable(4)="ALARM"
StatusTranslationTable(5)="WARN"
StatusTranslationTable(6)="WARN"
StatusTranslationTable(7)="OK"
StatusTranslationTable(Default)="UNKNOWN"

StatusInformationTranslationTable(1)="Critical Fault"
StatusInformationTranslationTable(2)="Major Fault"
StatusInformationTranslationTable(3)="Minor Fault"
StatusInformationTranslationTable(4)="Missing (Indeterminate Status)"
StatusInformationTranslationTable(5)="Warning"
StatusInformationTranslationTable(6)="Pending"
StatusInformationTranslationTable(7)=""
StatusInformationTranslationTable(Default)="Unknown Status"

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parse the output of Sensors to provide a single ID and lowest (most severe) status
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[;]"}
$1 ~ /^[0-9]+$/ && NF > 4  {ID=$2;gsub(/\057.*/,"",ID)
                            if (statusArray[ID] == "") {statusArray[ID]=$3}
                            if ((statusArray[ID] != "") && ($3 < statusArray[ID])) {statusArray[ID]=$3}
                           }
END { for (ID in statusArray) {print ("MSHW;"ID";"statusArray[ID]";")}}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////