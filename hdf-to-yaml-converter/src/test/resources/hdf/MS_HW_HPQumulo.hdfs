//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//               by Sentry Software (c)
//
//                 MS_HW_HPQumulo.hdf
//
//      Supports: HP Qumulo storage systems drivers
//      Connects to QQ CLI via ssh.
//
//

//
// HEADER
//

hdf.DisplayName="HP Qumulo"
hdf.TypicalPlatform="HP Qumulo storage systems"
hdf.ReliesOn="QQ CLI"
hdf.Comments="Gives hardware information HP Qumulo storage systems."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage,NT,Linux"

//
// DETECTION
//

// Checks that QQ CLI is present on target host
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="qq --help"
Detection.Criteria(1).ExpectedResult="Qumulo CLI"
Detection.Criteria(1).ErrorMessage="QQ CLI not found on local host."
Detection.Criteria(1).ExecuteLocally=1

//
// Enclosure
//

// Discovery
// Source(1) = Output of the QQ CLI command through OS Commands
Enclosure.Discovery.Source(1).Type="OsCommand"
Enclosure.Discovery.Source(1).CommandLine="qq --host %{HOSTNAME} nodes_list"
Enclosure.Discovery.Source(1).TimeOut=90
Enclosure.Discovery.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;displayId;model;serial;uuid;status;status
Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// ID;displayId;model;serial;uuid;status;status
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Vendor="HP"

// Collect
// Source(1) = Output of the QQ CLI command through OS Commands
Enclosure.Collect.Source(1).Type="OsCommand"
Enclosure.Collect.Source(1).CommandLine="qq --host %{HOSTNAME} nodes_list"
Enclosure.Collect.Source(1).TimeOut=90
Enclosure.Collect.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;displayId;model;serial;uuid;status;status
Enclosure.Collect.Source(1).Compute(1).Type="Awk"
Enclosure.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Translate status
// ID;displayId;model;serial;uuid;status;statusInformation
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=6
Enclosure.Collect.Source(1).Compute(2).TranslationTable="EnclosureStatusTranslationTable"

// ID;displayId;model;serial;uuid;status;statusInformation
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(6)
Enclosure.Collect.StatusInformation=ValueTable.Column(7)

//
// PhysicalDisk
//

// Discovery
// Source(1) = Output of the QQ CLI command through OS Commands
PhysicalDisk.Discovery.Source(1).Type="OsCommand"
PhysicalDisk.Discovery.Source(1).CommandLine="qq --host %{HOSTNAME} cluster_slots"
PhysicalDisk.Discovery.Source(1).TimeOut=90
PhysicalDisk.Discovery.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;nodeId;model;serial;slot;slotType;size;status;status
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)

// ID;nodeId;model;serial;slot;slotType;size;status;status
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Source(1) = Output of the QQ CLI command through OS Commands
PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="qq --host %{HOSTNAME} cluster_slots"
PhysicalDisk.Collect.Source(1).TimeOut=90
PhysicalDisk.Collect.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;nodeId;model;serial;slot;slotType;size;status;status
PhysicalDisk.Collect.Source(1).Compute(1).Type="Awk"
PhysicalDisk.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(2)

// Translate status
// ID;nodeId;model;serial;slot;slotType;size;status;statusInformation
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=8
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// ID;nodeId;model;serial;slot;slotType;size;status;statusInformation
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(8)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(9)

//
// NetworkCard
//

// Discovery
// Source(1) = Output of the QQ CLI command through OS Commands
NetworkCard.Discovery.Source(1).Type="OsCommand"
NetworkCard.Discovery.Source(1).CommandLine="qq --host %{HOSTNAME} network_poll"
NetworkCard.Discovery.Source(1).TimeOut=90
NetworkCard.Discovery.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Discovery.Source(1).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(3)

// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.DisplayID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.LogicalAddress=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.DeviceType="Ethernet"
NetworkCard.Discovery.Instance.LogicalAddressType="IP"
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

// Collect
// Source(1) = Output of the QQ CLI command through OS Commands
NetworkCard.Collect.Source(1).Type="OsCommand"
NetworkCard.Collect.Source(1).CommandLine="qq --host %{HOSTNAME} cluster_slots"
NetworkCard.Collect.Source(1).TimeOut=90
NetworkCard.Collect.Source(1).ExecuteLocally=1

// Parse the output of the command with an AWK script
// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Collect.Source(1).Compute(1).Type="Awk"
NetworkCard.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(3)

// Translate status
// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=9
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="NetworkCardStatusTranslationTable"

// Translate linkStatus
// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=8
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="LinkStatusTranslationTable"

// ID;nodeId;ip;mac;speed;bytesSent;bytesReceived;linkStatus;status;status
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Speed=ValueTable.Column(5)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(6)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(7)
NetworkCard.Collect.Status=ValueTable.Column(8)
NetworkCard.Collect.StatusInformation=ValueTable.Column(9)

//
// Translation Tables
//

// Enclosure status
EnclosureStatusTranslationTable("online")="OK"
EnclosureStatusTranslationTable(Default)="WARN"

// PhysicalDisk status
PhysicalDiskStatusTranslationTable("healthy")="OK"
PhysicalDiskStatusTranslationTable(Default)="WARN"

// NetworkCard status
NetworkCardStatusTranslationTable("UP")="OK"
NetworkCardStatusTranslationTable(Default)="WARN"

// NetworkCard linkStatus
LinkStatusTranslationTable("CONNECTED")="OK"
LinkStatusTranslationTable(Default)="WARN"

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parses the output of qq nodes_list for enclosure data
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):

BEGIN {FS = ": |,"}

/"id"/ {id = $2}
/"node_name"/ {displayId = $2}
/"model_number"/ {model = $2}
/"serial_number"/ {serial = $2}
/"node_status"/ {status = $2}
/"uuid"/ {
  uuid = $2;
  result = id ";" displayId ";" model ";" serial ";UUID: " uuid ";" status ";" status;
  gsub(/"/, "", result);
  print result
}

EmbeddedFile(1).End

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parses the output of qq cluster_slots for physical disk data
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):

BEGIN {FS = ": |,"}

/"id"/ {id = $2}
/"node_id"/ {nodeId = $2}
/"disk_model"/ {model = $2}
/"disk_serial_number"/ {serial = $2}
/"slot"/ {slot = "Drive Bay: " $2}
/"slot_type"/ {slotType = "Slot Type: " $2}
/"raw_capacity"/ {size = $2}
/"state"/ {
  status = $2;
  result = id ";" nodeId ";" model ";" serial ";" slot ";" slotType ";" size ";" status ";" status;
  gsub(/"/, "", result);
  print result
}

EmbeddedFile(2).End

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = awk script that parses the output of qq network_poll for network card data
///
/////////////////////////////////////////////////////////
EmbeddedFile(3):

BEGIN {FS = ": |,"}

/"interface_id"/ {id = Interface $2}
/"address"/ {ip = $2}
/"mac_address"/ {mac = $2}
/"interface_status": "/ {status = $2}
/"cable_status"/ {linkStatus = $2}
/"speed"/ {speed = $2}
/"bytes_received"/ {bytesReceived = $2}
/"bytes_sent"/ {bytesSent = $2}
/"node_id"/ {
  nodeId = $2;
  result = nodeId "-" id ";" nodeId ";" ip ";" mac ";" speed ";" bytesSent ";" bytesReceived ";" linkStatus ";" status ";" status;
  gsub(/"/, "", result);
  print result
}

EmbeddedFile(3).End
