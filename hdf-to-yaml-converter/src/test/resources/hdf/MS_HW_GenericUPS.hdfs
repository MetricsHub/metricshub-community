////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Any UPS which supports UPS-MIB (RFC1628)
//
//
//


//
// Header
//

hdf.DisplayName="Generic UPS"
hdf.TypicalPlatform="Any UPS which supports UPS-MIB (RFC1628)"
// hdf.ReliesOn=""
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring of MIB-2 Standard UPS through an SNMP interface."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"



//
// DETECTION
//

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.2.1.33"


//
// Enclosure Discovery
//

// Source(1)
// Manufacturer;Model;FirmwareVersion;IdentName;

Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.2.1.33.1.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,2,3,5"

// InstanceTable = Source(1)
Manufacturer;Model;FirmwareVersion;IdentName;

Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="UPS"


//
// Enclosure Collect
//

//upsAlarmsPresent

Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.2.1.33.1.6.1.0"

// Add an identifier to enable table Joints
// MSHW;upsAlarmsPresent;

Enclosure.Collect.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).String="MSHW;"

// Power Consumption
// upsOutputPower

Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.2.1.33.1.4.4.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="4"

// Use AWK to sum the output power values

Enclosure.Collect.Source(2).Compute(1).Type="Awk"
Enclosure.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(1)

// upsInputTruePower

Enclosure.Collect.Source(3).Type="SnmpTable"
Enclosure.Collect.Source(3).SnmpTableOid="1.3.6.1.2.1.33.1.3.3.1"
Enclosure.Collect.Source(3).SnmpTableSelectColumns="5"

// Use AWK to sum the input power values

Enclosure.Collect.Source(3).Compute(1).Type="Awk"
Enclosure.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)

//Subtract the output from Input

Enclosure.Collect.Source(3).Compute(2).Type="Substract"
Enclosure.Collect.Source(3).Compute(2).Column=1
Enclosure.Collect.Source(3).Compute(2).Substract=%Enclosure.Collect.Source(2)%

// Add an identifier to enable table Joints
// MSHW;PowerConsumption;

Enclosure.Collect.Source(3).Compute(3).Type="LeftConcat"
Enclosure.Collect.Source(3).Compute(3).Column=1
Enclosure.Collect.Source(3).Compute(3).String="MSHW;"

//TableJoin of Source(1) and Source(3) into Source(4)
//MSHW;upsAlarmsPresent;MSHW;PowerConsumption;

Enclosure.Collect.Source(4).Type="TableJoint"
Enclosure.Collect.Source(4).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(4).RightTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(4).LeftKeyColumn=1
Enclosure.Collect.Source(4).RightKeyColumn=1
Enclosure.Collect.Source(4).DefaultRightLine=";"

// Translate the Enclosure Status
//MSHW;upsAlarmsPresent;MSHW;PowerConsumption;

Enclosure.Collect.Source(4).Compute(1).Type="Translate"
Enclosure.Collect.Source(4).Compute(1).Column=2
Enclosure.Collect.Source(4).Compute(1).TranslationTable="enclosureStatusTranslationTable"

// UPS Alarms
// Description;

Enclosure.Collect.Source(5).Type="SnmpTable"
Enclosure.Collect.Source(5).SnmpTableOid="1.3.6.1.2.1.33.1.6.2.1"
Enclosure.Collect.Source(5).SnmpTableSelectColumns="2"

// Add an identifier to enable table Joints
// MSHW;Description;

Enclosure.Collect.Source(5).Compute(1).Type="LeftConcat"
Enclosure.Collect.Source(5).Compute(1).Column=1
Enclosure.Collect.Source(5).Compute(1).String="MSHW;"

//TableJoin of Source(4) and Source(5) into Source(6)
//MSHW;upsAlarmsPresent;MSHW;PowerConsumption;MSHW;Description;

Enclosure.Collect.Source(6).Type="TableJoint"
Enclosure.Collect.Source(6).LeftTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(6).RightTable=%Enclosure.Collect.Source(5)%
Enclosure.Collect.Source(6).LeftKeyColumn=1
Enclosure.Collect.Source(6).RightKeyColumn=1
Enclosure.Collect.Source(6).DefaultRightLine=";"

// ValueTable = Source(6)
//MSHW;upsAlarmsPresent;MSHW;Description;MSHW;PowerConsumption;

Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(6)%
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(6)
Enclosure.Collect.PowerConsumption=ValueTable.Column(4)


//
// Battery Discovery
//

// Source(1) = upsBattery OID

Battery.Discovery.Source(1).Type="SnmpGet"
Battery.Discovery.Source(1).SnmpOid="1.3.6.1.2.1.33.1.2.1.0"

// InstanceTable = Source(1)

Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID="UPS Battery"
Battery.Discovery.Instance.DisplayID="UPS Battery"
Battery.Discovery.Instance.Type="UPS"

//
// Battery Collect
//

// Source(1)
// Status

Battery.Collect.Source(1).Type="SnmpGet"
Battery.Collect.Source(1).SnmpOid="1.3.6.1.2.1.33.1.2.1.0"

// Add an identifier to enable table Joints
// MSHW;Status;

Battery.Collect.Source(1).Compute(1).Type="LeftConcat"
Battery.Collect.Source(1).Compute(1).Column=1
Battery.Collect.Source(1).Compute(1).String="MSHW;"

// Source(2)
// Charge Remaining

Battery.Collect.Source(2).Type="SnmpGet"
Battery.Collect.Source(2).SnmpOid="1.3.6.1.2.1.33.1.2.4.0"

// Add an identifier to enable table Joints
// MSHW;ChargeRemaining;

Battery.Collect.Source(2).Compute(1).Type="LeftConcat"
Battery.Collect.Source(2).Compute(1).Column=1
Battery.Collect.Source(2).Compute(1).String="MSHW;"

//Source(3)
// Join Battery Status with ChargeRemaining
// MSHW;Status;MSHW;ChargeRemaining;

Battery.Collect.Source(3).Type="TableJoint"
Battery.Collect.Source(3).LeftTable=%Battery.Collect.Source(1)%
Battery.Collect.Source(3).RightTable=%Battery.Collect.Source(2)%
Battery.Collect.Source(3).LeftKeyColumn=1
Battery.Collect.Source(3).RightKeyColumn=1
Battery.Collect.Source(3).DefaultRightLine=";"

// Duplicate the Status column
// MSHW;Status;Status;MSHW;ChargeRemaining;

Battery.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Battery.Collect.Source(3).Compute(1).Column=2

// Translate Status Information of the Battery
// MSHW;Status;StatusInformation;MSHW;ChargeRemaining;

Battery.Collect.Source(3).Compute(2).Type="Translate"
Battery.Collect.Source(3).Compute(2).Column=2
Battery.Collect.Source(3).Compute(2).TranslationTable="BatteryStatusTranslationTable"

Battery.Collect.Source(3).Compute(3).Type="Translate"
Battery.Collect.Source(3).Compute(3).Column=3
Battery.Collect.Source(3).Compute(3).TranslationTable="BatteryStatusInformationTranslationTable"

//Source(4)
// Minutes Remaining

Battery.Collect.Source(4).Type="SnmpGet"
Battery.Collect.Source(4).SnmpOid="1.3.6.1.2.1.33.1.2.3.0"

// Add an identifier to enable table Joints
// MSHW;MinutesRemaining;

Battery.Collect.Source(4).Compute(1).Type="LeftConcat"
Battery.Collect.Source(4).Compute(1).Column=1
Battery.Collect.Source(4).Compute(1).String="MSHW;"

//Source(5)
// Join Battery ID with Status
// MSHW;Status;StatusInformation;MSHW;ChargeRemaining;MSHW;MinutesRemaining;

Battery.Collect.Source(5).Type="TableJoint"
Battery.Collect.Source(5).LeftTable=%Battery.Collect.Source(3)%
Battery.Collect.Source(5).RightTable=%Battery.Collect.Source(4)%
Battery.Collect.Source(5).LeftKeyColumn=1
Battery.Collect.Source(5).RightKeyColumn=1
Battery.Collect.Source(5).DefaultRightLine=";"

// ValueTable = Source(5)
// MSHW;Status;StatusInformation;MSHW;ChargeRemaining;MSHW;MinutesRemaining;

Battery.Collect.ValueTable=%Battery.Collect.Source(5)%
Battery.Collect.DeviceID="UPS Battery"
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)
Battery.Collect.Charge=ValueTable.Column(5)
Battery.Collect.TimeLeft=ValueTable.Column(7)

//
// Voltage Discovery
//

// Source(1) = upsConfigInputVoltage
// Configured Input Voltage, used for thresholds
// Value;

Voltage.Discovery.Source(1).Type="SnmpGet"
Voltage.Discovery.Source(1).SnmpOid="1.3.6.1.2.1.33.1.9.1.0"

// upsConfigInputVoltage is in Volts, so multiply by 1000 to get mv.
// upsConfigInputVoltage;

Voltage.Discovery.Source(1).Compute(1).Type="Multiply"
Voltage.Discovery.Source(1).Compute(1).Column=1
Voltage.Discovery.Source(1).Compute(1).MultiplyBy=1000

// Source(2) = UPS Input Voltage
// ID;Value;

Voltage.Discovery.Source(2).Type="SnmpTable"
Voltage.Discovery.Source(2).SnmpTableOid="1.3.6.1.2.1.33.1.3.3.1"
Voltage.Discovery.Source(2).SnmpTableSelectColumns="ID"

// Add an identifier to enable table Joints
// MSHW;ID;

Voltage.Discovery.Source(2).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(2).Compute(1).Column=1
Voltage.Discovery.Source(2).Compute(1).String="MSHW;Input "

// Insert Configured Input Voltage, for threshold creation
// MSHW;ID;UPSConfigInputVoltage;

Voltage.Discovery.Source(2).Compute(2).Type="RightConcat"
Voltage.Discovery.Source(2).Compute(2).Column=2
Voltage.Discovery.Source(2).Compute(2).String=;%Voltage.Discovery.source(1)%

// Create Thresholds
// MSHW;ID;UPSConfigInputVoltage;UpperThreshold;LowerThreshold;
Voltage.Discovery.Source(2).Compute(3).Type="Awk"
Voltage.Discovery.Source(2).Compute(3).AwkScript=EmbeddedFile(2)


// Source(3) = upsConfigOutputVoltage
// Configured Output Voltage, used for thresholds
// Value;

Voltage.Discovery.Source(3).Type="SnmpGet"
Voltage.Discovery.Source(3).SnmpOid="1.3.6.1.2.1.33.1.9.3.0"

// upsConfigOutputVoltage is in Volts, so multiply by 1000 to get mv.
// upsConfigOutputVoltage;

Voltage.Discovery.Source(3).Compute(1).Type="Multiply"
Voltage.Discovery.Source(3).Compute(1).Column=1
Voltage.Discovery.Source(3).Compute(1).MultiplyBy=1000


// Source(4) = UPS Output Voltage
// ID;UPSOutputVoltage;

Voltage.Discovery.Source(4).Type="SnmpTable"
Voltage.Discovery.Source(4).SnmpTableOid="1.3.6.1.2.1.33.1.4.4.1"
Voltage.Discovery.Source(4).SnmpTableSelectColumns="ID"

// Add an identifier to enable table Joints
// MSHW;ID;

Voltage.Discovery.Source(4).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(4).Compute(1).Column=1
Voltage.Discovery.Source(4).Compute(1).String="MSHW;Output "

// Insert Configured Output Voltage, for threshold creation
// MSHW;ID;UPSConfigOutputVoltage;

Voltage.Discovery.Source(4).Compute(2).Type="RightConcat"
Voltage.Discovery.Source(4).Compute(2).Column=2
Voltage.Discovery.Source(4).Compute(2).String=;%Voltage.Discovery.source(3)%

// Create Thresholds
// MSHW;ID;UPSConfigOutputVoltage;UpperThreshold;LowerThreshold;
Voltage.Discovery.Source(4).Compute(3).Type="Awk"
Voltage.Discovery.Source(4).Compute(3).AwkScript=EmbeddedFile(2)

// Source(5) = UPS Battery Voltage
// UPSBatteryVoltage;

Voltage.Discovery.Source(5).Type="SnmpGet"
Voltage.Discovery.Source(5).SnmpOid="1.3.6.1.2.1.33.1.2.5.0"

// Add an identifier to enable table Joints
// MSHW;ID;

Voltage.Discovery.Source(5).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(5).Compute(1).Column=1
Voltage.Discovery.Source(5).Compute(1).String="MSHW;Battery Voltage;"

// Source(6) = UPS Bypass Voltage
// ID;

Voltage.Discovery.Source(6).Type="SnmpTable"
Voltage.Discovery.Source(6).SnmpTableOid="1.3.6.1.2.1.33.1.5.3.1"
Voltage.Discovery.Source(6).SnmpTableSelectColumns="ID"

// Add an identifier to enable table Joints
// MSHW;ID;

Voltage.Discovery.Source(6).Compute(1).Type="LeftConcat"
Voltage.Discovery.Source(6).Compute(1).Column=1
Voltage.Discovery.Source(6).Compute(1).String="MSHW;Bypass "

// TableUnion to put all Voltages together
// MSHW;ID;ConfiguredVoltage;UpperThreshold;LowerThreshold;

Voltage.Discovery.Source(7).Type="TableUnion"
Voltage.Discovery.Source(7).Table1=%Voltage.Discovery.source(2)%
Voltage.Discovery.Source(7).Table2=%Voltage.Discovery.source(4)%
Voltage.Discovery.Source(7).Table3=%Voltage.Discovery.source(5)%
Voltage.Discovery.Source(7).Table4=%Voltage.Discovery.source(6)%

// InstanceTable = Source(7)
// MSHW;ID;Voltage;UpperThreshold;LowerThreshold;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(7)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Voltage.Discovery.Instance.AttachedToDeviceType="Enclosure"
Voltage.Discovery.Instance.VoltageType="UPS"
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)

//
// Voltage Collect
//
Voltage.Collect.Type="MultiInstance"

Voltage.Collect.Source(1).Type="SnmpGet"
Voltage.Collect.Source(1).SnmpOid="1.3.6.1.2.1.33.1.2.5.0"

// Add an identifier to enable table Joints
// MSHW;ID;UPSBatteryVoltage;

Voltage.Collect.Source(1).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(1).Compute(1).Column=1
Voltage.Collect.Source(1).Compute(1).String="MSHW;Battery Voltage;"

// UPSBatteryVoltage is in 0.1v, so multiply by 100 to get mv (1000 mv = 1 v)
// MSHW;ID;UPSBatteryVoltage;
Voltage.Collect.Source(1).Compute(2).Type="Multiply"
Voltage.Collect.Source(1).Compute(2).Column=3
Voltage.Collect.Source(1).Compute(2).MultiplyBy=100

// Source(2) = UPS Input Voltage
// ID;upsInputVoltage;

Voltage.Collect.Source(2).Type="SnmpTable"
Voltage.Collect.Source(2).SnmpTableOid="1.3.6.1.2.1.33.1.3.3.1"
Voltage.Collect.Source(2).SnmpTableSelectColumns="ID,3"

// Add an identifier to enable table Joints
// MSHW;ID;upsInputVoltage;

Voltage.Collect.Source(2).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(2).Compute(1).Column=1
Voltage.Collect.Source(2).Compute(1).String="MSHW;Input "

// upsInputVoltage is in Volts, so multiply by 1000 to get mv.
// MSHW;ID;UPSInputVoltage;

Voltage.Collect.Source(2).Compute(2).Type="Multiply"
Voltage.Collect.Source(2).Compute(2).Column=3
Voltage.Collect.Source(2).Compute(2).MultiplyBy=1000

// Source(3) = UPS Output Voltage
// ID;upsOutputVoltage;

Voltage.Collect.Source(3).Type="SnmpTable"
Voltage.Collect.Source(3).SnmpTableOid="1.3.6.1.2.1.33.1.4.4.1"
Voltage.Collect.Source(3).SnmpTableSelectColumns="ID,3"

// Add an identifier to enable table Joints
// MSHW;ID;upsOutputVoltage;

Voltage.Collect.Source(3).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(3).Compute(1).Column=1
Voltage.Collect.Source(3).Compute(1).String="MSHW;Output "

// upsOutputVoltage is in Volts, so multiply by 1000 to get mv.
// MSHW;ID;UPSOutputVoltage;

Voltage.Collect.Source(3).Compute(2).Type="Multiply"
Voltage.Collect.Source(3).Compute(2).Column=3
Voltage.Collect.Source(3).Compute(2).MultiplyBy=1000

// Source(4) = UPS Bypass Voltage
// ID;upsBypassVoltage;

Voltage.Collect.Source(4).Type="SnmpTable"
Voltage.Collect.Source(4).SnmpTableOid="1.3.6.1.2.1.33.1.5.3.1"
Voltage.Collect.Source(4).SnmpTableSelectColumns="ID,2"

// Add an identifier to enable table Joints
// MSHW;ID;upsBypassVoltage;

Voltage.Collect.Source(4).Compute(1).Type="LeftConcat"
Voltage.Collect.Source(4).Compute(1).Column=1
Voltage.Collect.Source(4).Compute(1).String="MSHW;Bypass "

// upsBypassVoltage is in Volts, so multiply by 1000 to get mv.
// MSHW;ID;UPSBypassVoltage;
Voltage.Collect.Source(4).Compute(2).Type="Multiply"
Voltage.Collect.Source(4).Compute(2).Column=3
Voltage.Collect.Source(4).Compute(2).MultiplyBy=1000

// TableUnion to put all Voltages together
// MSHW;ID;Voltage;

Voltage.Collect.Source(5).Type="TableUnion"
Voltage.Collect.Source(5).Table1=%Voltage.Collect.source(1)%
Voltage.Collect.Source(5).Table2=%Voltage.Collect.source(2)%
Voltage.Collect.Source(5).Table3=%Voltage.Collect.source(3)%
Voltage.Collect.Source(5).Table4=%Voltage.Collect.source(4)%

// ValueTable = Source(5)
// MSHW;ID;Voltage;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(5)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Voltage=ValueTable.Column(3)


//
// Temperature Discovery
//

// Source(1) = UPS Battery Temperature
// UPSBatteryTemperature;

Temperature.Discovery.Source(1).Type="SnmpGet"
Temperature.Discovery.Source(1).SnmpOid="1.3.6.1.2.1.33.1.2.7.0"

// InstanceTable = Source(1)

Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID="UPS Battery Temperature"
Temperature.Discovery.Instance.DisplayID="UPS Battery Temperature"
Temperature.Discovery.Instance.WarningThreshold="35"
Temperature.Discovery.Instance.AlarmThreshold="45"
Temperature.Discovery.Instance.AttachedToDeviceType="Enclosure"
Temperature.Discovery.Instance.TemperatureType="Battery"

//
// Temperature Collect
//
Temperature.Collect.Type="MultiInstance"

// Source(1) = UPS Battery Temperature
// UPSBatteryTemperature;

Temperature.Collect.Source(1).Type="SnmpGet"
Temperature.Collect.Source(1).SnmpOid="1.3.6.1.2.1.33.1.2.7.0"

// ValueTable = Source(1)
// UPSBatteryTemperature;

Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID="UPS Battery Temperature"
Temperature.Collect.Temperature=ValueTable.Column(1)



//
// TRANSLATION TABLES
//

//Enclosure Status Translation Table
enclosureStatusTranslationTable(0)="OK"
enclosureStatusTranslationTable(default)="ALARM"


//Battery Status Translation Table
BatteryStatusTranslationTable(1)="WARNING"
BatteryStatusTranslationTable(2)="OK"
BatteryStatusTranslationTable(3)="WARNING"
BatteryStatusTranslationTable(4)="ALARM"

//Battery Status Information Translation Table
BatteryStatusInformationTranslationTable(1)="Unknown"
BatteryStatusInformationTranslationTable(2)="Battery Normal"
BatteryStatusInformationTranslationTable(3)="Battery Low"
BatteryStatusInformationTranslationTable(4)="Battery Depleted"


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script to sum power consumption values
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):

BEGIN { FS = ";"; sum=0}

{sum+=$1;}

END {print sum;}

EmbeddedFile(1).End


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script to create upper and lower thresholds at 90% and 110% for voltages
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):

BEGIN { FS = ";"; upper=0; lower=0}

{upper=$3/100*110}

{lower=$3/100*90}

{print $1";"$2";"$3";"upper";"lower";"}

END

EmbeddedFile(2).End
