//
//
//
//

//
// Header
//

hdf.DisplayName="Hitachi HDS AMS/HUS (SNM2 CLI on Linux)"
hdf.TypicalPlatform="Hitachi AMS,Hitachi HUS"
hdf.ReliesOn="Hitachi SNM2 CLI"
hdf.Version="1.0"
hdf.Comments="This connector discovers the status of Hitachi AMS/HUS's Processors, CSW, Cache, SM, Power Supplies, Batteries, Fans, Physical Disks and Environment."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"
hdf.NoAutoDetection="true"

#include MS_HW_HitachiSNM2CLI.hhdf

//
// DETECTION
//

// Check we are running these commands locally on a Linux Server
// LINUX ONLY
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="uname"
Detection.Criteria(1).ErrorMessage="Connector only works on a server running Linux"
Detection.Criteria(1).ExpectedResult="Linux"
Detection.Criteria(1).ExecuteLocally=1
Detection.Criteria(1).ForceSerialization=1


// STONAVM_HOME should be defined
// LINUX ONLY
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="if [ -n ""$STONAVM_HOME"" ]; then echo STONAVM_HOME Defined; fi"
Detection.Criteria(2).ErrorMessage="STONAVM_HOME is not defined"
Detection.Criteria(2).ExpectedResult="STONAVM_HOME Defined"
Detection.Criteria(2).ExecuteLocally=1
Detection.Criteria(2).ForceSerialization=1

// STONAVM_HOME should be defined
// LINUX ONLY
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="if [ -n ""$LD_LIBRARY_PATH"" ]; then echo LD_LIBRARY_PATH Defined; fi"
Detection.Criteria(3).ErrorMessage="LD_LIBRARY_PATH is not defined"
Detection.Criteria(3).ExpectedResult="LD_LIBRARY_PATH Defined"
Detection.Criteria(3).ExecuteLocally=1
Detection.Criteria(3).ForceSerialization=1

// We should be able to authenticate
// LINUX ONLY
Detection.Criteria(4).Type="OSCommand"
Detection.Criteria(4).CommandLine="export STONAVM_RSP_PASS=on;echo %{PASSWORD}>$STONAVM_HOME/MS_HW_pwdfile;$STONAVM_HOME/auaccountenv -set -uid %{USERNAME} -passwdfile $STONAVM_HOME/MS_HW_pwdfile"
Detection.Criteria(4).ErrorMessage="SNM2 CLI is unable to authenticate."
Detection.Criteria(4).ExpectedResult="The account information has been set successfully"
Detection.Criteria(4).ExecuteLocally=1
Detection.Criteria(4).ForceSerialization=1


// Linux Constants
#define _EF1_COMMAND_PART1 /bin/sh %EmbeddedFile(1)% %{USERNAME} %{PASSWORD}
#define _EF1_COMMAND_PART2 ;

/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = Main Collection Script
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
username=$1
password=$2
export STONAVM_ACT=on
export STONAVM_RSP_PASS=on
export MS_HW_pwdfile=$RANDOM
if [ -n STONAVM_HOME ]; then
        echo $password>$STONAVM_HOME/$MS_HW_pwdfile
        $STONAVM_HOME/auaccountenv -set -uid $username -passwdfile $STONAVM_HOME/$MS_HW_pwdfile
        UNITLIST=`$STONAVM_HOME/auunitref | /usr/bin/tail -n +2 | /bin/awk '{print $1}'`
        for UNIT in $UNITLIST
                do
                echo $password>$STONAVM_HOME/$MS_HW_pwdfile
                $STONAVM_HOME/auaccountenv -set -uid $username -passwdfile $STONAVM_HOME/$MS_HW_pwdfile
                echo MS_HW_SYSTEM_START $UNIT
                $STONAVM_HOME/$3 $4 $5 -unit $UNIT
                echo MS_HW_SYSTEM_END $UNIT
                done
         $STONAVM_HOME/auaccountenv -rm
        fi
EmbeddedFile(1).End
////////////////////////////////////////////////////////////////////
