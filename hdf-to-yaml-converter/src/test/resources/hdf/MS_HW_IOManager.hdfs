//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software(tm)
//
//                  MS_HW_IOManager.hdf
//
//      Supports: Adaptec RAID disk controllers (through the IOManager SNMP sub-agent)
//
//

// HEADER

hdf.DisplayName="Adaptec IOManager"
hdf.TypicalPlatform="Fujitsu-Siemens PRIMERGY"
hdf.ReliesOn="Adaptec IOManager"
hdf.Version="1.0"
hdf.Comments="This connector provides disk monitoring through the Adaptec IO Manager SNMP sub-agent which supports a few AAC-based Adaptec RAID controllers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.795.12.2.3.1.1"

//
// DISK CONTROLLERS
//

//
// Discovery

// Source(1) = ctlrTable SNMP table
// deviceID;ctrlDescription
DiskController.Discovery.Source(1).Type="SnmpTable"
DiskController.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.795.12.2.3.1.1"
DiskController.Discovery.Source(1).SnmpTableSelectColumns="ID,2"

// Give a best look to the description field
DiskController.Discovery.Source(1).Compute(1).Type="Extract"
DiskController.Discovery.Source(1).Compute(1).Column="2"
DiskController.Discovery.Source(1).Compute(1).SubColumn="1"
DiskController.Discovery.Source(1).Compute(1).SubSeparators=" -"

DiskController.Discovery.Source(1).Compute(2).Type="RightConcat"
DiskController.Discovery.Source(1).Compute(2).Column="2"
DiskController.Discovery.Source(1).Compute(2).String=" HostRAID"

// Source(2) = associationTable
// associationType;oid1;oid2
DiskController.Discovery.Source(2).Type="SnmpTable"
DiskController.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.795.12.2.12.1.1"
DiskController.Discovery.Source(2).SnmpTableSelectColumns="2,3,4"

// Filter: keep only "Shortcut: Physical Organization"
// associationType;oid1;oid2
DiskController.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
DiskController.Discovery.Source(2).Compute(1).Column="1"
DiskController.Discovery.Source(2).Compute(1).RegExp="Shortcut: Physical Organization"

// Extract the controller device ID from oid1
// associationType;controllerID;oid2
DiskController.Discovery.Source(2).Compute(2).Type="Replace"
DiskController.Discovery.Source(2).Compute(2).Column="2"
DiskController.Discovery.Source(2).Compute(2).Replace="1.3.6.1.4.1.795.12.2.3.1.1.1."
DiskController.Discovery.Source(2).Compute(2).ReplaceBy=""

// Source(3) = Table Joint of Source(1) and Source(2)
// We'll only keep disk controllers that have really disks attached to them
// deviceID;ctrlDescription;associationType;controllerID;oid2
DiskController.Discovery.Source(3).Type="TableJoint"
DiskController.Discovery.Source(3).LeftTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(3).LeftKeyColumn="1"
DiskController.Discovery.Source(3).RightKeyColumn="2"

// InstanceTable = Source(1)
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)
DiskController.Discovery.Instance.Vendor="Adaptec"


//
// PHYSICAL DISKS
//

//
// Discovery

// Source(1) = deviceTable SNMP table
// ID;devType;Model;SizeKB
PhysicalDisk.Discovery.Source(1).Type="SnmpTable"
PhysicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.795.12.2.2.1.1"
PhysicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,6"

// Keep only device type = 1 (disk)
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="3"

// Convert sizeKB to bytes
// ID;devType;Model;SizeBytes
PhysicalDisk.Discovery.Source(1).Compute(2).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(2).Column="4"
PhysicalDisk.Discovery.Source(1).Compute(2).MultiplyBy="1024"

// Retrieve the vendor from the model string
// ID;devType;Vendor;SizeBytes
PhysicalDisk.Discovery.Source(1).Compute(3).Type="Extract"
PhysicalDisk.Discovery.Source(1).Compute(3).Column="3"
PhysicalDisk.Discovery.Source(1).Compute(3).SubColumn="1"
PhysicalDisk.Discovery.Source(1).Compute(3).SubSeparators=" \t"

// Source(2) = associationTable
// associationType;oid1;oid2
PhysicalDisk.Discovery.Source(2).Type="SnmpTable"
PhysicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.795.12.2.12.1.1"
PhysicalDisk.Discovery.Source(2).SnmpTableSelectColumns="2,3,4"

// Filter: keep only "Shortcut: Physical Organization"
// associationType;oid1;oid2
PhysicalDisk.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(2).Compute(1).Column="1"
PhysicalDisk.Discovery.Source(2).Compute(1).RegExp="Shortcut: Physical Organization"

// Extract the controller device ID from oid1
// associationType;controllerID;oid2
PhysicalDisk.Discovery.Source(2).Compute(2).Type="Replace"
PhysicalDisk.Discovery.Source(2).Compute(2).Column="2"
PhysicalDisk.Discovery.Source(2).Compute(2).Replace="1.3.6.1.4.1.795.12.2.3.1.1.1."
PhysicalDisk.Discovery.Source(2).Compute(2).ReplaceBy=""

// Extract the physical disk device ID from oid2
// associationType;controllerID;physicalDiskID
PhysicalDisk.Discovery.Source(2).Compute(3).Type="Replace"
PhysicalDisk.Discovery.Source(2).Compute(3).Column="3"
PhysicalDisk.Discovery.Source(2).Compute(3).Replace="1.3.6.1.4.1.795.12.2.2.1.1.1."
PhysicalDisk.Discovery.Source(2).Compute(3).ReplaceBy=""

// Source(3) = Table Joint of Source(1) with Source(2)
// ID;devType;Vendor;SizeBytes;associationType;controllerID;physicalDiskID
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn="1"
PhysicalDisk.Discovery.Source(3).RightKeyColumn="3"

// Instance Table = Source(3)
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(6)

//
// Collect

// Collect type is: multi-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = deviceTable SNMP table
// ID;devType
PhysicalDisk.Collect.Source(1).Type="SnmpTable"
PhysicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.795.12.2.2.1.1"
PhysicalDisk.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Keep only device type = 1 (disk)
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column="2"
PhysicalDisk.Collect.Source(1).Compute(1).ValueList="3"

// Add the OID to the device ID, to make it match in the association table
// diskOID;devType
PhysicalDisk.Collect.Source(1).Compute(2).Type="LeftConcat"
PhysicalDisk.Collect.Source(1).Compute(2).Column="1"
PhysicalDisk.Collect.Source(1).Compute(2).String="1.3.6.1.4.1.795.12.2.2.1.1.1."

// Source(2) = associationTable
// associationType;oid1;oid2
PhysicalDisk.Collect.Source(2).Type="SnmpTable"
PhysicalDisk.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.795.12.2.12.1.1"
PhysicalDisk.Collect.Source(2).SnmpTableSelectColumns="2,3,4"

// Filter: keep only "Operational State"
// associationType;diskOID;stateOID
PhysicalDisk.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(2).Compute(1).Column="1"
PhysicalDisk.Collect.Source(2).Compute(1).RegExp="Operational State"

// Source(3) = Table Joint between source(1) and source(2)
// diskOID;devType;associationType;diskOID;stateOID
PhysicalDisk.Collect.Source(3).Type="TableJoint"
PhysicalDisk.Collect.Source(3).LeftTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.Source(3).RightTable=%PhysicalDisk.Collect.Source(2)%
PhysicalDisk.Collect.Source(3).LeftKeyColumn="1"
PhysicalDisk.Collect.Source(3).RightKeyColumn="2"

// Source(4) = the operationalStateTable
// stateID;operationalCurrentErrorStatus;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(4).Type="SnmpTable"
PhysicalDisk.Collect.Source(4).SnmpTableOid="1.3.6.1.4.1.795.12.2.16.1.1"
PhysicalDisk.Collect.Source(4).SnmpTableSelectColumns="ID,10,11"

// Convert the state ID into a stateOID
// stateOID;operationalCurrentErrorStatus;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(4).Compute(1).Type="LeftConcat"
PhysicalDisk.Collect.Source(4).Compute(1).Column="1"
PhysicalDisk.Collect.Source(4).Compute(1).String="1.3.6.1.4.1.795.12.2.16.1.1.1."

// Source(5) = table joint between source(3) and source(4)
// diskOID;devType;associationType;diskOID;stateOID;stateOID;operationalCurrentErrorStatus;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(5).Type="TableJoint"
PhysicalDisk.Collect.Source(5).LeftTable=%PhysicalDisk.Collect.Source(3)%
PhysicalDisk.Collect.Source(5).RightTable=%PhysicalDisk.Collect.Source(4)%
PhysicalDisk.Collect.Source(5).LeftKeyColumn="5"
PhysicalDisk.Collect.Source(5).RightKeyColumn="1"

// Duplicate the operationalCurrentErrorStatus
// diskOID;devType;associationType;diskOID;stateOID;stateOID;operationalCurrentErrorStatus;operationalCurrentErrorStatus;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(5).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(5).Compute(1).Column="7"

// Translate the first status value into a PATROL Status
// diskOID;devType;associationType;diskOID;stateOID;stateOID;patrolStatus;operationalCurrentErrorStatus;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(5).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(5).Compute(2).Column="7"
PhysicalDisk.Collect.Source(5).Compute(2).TranslationTable="DiskStatusTranslationTable"

// Translate the second status value into a more readable information
// diskOID;devType;associationType;diskOID;stateOID;stateOID;patrolStatus;statusInformation;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(5).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(5).Compute(3).Column="8"
PhysicalDisk.Collect.Source(5).Compute(3).TranslationTable="DiskStatusInformationTranslationTable"

// Translate the original SMARTStatus into a true/false value that says if a failure is predicted
// diskOID;devType;associationType;diskOID;stateOID;stateOID;patrolStatus;statusInformation;PredictedFailure
PhysicalDisk.Collect.Source(5).Compute(4).Type="Translate"
PhysicalDisk.Collect.Source(5).Compute(4).Column="9"
PhysicalDisk.Collect.Source(5).Compute(4).TranslationTable="PhysicalDiskSMARTTranslationTable"

// The DiskStatusTranslationTable
DiskStatusTranslationTable(3)="OK"
DiskStatusTranslationTable(4)="WARN"
DiskStatusTranslationTable(5)="ALARM"
DiskStatusTranslationTable(6)="ALARM"
DiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
DiskStatusInformationTranslationTable(3)=""
DiskStatusInformationTranslationTable(4)="Degraded"
DiskStatusInformationTranslationTable(5)="Critical"
DiskStatusInformationTranslationTable(6)="Non-recoverable"
DiskStatusInformationTranslationTable(Default)="Unknown Status"

// The PhysicalDiskSMARTTranslationTable
PhysicalDiskSMARTTranslationTable(5)="true"
PhysicalDiskSMARTTranslationTable(6)="true"
PhysicalDiskSMARTTranslationTable(Default)="false"

// Convert the diskOID back to deviceID
// diskID;devType;associationType;diskOID;stateOID;stateOID;patrolStatus;statusInformation;operationalPredictedFailureStatus
PhysicalDisk.Collect.Source(5).Compute(5).Type="Replace"
PhysicalDisk.Collect.Source(5).Compute(5).Column="1"
PhysicalDisk.Collect.Source(5).Compute(5).Replace="1.3.6.1.4.1.795.12.2.2.1.1.1."
PhysicalDisk.Collect.Source(5).Compute(5).ReplaceBy=""

// The collect table = Source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(5)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(7)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(8)
PhysicalDisk.Collect.PredictedFailure=ValueTable.Column(9)


//
// LOGICAL DISKS
//

//
// Discovery

// Source(1) = volumeSetTable SNMP table
// ID;SizeMB
LogicalDisk.Discovery.Source(1).Type="SnmpTable"
LogicalDisk.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.795.12.2.8.1.1"
LogicalDisk.Discovery.Source(1).SnmpTableSelectColumns="ID,3"

// Statically add a field to say this is a RAID0 volume
// ID;SizeMB;RAIDLevel
LogicalDisk.Discovery.Source(1).Compute(1).Type="RightConcat"
LogicalDisk.Discovery.Source(1).Compute(1).Column="2"
LogicalDisk.Discovery.Source(1).Compute(1).String=";0"

// Convert the ID into a diskOID
// diskOID;SizeMB;RAIDLevel
LogicalDisk.Discovery.Source(1).Compute(2).Type="LeftConcat"
LogicalDisk.Discovery.Source(1).Compute(2).Column="1"
LogicalDisk.Discovery.Source(1).Compute(2).String="1.3.6.1.4.1.795.12.2.8.1.1.1."

// Convert sizeMB to bytes
// diskOID;SizeBytes;RAIDLevel
LogicalDisk.Discovery.Source(1).Compute(3).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(3).Column="2"
LogicalDisk.Discovery.Source(1).Compute(3).MultiplyBy="1048576"

// Source(2) = mlVolumeSetTable SNMP table
// ID;SizeMB;RAIDLevelCode
LogicalDisk.Discovery.Source(2).Type="SnmpTable"
LogicalDisk.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.795.12.2.9.1.1"
LogicalDisk.Discovery.Source(2).SnmpTableSelectColumns="ID,3,5"

// Translate the RAIDLevelCode into an actual RAID level
// ID;SizeMB;RAIDLevel
LogicalDisk.Discovery.Source(2).Compute(1).Type="Translate"
LogicalDisk.Discovery.Source(2).Compute(1).Column="3"
LogicalDisk.Discovery.Source(2).Compute(1).TranslationTable="RAIDLevelCodeTranslationTable"

// The RAIDLevelCodeTranslationTable
RAIDLevelCodeTranslationTable(2)="10"
RAIDLevelCodeTranslationTable(3)="50"
RAIDLevelCodeTranslationTable(Default)=""

// Convert the ID into a diskOID
// diskOID;SizeMB;RAIDLevel
LogicalDisk.Discovery.Source(2).Compute(2).Type="LeftConcat"
LogicalDisk.Discovery.Source(2).Compute(2).Column="1"
LogicalDisk.Discovery.Source(2).Compute(2).String="1.3.6.1.4.1.795.12.2.9.1.1.1."

// Convert sizeMB to bytes
// diskOID;SizeBytes;RAIDLevel
LogicalDisk.Discovery.Source(2).Compute(3).Type="Multiply"
LogicalDisk.Discovery.Source(2).Compute(3).Column="2"
LogicalDisk.Discovery.Source(2).Compute(3).MultiplyBy="1048576"

// Source(3) = Union of source(1) and source(2)
// diskOID;SizeBytes;RAIDLevel
LogicalDisk.Discovery.Source(3).Type="TableUnion"
LogicalDisk.Discovery.Source(3).Table1=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(3).Table2=%LogicalDisk.Discovery.Source(2)%

// Source(4) = associationTable
// associationType;oid1;oid2
LogicalDisk.Discovery.Source(4).Type="SnmpTable"
LogicalDisk.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.795.12.2.12.1.1"
LogicalDisk.Discovery.Source(4).SnmpTableSelectColumns="2,3,4"

// Filter: keep only "Shortcut: Logical to Physical Organization"
// associationType;oid1;oid2
LogicalDisk.Discovery.Source(4).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(4).Compute(1).Column="1"
LogicalDisk.Discovery.Source(4).Compute(1).RegExp="Shortcut: Logical to Physical Organization"

// Keep only lines with a controllerID
LogicalDisk.Discovery.Source(4).Compute(2).Type="KeepOnlyMatchingLines"
LogicalDisk.Discovery.Source(4).Compute(2).Column="3"
LogicalDisk.Discovery.Source(4).Compute(2).RegExp="1\.3\.6\.1\.4\.1\.795\.12\.2\.3\.1\.1\.1\."

// Extract the controller device ID from oid2
// associationType;oid1;controllerID
LogicalDisk.Discovery.Source(4).Compute(3).Type="Replace"
LogicalDisk.Discovery.Source(4).Compute(3).Column="3"
LogicalDisk.Discovery.Source(4).Compute(3).Replace="1.3.6.1.4.1.795.12.2.3.1.1.1."
LogicalDisk.Discovery.Source(4).Compute(3).ReplaceBy=""

// Source(5) = Table Joint of Source(3) with Source(4)
// diskOID;SizeBytes;RAIDLevel;associationType;oid1;controllerID
LogicalDisk.Discovery.Source(5).Type="TableJoint"
LogicalDisk.Discovery.Source(5).LeftTable=%LogicalDisk.Discovery.Source(3)%
LogicalDisk.Discovery.Source(5).RightTable=%LogicalDisk.Discovery.Source(4)%
LogicalDisk.Discovery.Source(5).LeftKeyColumn="1"
LogicalDisk.Discovery.Source(5).RightKeyColumn="2"

// Instance Table = Source(5)
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(5)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(6)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(3)


// Collect
//

// Collect type is: multi-instance
LogicalDisk.Collect.Type="MonoInstance"

// Source(1) = the associationTable SNMP table
// associationType;oid1;oid2
LogicalDisk.Collect.Source(1).Type="SnmpTable"
LogicalDisk.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.795.12.2.12.1.1"
LogicalDisk.Collect.Source(1).SnmpTableSelectColumns="2,3,4"

// Filter: keep only "Operational State"
// associationType;diskOID;stateOID
LogicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(1).Compute(1).Column="1"
LogicalDisk.Collect.Source(1).Compute(1).RegExp="Operational State"

// Keep only the line corresponding to the logical disk OID we're processing
// associationType;diskOID;stateOID (one line)
LogicalDisk.Collect.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
LogicalDisk.Collect.Source(1).Compute(2).Column="2"
LogicalDisk.Collect.Source(1).Compute(2).ValueList=%LogicalDisk.Collect.DeviceID%

// Source(2) = the operationalStateTable
// stateID;operationalCurrentErrorStatus
LogicalDisk.Collect.Source(2).Type="SnmpTable"
LogicalDisk.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.795.12.2.16.1.1"
LogicalDisk.Collect.Source(2).SnmpTableSelectColumns="ID,10"

// Convert the state ID into a stateOID
// stateOID;operationalCurrentErrorStatus
LogicalDisk.Collect.Source(2).Compute(1).Type="LeftConcat"
LogicalDisk.Collect.Source(2).Compute(1).Column="1"
LogicalDisk.Collect.Source(2).Compute(1).String="1.3.6.1.4.1.795.12.2.16.1.1.1."

// Source(3) = table joint between source(1) and source(2)
// associationType;diskOID;stateOID;stateOID;operationalCurrentErrorStatus (one line)
LogicalDisk.Collect.Source(3).Type="TableJoint"
LogicalDisk.Collect.Source(3).LeftTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.Source(3).RightTable=%LogicalDisk.Collect.Source(2)%
LogicalDisk.Collect.Source(3).LeftKeyColumn="3"
LogicalDisk.Collect.Source(3).RightKeyColumn="1"

// Duplicate the operationalCurrentErrorStatus
// associationType;diskOID;stateOID;stateOID;operationalCurrentErrorStatus;operationalCurrentErrorStatus (one line)
LogicalDisk.Collect.Source(3).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(3).Compute(1).Column="5"

// Translate the first status value into a PATROL Status (see translation table in the physical disk section)
// associationType;diskOID;stateOID;stateOID;patrolStatus;operationalCurrentErrorStatus (one line)
LogicalDisk.Collect.Source(3).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(3).Compute(2).Column="5"
LogicalDisk.Collect.Source(3).Compute(2).TranslationTable="DiskStatusTranslationTable"

// Translate the second status value into a more readable information (see translation table in the physical disk section)
// associationType;diskOID;stateOID;stateOID;patrolStatus;statusInformation (one line)
LogicalDisk.Collect.Source(3).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(3).Compute(3).Column="6"
LogicalDisk.Collect.Source(3).Compute(3).TranslationTable="DiskStatusInformationTranslationTable"

// The collect table = Source(3)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(3)%
LogicalDisk.Collect.Status=ValueTable.Column(5)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(6)

