// Enclosure: computer

// Source(1) CIM_ComputerSystem class
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemNameSpace="root/cimv2"
Enclosure.Discovery.Source(1).WbemQuery="SELECT Manufacturer,Model,SerialNumber FROM CIM_Chassis"

// Add a Fake ID to our table so we can join it with Source(2)
Enclosure.Discovery.Source(1).Compute(1).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(1).Column="1"
Enclosure.Discovery.Source(1).Compute(1).String="MSHW_TableID;"

// Source(2) CIM_Chassis to get the manufacturer
Enclosure.Discovery.Source(2).Type="WBEM"
Enclosure.Discovery.Source(2).WbemNameSpace="root/cimv2"
Enclosure.Discovery.Source(2).WbemQuery="SELECT BaseUnits,CurrentReading FROM CIM_NumericSensor"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
Enclosure.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(2).Compute(1).Column=1
Enclosure.Discovery.Source(2).Compute(1).ValueList="7"

// Add a Fake ID to our table so we can join it with Source(1)
Enclosure.Discovery.Source(2).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(2).Compute(2).Column="1"
Enclosure.Discovery.Source(2).Compute(2).String="MSHW_TableID;"

// Joint the tables to have
// MSHW_TableID;Manufacturer;Model;SerialNumber;MSHW_TableID;BaseUnits;PowerConsumption;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn="1"
Enclosure.Discovery.Source(3).RightKeyColumn="1"
Enclosure.Discovery.Source(3).DefaultRightLine=";;;"

// VMWare sometimes returns more than one, often duplicate, enclosures  Will Table Joint to ensure only one is returned.  This procedure is only necessary for the PM.
// MSHW_TableID;Manufacturer;Model;SerialNumber;MSHW_TableID;BaseUnits;PowerConsumption;UniqueID;
Enclosure.Discovery.Source(4).Type="TableJoint"
Enclosure.Discovery.Source(4).LeftTable="MSHW_TableID;"
Enclosure.Discovery.Source(4).RightTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Source(4).LeftKeyColumn="1"
Enclosure.Discovery.Source(4).RightKeyColumn="1"

// InstanceTable = Source(1)
// MSHW_TableID;MSHW_TableID;Manufacturer;Model;SerialNumber;MSHW_TableID;BaseUnits;PowerConsumption;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Instance.DeviceID="ESX4iServer"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(4)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(8)

// Make a copy of the discovery in the enclosure section
Enclosure.Discovery.Source(5)=%Memory.Discovery.Source(6)%


// Collect

Enclosure.Collect.Type="MultiInstance"

//
Enclosure.Collect.Source(1).Type="WBEM"
Enclosure.Collect.Source(1).WbemNameSpace="root/cimv2"
Enclosure.Collect.Source(1).WbemQuery="SELECT BaseUnits,CurrentReading FROM CIM_NumericSensor"

// Keep only lines with units of type 7 (Watts)
// ..hoping that there is only one power sensor per server.
Enclosure.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(1).Compute(1).Column=1
Enclosure.Collect.Source(1).Compute(1).ValueList="7"

// Divide by 100
//
Enclosure.Collect.Source(1).Compute(2).Type="Divide"
Enclosure.Collect.Source(1).Compute(2).Column="2"
Enclosure.Collect.Source(1).Compute(2).DivideBy="100"

Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID="ESX4iServer"
Enclosure.Collect.PowerConsumption=ValueTable.Column(2)


// CPUs

// Discovery

// Caption,CurrentClockSpeed,HealthState,ModelName,DeviceID
cpu.Discovery.Source(1).Type="WBEM"
cpu.Discovery.Source(1).WbemQuery="SELECT Caption,CurrentClockSpeed,HealthState,ModelName,DeviceID FROM CIM_Processor"
cpu.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with a valid HealthState
// Caption,CurrentClockSpeed,HealthState,ModelName,DeviceID
cpu.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
cpu.Discovery.Source(1).Compute(1).Column=3
cpu.Discovery.Source(1).Compute(1).ValueList="5,15,20,25,30"

// InstanceTable = Source(1)
// Caption,CurrentClockSpeed,HealthState,ModelName,DeviceID
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(5)
cpu.Discovery.Instance.DisplayID=InstanceTable.Column(1)
cpu.Discovery.Instance.Model=InstanceTable.Column(4)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(2)

// Collect

cpu.Collect.Type="MultiInstance"

// Caption,HealthState
cpu.Collect.Source(1).Type="WBEM"
cpu.Collect.Source(1).WbemQuery="SELECT DeviceID,HealthState FROM CIM_Processor"
cpu.Collect.Source(1).WbemNameSpace="root/cimv2"

// Caption,HealthState,HealthState
cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column="2"

// Caption,PatrolStatus,HealthState
cpu.Collect.Source(1).Compute(2).Type="Translate"
cpu.Collect.Source(1).Compute(2).Column="2"
cpu.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Caption,PatrolStatus,StatusInformation
cpu.Collect.Source(1).Compute(3).Type="Translate"
cpu.Collect.Source(1).Compute(3).Column="3"
cpu.Collect.Source(1).Compute(3).TranslationTable="statusInformationTranslationTable"

cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(2)
cpu.Collect.StatusInformation=ValueTable.Column(3)

// Memory

// Source (1)
// Get a list of discrete sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name
Memory.Discovery.Source(1).Type="WBEM"
Memory.Discovery.Source(1).WbemQuery="SELECT MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID,SensorType FROM OMC_DiscreteSensor"
Memory.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Add the NumericOnly Flag
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericOnly,CurrentState,DeviceID,SensorType
Memory.Discovery.Source(1).Compute(1).Type="RightConcat"
Memory.Discovery.Source(1).Compute(1).Column=5
Memory.Discovery.Source(1).Compute(1).String=";0"

// Source (2)
// Get a list of numeric sensors (these are errorcounts, so we don't want the number only the status)
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID
Memory.Discovery.Source(2).Type="WBEM"
Memory.Discovery.Source(2).WbemQuery="SELECT MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID,SensorType FROM OMC_NumericSensor"
Memory.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Add the NumericOnly Flag
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericOnly,CurrentState,DeviceID,SensorType
Memory.Discovery.Source(2).Compute(1).Type="RightConcat"
Memory.Discovery.Source(2).Compute(1).Column=5
Memory.Discovery.Source(2).Compute(1).String=";1"

// Union the Discrete and Numeric Sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericOnly,CurrentState,DeviceID,SensorType
Memory.Discovery.Source(3).Type="TableUnion"
Memory.Discovery.Source(3).Table1=%Memory.Discovery.Source(1)%
Memory.Discovery.Source(3).Table2=%Memory.Discovery.Source(2)%

// Keep Only Memory Sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericOnly,CurrentState,DeviceID,SensorType
Memory.Discovery.Source(3).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(3).Compute(1).Column=4
Memory.Discovery.Source(3).Compute(1).ValueList="12"

// Process the discrete sensors to take worse Status and make each ID unique
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(3).Compute(2).Type="Awk"
Memory.Discovery.Source(3).Compute(2).AwkScript=EmbeddedFile(1)
Memory.Discovery.Source(3).Compute(2).KeepOnlyRegExp="^MSHW;"
Memory.Discovery.Source(3).Compute(2).Separators=";"
Memory.Discovery.Source(3).Compute(2).SelectColumns="2,4,5,6"

// Source (4)
// Get a the overall memory status
// HealthState
Memory.Discovery.Source(4).Type="WBEM"
Memory.Discovery.Source(4).WbemQuery="SELECT HealthState FROM OMC_Memory"
Memory.Discovery.Source(4).WbemNameSpace="root/cimv2"

// Add the Global ID
// DeviceID,HealthState
Memory.Discovery.Source(4).Compute(1).Type="LeftConcat"
Memory.Discovery.Source(4).Compute(1).Column=1
Memory.Discovery.Source(4).Compute(1).String="Global;"

// Add the Global Name and the NumericOnly Column
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(4).Compute(2).Type="RightConcat"
Memory.Discovery.Source(4).Compute(2).Column=2
Memory.Discovery.Source(4).Compute(2).String=";Global;0"

// Get a copy of the last memory discovery.  This was stored under Enclosure 7
// DeviceID,HealthState,Tag,ElementName,Size
Memory.Discovery.Source(5)=%Enclosure.Discovery.Source(5)%

// Add OldInstance- to the Name
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(5).Compute(1).Type="LeftConcat"
Memory.Discovery.Source(5).Compute(1).Column=3
Memory.Discovery.Source(5).Compute(1).String="OldInstance-"

// Exclude OldInstance-Global as we're only interested in individual modules.
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(5).Compute(2).Type="ExcludeMatchingLines"
Memory.Discovery.Source(5).Compute(2).Column=3
Memory.Discovery.Source(5).Compute(2).ValueList="OldInstance-Global"

// Exclude NumericOnly Sensors as they can exist with Global
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(5).Compute(3).Type="ExcludeMatchingLines"
Memory.Discovery.Source(5).Compute(3).Column=4
Memory.Discovery.Source(5).Compute(3).ValueList="1"

// Source (6) = Table Union of 4 (OMC_Memory) and 3 (IPMI) and 5 (Old Instance)
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(6).Type="TableUnion"
Memory.Discovery.Source(6).Table1=%Memory.Discovery.Source(3)%
Memory.Discovery.Source(6).Table2=%Memory.Discovery.Source(4)%
Memory.Discovery.Source(6).Table3=%Memory.Discovery.Source(5)%

// Use an awk script to determine if there are any valid IPMI sensors, if not, use the global.
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(6).Compute(1).Type="Awk"
Memory.Discovery.Source(6).Compute(1).AwkScript=EmbeddedFile(2)
Memory.Discovery.Source(6).Compute(1).KeepOnlyRegExp="^MSHW;"
Memory.Discovery.Source(6).Compute(1).Separators=";"
Memory.Discovery.Source(6).Compute(1).SelectColumns="2,3,4,5"

// Make a copy of discovery 8 for use as the instance table.  Source(8) with its IPMIFound label will be passed to enclosure to be used at the next memory discovery.)
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(7)=%Memory.Discovery.Source(6)%

// Exclude the ipmiFound line
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.Source(7).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(7).Compute(1).Column=1
Memory.Discovery.Source(7).Compute(1).ValueList="ipmiFound"


// InstanceTable = Source(9)
// DeviceID,HealthState,Name,NumericOnly
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(7)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(3)


// Memory

// Collect

// Collect

Memory.Collect.Type="MultiInstance"

// Source (1)
// Get a list of discrete sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID
Memory.Collect.Source(1).Type="WBEM"
Memory.Collect.Source(1).WbemQuery="SELECT MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID FROM OMC_DiscreteSensor"
Memory.Collect.Source(1).WbemNameSpace="root/cimv2"

// Add a numeric sensor flag
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericSensor,CurrentState,DeviceID
Memory.Collect.Source(1).Compute(1).Type="RightConcat"
Memory.Collect.Source(1).Compute(1).Column=5
Memory.Collect.Source(1).Compute(1).String=";0"

// Source (2)
// Get a list of numeric sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID
Memory.Collect.Source(2).Type="WBEM"
Memory.Collect.Source(2).WbemQuery="SELECT MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,CurrentState,DeviceID FROM OMC_NumericSensor"
Memory.Collect.Source(2).WbemNameSpace="root/cimv2"

// Add a numeric sensor flag
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericSensor,CurrentState,DeviceID
Memory.Collect.Source(2).Compute(1).Type="RightConcat"
Memory.Collect.Source(2).Compute(1).Column=4
Memory.Collect.Source(2).Compute(1).String=";1"

// Union the Discrete and Numeric Sensors
// MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericSensor,CurrentState,DeviceID
Memory.Collect.Source(3).Type="TableUnion"
Memory.Collect.Source(3).Table1=%Memory.Collect.Source(1)%
Memory.Collect.Source(3).Table2=%Memory.Collect.Source(2)%

// Process the discrete sensors to take worse Status and make each ID unique
// DeviceID,StatusInformation,HealthState
Memory.Collect.Source(3).Compute(1).Type="Awk"
Memory.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(1)
Memory.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
Memory.Collect.Source(3).Compute(1).Separators=";"
Memory.Collect.Source(3).Compute(1).SelectColumns="2,3,4"

// Patrol Status comes from HealthState
// MonitoredDeviceID,StatusInformation,HealthState
Memory.Collect.Source(3).Compute(2).Type="Translate"
Memory.Collect.Source(3).Compute(2).Column=3
Memory.Collect.Source(3).Compute(2).TranslationTable="statusTranslationTable"

// Get a the overall memory status
// HealthState
Memory.Collect.Source(4).Type="WBEM"
Memory.Collect.Source(4).WbemQuery="SELECT HealthState FROM OMC_Memory"
Memory.Collect.Source(4).WbemNameSpace="root/cimv2"

// Add the Global ID and an identifier for use in the AWK script
// MonitoredDeviceID,HealthState
Memory.Collect.Source(4).Compute(1).Type="LeftConcat"
Memory.Collect.Source(4).Compute(1).Column=1
Memory.Collect.Source(4).Compute(1).String="Global;"

// Duplicate the Status Column
// MonitoredDeviceID,HealthState,HealthState
Memory.Collect.Source(4).Compute(2).Type="DuplicateColumn"
Memory.Collect.Source(4).Compute(2).Column=2

// Translate Status
// MonitoredDeviceID,HealthState,PatrolStatus
Memory.Collect.Source(4).Compute(3).Type="Translate"
Memory.Collect.Source(4).Compute(3).Column=3
Memory.Collect.Source(4).Compute(3).TranslationTable="statusTranslationTable"

// Translate Status Information
// MonitoredDeviceID,StatusInformation,PatrolStatus
Memory.Collect.Source(4).Compute(4).Type="Translate"
Memory.Collect.Source(4).Compute(4).Column=2
Memory.Collect.Source(4).Compute(4).TranslationTable="statusInformationTranslationTable"

// Union of Global and IPMI (4 & 3)
// MonitoredDeviceID,StatusInformation,PatrolStatus
Memory.Collect.Source(5).Type="TableUnion"
Memory.Collect.Source(5).Table1=%Memory.Collect.Source(3)%
Memory.Collect.Source(5).Table2=%Memory.Collect.Source(4)%

// Instance Table
// MonitoredDeviceID,StatusInformation,PatrolStatus
Memory.Collect.ValueTable=%Memory.Collect.Source(5)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(3)
Memory.Collect.StatusInformation=ValueTable.Column(2)





// PowerSupply

// Discovery

// Caption,Availability,DeviceID
PowerSupply.Discovery.Source(1).Type="WBEM"
PowerSupply.Discovery.Source(1).WbemQuery="SELECT Caption,Availability,DeviceID FROM CIM_PowerSupply"
PowerSupply.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with a valid HealthState
// Caption,Availability,DeviceID
// 1 = Other, 2 = Unknown, 6 = Not Applicable, 11 = Not Installed
PowerSupply.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).ValueList="1,2,6,11"

// InstanceTable = Source(1)
// Caption,Availability,DeviceID
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(1)



// Collect

PowerSupply.Collect.Type="MultiInstance"

// DeviceID,HealthState,Availability
PowerSupply.Collect.Source(1).Type="WBEM"
PowerSupply.Collect.Source(1).WbemQuery="SELECT DeviceID,Healthstate,Availability FROM CIM_PowerSupply"
PowerSupply.Collect.Source(1).WbemNameSpace="root/cimv2"

// Duplicate Availability
// DeviceID,HealthState,Availability,Availability
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=3

// Power Supply Patrol Status comes from HealthState
// DeviceID,PatrolStatus,Availability,Availability
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column=2
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="statusTranslationTable"

// Power Supply Information Status comes from Availability
// DeviceID,PatrolStatus,StatusInformation,Availability
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=3
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="psuAvailabilityInformationTranslationTable"

// On some machines (namely Cisco Blades) the Health State Remains 0 (UNKNOWN) even if Availability clearly indicates a status
// Translate the Availability into Patrol Status
// DeviceID,PatrolStatus,StatusInformation,PatrolStatus(Availability)
PowerSupply.Collect.Source(1).Compute(4).Type="Translate"
PowerSupply.Collect.Source(1).Compute(4).Column=4
PowerSupply.Collect.Source(1).Compute(4).TranslationTable="psuAvailabilityTranslationTable"

// Exclude lines whose status is missing.  They will be picked up in the discovery as missing.
// DeviceID,PatrolStatus,StatusInformation,PatrolStatus(Availability)
PowerSupply.Collect.Source(1).Compute(5).Type="ExcludeMatchingLines"
PowerSupply.Collect.Source(1).Compute(5).Column=2
PowerSupply.Collect.Source(1).Compute(5).ValueList="MISSING"

// Let's add the availability status to the main Patrol Status and then take worse case
// DeviceID,PatrolStatus,StatusInformation,PatrolStatus(Availability)
PowerSupply.Collect.Source(1).Compute(6).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(6).Column=2
PowerSupply.Collect.Source(1).Compute(6).String="|"

PowerSupply.Collect.Source(1).Compute(7).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(7).Column=2
PowerSupply.Collect.Source(1).Compute(7).String=Column(4)

PowerSupply.Collect.Source(1).Compute(8).Type="Convert"
PowerSupply.Collect.Source(1).Compute(8).Column=2
PowerSupply.Collect.Source(1).Compute(8).ConversionType="Array2SimpleStatus"

// Value Table
// DeviceID,PatrolStatus,StatusInformation
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

// Temperature

// Discovery

// Source(1) Numeric Thermal Table
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Type="WBEM"
Temperature.Discovery.Source(1).WbemQuery="SELECT BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical FROM CIM_NumericSensor"
Temperature.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 2 (Degree C)
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).ValueList="2"

// Divide Thresholds by 100
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(2).Type="Divide"
Temperature.Discovery.Source(1).Compute(2).Column=6
Temperature.Discovery.Source(1).Compute(2).DivideBy="100"
Temperature.Discovery.Source(1).Compute(3).Type="Divide"
Temperature.Discovery.Source(1).Compute(3).Column=7
Temperature.Discovery.Source(1).Compute(3).DivideBy="100"

// Remove Status of Unknown
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=5
Temperature.Discovery.Source(1).Compute(4).Replace="0"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""

// Thresholds for Temperature are sometimes reported as "0" by the agent.  Replacing these "0" by no value to prevent incorrect thresholds.
// Add a MSHW_ string to our value and then remove MSHW_0. This should remove a 0 value and only that value
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical
Temperature.Discovery.Source(1).Compute(5).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(5).Column=6
Temperature.Discovery.Source(1).Compute(5).String="MSHW_"
Temperature.Discovery.Source(1).Compute(6).Type="LeftConcat"
Temperature.Discovery.Source(1).Compute(6).Column=7
Temperature.Discovery.Source(1).Compute(6).String="MSHW_"

// Remove 0 value
Temperature.Discovery.Source(1).Compute(7).Type="Replace"
Temperature.Discovery.Source(1).Compute(7).Column=6
Temperature.Discovery.Source(1).Compute(7).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(7).ReplaceBy=""
Temperature.Discovery.Source(1).Compute(8).Type="Replace"
Temperature.Discovery.Source(1).Compute(8).Column=7
Temperature.Discovery.Source(1).Compute(8).Replace="MSHW_0"
Temperature.Discovery.Source(1).Compute(8).ReplaceBy=""

// Remove MSHW_ for non 0 values
Temperature.Discovery.Source(1).Compute(9).Type="Replace"
Temperature.Discovery.Source(1).Compute(9).Column=6
Temperature.Discovery.Source(1).Compute(9).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(9).ReplaceBy=""
Temperature.Discovery.Source(1).Compute(10).Type="Replace"
Temperature.Discovery.Source(1).Compute(10).Column=7
Temperature.Discovery.Source(1).Compute(10).Replace="MSHW_"
Temperature.Discovery.Source(1).Compute(10).ReplaceBy=""

// Add a Sensor Type Column
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical,(SensorType)
Temperature.Discovery.Source(1).Compute(11).Type="RightConcat"
Temperature.Discovery.Source(1).Compute(11).Column=7
Temperature.Discovery.Source(1).Compute(11).String=";"

// Source(2) Discrete Thermal Table
// Caption,DeviceID,HealthState,SensorType
Temperature.Discovery.Source(2).Type="WBEM"
Temperature.Discovery.Source(2).WbemQuery="SELECT Caption,DeviceID,HealthState,SensorType FROM OMC_DiscreteSensor"
Temperature.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with sensor type 2 (Thermal)
// Caption,DeviceID,HealthState,SensorType
Temperature.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(1).Column=3
Temperature.Discovery.Source(2).Compute(1).ValueList="2"

// Keep only lines with a valid HealthState
// Caption,DeviceID,HealthState,SensorType
Temperature.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(2).Compute(2).Column=2
Temperature.Discovery.Source(2).Compute(2).ValueList="5,15,20,25,30"

// Need to add a bunch of columns so the dicrete and numerical tables will matchup
// Add BaseUnits
// (BaseUnits),Caption,DeviceID,HealthState,SensorType
Temperature.Discovery.Source(2).Compute(3).Type="LeftConcat"
Temperature.Discovery.Source(2).Compute(3).Column=1
Temperature.Discovery.Source(2).Compute(3).String=";"
// Add CurrentReading,DeviceID
// (BaseUnits),Caption,(CurrentReading),DeviceID,HealthState,SensorType
Temperature.Discovery.Source(2).Compute(4).Type="LeftConcat"
Temperature.Discovery.Source(2).Compute(4).Column=3
Temperature.Discovery.Source(2).Compute(4).String=";"
// Add UpperThresholdNonCritical,UpperThresholdCritical
// (BaseUnits),Caption,(CurrentReading),DeviceID,HealthState,(UpperThresholdNonCritical),(UpperThresholdCritical),SensorType
Temperature.Discovery.Source(2).Compute(5).Type="LeftConcat"
Temperature.Discovery.Source(2).Compute(5).Column=6
Temperature.Discovery.Source(2).Compute(5).String=";;"


// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical, SensorType
Temperature.Discovery.Source(3).Type="TableUnion"
Temperature.Discovery.Source(3).Table1=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Source(3).Table2=%Temperature.Discovery.Source(2)%

// MSHW;BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical, SensorType
Temperature.Discovery.Source(3).Compute(1).Type="Awk"
Temperature.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(3)

// MSHW;BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical, SensorType

Temperature.Discovery.Source(3).Compute(2).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(3).Compute(2).Column=1
Temperature.Discovery.Source(3).Compute(2).ValueList="MSHW"

// InstanceTable = Source(1)
//          1        2         3            4             5                       6              7
// MSHW;BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical, SensorType
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(3)%
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(5)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(6)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(8)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(7)

// Collect

Temperature.Collect.Type="MultiInstance"

// BaseUnits,DeviceID,CurrentReading,HealthState
// Note - Both RPM and Percent Temperature speeds are in Current Reading.
Temperature.Collect.Source(1).Type="WBEM"
Temperature.Collect.Source(1).WbemQuery="SELECT BaseUnits,DeviceID,CurrentReading,HealthState FROM CIM_NumericSensor"
Temperature.Collect.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 2 (Degree C)
// BaseUnits,DeviceID,CurrentReading,HealthState
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).ValueList="2"

// Divide Speed by 100
// BaseUnits,DeviceID,CurrentReading,HealthState
Temperature.Collect.Source(1).Compute(2).Type="Divide"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).DivideBy="100"

// Source(2) Discrete Thermal Table
// SensorType,DeviceID,HealthState
Temperature.Collect.Source(2).Type="WBEM"
Temperature.Collect.Source(2).WbemQuery="SELECT SensorType,DeviceID,HealthState FROM OMC_DiscreteSensor"
Temperature.Collect.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 2 (Thermal)
// SensorType,DeviceID,HealthState
Temperature.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(2).Compute(1).Column=1
Temperature.Collect.Source(2).Compute(1).ValueList="2"

// Add a CurrentReading Column
// SensorType,DeviceID,CurrentReading,HealthState
Temperature.Collect.Source(2).Compute(2).Type="LeftConcat"
Temperature.Collect.Source(2).Compute(2).Column=3
Temperature.Collect.Source(2).Compute(2).String=";"

// BaseUnits,DeviceID,CurrentReading,HealthState,HealthState
Temperature.Collect.Source(3).Type="TableUnion"
Temperature.Collect.Source(3).Table1=%Temperature.Collect.Source(1)%
Temperature.Collect.Source(3).Table2=%Temperature.Collect.Source(2)%

// BaseUnits,DeviceID,CurrentReading,HealthState,HealthState
Temperature.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(3).Compute(1).Column=4

// BaseUnits,DeviceID,CurrentReading,PatrolStatus,HealthState
Temperature.Collect.Source(3).Compute(2).Type="Translate"
Temperature.Collect.Source(3).Compute(2).Column=4
Temperature.Collect.Source(3).Compute(2).TranslationTable="statusTranslationTable"

// BaseUnits,DeviceID,CurrentReading,PatrolStatus,StatusInformation
Temperature.Collect.Source(3).Compute(3).Type="Translate"
Temperature.Collect.Source(3).Compute(3).Column=5
Temperature.Collect.Source(3).Compute(3).TranslationTable="statusInformationTranslationTable"

// Value Table
// BaseUnits,DeviceID,CurrentReading,PatrolStatus,StatusInformation
Temperature.Collect.ValueTable=%Temperature.Collect.Source(3)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(4)
Temperature.Collect.StatusInformation=ValueTable.Column(5)
Temperature.Collect.Temperature=ValueTable.Column(3)


// Fan

// Discovery

// BaseUnits,Caption,CurrentReading,DeviceID,FanSpeedThreshold
// Note - Both RPM and Percent Fan speeds are in Current Reading.
Fan.Discovery.Source(1).Type="WBEM"
Fan.Discovery.Source(1).WbemQuery="SELECT BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical FROM CIM_NumericSensor"
Fan.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 19 (RPM)
// BaseUnits,Caption,Speed,DeviceID,HealthState,FanSpeedThreshold
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).ValueList="19"

// Divide Threshold by 100
// BaseUnits,Caption,Speed,DeviceID,HealthState,FanSpeedThreshold
Fan.Discovery.Source(1).Compute(2).Type="Divide"
Fan.Discovery.Source(1).Compute(2).Column=6
Fan.Discovery.Source(1).Compute(2).DivideBy="100"

// Add an empty FanPercent column
// BaseUnits,Caption,(FanPercent),Speed,DeviceID,HealthState,FanSpeedThreshold
Fan.Discovery.Source(1).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).String=";"

// Add an empty FanPercent Threshold column
// BaseUnits,Caption,(FanPercent),Speed,DeviceID,HealthState,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(1).Compute(4).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(4).Column=7
Fan.Discovery.Source(1).Compute(4).String=";"

// BaseUnits,Caption,CurrentReading,DeviceID,FanPercentThreshold
// Note - Both RPM and Percent Fan speeds are in Current Reading.
Fan.Discovery.Source(2).Type="WBEM"
Fan.Discovery.Source(2).WbemQuery="SELECT BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,SensorType FROM CIM_NumericSensor"
Fan.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 65 (Percentage)
// BaseUnits,Caption,FanPercent,DeviceID,HealthState,FanPercentThreshold,SensorType
Fan.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(2).Compute(1).Column=1
Fan.Discovery.Source(2).Compute(1).ValueList="65"

// Keep only lines with sensor type of 4 (Fan)
// BaseUnits,Caption,FanPercent,DeviceID,HealthState,FanPercentThreshold,SensorType
Fan.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(2).Compute(2).Column=7
Fan.Discovery.Source(2).Compute(2).ValueList="5"

// Remove the IPMISensorType
// BaseUnits,Caption,FanPercent,DeviceID,HealthState,FanPercentThreshold,SensorType
Fan.Discovery.Source(2).Compute(3).Type="KeepColumns"
Fan.Discovery.Source(2).Compute(3).ColumnNumbers="1,2,3,4,5,6"

// Divide Threshold by 100
// BaseUnits,Caption,FanPercent,DeviceID,HealthState,FanPercentThreshold
Fan.Discovery.Source(2).Compute(4).Type="Divide"
Fan.Discovery.Source(2).Compute(4).Column=6
Fan.Discovery.Source(2).Compute(4).DivideBy="100"

// Add an empty Speed column
// BaseUnits,Caption,FanPercent,(Speed),DeviceID,HealthState,FanPercentThreshold
Fan.Discovery.Source(2).Compute(5).Type="RightConcat"
Fan.Discovery.Source(2).Compute(5).Column=3
Fan.Discovery.Source(2).Compute(5).String=";"

// Add an empty FanSpeedThreshold
// BaseUnits,Caption,FanPercent,(Speed),DeviceID,HealthState,FanPercentThreshold,(FanSpeedThreshold)
Fan.Discovery.Source(2).Compute(6).Type="RightConcat"
Fan.Discovery.Source(2).Compute(6).Column=7
Fan.Discovery.Source(2).Compute(6).String=";"

// BaseUnits,Caption,FanPercent,Speed,DeviceID,HealthState,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Type="TableUnion"
Fan.Discovery.Source(3).Table1=%Fan.Discovery.Source(1)%
Fan.Discovery.Source(3).Table2=%Fan.Discovery.Source(2)%

// Remove Status of Unknown
// BaseUnits,Caption,FanPercent,Speed,DeviceID,HealthState,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(1).Type="Replace"
Fan.Discovery.Source(3).Compute(1).Column=6
Fan.Discovery.Source(3).Compute(1).Replace="0"
Fan.Discovery.Source(3).Compute(1).ReplaceBy=""

// Duplicate the Healthstate so that we can use it to activate/deactivate numeric sensors.
// BaseUnits,Caption,FanPercent,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(2).Type="DuplicateColumn"
Fan.Discovery.Source(3).Compute(2).Column=6

Fan.Discovery.Source(3).Compute(3).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(3).Column=7
Fan.Discovery.Source(3).Compute(3).String="MSHW"
Fan.Discovery.Source(3).Compute(4).Type="RightConcat"
Fan.Discovery.Source(3).Compute(4).Column=7
Fan.Discovery.Source(3).Compute(4).String="MSHW"

// Change MSHWMSHW to Activate as there is no valid HealthState
Fan.Discovery.Source(3).Compute(5).Type="Replace"
Fan.Discovery.Source(3).Compute(5).Column=7
Fan.Discovery.Source(3).Compute(5).Replace="MSHWMSHW"
Fan.Discovery.Source(3).Compute(5).ReplaceBy="Activate"

// Remove MSHW
Fan.Discovery.Source(3).Compute(6).Type="Replace"
Fan.Discovery.Source(3).Compute(6).Column=7
Fan.Discovery.Source(3).Compute(6).Replace="MSHW"
Fan.Discovery.Source(3).Compute(6).ReplaceBy=""

// Remove The original Healthstate so that the activation is blank for sensors with valid HealthStates
Fan.Discovery.Source(3).Compute(7).Type="Replace"
Fan.Discovery.Source(3).Compute(7).Column=7
Fan.Discovery.Source(3).Compute(7).Replace=Column(6)
Fan.Discovery.Source(3).Compute(7).ReplaceBy=""

// Ok, now we know if there is no valid healthstate and that we should activate speed / speedpercent.
// Duplicate Speed
// BaseUnits,Caption,FanPercent,SpeedActivation,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(8).Type="DuplicateColumn"
Fan.Discovery.Source(3).Compute(8).Column=4

// Speed - Add Activation column to left and right, then remove ActivateActivate
// BaseUnits,Caption,FanPercent,SpeedActivation,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(9).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(9).Column=4
Fan.Discovery.Source(3).Compute(9).String=Column(8)
Fan.Discovery.Source(3).Compute(10).Type="RightConcat"
Fan.Discovery.Source(3).Compute(10).Column=4
Fan.Discovery.Source(3).Compute(10).String=Column(8)

Fan.Discovery.Source(3).Compute(11).Type="Replace"
Fan.Discovery.Source(3).Compute(11).Column=4
Fan.Discovery.Source(3).Compute(11).Replace="ActivateActivate"
Fan.Discovery.Source(3).Compute(11).ReplaceBy=""

// Now remove the original value
Fan.Discovery.Source(3).Compute(12).Type="Replace"
Fan.Discovery.Source(3).Compute(12).Column=4
Fan.Discovery.Source(3).Compute(12).Replace=Column(5)
Fan.Discovery.Source(3).Compute(12).ReplaceBy=""

// Duplicate Speed
// BaseUnits,Caption,FanPercent,SpeedActivation,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(13).Type="DuplicateColumn"
Fan.Discovery.Source(3).Compute(13).Column=3

// Speed - Add Activation column to left and right, then remove ActivateActivate
// BaseUnits,Caption,FanPercentActivation,FanPercent,SpeedActivation,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.Source(3).Compute(14).Type="LeftConcat"
Fan.Discovery.Source(3).Compute(14).Column=3
Fan.Discovery.Source(3).Compute(14).String=Column(9)
Fan.Discovery.Source(3).Compute(15).Type="RightConcat"
Fan.Discovery.Source(3).Compute(15).Column=3
Fan.Discovery.Source(3).Compute(15).String=Column(9)

Fan.Discovery.Source(3).Compute(16).Type="Replace"
Fan.Discovery.Source(3).Compute(16).Column=3
Fan.Discovery.Source(3).Compute(16).Replace="ActivateActivate"
Fan.Discovery.Source(3).Compute(16).ReplaceBy=""

// Now remove the original value
Fan.Discovery.Source(3).Compute(17).Type="Replace"
Fan.Discovery.Source(3).Compute(17).Column=3
Fan.Discovery.Source(3).Compute(17).Replace=Column(4)
Fan.Discovery.Source(3).Compute(17).ReplaceBy=""

// InstanceTable = Source(3)
//    1        2                      3        4           5          6        7           8           9                   10                11
// BaseUnits,Caption,FanPercentActivation,FanPercent,SpeedActivation,Speed,DeviceID,HealthState,NumericActivation,FanPercentThreshold,FanSpeedThreshold
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(3)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(7)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(8)
Fan.Discovery.Instance.ParameterActivation.SpeedPercent=InstanceTable.Column(3)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(11)
Fan.Discovery.Instance.PercentAlarmThreshold=InstanceTable.Column(10)



// Collect

Fan.Collect.Type="MultiInstance"

// BaseUnits,DeviceID,CurrentReading,DeviceID,FanSpeedThreshold
// Note - Both RPM and Percent Fan speeds are in Current Reading.
Fan.Collect.Source(1).Type="WBEM"
Fan.Collect.Source(1).WbemQuery="SELECT BaseUnits,DeviceID,CurrentReading,HealthState FROM CIM_NumericSensor"
Fan.Collect.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 19 (RPM)
// BaseUnits,DeviceID,Speed,HealthStatus
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).ValueList="19"

// Divide Speed by 100
// BaseUnits,DeviceID,Speed,HealthStatus
Fan.Collect.Source(1).Compute(2).Type="Divide"
Fan.Collect.Source(1).Compute(2).Column=3
Fan.Collect.Source(1).Compute(2).DivideBy="100"

// Add an empty FanPercent column
// BaseUnits,DeviceID,(FanPercent),Speed,HealthStatus
Fan.Collect.Source(1).Compute(3).Type="LeftConcat"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).String=";"

// BaseUnits,DeviceID,CurrentReading,HealthStatus
// Note - Both RPM and Percent Fan speeds are in Current Reading.
Fan.Collect.Source(2).Type="WBEM"
Fan.Collect.Source(2).WbemQuery="SELECT BaseUnits,DeviceID,CurrentReading,HealthState FROM CIM_NumericSensor"
Fan.Collect.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 65 (Percentage)
// BaseUnits,DeviceID,FanPercent,HealthStatus
Fan.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(2).Compute(1).Column=1
Fan.Collect.Source(2).Compute(1).ValueList="65"

// Divide FanPercent by 100
// BaseUnits,DeviceID,FanPercent,HealthStatus
Fan.Collect.Source(2).Compute(2).Type="Divide"
Fan.Collect.Source(2).Compute(2).Column=3
Fan.Collect.Source(2).Compute(2).DivideBy="100"

// Add an empty Speed column
// BaseUnits,DeviceID,FanPercent,(Speed),HealthStatus
Fan.Collect.Source(2).Compute(3).Type="RightConcat"
Fan.Collect.Source(2).Compute(3).Column=3
Fan.Collect.Source(2).Compute(3).String=";"

// BaseUnits,DeviceID,FanPercent,Speed,HealthStatus
Fan.Collect.Source(3).Type="TableUnion"
Fan.Collect.Source(3).Table1=%Fan.Collect.Source(1)%
Fan.Collect.Source(3).Table2=%Fan.Collect.Source(2)%

// BaseUnits,DeviceID,FanPercent,Speed,HealthStatus
Fan.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(3).Compute(1).Column=5

// BaseUnits,DeviceID,FanPercent,Speed,PatrolStatus,HealthStatus
Fan.Collect.Source(3).Compute(2).Type="Translate"
Fan.Collect.Source(3).Compute(2).Column=5
Fan.Collect.Source(3).Compute(2).TranslationTable="statusTranslationTable"

// BaseUnits,DeviceID,FanPercent,Speed,PatrolStatus,StatusInformation
Fan.Collect.Source(3).Compute(3).Type="Translate"
Fan.Collect.Source(3).Compute(3).Column=6
Fan.Collect.Source(3).Compute(3).TranslationTable="statusInformationTranslationTable"

// Value Table
// BaseUnits,DeviceID,FanPercent,Speed,PatrolStatus,StatusInformation
Fan.Collect.ValueTable=%Fan.Collect.Source(3)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(5)
Fan.Collect.StatusInformation=ValueTable.Column(6)
Fan.Collect.Speed=ValueTable.Column(4)
Fan.Collect.SpeedPercent=ValueTable.Column(3)

// Voltage

// Discovery

// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(1).Type="WBEM"
Voltage.Discovery.Source(1).WbemQuery="SELECT BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical FROM CIM_NumericSensor"
Voltage.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 5 (Volts)
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=1
Voltage.Discovery.Source(1).Compute(1).ValueList="5"

// Multiply by 10 to get millivolts (Divide Thresholds by 100, then Multiply by 1000)
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(1).Compute(2).Type="Multiply"
Voltage.Discovery.Source(1).Compute(2).Column=6
Voltage.Discovery.Source(1).Compute(2).MultiplyBy="10"
Voltage.Discovery.Source(1).Compute(3).Type="Multiply"
Voltage.Discovery.Source(1).Compute(3).Column=7
Voltage.Discovery.Source(1).Compute(3).MultiplyBy="10"

// Remove Status of Unknown
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(1).Compute(4).Type="Replace"
Voltage.Discovery.Source(1).Compute(4).Column=5
Voltage.Discovery.Source(1).Compute(4).Replace="0"
Voltage.Discovery.Source(1).Compute(4).ReplaceBy=""

// Thresholds for Voltage are sometimes reported as "0" by the agent.  Replacing these "0" by no value to prevent incorrect thresholds.
// Add a MSHW_ string to our value and then remove MSHW_0. This should remove a 0 value and only that value
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(1).Compute(5).Type="LeftConcat"
Voltage.Discovery.Source(1).Compute(5).Column=6
Voltage.Discovery.Source(1).Compute(5).String="MSHW_"
Voltage.Discovery.Source(1).Compute(6).Type="LeftConcat"
Voltage.Discovery.Source(1).Compute(6).Column=7
Voltage.Discovery.Source(1).Compute(6).String="MSHW_"

// Remove 0 value
Voltage.Discovery.Source(1).Compute(7).Type="Replace"
Voltage.Discovery.Source(1).Compute(7).Column=6
Voltage.Discovery.Source(1).Compute(7).Replace="MSHW_0"
Voltage.Discovery.Source(1).Compute(7).ReplaceBy=""
Voltage.Discovery.Source(1).Compute(8).Type="Replace"
Voltage.Discovery.Source(1).Compute(8).Column=7
Voltage.Discovery.Source(1).Compute(8).Replace="MSHW_0"
Voltage.Discovery.Source(1).Compute(8).ReplaceBy=""

// Remove MSHW_ for non 0 values
Voltage.Discovery.Source(1).Compute(9).Type="Replace"
Voltage.Discovery.Source(1).Compute(9).Column=6
Voltage.Discovery.Source(1).Compute(9).Replace="MSHW_"
Voltage.Discovery.Source(1).Compute(9).ReplaceBy=""
Voltage.Discovery.Source(1).Compute(10).Type="Replace"
Voltage.Discovery.Source(1).Compute(10).Column=7
Voltage.Discovery.Source(1).Compute(10).Replace="MSHW_"
Voltage.Discovery.Source(1).Compute(10).ReplaceBy=""

// Source(2) Discrete Voltage Table
// SensorType,Caption,DeviceID,HealthState
Voltage.Discovery.Source(2).Type="WBEM"
Voltage.Discovery.Source(2).WbemQuery="SELECT SensorType,Caption,DeviceID,HealthState FROM OMC_DiscreteSensor"
Voltage.Discovery.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with sensor type 3 (Voltage)
// SensorType,Caption,DeviceID,HealthState
Voltage.Discovery.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(2).Compute(1).Column=1
Voltage.Discovery.Source(2).Compute(1).ValueList="3"

// Keep only lines with a valid HealthState
// SensorType,Caption,DeviceID,HealthState
Voltage.Discovery.Source(2).Compute(2).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(2).Compute(2).Column=4
Voltage.Discovery.Source(2).Compute(2).ValueList="5,15,20,25,30"

// Add columns CurrentReading to the left of Device ID
// and LowerThresholdCritical,UpperThresholdCritical to the right
// SensorType,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(2).Compute(3).Type="RightConcat"
Voltage.Discovery.Source(2).Compute(3).Column=4
Voltage.Discovery.Source(2).Compute(3).String=";;"
Voltage.Discovery.Source(2).Compute(4).Type="LeftConcat"
Voltage.Discovery.Source(2).Compute(4).Column=3
Voltage.Discovery.Source(2).Compute(4).String=";"

// SensorType,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.Source(3).Type="TableUnion"
Voltage.Discovery.Source(3).Table1=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Source(3).Table2=%Voltage.Discovery.Source(2)%


// InstanceTable = Source(1)
//    1        2         3            4             5                       6              7
// BaseUnits,Caption,CurrentReading,DeviceID,HealthState,LowerThresholdCritical,UpperThresholdCritical
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(3)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(4)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(5)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(6)

// Collect

Voltage.Collect.Type="MultiInstance"

// BaseUnits,DeviceID,CurrentReading,HealthState
Voltage.Collect.Source(1).Type="WBEM"
Voltage.Collect.Source(1).WbemQuery="SELECT BaseUnits,DeviceID,CurrentReading,HealthState FROM CIM_NumericSensor"
Voltage.Collect.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 5 (Voltage)
// BaseUnits,DeviceID,CurrentReading,HealthState
Voltage.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Collect.Source(1).Compute(1).Column=1
Voltage.Collect.Source(1).Compute(1).ValueList="5"

// Multiply by 10 to get millivolts (Divide Thresholds by 100, then Multiply by 1000)
// BaseUnits,DeviceID,CurrentReading,HealthState
Voltage.Collect.Source(1).Compute(2).Type="Multiply"
Voltage.Collect.Source(1).Compute(2).Column=3
Voltage.Collect.Source(1).Compute(2).MultiplyBy="10"

// Source(2) Discrete Thermal Table
// SensorType,DeviceID,HealthState
Voltage.Collect.Source(2).Type="WBEM"
Voltage.Collect.Source(2).WbemQuery="SELECT SensorType,DeviceID,HealthState FROM OMC_DiscreteSensor"
Voltage.Collect.Source(2).WbemNameSpace="root/cimv2"

// Keep only lines with units of type 3 (Voltage)
// SensorType,DeviceID,HealthState
Voltage.Collect.Source(2).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Collect.Source(2).Compute(1).Column=1
Voltage.Collect.Source(2).Compute(1).ValueList="3"

// Add a CurrentReading Column
// SensorType,DeviceID,CurrentReading,HealthState
Voltage.Collect.Source(2).Compute(2).Type="LeftConcat"
Voltage.Collect.Source(2).Compute(2).Column=3
Voltage.Collect.Source(2).Compute(2).String=";"

// BaseUnits,DeviceID,CurrentReading,HealthState,HealthState
Voltage.Collect.Source(3).Type="TableUnion"
Voltage.Collect.Source(3).Table1=%Voltage.Collect.Source(1)%
Voltage.Collect.Source(3).Table2=%Voltage.Collect.Source(2)%

// BaseUnits,DeviceID,CurrentReading,HealthState,HealthState
Voltage.Collect.Source(3).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(3).Compute(1).Column=4

// BaseUnits,DeviceID,CurrentReading,PatrolStatus,HealthState
Voltage.Collect.Source(3).Compute(2).Type="Translate"
Voltage.Collect.Source(3).Compute(2).Column=4
Voltage.Collect.Source(3).Compute(2).TranslationTable="statusTranslationTable"

// BaseUnits,DeviceID,CurrentReading,PatrolStatus,StatusInformation
Voltage.Collect.Source(3).Compute(3).Type="Translate"
Voltage.Collect.Source(3).Compute(3).Column=5
Voltage.Collect.Source(3).Compute(3).TranslationTable="statusInformationTranslationTable"

// Value Table
// BaseUnits,DeviceID,CurrentReading,PatrolStatus,StatusInformation
Voltage.Collect.ValueTable=%Voltage.Collect.Source(3)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Status=ValueTable.Column(4)
Voltage.Collect.StatusInformation=ValueTable.Column(5)
Voltage.Collect.Voltage=ValueTable.Column(3)

// The statusTranslationTable
statusTranslationTable(0)="UNKNOWN"
statusTranslationTable(5)="OK"
statusTranslationTable(10)="WARN"
statusTranslationTable(15)="WARN"
statusTranslationTable(20)="ALARM"
statusTranslationTable(25)="ALARM"
statusTranslationTable(30)="ALARM"
statusTranslationTable(Default)="UNKNOWN"

// The statusInformationTranslationTable
statusInformationTranslationTable(0)="Unknown"
statusInformationTranslationTable(5)=""
statusInformationTranslationTable(10)="Degraded"
statusInformationTranslationTable(15)="Minor Failure"
statusInformationTranslationTable(20)="Major Failure"
statusInformationTranslationTable(25)="Critical Failure"
statusInformationTranslationTable(30)="Non-Recoverable Error"
statusInformationTranslationTable(Default)="Unknown Status"

// The psuAvailabilityTranslationTable
psuAvailabilityTranslationTable(1)="MISSING"
psuAvailabilityTranslationTable(2)="MISSING"
psuAvailabilityTranslationTable(3)="OK"
psuAvailabilityTranslationTable(4)="WARN"
psuAvailabilityTranslationTable(5)="WARN"
psuAvailabilityTranslationTable(6)="MISSING"
psuAvailabilityTranslationTable(7)="ALARM"
psuAvailabilityTranslationTable(8)="ALARM"
psuAvailabilityTranslationTable(9)="OK"
psuAvailabilityTranslationTable(10)="WARN"
psuAvailabilityTranslationTable(11)="MISSING"
psuAvailabilityTranslationTable(12)="ALARM"
psuAvailabilityTranslationTable(13)="UNKNOWN"
psuAvailabilityTranslationTable(14)="WARN"
psuAvailabilityTranslationTable(15)="OK"
psuAvailabilityTranslationTable(16)="OK"
psuAvailabilityTranslationTable(17)="WARN"
psuAvailabilityTranslationTable(18)="OK"
psuAvailabilityTranslationTable(19)="ALARM"
psuAvailabilityTranslationTable(20)="WARN"
psuAvailabilityTranslationTable(21)="OK"
psuAvailabilityTranslationTable(Default)="UNKNOWN"

// The psuAvailabilityInformationTranslationTable
psuAvailabilityInformationTranslationTable(1)="Other / Unknown"
psuAvailabilityInformationTranslationTable(2)="Unknown"
psuAvailabilityInformationTranslationTable(3)=""
psuAvailabilityInformationTranslationTable(4)="Warning"
psuAvailabilityInformationTranslationTable(5)="In Test"
psuAvailabilityInformationTranslationTable(6)="Not Applicable"
psuAvailabilityInformationTranslationTable(7)="Power Off"
psuAvailabilityInformationTranslationTable(8)="Off Line"
psuAvailabilityInformationTranslationTable(9)="Off Duty"
psuAvailabilityInformationTranslationTable(10)="Degraded"
psuAvailabilityInformationTranslationTable(11)="Not Installed"
psuAvailabilityInformationTranslationTable(12)="Install Error"
psuAvailabilityInformationTranslationTable(13)="Power Save - Unknown"
psuAvailabilityInformationTranslationTable(14)="Power Save - Lower Power Mode"
psuAvailabilityInformationTranslationTable(15)="Power Save - Standy"
psuAvailabilityInformationTranslationTable(16)="Power Cycle"
psuAvailabilityInformationTranslationTable(17)="Power Save - Warning"
psuAvailabilityInformationTranslationTable(18)="Paused"
psuAvailabilityInformationTranslationTable(19)="Not Ready"
psuAvailabilityInformationTranslationTable(20)="Not Configured"
psuAvailabilityInformationTranslationTable(21)="Quiesced"
psuAvailabilityInformationTranslationTable(Default)="Unknown Status"



// Network Cards (HBAs and Physical Ethernet)


// Source(1) = CIM_NetworkPort
// DeviceID;PortTypeCode;Speed;PermanentAddress;EnabledState;
NetworkCard.Discovery.Source(1).Type="WBEM"
NetworkCard.Discovery.Source(1).WbemQuery="SELECT DeviceID,PortType,Speed,PermanentAddress,EnabledState,FullDuplex FROM CIM_NetworkPort"
NetworkCard.Discovery.Source(1).WbemNameSpace=root/cimv2

// Keep only activated ports
// DeviceID;PortTypeCode;Speed;PermanentAddress;EnabledState;FullDuplex
NetworkCard.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=5
NetworkCard.Discovery.Source(1).Compute(1).ValueList="3"

// Translate PortType into a more readable string
// DeviceID;PortType;Speed;PermanentAddress;EnabledState;FullDuplex
NetworkCard.Discovery.Source(1).Compute(2).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(2).Column=2
NetworkCard.Discovery.Source(1).Compute(2).TranslationTable="PortTypeTranslationTable"

// Convert Speed from bps to Mbps (divide by 1000000)
// DeviceID;PortType;SpeedMbps;PermanentAddress;EnabledState;FullDuplex
NetworkCard.Discovery.Source(1).Compute(3).Type="Divide"
NetworkCard.Discovery.Source(1).Compute(3).Column=3
NetworkCard.Discovery.Source(1).Compute(3).DivideBy=1000000


//Translate Full Duplex boolean from string to int
// Translate PortType into a more readable string
// DeviceID;PortType;Speed;PermanentAddress;EnabledState;FullDuplex
NetworkCard.Discovery.Source(1).Compute(4).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(4).Column=6
NetworkCard.Discovery.Source(1).Compute(4).TranslationTable="DuplexTypeTranslationTable"


// InstanceTable = Source(7)
// DeviceID;PortType;SpeedMbps;PermanentAddress;EnabledState;FullDuplex
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.PhysicalAddressType="MAC"
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(2)

//
// Collect

// The NetworkCard collect is a "MultiInstance" collect
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = CIM_FCPort
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray
NetworkCard.Collect.Source(1).Type="WBEM"
NetworkCard.Collect.Source(1).WbemQuery="SELECT DeviceID,PortType,EnabledState,Speed,OperationalStatus,FullDuplex FROM CIM_NetworkPort"
NetworkCard.Collect.Source(1).WbemNameSpace=root/cimv2

// Duplicate the "OperationalStatusArray" column
// PortID;PortTypeCode;EnabledState;Speed;OperationalStatusArray;OperationalStatusArray;FullDuplex
NetworkCard.Collect.Source(1).Compute(1).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(1).Column=5

// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatusArray;Status;FullDuplex
NetworkCard.Collect.Source(1).Compute(2).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(2).Column=5
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="NetworkCardOperationStatusTranslationTable"

// The NetworkCardOperationStatusTranslationTable
NetworkCardOperationStatusTranslationTable(2)="OK"
NetworkCardOperationStatusTranslationTable(3)="WARN"
NetworkCardOperationStatusTranslationTable(4)="WARN"
NetworkCardOperationStatusTranslationTable(5)="WARN"
NetworkCardOperationStatusTranslationTable(6)="ALARM"
NetworkCardOperationStatusTranslationTable(7)="ALARM"
NetworkCardOperationStatusTranslationTable(8)="WARN"
NetworkCardOperationStatusTranslationTable(9)="WARN"
// 10 - Stopped is normal for link-down ports.  The linkstatus will be used to find faults.
NetworkCardOperationStatusTranslationTable(10)="OK"
NetworkCardOperationStatusTranslationTable(11)="WARN"
NetworkCardOperationStatusTranslationTable(12)="ALARM"
NetworkCardOperationStatusTranslationTable(13)="ALARM"
NetworkCardOperationStatusTranslationTable(14)="ALARM"
NetworkCardOperationStatusTranslationTable(15)="WARN"
NetworkCardOperationStatusTranslationTable(16)="WARN"
NetworkCardOperationStatusTranslationTable(17)="OK"
NetworkCardOperationStatusTranslationTable(18)="OK"
NetworkCardOperationStatusTranslationTable(Default)="UNKNOWN"

// And finally, we translate DMTF's OperationalStatus code into a more readable status string
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatusArray;StatusInformation;FullDuplex
NetworkCard.Collect.Source(1).Compute(3).Type="ArrayTranslate"
NetworkCard.Collect.Source(1).Compute(3).Column=6
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="DMTFOperationStatusInformationTranslationTable"
NetworkCard.Collect.Source(1).Compute(3).ResultSeparator=" - "

// Convert PATROLStatusArray to a simple (unique) PATROLStatus
// PortID;PortTypeCode;EnabledState;Speed;PATROLStatus;StatusInformation;FullDuplex
NetworkCard.Collect.Source(1).Compute(4).Type="Convert"
NetworkCard.Collect.Source(1).Compute(4).Column=5
NetworkCard.Collect.Source(1).Compute(4).ConversionType="Array2SimpleStatus"


// // Finally, we check whether we have a 'Speed' number, meaning that the link is up
// PortID;PortTypeCode;EnabledState;Speed;LinkStatus;PATROLStatusArray;Status;FullDuplex
NetworkCard.Collect.Source(1).Compute(5).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(5).Column=4

// Finally, we check whether we have a 'Speed' number, meaning that the link is up
// Otherwise, if no speed, it means that the link is down
// PortID;PortTypeCode;EnabledState;Speed;LinkStatus;PATROLStatusArray;Status;FullDuplex
NetworkCard.Collect.Source(1).Compute(6).Type="Translate"
NetworkCard.Collect.Source(1).Compute(6).Column=5
NetworkCard.Collect.Source(1).Compute(6).TranslationTable="SpeedToLinkStatusTranslationTable"


//Translate Full Duplex boolean from string to int
// Translate PortType into a more readable string
// PortID;PortTypeCode;EnabledState;Speed;LinkStatus;PATROLStatusArray;Status;FullDuplex
NetworkCard.Collect.Source(1).Compute(7).Type="Translate"
NetworkCard.Collect.Source(1).Compute(7).Column=8
NetworkCard.Collect.Source(1).Compute(7).TranslationTable="DuplexTypeTranslationTable"

// The DuplexTypeTranslationTable
DuplexTypeTranslationTable("false")=0
DuplexTypeTranslationTable(Default)=1



// Convert Speed from bps to Mbps (divide by 1000000)
// PortID;PortTypeCode;EnabledState;Speed;LinkStatus;PATROLStatusArray;Status;FullDuplex
NetworkCard.Collect.Source(1).Compute(8).Type="Divide"
NetworkCard.Collect.Source(1).Compute(8).Column=4
NetworkCard.Collect.Source(1).Compute(8).DivideBy=1000000


// PortID;PortTypeCode;EnabledState;Speed;LinkStatus;PATROLStatusArray;Status
// ValueTable = Source(1)
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.Status=ValueTable.Column(6)
NetworkCard.Collect.StatusInformation=ValueTable.Column(7)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(4)
NetworkCard.Collect.LinkStatus=ValueTable.Column(5)
NetworkCard.Collect.DuplexMode=ValueTable.Column(8)


// Batterys

// Discovery

// DeviceID,HealthState,IpmiSensorType,Caption,deviceID
Battery.Discovery.Source(1).Type="WBEM"
Battery.Discovery.Source(1).WbemQuery="SELECT MonitoredDeviceID,HealthState,IpmiSensorType,Caption,DeviceId FROM OMC_DiscreteSensor"
Battery.Discovery.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with a valid HealthState
// DeviceID,HealthState,IpmiSensorType,Caption,deviceID
Battery.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Discovery.Source(1).Compute(1).Column=3
Battery.Discovery.Source(1).Compute(1).ValueList="41"

// Process the discrete sensors to group sensors together and find a common name
// DeviceID,DisplayID
Battery.Discovery.Source(1).Compute(2).Type="Awk"
Battery.Discovery.Source(1).Compute(2).AwkScript=EmbeddedFile(4)
Battery.Discovery.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Battery.Discovery.Source(1).Compute(2).Separators=";"
Battery.Discovery.Source(1).Compute(2).SelectColumns="2,3"

// InstanceTable = Source(1)
// DeviceID,DisplayID
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.DisplayID=InstanceTable.Column(2)

// Collect

Battery.Collect.Type="MultiInstance"

// DeviceID,HealthState,IpmiSensorType,Caption,deviceID
Battery.Collect.Source(1).Type="WBEM"
Battery.Collect.Source(1).WbemQuery="SELECT MonitoredDeviceID,HealthState,IpmiSensorType,Caption,DeviceId FROM OMC_DiscreteSensor"
Battery.Collect.Source(1).WbemNameSpace="root/cimv2"

// Keep only lines with a valid HealthState
// DeviceID,HealthState,IpmiSensorType,Caption,deviceID
Battery.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Battery.Collect.Source(1).Compute(1).Column=3
Battery.Collect.Source(1).Compute(1).ValueList="41"

// Process the discrete sensors to group sensors together and find a common name
// DeviceID,PatrolStatus,StatusInformation
Battery.Collect.Source(1).Compute(2).Type="Awk"
Battery.Collect.Source(1).Compute(2).AwkScript=EmbeddedFile(4)
Battery.Collect.Source(1).Compute(2).KeepOnlyRegExp="^MSHW;"
Battery.Collect.Source(1).Compute(2).Separators=";"
Battery.Collect.Source(1).Compute(2).SelectColumns="2,4,5"

// DeviceID,PatrolStatus,StatusInformation
Battery.Collect.Source(1).Compute(3).Type="Translate"
Battery.Collect.Source(1).Compute(3).Column="2"
Battery.Collect.Source(1).Compute(3).TranslationTable="statusTranslationTable"

// Instance Table
// DeviceID,PatrolStatus,StatusInformation
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)


// The PortTypeTranslationTable
PortTypeTranslationTable(0)="Unknown Network Port Type"
PortTypeTranslationTable(1)="Other Network Port Type"
PortTypeTranslationTable(10)="HBA FC Port N (Node)"
PortTypeTranslationTable(11)="HBA FC Port NL (Node/Loop)"
PortTypeTranslationTable(12)="HBA FC Port F/NL (Node/Loop/Fabric)"
PortTypeTranslationTable(50)="Ethernet Port"
PortTypeTranslationTable(51)="Ethernet Port"
PortTypeTranslationTable(52)="Ethernet Port"
PortTypeTranslationTable(53)="Ethernet Port"
PortTypeTranslationTable(54)="Ethernet Port"
PortTypeTranslationTable(55)="Ethernet Port"
PortTypeTranslationTable(56)="Ethernet Port"
PortTypeTranslationTable(100)="Ethernet Port"
PortTypeTranslationTable(101)="Ethernet Port"
PortTypeTranslationTable(102)="Ethernet Port"
PortTypeTranslationTable(103)="Ethernet Port"
PortTypeTranslationTable(104)="Ethernet Port"
PortTypeTranslationTable(105)="Ethernet Port"
PortTypeTranslationTable(106)="Ethernet Port"
PortTypeTranslationTable(107)="Ethernet Port"
PortTypeTranslationTable(108)="Ethernet Port"
PortTypeTranslationTable(109)="Ethernet Port"
PortTypeTranslationTable(110)="Ethernet Port"
PortTypeTranslationTable(Default)="Unknown Network Port Type"

// The DMTFOperationStatusInformationTranslationTable
DMTFOperationStatusInformationTranslationTable(2)=""
DMTFOperationStatusInformationTranslationTable(3)="Degraded"
DMTFOperationStatusInformationTranslationTable(4)="Stressed"
DMTFOperationStatusInformationTranslationTable(5)="Predicted Failure"
DMTFOperationStatusInformationTranslationTable(6)="Error"
DMTFOperationStatusInformationTranslationTable(7)="Non-Recoverable Error"
DMTFOperationStatusInformationTranslationTable(8)="Starting"
DMTFOperationStatusInformationTranslationTable(9)="Stopping"
DMTFOperationStatusInformationTranslationTable(10)="Stopped"
DMTFOperationStatusInformationTranslationTable(11)="In Service"
DMTFOperationStatusInformationTranslationTable(12)="No Contact"
DMTFOperationStatusInformationTranslationTable(13)="Lost Communication"
DMTFOperationStatusInformationTranslationTable(14)="Aborted"
DMTFOperationStatusInformationTranslationTable(15)="Dormant"
DMTFOperationStatusInformationTranslationTable(16)="Supporting Entity in Error"
DMTFOperationStatusInformationTranslationTable(17)="Completed"
DMTFOperationStatusInformationTranslationTable(18)="Power Mode"
DMTFOperationStatusInformationTranslationTable(Default)="Unknown Status"

// The SpeedToLinkStatusTranslationTable
SpeedToLinkStatusTranslationTable(0)="WARN"
SpeedToLinkStatusTranslationTable("")="WARN"
SpeedToLinkStatusTranslationTable(Default)="OK"

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parse the output of Memory Source (2)
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
#  MonitoredDeviceID,Caption,HealthState,IpmiSensorType,Name,NumericOnly,CurrentState,DeviceID,SensorType

BEGIN {FS="[;]";}

{
#    MonitoredDeviceID = $1
    Caption = $2
    HealthState = $3
    IpmiSensorType = $4
    Name = $5
    NumericOnly = $6
    CurrentState = $7
    DeviceID = $8 ; gsub("\.[^.]*$","",DeviceID);
    SensorType = $9
    if ( SensorType == 11 && CurrentState == "Deassert" ) { MemoryNotPresent[DeviceID] = "True" ; print $0 }

    if ( DeviceID in Devices ) {
    	                           if ( NumericOnly == 0 ) { NumericOnlyArray[DeviceID] = 0 }
    	                           if ( Status[DeviceID] < HealthState) { Status[DeviceID] = HealthState}
		                             if ( HealthState > 5) {
		                             	  if (StatusInformation[DeviceID] == "") { StatusInformation[DeviceID] = Caption }
		                             	  	else { StatusInformation[DeviceID] = StatusInformation[DeviceID] " - " Caption }
		                             	  	}
	                       }
	                  else {
	                  	     NumericOnlyArray[DeviceID] = NumericOnly
	                   	     DisplayID[DeviceID] = Caption ; gsub (/\(.*\)/,"",DisplayID[DeviceID]); gsub (/:.*$/,"",DisplayID[DeviceID]);
	                   	     if ( HealthState > 0 ) {
	                   	     	   Devices[DeviceID] = DeviceID
		                           Status[DeviceID] = HealthState
		                           if ( HealthState > 5) {
                                    StatusInformation[DeviceID] = Caption
		                           	  	}
		                       }
                         }
}
END { for (DeviceID in Devices) {
      if ( MemoryNotPresent[DeviceID] != "True" ) {
          print ("MSHW;" DeviceID ";" StatusInformation[DeviceID] ";" Status[DeviceID] ";" DisplayID[DeviceID]";" NumericOnlyArray[DeviceID] ";")
        }
      }
    }
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that checks if there are any ipmisensors
///   and prints a global status (if valid) if not
///    MonitoredDeviceID,HealthState,Name,NumericOnly
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS="[;]";ipmiFound="false";globalFound="false";}
{if ($1 ~ /Global/) {if ($2 > 0) {globalFound=("MSHW;" $0)
	                               }
	                  }
# If an OldInstance is found, then deactivate the GlobalFound as the previous discovery found individual modules
 else {if ($3 ~ /OldInstance-/) {globalFound="false" ;  ipmiFound="true"}
# If it's not an OldInstance or Global or Blank, then print
      else {if (NF > 3) {print ("MSHW;" $0);
                         if ($4 != 1) {ipmiFound="true";}
                        }
           }
      }
 }
END {if (ipmiFound == "false" && globalFound != "false") {print globalFound}
     if (ipmiFound == "true" ) {print "MSHW;ipmiFound;99;ipmiFound;0;"}
    }
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = activate status if currentreading = 0 or invalid use temperature threshold
//    As the temperature is a multiple of 100, we check the length of the reading
//    1) Temperature is available and at least one temperature threshold is available =>Status is disabled and thresholds set
//    2) Temperature is available and at no temperature threshold is available =>Status is enabled and temperature reading is collected
//    3) Temperature is not available and at no temperature threshold is available =>Only Status is collected
//    // BaseUnits,Caption,CurrentReading,DeviceID,HealthState,UpperThresholdNonCritical,UpperThresholdCritical, SensorType
///////////////////////////////////////////////

EmbeddedFile(3):
BEGIN { FS = ";"; }
{
    BaseUnits = $1
    Caption = $2
    CurrentReading = $3
    DeviceID = $4
    HealthState = $5
    UpperThresholdNonCritical = $6
    UpperThresholdCritical = $7
    SensorType = $8
    if (length(CurrentReading) > 2 )
    {
    			if (UpperThresholdNonCritical == "" && UpperThresholdCritical == "")
      			{
            	   print "MSHW;" BaseUnits ";" Caption ";" CurrentReading ";" DeviceID ";" HealthState ";;;" SensorType ";"
            }
          else
            {
      				    print "MSHW;" BaseUnits ";" Caption ";" CurrentReading ";" DeviceID ";;" UpperThresholdNonCritical ";" UpperThresholdCritical ";" SensorType ";"
            }

     }
    else
    {
    			print "MSHW;" BaseUnits ";" Caption ";;" DeviceID ";" HealthState ";;;" SensorType ";"
    }

}
EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = awk script that parse the output of battery and take the worst status of discrete sensors reporting status of same battery
///
///
/////////////////////////////////////////////////////////

EmbeddedFile(4):
BEGIN {FS="[;]"}
#IpmisensorID contains at least 3 dots
$5 ~ /.*\..*\..*\.*/ {
IPMISensorID = $5
HealthState = $2
SensorName = $4

ID = IPMISensorID ; gsub("\.[^.]*$","",ID);

# if we've already found a status for this ID, then try and find a common sensor name root
# We're going to assume the first 5 characters are the same to avoid a null DisplayID
# Note this will only be run if a battery has 2 or more sensors
 if (ID in status) {
   matchLength = 5
   for (i=5 ; i <= length(DisplayID[ID]) ; i++ ) {
     if ( substr(DisplayID[ID],5,i) == substr(SensorName,5,i) ) { matchLength = i }
     }
   DisplayID[ID] = substr(DisplayID[ID],1,matchLength)
   gsub(/:? *$/,"",DisplayID[ID])
   }
 else { DisplayID[ID] = SensorName }
# See if we already have processed a valid statusInformation for this component
# i.e. there's more than one fault, do a worse than and append the sensor ID
 if (ID in statusInformation) {
	                  if (status[ID] < HealthState) {status[ID] = (HealthState);}
	                  if (HealthState > 5) {if (statusInformation[ID]=="") {statusInformation[ID] = SensorName}
	                               else {statusInformation[ID] = (statusInformation[ID] " - " SensorName)}
	                              }
	                 }
# If we haven't seen a fault, check if this sensor state and set statusInformation if there's an issue
  else {if (HealthState > 0) {status[ID] = HealthState};
		    if (HealthState > 5) {statusInformation[ID] = SensorName};
		   }
}
END { for (ID in status)
      print ("MSHW;" ID ";" DisplayID[ID] ";" status[ID]";" statusInformation[ID] ";")
    }

EmbeddedFile(4).End
