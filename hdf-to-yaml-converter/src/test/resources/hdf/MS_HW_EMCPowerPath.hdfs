//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                MS_HW_EMCPowerPath.hdf
//
//      Supports: any machine with EMC PowerPath installed
//
//


// HEADER

hdf.DisplayName="EMC PowerPath (powermt)"
hdf.TypicalPlatform="Any system with EMC PowerPath"
hdf.ReliesOn="EMC powermt utility"
hdf.Version="1.0"
hdf.Comments="This connector provides the monitoring of HBA cards on all Linux systems through the multipath utility."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux,Solaris,HP,RS6000"

// SUDO-able commands
//
Sudo(1).Command="powermt"

//
// DETECTION
//

// Test the multipath command
Detection.Criteria(1).Type="OSCommand"
Detection.Criteria(1).CommandLine="%{SUDO:powermt} powermt version"
Detection.Criteria(1).ExpectedResult="EMC powermt for PowerPath"
Detection.Criteria(1).ErrorMessage="EMC Powerpath not installed or not in path of Patrol User."

// Test the multipath command
Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:powermt} powermt check_registration"
Detection.Criteria(2).ExpectedResult="Key"
Detection.Criteria(2).ErrorMessage="No license key for EMC Powerpath."




//
// LUN
//

//
// Discovery

// Get the list of Ports from powermt display dev=all
//
LUN.Discovery.Source(1).Type="OsCommand"
LUN.Discovery.Source(1).CommandLine="%{SUDO:powermt} powermt display dev=all"

// AWK it
// MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
LUN.Discovery.Source(1).Compute(1).Type="Awk"
LUN.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Discovery.Source(1).Compute(1).Separators=";"

// Add some text to each additional information
// MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
LUN.Discovery.Source(1).Compute(2).Type="LeftConcat"
LUN.Discovery.Source(1).Compute(2).Column=5
LUN.Discovery.Source(1).Compute(2).String="WWN: "

LUN.Discovery.Source(1).Compute(3).Type="LeftConcat"
LUN.Discovery.Source(1).Compute(3).Column=7
LUN.Discovery.Source(1).Compute(3).String="Policy: "

// InstanceTable = Source(1)
// MSHW;pseudoName;manufacturerID;logicalDeviceID;deviceWWN;state;policy;alivePathCount;
LUN.Discovery.InstanceTable=%LUN.Discovery.Source(1)%
LUN.Discovery.Instance.DeviceID=InstanceTable.Column(4)
LUN.Discovery.Instance.DisplayID=InstanceTable.Column(2)
LUN.Discovery.Instance.ArrayName=InstanceTable.Column(3)
LUN.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
LUN.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)




//
// COLLECT

// Collect type is multi-instance
LUN.Collect.Type="MultiInstance"

// Get the list of Ports from powermt display dev=all
//
LUN.Collect.Source(1).Type="OsCommand"
LUN.Collect.Source(1).CommandLine="%{SUDO:powermt} powermt display dev=all"

// AWK it
// logicalDeviceID;state;alivePathCount;
LUN.Collect.Source(1).Compute(1).Type="Awk"
LUN.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
LUN.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
LUN.Collect.Source(1).Compute(1).Separators=";"
LUN.Collect.Source(1).Compute(1).SelectColumns="4,6,8"

// Duplicate State
// logicalDeviceID;state;state;alivePathCount;
LUN.Collect.Source(1).Compute(2).Type="DuplicateColumn"
LUN.Collect.Source(1).Compute(2).Column="2"

// The LUNStatusTranslationTable --> PatrolStatus
// logicalDeviceID;PatrolStatus;state;alivePathCount;
LUN.Collect.Source(1).Compute(3).Type="Translate"
LUN.Collect.Source(1).Compute(3).Column="2"
LUN.Collect.Source(1).Compute(3).TranslationTable="LUNStatusTranslationTable"

LUNStatusTranslationTable("alive")="OK"
LUNStatusTranslationTable("dead")="ALARM"
LUNStatusTranslationTable("unlic")="WARN"
LUNStatusTranslationTable(Default)="UNKNOWN"

// The LUNStatusTranslationTable --> PatrolStatus
// logicalDeviceID;PatrolStatus;StatusInformation;alivePathCount;
LUN.Collect.Source(1).Compute(4).Type="Translate"
LUN.Collect.Source(1).Compute(4).Column="3"
LUN.Collect.Source(1).Compute(4).TranslationTable="LUNStatusInformationTranslationTable"

// The LUNStatusInformationTranslationTable --> StatusInformation
LUNStatusInformationTranslationTable("alive")=""
LUNStatusInformationTranslationTable("dead")="Dead"
LUNStatusInformationTranslationTable("unlic")="One or more paths are unlicensed"
LUNStatusInformationTranslationTable(Default)="UNKNOWN"


// ValueTable = Source(1)
// logicalDeviceID;PatrolStatus;StatusInformation;alivePathCount;
LUN.Collect.ValueTable=%LUN.Collect.Source(1)%
LUN.Collect.DeviceID=ValueTable.Column(1)
LUN.Collect.AvailablePathCount=ValueTable.Column(4)
LUN.Collect.Status=ValueTable.Column(2)
LUN.Collect.StatusInformation=ValueTable.Column(3)
// LUN.Collect.AvailablePathInformation=ValueTable.Column(5)

/////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    AWK script that takes the wonderful array of objects and returns them in column form
///	   MSHW;LunName;LunInfo;NumberPaths;LunStatus;LunStatusInfo;
///
/////////////////////////////////////////////////////////////
EmbeddedFile(1):
function printMSHW()
  {
   print("MSHW;"pseudoName";"manufacturerID";"logicalDeviceID";"deviceWWN";"state";"policy";"alivePathCount";")
	 pseudoName=""
	 manufacturerID=""
	 logicalDeviceID=""
	 pseudoName=""
	 deviceWWN=""
	 state=""
	 policy=""
	 alivePathCount=""
	 pathCountFlag=0
  }

$1~/Pseudo/ && $2~/name=/ {pseudoName = $2; gsub (/.*=/,"",pseudoName) }
$2~/ID=/ {manufacturerID = $2 ; gsub (/.*=/,"",manufacturerID) ; manufacturerID = $1 " " manufacturerID}
$1~/Logical/ && $2~/device/ && $3~/ID=/ {
	                                       logicalDeviceID=$0  ; gsub(/.?Logical device ID=/,"",logicalDeviceID);
	                                       gsub (/.*=/,"",logicalDeviceID)
	                                       if (pseudoName == "") {pseudoName = logicalDeviceID}
	                                      }
$1~/Device/ && $2~/WWN=/ {deviceWWN = $2; gsub (/.*=/,"",deviceWWN); deviceWWN = "naa.ID=" deviceWWN}
$1~/state=/ {state = $1 ; gsub (/state=/,"",state) ; gsub (/;/,"",state);}
$2~/policy=/ {policy = $2 ; gsub (/policy=/,"",policy) ; gsub (/;/,"",policy);}

pathCountFlag==1 && logicalDeviceID !="" {
	                if ($1 ~ /^[0-9]+$/) {
	                     if ($(NF-3)~/active/ && $(NF-2)~/alive/) {alivePathCount = alivePathCount + 1};
	                     if ($(NF-3)~/unlic/ && state~/alive/) {state="unlic"} ;
	                    }
	                    else {printMSHW()}
	                }

$0 ~ /### +HW +Path +I.O +Paths +Interf. +Mode +State/ {
	                                                     pathCountFlag=1;
	                                                     alivePathCount=0;
	                                                     getline
	                                                    }

END { if (logicalDeviceID !="") {printMSHW()} }
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////
