//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//              by Sentry Software (c)
//
//                  Cisco M9000 Series - Telnet
//
//      Supports:  Cisco SAN Switches
//
//      Connects to:  The Controller for the Switch Bay (Bay can contain more than one Switch, each Switch has a seperate "enclosure)
//
//

//
// HEADER

hdf.DisplayName="Cisco MDS9000 Series (SSH)"
hdf.TypicalPlatform="Cisco SAN"
hdf.ReliesOn="Commands on the Cisco Bay Controller"
hdf.Version="2.0"
hdf.Comments="This connector discovers the enclosure and fiber-channel ports of SAN switches as well as the various environment sensors (temperatures, fans, power supplies, etc.)."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="Storage"
hdf.Supersedes="MS_HW_SMISSwitch.hdf,MS_HW_FibreAllianceSwitch.hdf"

// host should respond to telnet the way described below
Detection.Criteria(1).Type="TelnetInteractive"

Detection.Criteria(1).Step(1).Type="Sleep"
Detection.Criteria(1).Step(1).Duration=1

Detection.Criteria(1).Step(2).Type="WaitFor"
Detection.Criteria(1).Step(2).TelnetOnly=1
Detection.Criteria(1).Step(2).Text="ogin:"
Detection.Criteria(1).Step(2).TimeOut=60

Detection.Criteria(1).Step(3).Type="SendUsername"
Detection.Criteria(1).Step(3).TelnetOnly=1

Detection.Criteria(1).Step(4).Type="WaitFor"
Detection.Criteria(1).Step(4).TelnetOnly=1
Detection.Criteria(1).Step(4).Text="assword:"
Detection.Criteria(1).Step(4).TimeOut=30

Detection.Criteria(1).Step(5).Type="SendPassword"
Detection.Criteria(1).Step(5).TelnetOnly=1

Detection.Criteria(1).Step(6).Type="WaitFor"
Detection.Criteria(1).Step(6).Text="#"
Detection.Criteria(1).Step(6).TimeOut=60
Detection.Criteria(1).Step(6).Capture="True"

Detection.Criteria(1).Step(7).Type="SendText"
Detection.Criteria(1).Step(7).Text="exit\nlogout\nquit\n"
Detection.Criteria(1).Step(7).Capture="False"

Detection.Criteria(1).ExpectedResult="Cisco"


//
// COMPUTER
//

//
// Discovery

// Source(1) = Output of show switchname


Enclosure.Discovery.Source(1).Type="TelnetInteractive"
Enclosure.Discovery.Source(1).Step(1).Type="Sleep"
Enclosure.Discovery.Source(1).Step(1).Duration=1
Enclosure.Discovery.Source(1).Step(1).TelnetOnly=1

Enclosure.Discovery.Source(1).Step(2).Type="WaitFor"
Enclosure.Discovery.Source(1).Step(2).Text="ogin:"
Enclosure.Discovery.Source(1).Step(2).Timeout=60
Enclosure.Discovery.Source(1).Step(2).TelnetOnly=1

Enclosure.Discovery.Source(1).Step(3).Type="SendUsername"
Enclosure.Discovery.Source(1).Step(3).TelnetOnly=1

Enclosure.Discovery.Source(1).Step(4).Type="WaitFor"
Enclosure.Discovery.Source(1).Step(4).Text="assword:"
Enclosure.Discovery.Source(1).Step(4).TimeOut=30
Enclosure.Discovery.Source(1).Step(4).TelnetOnly=1

Enclosure.Discovery.Source(1).Step(5).Type="SendPassword"
Enclosure.Discovery.Source(1).Step(5).TelnetOnly=1

Enclosure.Discovery.Source(1).Step(6).Type="WaitForPrompt"
Enclosure.Discovery.Source(1).Step(6).TimeOut=60

Enclosure.Discovery.Source(1).Step(7).Type="SendText"
Enclosure.Discovery.Source(1).Step(7).Text="terminal length 0\n"

Enclosure.Discovery.Source(1).Step(8).Type="WaitForPrompt"
Enclosure.Discovery.Source(1).Step(8).TimeOut=60

Enclosure.Discovery.Source(1).Step(9).Type="SendText"
Enclosure.Discovery.Source(1).Step(9).Text="terminal no monitor\n"

Enclosure.Discovery.Source(1).Step(10).Type="WaitForPrompt"
Enclosure.Discovery.Source(1).Step(10).TimeOut=60

Enclosure.Discovery.Source(1).Step(11).Type="SendText"
Enclosure.Discovery.Source(1).Step(11).Text="show hardware\n"

Enclosure.Discovery.Source(1).Step(12).Type="GetUntilPrompt"
Enclosure.Discovery.Source(1).Step(12).TimeOut=150
Enclosure.Discovery.Source(1).Step(12).Capture="True"

Enclosure.Discovery.Source(1).Step(13).Type="SendText"
Enclosure.Discovery.Source(1).Step(13).Text="exit\nlogout\nquit\n"
Enclosure.Discovery.Source(1).Step(13).Capture="False"

// Now, extract the switchname thanks to a smart AWK script
//  RETURNS switchname

Enclosure.Discovery.Source(1).Compute(1).Type="Awk"
Enclosure.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)
Enclosure.Discovery.Source(1).Compute(1).Separators=";"
Enclosure.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Enclosure.Discovery.Source(1).Compute(1).SelectColumns="2"

Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="MDS9000Bay"
Enclosure.Discovery.Instance.Vendor="Cisco"
Enclosure.Discovery.Instance.Type="Switch"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(1)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(2)


// Source(2) = Output of the show module
//

Enclosure.Discovery.Source(2).Type="TelnetInteractive"
Enclosure.Discovery.Source(2).Step(1).Type="Sleep"
Enclosure.Discovery.Source(2).Step(1).Duration=1
Enclosure.Discovery.Source(2).Step(1).TelnetOnly=1

Enclosure.Discovery.Source(2).Step(2).Type="WaitFor"
Enclosure.Discovery.Source(2).Step(2).Text="ogin:"
Enclosure.Discovery.Source(2).Step(2).Timeout=60
Enclosure.Discovery.Source(2).Step(2).TelnetOnly=1

Enclosure.Discovery.Source(2).Step(3).Type="SendUsername"
Enclosure.Discovery.Source(2).Step(3).TelnetOnly=1

Enclosure.Discovery.Source(2).Step(4).Type="WaitFor"
Enclosure.Discovery.Source(2).Step(4).Text="assword:"
Enclosure.Discovery.Source(2).Step(4).TimeOut=30
Enclosure.Discovery.Source(2).Step(4).TelnetOnly=1

Enclosure.Discovery.Source(2).Step(5).Type="SendPassword"
Enclosure.Discovery.Source(2).Step(5).TelnetOnly=1

Enclosure.Discovery.Source(2).Step(6).Type="WaitForPrompt"
Enclosure.Discovery.Source(2).Step(6).TimeOut=60

Enclosure.Discovery.Source(2).Step(7).Type="SendText"
Enclosure.Discovery.Source(2).Step(7).Text="terminal length 0\n"

Enclosure.Discovery.Source(2).Step(8).Type="WaitForPrompt"
Enclosure.Discovery.Source(2).Step(8).TimeOut=60

Enclosure.Discovery.Source(2).Step(9).Type="SendText"
Enclosure.Discovery.Source(2).Step(9).Text="terminal no monitor\n"

Enclosure.Discovery.Source(2).Step(10).Type="WaitForPrompt"
Enclosure.Discovery.Source(2).Step(10).TimeOut=60

Enclosure.Discovery.Source(2).Step(11).Type="SendText"
Enclosure.Discovery.Source(2).Step(11).Text="show module\n"

Enclosure.Discovery.Source(2).Step(12).Type="GetUntilPrompt"
Enclosure.Discovery.Source(2).Step(12).TimeOut=150
Enclosure.Discovery.Source(2).Step(12).Capture="True"

Enclosure.Discovery.Source(2).Step(13).Type="SendText"
Enclosure.Discovery.Source(2).Step(13).Text="show environment\n"

Enclosure.Discovery.Source(2).Step(14).Type="GetUntilPrompt"
Enclosure.Discovery.Source(2).Step(14).TimeOut=150
Enclosure.Discovery.Source(2).Step(14).Capture="True"

// Isolated from main discovery as this command can take forever (10 minutes+)
// Enclosure.Discovery.Source(2).Step(15).Type="SendText"
// Enclosure.Discovery.Source(2).Step(15).Text="show interface\n"
//
// Enclosure.Discovery.Source(2).Step(16).Type="GetUntilPrompt"
// Enclosure.Discovery.Source(2).Step(16).TimeOut=600
// Enclosure.Discovery.Source(2).Step(16).Capture="True"

Enclosure.Discovery.Source(2).Step(17).Type="SendText"
Enclosure.Discovery.Source(2).Step(17).Text="exit\nlogout\nquit\n"
Enclosure.Discovery.Source(2).Step(17).Capture="False"

//
// Collect

Enclosure.Collect.Type="MultiInstance"

Enclosure.Collect.Source(1).Type="TelnetInteractive"
Enclosure.Collect.Source(1).Step(1).Type="Sleep"
Enclosure.Collect.Source(1).Step(1).Duration=1
Enclosure.Collect.Source(1).Step(1).TelnetOnly=1

Enclosure.Collect.Source(1).Step(2).Type="WaitFor"
Enclosure.Collect.Source(1).Step(2).Text="ogin:"
Enclosure.Collect.Source(1).Step(2).Timeout=30
Enclosure.Collect.Source(1).Step(2).TelnetOnly=1

Enclosure.Collect.Source(1).Step(3).Type="SendUsername"
Enclosure.Collect.Source(1).Step(3).TelnetOnly=1

Enclosure.Collect.Source(1).Step(4).Type="WaitFor"
Enclosure.Collect.Source(1).Step(4).Text="assword:"
Enclosure.Collect.Source(1).Step(4).TimeOut=30
Enclosure.Collect.Source(1).Step(4).TelnetOnly=1

Enclosure.Collect.Source(1).Step(5).Type="SendPassword"
Enclosure.Collect.Source(1).Step(5).TelnetOnly=1

Enclosure.Collect.Source(1).Step(6).Type="WaitForPrompt"
Enclosure.Collect.Source(1).Step(6).TimeOut=60

Enclosure.Collect.Source(1).Step(7).Type="SendText"
Enclosure.Collect.Source(1).Step(7).Text="terminal length 0\n"

Enclosure.Collect.Source(1).Step(8).Type="WaitForPrompt"
Enclosure.Collect.Source(1).Step(8).TimeOut=60

Enclosure.Collect.Source(1).Step(9).Type="SendText"
Enclosure.Collect.Source(1).Step(9).Text="terminal no monitor\n"

Enclosure.Collect.Source(1).Step(10).Type="WaitForPrompt"
Enclosure.Collect.Source(1).Step(10).TimeOut=60

Enclosure.Collect.Source(1).Step(11).Type="SendText"
Enclosure.Collect.Source(1).Step(11).Text="show module\n"

Enclosure.Collect.Source(1).Step(12).Type="GetUntilPrompt"
Enclosure.Collect.Source(1).Step(12).TimeOut=150
Enclosure.Collect.Source(1).Step(12).Capture="True"

Enclosure.Collect.Source(1).Step(13).Type="SendText"
Enclosure.Collect.Source(1).Step(13).Text="show environment\n"

Enclosure.Collect.Source(1).Step(14).Type="GetUntilPrompt"
Enclosure.Collect.Source(1).Step(14).TimeOut=150
Enclosure.Collect.Source(1).Step(14).Capture="True"

// Isolated from main discovery as this command can take forever (10 minutes+)
// Enclosure.Collect.Source(1).Step(15).Type="SendText"
// Enclosure.Collect.Source(1).Step(15).Text="show interface\n"
//
// Enclosure.Collect.Source(1).Step(16).Type="GetUntilPrompt"
// Enclosure.Collect.Source(1).Step(16).TimeOut=600
// Enclosure.Collect.Source(1).Step(16).Capture="True"

Enclosure.Collect.Source(1).Step(17).Type="SendText"
Enclosure.Collect.Source(1).Step(17).Text="exit\nlogout\nquit\n"
Enclosure.Collect.Source(1).Step(17).Capture="False"

// Source(2) = copy of Enclosure.Collect.Source(1)
Enclosure.Collect.Source(2)=%Enclosure.Collect.Source(1)%

// Retrieve the enclosure's power consumption with a smart AWK script'
// MSHW;PowerConsumption

Enclosure.Collect.Source(2).Compute(1).Type="Awk"
Enclosure.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(3)
Enclosure.Collect.Source(2).Compute(1).KeepOnlyRegExp="MSHW;"
Enclosure.Collect.Source(2).Compute(1).Separators=";"
Enclosure.Collect.Source(2).Compute(1).SelectColumns="2"

// ValueTable = Source(2)
// PowerConsumption
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.DeviceID="MDS9000Bay"
Enclosure.Collect.PowerConsumption=ValueTable.Column(1)


//
// Modules (as Blade devices)
//

// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
Blade.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Now, extract the blades thanks to a smart AWK script
//  RETURNS module number;port number -port module type ; model number ; status
//  SELECTS module number;port number -port module type ; model number ;

Blade.Discovery.Source(1).Compute(1).Type="Awk"
Blade.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Blade.Discovery.Source(1).Compute(1).Separators=";"
Blade.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Blade.Discovery.Source(1).Compute(1).SelectColumns="2,3,4"


// InstanceTable = Source(3)
Blade.Discovery.InstanceTable=%Blade.Discovery.Source(1)%
Blade.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Blade.Discovery.Instance.BladeName=InstanceTable.Column(2)
Blade.Discovery.Instance.BladeModel=InstanceTable.Column(3)
Blade.Discovery.Instance.AttachedToDeviceID="MDS9000Bay"

//
// Collect

// Collect type is multi-instance
Blade.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
Blade.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Now, extract the blade status thanks to a smart AWK script
// Now, extract the Network Cards thanks to a smart AWK script
//  RETURNS module number;port number -port module type ; model number ; status
//  SELECTS module number;                                             ; status

Blade.Collect.Source(1).Compute(1).Type="Awk"
Blade.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(1)
Blade.Collect.Source(1).Compute(1).Separators=";"
Blade.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Blade.Collect.Source(1).Compute(1).SelectColumns="2,5"

// Duplicate the status column
// PowerSupplyID; status ; status ;
Blade.Collect.Source(1).Compute(2).Type="DuplicateColumn"
Blade.Collect.Source(1).Compute(2).Column=2

// Now translate status into OK/Warning/Alarm
// status
Blade.Collect.Source(1).Compute(3).Type="Translate"
Blade.Collect.Source(1).Compute(3).Column="2"
Blade.Collect.Source(1).Compute(3).TranslationTable="ModuleStatusTranslationTable"

// ModuleStatusTranslationTable
ModuleStatusTranslationTable("poweredup")="WARN"
ModuleStatusTranslationTable("testing")="WARN"
ModuleStatusTranslationTable("initializing")="WARN"
ModuleStatusTranslationTable("failure")="ALARM"
ModuleStatusTranslationTable("ok")="OK"
ModuleStatusTranslationTable("power-denied")="ALARM"
ModuleStatusTranslationTable("pwr-denied")="ALARM"
ModuleStatusTranslationTable("active")="OK"
ModuleStatusTranslationTable("HA-standby")="OK"
ModuleStatusTranslationTable("standby")="OK"
ModuleStatusTranslationTable("powered-down")="WARN"
ModuleStatusTranslationTable("err-pwd-dn")="ALARM"
ModuleStatusTranslationTable("powered-up")="WARN"
ModuleStatusTranslationTable("pwr-cycled")="WARN"
ModuleStatusTranslationTable("upgrading")="OK"
ModuleStatusTranslationTable(Default)="UNKNOWN"

// Now translate status into OK/Warning/Alarm
// status

Blade.Collect.Source(1).Compute(4).Type="Translate"
Blade.Collect.Source(1).Compute(4).Column="3"
Blade.Collect.Source(1).Compute(4).TranslationTable="ModuleStatusInformationTranslationTable"

// ModuleStatusInformationTranslationTable
ModuleStatusInformationTranslationTable("poweredup")="Booting"
ModuleStatusInformationTranslationTable("testing")="Booting - Diagnostics"
ModuleStatusInformationTranslationTable("initializing")="Initializing"
ModuleStatusInformationTranslationTable("failure")="Failure"
ModuleStatusInformationTranslationTable("ok")=""
ModuleStatusInformationTranslationTable("power-denied")="Power Issues"
ModuleStatusInformationTranslationTable("pwr-denied")="Power Issues"
ModuleStatusInformationTranslationTable("active")="Not Configured"
ModuleStatusInformationTranslationTable("HA-standby")="HA Standby"
ModuleStatusInformationTranslationTable("standby")="Standby"
ModuleStatusInformationTranslationTable("powered-down")="User Requested Power Down"
ModuleStatusInformationTranslationTable("err-pwd-dn")="Powered Down due to Fault"
ModuleStatusInformationTranslationTable("powered-up")="Powered up - Waiting to Initialize"
ModuleStatusInformationTranslationTable("pwr-cycled")="Module Reloaded"
ModuleStatusInformationTranslationTable("upgrading")="OK"
ModuleStatusInformationTranslationTable(Default)="UNKNOWN"


// ValueTable = Source(1)
Blade.Collect.ValueTable=%Blade.Collect.Source(1)%
Blade.Collect.DeviceID=ValueTable.Column(1)
Blade.Collect.Status=ValueTable.Column(2)
Blade.Collect.StatusInformation=ValueTable.Column(3)

//
// FC + Network Cards
//

//
// Discovery

// Source(1) = Output of the show interface
//

NetworkCard.Discovery.Source(1).Type="TelnetInteractive"
NetworkCard.Discovery.Source(1).Step(1).Type="Sleep"
NetworkCard.Discovery.Source(1).Step(1).Duration=1
NetworkCard.Discovery.Source(1).Step(1).TelnetOnly=1

NetworkCard.Discovery.Source(1).Step(2).Type="WaitFor"
NetworkCard.Discovery.Source(1).Step(2).Text="ogin:"
NetworkCard.Discovery.Source(1).Step(2).Timeout=60
NetworkCard.Discovery.Source(1).Step(2).TelnetOnly=1

NetworkCard.Discovery.Source(1).Step(3).Type="SendUsername"
NetworkCard.Discovery.Source(1).Step(3).TelnetOnly=1

NetworkCard.Discovery.Source(1).Step(4).Type="WaitFor"
NetworkCard.Discovery.Source(1).Step(4).Text="assword:"
NetworkCard.Discovery.Source(1).Step(4).TimeOut=30
NetworkCard.Discovery.Source(1).Step(4).TelnetOnly=1

NetworkCard.Discovery.Source(1).Step(5).Type="SendPassword"
NetworkCard.Discovery.Source(1).Step(5).TelnetOnly=1

NetworkCard.Discovery.Source(1).Step(6).Type="WaitForPrompt"
NetworkCard.Discovery.Source(1).Step(6).TimeOut=60

NetworkCard.Discovery.Source(1).Step(7).Type="SendText"
NetworkCard.Discovery.Source(1).Step(7).Text="terminal length 0\n"

NetworkCard.Discovery.Source(1).Step(8).Type="WaitForPrompt"
NetworkCard.Discovery.Source(1).Step(8).TimeOut=60

NetworkCard.Discovery.Source(1).Step(9).Type="SendText"
NetworkCard.Discovery.Source(1).Step(9).Text="terminal no monitor\n"

NetworkCard.Discovery.Source(1).Step(10).Type="WaitForPrompt"
NetworkCard.Discovery.Source(1).Step(10).TimeOut=60

NetworkCard.Discovery.Source(1).Step(11).Type="SendText"
NetworkCard.Discovery.Source(1).Step(11).Text="show interface\n"

NetworkCard.Discovery.Source(1).Step(12).Type="GetUntilPrompt"
NetworkCard.Discovery.Source(1).Step(12).TimeOut=1200
NetworkCard.Discovery.Source(1).Step(12).Capture="True"

NetworkCard.Discovery.Source(1).Step(13).Type="SendText"
NetworkCard.Discovery.Source(1).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Discovery.Source(1).Step(13).Capture="False"

// Now, extract the NICs thanks to a smart AWK script
//  RETURNS RETURNS MSHW ; attachToType ; module ; port ; statusInformation ; wwn ; portDesc portMode ; speed ; linkStatus ; duplexMode ; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ; portDescription ;
//  SELECTS attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ;
//

NetworkCard.Discovery.Source(1).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
NetworkCard.Discovery.Source(1).Compute(1).Separators=";"
NetworkCard.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(1).Compute(1).SelectColumns="2,3,4,5,6,7,17"

// Exclude SPFs that are not present
// attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ;
NetworkCard.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(2).Column=4
NetworkCard.Discovery.Source(1).Compute(2).RegExp="(SFP not present)"

// Exclude SPFs that are not inserted
// attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ;
NetworkCard.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(3).Column=4
NetworkCard.Discovery.Source(1).Compute(3).RegExp="(SFP not inserted)"

// Reconnect to switch to determine if zero buffer TX Credits parameter is to be activated.
// This is done seperately as we don't have much experience with the commnd, it doesn't work on all switches
// and isn't important enough to take the risk that it'll affect the main FC port discovery.

NetworkCard.Discovery.Source(2).Type="TelnetInteractive"
NetworkCard.Discovery.Source(2).Step(1).Type="Sleep"
NetworkCard.Discovery.Source(2).Step(1).Duration=1
NetworkCard.Discovery.Source(2).Step(1).TelnetOnly=1

NetworkCard.Discovery.Source(2).Step(2).Type="WaitFor"
NetworkCard.Discovery.Source(2).Step(2).Text="ogin:"
NetworkCard.Discovery.Source(2).Step(2).Timeout=60
NetworkCard.Discovery.Source(2).Step(2).TelnetOnly=1

NetworkCard.Discovery.Source(2).Step(3).Type="SendUsername"
NetworkCard.Discovery.Source(2).Step(3).TelnetOnly=1

NetworkCard.Discovery.Source(2).Step(4).Type="WaitFor"
NetworkCard.Discovery.Source(2).Step(4).Text="assword:"
NetworkCard.Discovery.Source(2).Step(4).TimeOut=30
NetworkCard.Discovery.Source(2).Step(4).TelnetOnly=1

NetworkCard.Discovery.Source(2).Step(5).Type="SendPassword"
NetworkCard.Discovery.Source(2).Step(5).TelnetOnly=1

NetworkCard.Discovery.Source(2).Step(6).Type="WaitForPrompt"
NetworkCard.Discovery.Source(2).Step(6).TimeOut=60

NetworkCard.Discovery.Source(2).Step(7).Type="SendText"
NetworkCard.Discovery.Source(2).Step(7).Text="terminal length 0\n"

NetworkCard.Discovery.Source(2).Step(8).Type="WaitForPrompt"
NetworkCard.Discovery.Source(2).Step(8).TimeOut=60

NetworkCard.Discovery.Source(2).Step(9).Type="SendText"
NetworkCard.Discovery.Source(2).Step(9).Text="terminal no monitor\n"

NetworkCard.Discovery.Source(2).Step(10).Type="WaitForPrompt"
NetworkCard.Discovery.Source(2).Step(10).TimeOut=60

NetworkCard.Discovery.Source(2).Step(11).Type="SendText"
NetworkCard.Discovery.Source(2).Step(11).Text="show interface detail-counters | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"

NetworkCard.Discovery.Source(2).Step(12).Type="GetUntilPrompt"
NetworkCard.Discovery.Source(2).Step(12).TimeOut=300
NetworkCard.Discovery.Source(2).Step(12).Capture="True"

NetworkCard.Discovery.Source(2).Step(13).Type="SendText"
NetworkCard.Discovery.Source(2).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Discovery.Source(2).Step(13).Capture="False"

// Now, extract the NICs ZeroBufferCreditCount
//  port;ZeroBufferCreditCount;
NetworkCard.Discovery.Source(2).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(9)
NetworkCard.Discovery.Source(2).Compute(1).Separators=";"
NetworkCard.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(2).Compute(1).SelectColumns="2,3"


//Take into account the new Command "show interface counters detailed | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"
NetworkCard.Discovery.Source(3).Type="TelnetInteractive"
NetworkCard.Discovery.Source(3).Step(1).Type="Sleep"
NetworkCard.Discovery.Source(3).Step(1).Duration=1
NetworkCard.Discovery.Source(3).Step(1).TelnetOnly=1

NetworkCard.Discovery.Source(3).Step(2).Type="WaitFor"
NetworkCard.Discovery.Source(3).Step(2).Text="ogin:"
NetworkCard.Discovery.Source(3).Step(2).Timeout=60
NetworkCard.Discovery.Source(3).Step(2).TelnetOnly=1

NetworkCard.Discovery.Source(3).Step(3).Type="SendUsername"
NetworkCard.Discovery.Source(3).Step(3).TelnetOnly=1

NetworkCard.Discovery.Source(3).Step(4).Type="WaitFor"
NetworkCard.Discovery.Source(3).Step(4).Text="assword:"
NetworkCard.Discovery.Source(3).Step(4).TimeOut=30
NetworkCard.Discovery.Source(3).Step(4).TelnetOnly=1

NetworkCard.Discovery.Source(3).Step(5).Type="SendPassword"
NetworkCard.Discovery.Source(3).Step(5).TelnetOnly=1

NetworkCard.Discovery.Source(3).Step(6).Type="WaitForPrompt"
NetworkCard.Discovery.Source(3).Step(6).TimeOut=60

NetworkCard.Discovery.Source(3).Step(7).Type="SendText"
NetworkCard.Discovery.Source(3).Step(7).Text="terminal length 0\n"

NetworkCard.Discovery.Source(3).Step(8).Type="WaitForPrompt"
NetworkCard.Discovery.Source(3).Step(8).TimeOut=60

NetworkCard.Discovery.Source(3).Step(9).Type="SendText"
NetworkCard.Discovery.Source(3).Step(9).Text="terminal no monitor\n"

NetworkCard.Discovery.Source(3).Step(10).Type="WaitForPrompt"
NetworkCard.Discovery.Source(3).Step(10).TimeOut=60

NetworkCard.Discovery.Source(3).Step(11).Type="SendText"
NetworkCard.Discovery.Source(3).Step(11).Text="show interface counters detailed | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"

NetworkCard.Discovery.Source(3).Step(12).Type="GetUntilPrompt"
NetworkCard.Discovery.Source(3).Step(12).TimeOut=300
NetworkCard.Discovery.Source(3).Step(12).Capture="True"

NetworkCard.Discovery.Source(3).Step(13).Type="SendText"
NetworkCard.Discovery.Source(3).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Discovery.Source(3).Step(13).Capture="False"

// Now, extract the NICs ZeroBufferCreditCount
//  port;ZeroBufferCreditCount;
NetworkCard.Discovery.Source(3).Compute(1).Type="Awk"
NetworkCard.Discovery.Source(3).Compute(1).AwkScript=EmbeddedFile(9)
NetworkCard.Discovery.Source(3).Compute(1).Separators=";"
NetworkCard.Discovery.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(3).Compute(1).SelectColumns="2,3"

NetworkCard.Discovery.Source(4).Type="TableUnion"
NetworkCard.Discovery.Source(4).Table1=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(4).Table2=%NetworkCard.Discovery.Source(3)%



// Table Joint the main Discovery to the ZeroBufferCreditCount
// attachToType ; module ; port ; status ; wwn ; portMode ; portDescription ; port ; ZeroBufferCreditCount ;
NetworkCard.Discovery.Source(5).Type="TableJoint"
NetworkCard.Discovery.Source(5).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(5).RightTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Source(5).LeftKeyColumn=3
NetworkCard.Discovery.Source(5).RightKeyColumn=1
NetworkCard.Discovery.Source(5).DefaultRightLine=";;"

// InstanceTable = Source(1)
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(1)
NetworkCard.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(5)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(6)
// NetworkCard.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.RemotePhysicalAddress=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.RemotePhysicalAddressType="RemoteHost"
NetworkCard.Discovery.Instance.ParameterActivation.ZeroBufferCreditCount=InstanceTable.Column(9)
// NetworkCard.Discovery.Instance.Bandwidth=InstanceTable.Column(7)
// NetworkCard.Discovery.Instance.Model=InstanceTable.Column(2)


//
// Collect

// Collect type = multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = Output of the show interface
//

NetworkCard.Collect.Source(1).Type="TelnetInteractive"
NetworkCard.Collect.Source(1).Step(1).Type="Sleep"
NetworkCard.Collect.Source(1).Step(1).Duration=1
NetworkCard.Collect.Source(1).Step(1).TelnetOnly=1

NetworkCard.Collect.Source(1).Step(2).Type="WaitFor"
NetworkCard.Collect.Source(1).Step(2).Text="ogin:"
NetworkCard.Collect.Source(1).Step(2).Timeout=60
NetworkCard.Collect.Source(1).Step(2).TelnetOnly=1

NetworkCard.Collect.Source(1).Step(3).Type="SendUsername"
NetworkCard.Collect.Source(1).Step(3).TelnetOnly=1

NetworkCard.Collect.Source(1).Step(4).Type="WaitFor"
NetworkCard.Collect.Source(1).Step(4).Text="assword:"
NetworkCard.Collect.Source(1).Step(4).TimeOut=30
NetworkCard.Collect.Source(1).Step(4).TelnetOnly=1

NetworkCard.Collect.Source(1).Step(5).Type="SendPassword"
NetworkCard.Collect.Source(1).Step(5).TelnetOnly=1

NetworkCard.Collect.Source(1).Step(6).Type="WaitForPrompt"
NetworkCard.Collect.Source(1).Step(6).TimeOut=60

NetworkCard.Collect.Source(1).Step(7).Type="SendText"
NetworkCard.Collect.Source(1).Step(7).Text="terminal length 0\n"

NetworkCard.Collect.Source(1).Step(8).Type="WaitForPrompt"
NetworkCard.Collect.Source(1).Step(8).TimeOut=60

NetworkCard.Collect.Source(1).Step(9).Type="SendText"
NetworkCard.Collect.Source(1).Step(9).Text="terminal no monitor\n"

NetworkCard.Collect.Source(1).Step(10).Type="WaitForPrompt"
NetworkCard.Collect.Source(1).Step(10).TimeOut=60

NetworkCard.Collect.Source(1).Step(11).Type="SendText"
NetworkCard.Collect.Source(1).Step(11).Text="show interface\n"

NetworkCard.Collect.Source(1).Step(12).Type="GetUntilPrompt"
NetworkCard.Collect.Source(1).Step(12).TimeOut=1200
NetworkCard.Collect.Source(1).Step(12).Capture="True"

NetworkCard.Collect.Source(1).Step(13).Type="SendText"
NetworkCard.Collect.Source(1).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Collect.Source(1).Step(13).Capture="False"

// Now, extract the NICs thanks to a smart AWK script
//  RETURNS MSHW ; attachToType ; module ; port ; statusInformation ; wwn ; portDesc portMode ; speed ; linkStatus ; duplexMode ; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;
//  SELECTS port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status
//
NetworkCard.Collect.Source(1).Compute(1).Type="Awk"
NetworkCard.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(4)
NetworkCard.Collect.Source(1).Compute(1).Separators=";"
NetworkCard.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(1).Compute(1).SelectColumns="4,5,8,9,10,11,12,13,14,15,16"

// Now translate linkStatus into OK / WARN
// port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;

NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=4
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="linkStatusTranslationTable"

// linkStatusTranslationTable
linkStatusTranslationTable("up")="OK"
linkStatusTranslationTable("trunking")="OK"
linkStatusTranslationTable("down")="WARN"
linkStatusTranslationTable("missing")="WARN"
linkStatusTranslationTable(Default)="UNKNOWN"

// Now translate status
// port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;

NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=11
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="networkStatusTranslationTable"

// networkStatusTranslationTable
networkStatusTranslationTable("linkfailureornotconnected")="OK"
networkStatusTranslationTable("sfpnotpresent")="MISSING"
networkStatusTranslationTable("initializing")="OK"
networkStatusTranslationTable("reconfigurefabricinprogress")="OK"
networkStatusTranslationTable("offline")="WARN"
networkStatusTranslationTable("inactive")="OK"
networkStatusTranslationTable("hardwarefailure")="ALARM"
networkStatusTranslationTable("errordisabled")="ALARM"
networkStatusTranslationTable("isolationduetoelpfailure")="ALARM"
networkStatusTranslationTable("isolationduetoescfailure")="ALARM"
networkStatusTranslationTable("isolationduetodomainoverlap")="ALARM"
networkStatusTranslationTable("isolationduetodomainidassignmentfailure")="ALARM"
networkStatusTranslationTable("isolationduetoothersideeportisolated")="ALARM"
networkStatusTranslationTable("isolationduetoinvalidfabricreconfiguration")="ALARM"
networkStatusTranslationTable("isolationduetodomainmanagerdisabled")="ALARM"
networkStatusTranslationTable("isolationduetozonemergefailure")="ALARM"
networkStatusTranslationTable("isolationduetovsanmismatch")="ALARM"
networkStatusTranslationTable("nonparticipating")="WARN"
networkStatusTranslationTable("portchanneladministrativelydown")="OK"
networkStatusTranslationTable("suspendedduetoincompatiblespeed")="ALARM"
networkStatusTranslationTable("suspendedduetoincompatiblemode")="ALARM"
networkStatusTranslationTable("suspendedduetoincompatibleremoteswitchwwn")="ALARM"
networkStatusTranslationTable("outofservice")="OK"
networkStatusTranslationTable("up")="OK"
networkStatusTranslationTable("down")="OK"
networkStatusTranslationTable("trunking")="OK"
networkStatusTranslationTable("down (Out of Service)")="OK"
networkStatusTranslationTable("down (Administratively down)")="OK"
networkStatusTranslationTable("administrativelydown")="OK"
networkStatusTranslationTable(Default)="UNKNOWN"


// Reconnect to switch to collect zero buffer TX Credits parameter is to be activated.

NetworkCard.Collect.Source(2).Type="TelnetInteractive"
NetworkCard.Collect.Source(2).Step(1).Type="Sleep"
NetworkCard.Collect.Source(2).Step(1).Duration=1
NetworkCard.Collect.Source(2).Step(1).TelnetOnly=1

NetworkCard.Collect.Source(2).Step(2).Type="WaitFor"
NetworkCard.Collect.Source(2).Step(2).Text="ogin:"
NetworkCard.Collect.Source(2).Step(2).Timeout=60
NetworkCard.Collect.Source(2).Step(2).TelnetOnly=1

NetworkCard.Collect.Source(2).Step(3).Type="SendUsername"
NetworkCard.Collect.Source(2).Step(3).TelnetOnly=1

NetworkCard.Collect.Source(2).Step(4).Type="WaitFor"
NetworkCard.Collect.Source(2).Step(4).Text="assword:"
NetworkCard.Collect.Source(2).Step(4).TimeOut=30
NetworkCard.Collect.Source(2).Step(4).TelnetOnly=1

NetworkCard.Collect.Source(2).Step(5).Type="SendPassword"
NetworkCard.Collect.Source(2).Step(5).TelnetOnly=1

NetworkCard.Collect.Source(2).Step(6).Type="WaitForPrompt"
NetworkCard.Collect.Source(2).Step(6).TimeOut=60

NetworkCard.Collect.Source(2).Step(7).Type="SendText"
NetworkCard.Collect.Source(2).Step(7).Text="terminal length 0\n"

NetworkCard.Collect.Source(2).Step(8).Type="WaitForPrompt"
NetworkCard.Collect.Source(2).Step(8).TimeOut=60

NetworkCard.Collect.Source(2).Step(9).Type="SendText"
NetworkCard.Collect.Source(2).Step(9).Text="terminal no monitor\n"

NetworkCard.Collect.Source(2).Step(10).Type="WaitForPrompt"
NetworkCard.Collect.Source(2).Step(10).TimeOut=60

NetworkCard.Collect.Source(2).Step(11).Type="SendText"
NetworkCard.Collect.Source(2).Step(11).Text="show interface detail-counters | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"

NetworkCard.Collect.Source(2).Step(12).Type="GetUntilPrompt"
NetworkCard.Collect.Source(2).Step(12).TimeOut=300
NetworkCard.Collect.Source(2).Step(12).Capture="True"

NetworkCard.Collect.Source(2).Step(13).Type="SendText"
NetworkCard.Collect.Source(2).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Collect.Source(2).Step(13).Capture="False"

// Now, extract the NICs ZeroBufferCreditCount
//  port;ZeroBufferCreditCount;
NetworkCard.Collect.Source(2).Compute(1).Type="Awk"
NetworkCard.Collect.Source(2).Compute(1).AwkScript=EmbeddedFile(9)
NetworkCard.Collect.Source(2).Compute(1).Separators=";"
NetworkCard.Collect.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(2).Compute(1).SelectColumns="2,3"


//Take into account the new Command "show interface counters detailed | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"
NetworkCard.Collect.Source(3).Type="TelnetInteractive"
NetworkCard.Collect.Source(3).Step(1).Type="Sleep"
NetworkCard.Collect.Source(3).Step(1).Duration=1
NetworkCard.Collect.Source(3).Step(1).TelnetOnly=1

NetworkCard.Collect.Source(3).Step(2).Type="WaitFor"
NetworkCard.Collect.Source(3).Step(2).Text="ogin:"
NetworkCard.Collect.Source(3).Step(2).Timeout=60
NetworkCard.Collect.Source(3).Step(2).TelnetOnly=1

NetworkCard.Collect.Source(3).Step(3).Type="SendUsername"
NetworkCard.Collect.Source(3).Step(3).TelnetOnly=1

NetworkCard.Collect.Source(3).Step(4).Type="WaitFor"
NetworkCard.Collect.Source(3).Step(4).Text="assword:"
NetworkCard.Collect.Source(3).Step(4).TimeOut=30
NetworkCard.Collect.Source(3).Step(4).TelnetOnly=1

NetworkCard.Collect.Source(3).Step(5).Type="SendPassword"
NetworkCard.Collect.Source(3).Step(5).TelnetOnly=1

NetworkCard.Collect.Source(3).Step(6).Type="WaitForPrompt"
NetworkCard.Collect.Source(3).Step(6).TimeOut=60

NetworkCard.Collect.Source(3).Step(7).Type="SendText"
NetworkCard.Collect.Source(3).Step(7).Text="terminal length 0\n"

NetworkCard.Collect.Source(3).Step(8).Type="WaitForPrompt"
NetworkCard.Collect.Source(3).Step(8).TimeOut=60

NetworkCard.Collect.Source(3).Step(9).Type="SendText"
NetworkCard.Collect.Source(3).Step(9).Text="terminal no monitor\n"

NetworkCard.Collect.Source(3).Step(10).Type="WaitForPrompt"
NetworkCard.Collect.Source(3).Step(10).TimeOut=60

NetworkCard.Collect.Source(3).Step(11).Type="SendText"
NetworkCard.Collect.Source(3).Step(11).Text="show interface counters detailed | grep '\(fc[0-9]\)\|\(waits due to lack of transmit credits\)'\n"

NetworkCard.Collect.Source(3).Step(12).Type="GetUntilPrompt"
NetworkCard.Collect.Source(3).Step(12).TimeOut=300
NetworkCard.Collect.Source(3).Step(12).Capture="True"

NetworkCard.Collect.Source(3).Step(13).Type="SendText"
NetworkCard.Collect.Source(3).Step(13).Text="exit\nlogout\nquit\n"
NetworkCard.Collect.Source(3).Step(13).Capture="False"

// Now, extract the NICs ZeroBufferCreditCount
//  port;ZeroBufferCreditCount;
NetworkCard.Collect.Source(3).Compute(1).Type="Awk"
NetworkCard.Collect.Source(3).Compute(1).AwkScript=EmbeddedFile(9)
NetworkCard.Collect.Source(3).Compute(1).Separators=";"
NetworkCard.Collect.Source(3).Compute(1).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(3).Compute(1).SelectColumns="2,3"


NetworkCard.Collect.Source(4).Type="TableUnion"
NetworkCard.Collect.Source(4).Table1=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(4).Table2=%NetworkCard.Collect.Source(3)%


// Table Joint the main Discovery to the ZeroBufferCreditCount
// port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ; port ; ZeroBufferCreditCount ;
NetworkCard.Collect.Source(5).Type="TableJoint"
NetworkCard.Collect.Source(5).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(5).RightTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(5).LeftKeyColumn=1
NetworkCard.Collect.Source(5).RightKeyColumn=1
NetworkCard.Collect.Source(5).DefaultRightLine=";;"

// ValueTable = Source(1)
// port ; statusInformation ; speed; link Status; duplexMode; transmitPackets ; receivePackets ; transmitBytes ; receiveBytes ; totalErrors ; status ;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.DeviceID=ValueTable.Column(1)
NetworkCard.Collect.StatusInformation=ValueTable.Column(2)
NetworkCard.Collect.LinkStatus=ValueTable.Column(4)
NetworkCard.Collect.ErrorCount=ValueTable.Column(10)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(6)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(7)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(8)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(9)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(3)
NetworkCard.Collect.DuplexMode=ValueTable.Column(5)
NetworkCard.Collect.Status=ValueTable.Column(11)
NetworkCard.Collect.ZeroBufferCreditCount=ValueTable.Column(13)

//
// Other Devices (switches, DRAC/MC, KVM)
//

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Now, extract the other devices information to a smart AWK script
//  RETURNS MSHW;Clock;ID;status;status
//  SELECTS      Clock;ID

OtherDevice.Discovery.Source(1).Compute(1).Type="Awk"
OtherDevice.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(5)
OtherDevice.Discovery.Source(1).Compute(1).Separators=";"
OtherDevice.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Discovery.Source(1).Compute(1).SelectColumns="2,3"

// InstanceTable = Source(1)
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AttachedToDeviceID="MDS9000Bay"

//
// Collect

// Collect type is multi-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Now, extract the other devices information to a smart AWK script
//  RETURNS MSHW;Clock;ID;status;status;
//  SELECTS            ID;status;status;

OtherDevice.Collect.Source(1).Compute(1).Type="Awk"
OtherDevice.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(5)
OtherDevice.Collect.Source(1).Compute(1).Separators=";"
OtherDevice.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
OtherDevice.Collect.Source(1).Compute(1).SelectColumns="3,4,5"

// Now translate "OK/Degraded/Failed" into OK/Warning/Alarm
// status;powerState;  (using table in Enclosure Section)
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column="2"
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="OtherDeviceStatusTranslationTable"

// OtherDeviceStatusTranslationTable
OtherDeviceStatusTranslationTable("ok")="OK"
OtherDeviceStatusTranslationTable("failure")="ALARM"
OtherDeviceStatusTranslationTable(Default)="UNKNOWN"

// ValueTable = Source(1)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)



//
// Temperatures
//

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Now, extract the power supplies thanks to a smart AWK script
//  RETURNS MSHW;module;module/sensor;status;status;temp;tempWarn;tempAlarm;attachToType;
//  SELECTS      module;module/sensor;                   tempWarn;tempAlarm;attachToType;
Temperature.Discovery.Source(1).Compute(1).Type="Awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
Temperature.Discovery.Source(1).Compute(1).Separators=";"
Temperature.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Discovery.Source(1).Compute(1).SelectColumns="2,3,7,8,9"

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AttachedToDeviceType=InstanceTable.Column(5)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(1)

//
// Collect

// Collect type is multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Now, extract the power supplies status thanks to a smart AWK script
//  RETURNS MSHW;module;module/sensor;status;status;temp;tempWarn;tempAlarm
//  SELECTS             module/sensor;status;status;temp;

Temperature.Collect.Source(1).Compute(1).Type="Awk"
Temperature.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(7)
Temperature.Collect.Source(1).Compute(1).Separators=";"
Temperature.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Temperature.Collect.Source(1).Compute(1).SelectColumns="3,4,5,6"

// Now translate status into OK/Warning/Alarm
// status;powerState;  (using table in Enclosure Section)
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column="2"
Temperature.Collect.Source(1).Compute(2).TranslationTable="TemperatureStatusTranslationTable"

// TemperatureStatusTranslationTable
TemperatureStatusTranslationTable("ok")="OK"
TemperatureStatusTranslationTable("failure")="ALARM"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation.Column(3)
Temperature.Collect.Temperature=ValueTable.Column(4)


//
// Fans
//

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Now, extract the power supplies thanks to a smart AWK script
//  RETURNS MSHW;fanID;status;status;
//  SELECTS fanID;status
Fan.Discovery.Source(1).Compute(1).Type="Awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
Fan.Discovery.Source(1).Compute(1).Separators=";"
Fan.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Discovery.Source(1).Compute(1).SelectColumns="2,3"

// Exclude Power Supplies that are not present
//
Fan.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column="2"
Fan.Discovery.Source(1).Compute(2).RegExp="absent"

// InstanceTable = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.AttachedToDeviceID="MDS9000Bay"



//
// Collect

// Collect type is multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
Fan.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Now, extract the power supplies status thanks to a smart AWK script
//  RETURNS MSHW;fanID;status;status;
//  SELECTS fanID;status;status;

Fan.Collect.Source(1).Compute(1).Type="Awk"
Fan.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(6)
Fan.Collect.Source(1).Compute(1).Separators=";"
Fan.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
Fan.Collect.Source(1).Compute(1).SelectColumns="2,3,4"

// Now translate status into OK/Warning/Alarm
// status;powerState;  (using table in Enclosure Section)
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// FanStatusTranslationTable
FanStatusTranslationTable("ok")="OK"
FanStatusTranslationTable("failure")="ALARM"
FanStatusTranslationTable("absent")="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)


//
// PowerSupplys
//

//
// Discovery

// Source(1) = copy of Enclosure.Discovery.Source(2)
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(2)%

// Now, extract the power supplies thanks to a smart AWK script
//  RETURNS  MSHW;powerSupply;status;status;
//  SELECTS  powerSupply;status;
PowerSupply.Discovery.Source(1).Compute(1).Type="Awk"
PowerSupply.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(8)
PowerSupply.Discovery.Source(1).Compute(1).Separators=";"
PowerSupply.Discovery.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Discovery.Source(1).Compute(1).SelectColumns="2,3"

// Exclude Power Supplies that are not present
//
PowerSupply.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column="2"
PowerSupply.Discovery.Source(1).Compute(2).RegExp="absent"

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="MDS9000Bay"



//
// Collect

// Collect type is multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = copy of Enclosure.Collect.Source(1)
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(1)%

// Now, extract the power supplies status thanks to a smart AWK script
//  RETURNS  MSHW;powerSupply;status;status;
//  SELECTS  powerSupply;status;status;

PowerSupply.Collect.Source(1).Compute(1).Type="Awk"
PowerSupply.Collect.Source(1).Compute(1).AwkScript=EmbeddedFile(8)
PowerSupply.Collect.Source(1).Compute(1).Separators=";"
PowerSupply.Collect.Source(1).Compute(1).KeepOnlyRegExp="^MSHW;"
PowerSupply.Collect.Source(1).Compute(1).SelectColumns="2,3,4"

// Now translate status into OK/Warning/Alarm
// status;powerState;  (using table in Enclosure Section)
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="2"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable("ok")="OK"
PowerSupplyStatusTranslationTable("fail/shutdown")="ALARM"
PowerSupplyStatusTranslationTable("absent")="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parse the output of show module and returns Mmodule number-Pport number ; module type ; model number ; status
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN  {section = "" ; module = ""}
{skip=1}
/show module/,/show environment/ {skip = 0}
skip == 1 {next}
$1 ~ /^(Xbar)|(Mod)$/ && $2 ~ "^Ports" {section=$1 ; offset2 = index($0,"Ports") ; offset3 = index ($0,"Module-Type") ; offset4 = index ($0,"Model") ; offset5 = index ($0,"Status") }
($1 ~ /^[0-9]/ && section ~ /^(Xbar)|(Mod)$/ ){
	             if (section == "Mod")  {module = $1}
	             if (section == "Xbar") {module = "XBar" $1}
               port = $2 ;
               moduleType = substr ($0,offset3,(offset4 - offset3)) ; gsub (/  /,"",moduleType) ;
               model = substr ($0,offset4,(offset5 - offset4)) ; gsub (/ /,"",model) ;
               status = substr ($0,offset5) ; gsub (/[ *]/,"",status) ;
               print ( "MSHW;" module ";" port "-Port " moduleType ";" model ";" status ";") ; }
$1 ~ /^(Xbar)|(Mod)$/ && $2 ~ /(Power)|(Sw)/ {section=""}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = awk script that parse the output of show hardware to return modelname and modelnumber (if possible)
///
/////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {model = "" ; serialNumber = ""; bSwitch = ""}
( $0 ~ /^  cisco MDS 9/ ) && ( model == "" ) { model = $2 " " $3; }
/^Switch hardware ID information/ { bSwitch = "yes" ; getline; getline; }
( $0 ~ /Switch type is/  ) && ( bSwitch == "yes" ) && (model == "") { offset = (index($0, "is") + 3) ; model = substr($0,offset) ; gsub(/"/,"",model) ; } #"
( $0 ~ /Model number is/ ) && ( bSwitch == "yes" ) && (model == "") {offset = (index($0, "is") + 3) ; model = substr($0,offset)}
( $0 ~ /Serial number is/ ) && ( bSwitch == "yes" ) {offset = (index($0,"is") + 3) ; serialNumber = substr ($0,offset)}
/---/ { bSwitch = "" }
END { print("MSHW;" model ";" serialNumber ";") }
EmbeddedFile(2).End
/////////////////////////////////////////////////////////////////////"

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(3) = awk script that parse the output of show environment and returns power consumption
///
/////////////////////////////////////////////////////////

EmbeddedFile(3):
{skip=1}
/show environment/,/#/ {skip = 0}
skip == 1 {next}
$0 ~ /Total Power Capacity/ { print ("MSHW;"$(NF-1)) }

EmbeddedFile(3).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(4) = awk script that parse the output of show interface and returns network information
///
/////////////////////////////////////////////////////////
EmbeddedFile(4):
BEGIN  {attachToType=""; module="" ;port="" ;portDescription=""; wwn="" ;portDesc=""; portMode="";speed="" ; duplexMode="";transmitPackets="";receivePackets="";transmitBytes=""; receiveBytes="";transmitErrors="";receiveErrors="";totalErrors="";section="";}
($1 ~ /^fc[0-9]/) || ($1 ~ /^[Ee]thernet[0-9]/) || ($1 ~ /^[Ee]xt[0-9]/) || ($1 ~ /^[Bb]ay[0-9]/) {
	                  port = $1 ; gsub (/fc/,"",port) ; gsub (/[Ee]thernet/,"",port) ;
                    if (port ~ "/") {attachToType = "blade" ; module = substr(port,1,2) ; gsub ("/","",module); }
	                     else {attachToType = "enclosure" ; module = "MDS9000Bay" ; }

                    offset = (index($0,"is") + 3)  ; statusInformation = substr ($0,offset) ; status=tolower(statusInformation);linkStatus=statusInformation;
                    gsub (/(.*\()|(\))/,"",status); gsub (/[^a-z]/,"",status);
                    gsub (/up /,"",statusInformation); gsub (/trunking /,"",statusInformation)
                    gsub (/ \(.+\)/,"",linkStatus);
                    if (($0 ~ /SFP not present/) || ($0 ~ /SFP not inserted/)){linkStatus = "missing"} ;
                    if ($1 ~ /^fc[0-9]/) {portDesc = "FC Port "}
                    if ($1 ~ /^[Ee]thernet[0-9]/) {portDesc = "Ethernet Port "}
                    }

$1 ~ /Port/ && $2 ~ /description/ && $3 ~ /is/ {offset = (index($0,"is") + 3) ;portDescription = substr ($0,offset)}
$0 ~ /WWN/          { wwn = $NF }
$0 ~ /Port mode is/ { portMode = $4 ; gsub (",","",portMode) ; }

($1 ~ /^mgmt[0-9]/) || ($1 ~ /sup-fc[0-9]/)   { module = "MDS9000Bay" ;
	                  attachToType = "enclosure" ;
	                  port = $1 ;
                    offset = (index($0,"is") + 3)  ; statusInformation = substr ($0,offset) ; status=tolower(statusInformation);linkStatus=statusInformation;
                    gsub (/(.*\()|(\))/,"",status); gsub (/[^a-z]/,"",status);
                    gsub (/up /,"",statusInformation); gsub (/trunking /,"",statusInformation)
                    gsub (/ \(.+\)/,"",linkStatus);
                    portDesc = "Ethernet Port" ;
                    }
$0 ~ /Internet address is/ { wwn = $NF }
$1 == "MTU"         { speed = $5 ; duplexMode = tolower($7) ;
                      if ($6 ~ /[Gg]bps/) {speed=speed*1000} ;
                      if ($6 ~ /[Kk]bit/) {speed=speed/1000} ;
                      }
($0 ~ /Speed is/ && $NF ~ /[GgMm]bps/) {speed = $(NF-1) ;  duplexMode="full" ;
                                        if ($NF ~ /[Gg]bps/) {speed=speed*1000} ;
                                        }
# FC Received
($2 ~ /packets|frames/) && ($3 ~ /input/) && ($5 ~ /bytes/)  {receivePackets=$1 ; receiveBytes = $4 ; section="input"; }
($2 ~ /packets|frames/) && ($3 ~ /input,/) && ($4 ~ /bytes/)  {receivePackets=$1 ; receiveBytes = substr($3,7) ; section="input"; }
($2 ~ /input/) && ($3 ~ /errors/) && ($5 ~ /frame/) && ($7 ~ /overrun/) && ($9 ~ /fifo/) && (section=="input") {receiveErrors=($1 + $4 + $ 6 + $8);}
($2 ~ /discards/) && ($4 ~ /errors/) && (section=="input") {receiveErrors=($1 + $3);}
($2 ~ /CRC/) && ($4 ~ /unknown/) && (section=="input") {receiveErrors=(receiveErrors + $1 + $3);}
($2 ~ /too/) && ($3 ~ /long/) && ($5 ~ /too/) && ($6 ~ /short/) && (section=="input") {receiveErrors=(receiveErrors + $1 + $4);}

# FC Transmitted
($2 ~ /packets|frames/) && ($3 ~ /output/) && ($5 ~ /bytes/) {transmitPackets=$1 ; transmitBytes = $4 ; section="output"; }
($2 ~ /packets|frames/) && ($3 ~ /output/) && ($4 ~ /bytes/) {transmitPackets=$1 ; transmitBytes = substr($3,8) ; section="output"; }
($2 ~ /output/) && ($3 ~ /errors/) && ($5 ~ /collisions/) && ($7 ~ /fifo/)  && (section=="output") {transmitErrors=($1 + $4 + $ 6);}
($2 ~ /carrier/) && ($3 ~ /errors/) && (section=="output") {transmitErrors=(transmitErrors + $1)}
($2 ~ /discards/) && ($4 ~ /errors/) && (section=="output") {transmitErrors=($1 + $3);}

# Ethernet Received
($1 ~ /^RX$/) && (NF == 1) {section="RX"; }
($2 ~ /input/ && $3 ~ /packets/ && $5 ~ /bytes/ && section=="RX") {receivePackets=$1; receiveBytes = $4}
($2 ~ /input/) && ($3 ~ /error/) && ($5 ~ /short/) && ($6 ~ /frame/) && ($8 ~ /overrun/) && ($10 ~ /underrun/) && ($12 ~ /ignored/)&& (section=="RX") {receiveErrors=$1 + $4 + $7 + $9 + $11}
($2 ~ /watchdog/) && ($4 ~ /bad/) && ($5 ~ /etype/) && ($6 ~ /drop/) && ($8 ~ /bad/) && ($9 ~ /proto/) && ($10 ~ /drop/) && ($12 ~ /if/) && ($13 ~ /down/) && ($14 ~ /drop/) && (section=="RX") {receiveErrors=receiveErrors + $1 + $3 + $7 + $11}
($2 ~ /input/) && ($3 ~ /with/) && ($4 ~ /dribble/) && ($6 ~ /input/) && ($7 ~ /discard/) && (section=="RX") {receiveErrors=receiveErrors + $1 + $5}

# Ethernet Transmitted
($1 ~ /^TX$/) && (NF == 1) {section="TX"; }
($2 ~ /output/ && $3 ~ /packets/ && $5 ~ /bytes/ && section=="TX") {transmitPackets=$1; transmitBytes = $4}
($2 ~ /output/) && ($3 ~ /errors/) && ($5 ~ /collision/) && ($7 ~ /deferred/) && ($9 ~ /late/) && ($10 ~ /collision/) && (section=="RX") {transmitErrors=$1 + $4 + $6 + $8}
($2 ~ /lost/) && ($3 ~ /carrier/) && ($5 ~ /no/) && ($6 ~ /carrier/) && ($8 ~ /babble/) && ($10 ~ /proto/) && ($11 ~ /drop/) && (section=="RX") {transmitErrors=transmitErrors + $1 + $4 + $7 + $9}

((length($0) < 1) &&(module != ""))  {totalErrors = (transmitErrors + receiveErrors);
                                      print ("MSHW;" attachToType ";" module ";" port ";" statusInformation ";" wwn  ";" portDesc portMode ";" speed ";" linkStatus ";" duplexMode ";" transmitPackets ";" receivePackets ";" transmitBytes ";" receiveBytes ";" totalErrors ";" status ";" portDescription ";") ;
                                      attachToType=""; module="" ;port="" ;portDescription="";wwn="" ;portDesc=""; portMode="";speed="" ; duplexMode="";transmitPackets="";receivePackets="";transmitBytes=""; receiveBytes="";transmitErrors="";receiveErrors="";totalErrors="";section="";status="";statusInformation="";
                                      }
END { if (module != "") {totalErrors = (transmitErrors + receiveErrors);
	                       print ("MSHW;" attachToType ";" module ";" port ";" statusInformation ";" wwn  ";" portDesc portMode ";" speed ";" linkStatus ";" duplexMode ";" transmitPackets ";" receivePackets ";" transmitBytes ";" receiveBytes ";" totalErrors ";" status ";" portDescription ";") ;
	                      }
    }
EmbeddedFile(4).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(5) = awk script that parse the output of show environment to return other devices (Clocks)
///
/////////////////////////////////////////////////////////
EmbeddedFile(5):
BEGIN { offsetStatus = "" ; section = ""}
{skip=1}
/show environment/,/#/ {skip = 0}
skip == 1 {next}
(length($0) < 3) { section = "" ; offsetStatus = "" ; next }

(section == "Clock" && offsetStatus > 1) {status = substr ($0,offsetStatus) ;
	                                        offsetSlash = index(status,"/") ;
	                                        if (offsetSlash > 1)  {status = substr (status,1,offsetSlash - 1)} ;
	                                        statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
	                                        if ((status !~ /[Nn]ot [Pp]resent/) && NF > 2 ){print ("MSHW;Clock;" $1 ";" status ";" statusinfo ";") };
	                                        }

$0 ~ /^Clock/ { section = "Clock" }
$NF == "Status" { offsetStatus = (index($0,"Status")) }
EmbeddedFile(5).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(6) = awk script that parse the output of show environment to return Fan Information
///                      MSHW;fan;status;status;
///
/////////////////////////////////////////////////////////
EmbeddedFile(6):
BEGIN { offsetStatus = "" ; section = ""}
{skip=1}
/show environment/,/#/ {skip = 0}
skip == 1 {next}
(length($0) < 3) { section = ""; offsetStatus = "" ; next }
(section == "Fan" && offsetStatus > 1) {if ($NF ~ /NotSupported/) { next}
                                        status = substr ($0,offsetStatus) ;
	                                      gsub(/ /,"",status);
	                                      statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
	                                      if ((NF > 2) && ($1 ~ "Chassis") && ($1 !~ /[0-9]$/)) {chassis = chassis + 1 ; print ("MSHW;" $1 chassis ";" status";"statusinfo";")}
	                                      else if ((NF > 2) && (status != "")) {print ("MSHW;" $1 ";" status";"statusinfo";")} ;
	                                      }

$0 ~ /^Fan/ { section = "Fan" ; chassis = 0 ; }
$NF == "Status" { offsetStatus = (index($0,"Status")) }
EmbeddedFile(6).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(7) = awk script that parse the output of show environment and returns temperature information
///                      MSHW;module;module/sensor;status;temp;tempWarn;tempAlarm;attachToType;
///
/////////////////////////////////////////////////////////
EmbeddedFile(7):
BEGIN { offsetStatus = "" ; section = ""}
{skip=1}
/show environment/,/(Power Supply:)|(show interface)/ {skip = 0}
skip == 1 {next}
(length($0) < 3) { Outlet=0 ; Intake=0 ; next }
(section == "Temperature" && offsetStatus > 1 && NF > 5) {
	                                      status = substr ($0,offsetStatus) ; gsub(/ /,"",status);
	                                      temp = $5 ;
	                                      tempWarn = $4 ;
	                                      tempAlarm = $3 ;
	                                      sensor = $1 "/" $2 ;
	                                      statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
	                                      module = $1 ; if (module ~ /^[0-9]/) { attachToType = "blade" } else { attachToType = "enclosure" ; module = "MDS9000Bay" } ;
	                                      if (sensor ~ /Outlet$/) {Outlet = Outlet + 1 ; print ("MSHW;" module ";" sensor Outlet";" status ";" statusinfo ";"temp  ";" tempWarn ";" tempAlarm  ";" attachToType ";")}
	                                      else if (sensor ~ /Intake$/) {Intake = Intake + 1 ; print ("MSHW;" module ";" sensor Intake";" status ";" statusinfo ";"temp  ";" tempWarn ";" tempAlarm  ";" attachToType ";")}
	                                      else {print ("MSHW;" module ";" sensor ";" status ";" statusinfo ";" temp  ";" tempWarn ";" tempAlarm  ";" attachToType ";")}
	                                      }

(section == "TemperatureOldStyle" && offsetStatus > 1 && NF > 2 && $1 ~ /^[0-9]+$/) {
                                       status = substr ($0,offsetStatus) ; gsub(/ /,"",status);
                                       statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
                                       temp = $2 ;
                                       sensor = $1 ;
                                       module = $1 ;
                                       print ("MSHW;" module ";" sensor ";" status ";" statusinfo ";" temp  ";"  ";"   ";blade;");
                                       }

$0 ~ /^Temperature/ { section = "Temperature" ; offsetStatus = "" }
(section == "Temperature" && $2 ~ /CurTemp/ && $3 ~ /Status/) { section = "TemperatureOldStyle"}
$NF == "Status" { offsetStatus = (index($0,"Status")) }
EmbeddedFile(7).End
/////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(8) = awk script that parse the output of
///                      MSHW;powerSupply;status;status;
///
/////////////////////////////////////////////////////////
EmbeddedFile(8):
BEGIN { offsetStatus = "" ; section = ""}
{skip=1}
/show environment/,/#/ {skip = 0}
skip == 1 {next}
(length($0) < 3) { section = ""; offsetStatus = "" ; Outlet=0 ; Intake=0 ; next }
(section == "Power Supply" && offsetStatus > 1 && NF > 3) {
	                                      status = substr ($0,offsetStatus) ; gsub(/ /,"",status);
	                                      powerSupply = $1 ;
	                                      statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
	                                      print ("MSHW;" powerSupply ";" status ";" statusinfo ";") ;
	                                      }
(section == "Power Supply Old Style" && offsetStatus > 1 && $1 ~ /^[0-9]+$/ ) {
	                                      status = substr ($0,offsetStatus) ; gsub(/ /,"",status);
	                                      powerSupply = $1 ;
	                                      statusinfo = status;  if (statusinfo ~ /^[Oo][Kk]/) {statusinfo = "" } ;
	                                      print ("MSHW;" powerSupply ";" status ";" statusinfo ";") ;
	                                     }

$0 ~ /^Power Supply/ { section = "Power Supply" }
$1 ~ /^PS$/ && $2 ~ /^Status$/ { section = "Power Supply Old Style" }
$NF == "Status" { offsetStatus = (index($0,"Status")) }
EmbeddedFile(8).End
/////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(9) = awk script that parse the output of show interface detail-counters | grep '\(fc[0-9]\)\|\(transitions of tx BB\)'
///                      MSHW;port;ZeroBufferCreditCount;
///
/////////////////////////////////////////////////////////
EmbeddedFile(9):
$1 ~ /^fc[0-9]/     {port = $1 ; gsub (/fc/,"",port) ;}
$0 ~ /waits due to lack of transmit credits/ && $1 ~/^[0-9]+$/ {ZeroBufferCreditCount = $1
	                                                             print "MSHW;" port ";" ZeroBufferCreditCount ";"
	                                                             port = ""}
EmbeddedFile(9).End
/////////////////////////////////////////////////////////////////////	                                                            }
