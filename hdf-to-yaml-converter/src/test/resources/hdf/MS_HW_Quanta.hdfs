//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                   MS_HW_Quanta.hdf
//
//      Supports: The Quanta Rack Mount Server Unit(Ericsson Hyperscale Datacenter System is the branded name)
//
//

// HEADER

hdf.DisplayName="Quanta Rack Mount Server Unit"
hdf.TypicalPlatform="Quanta Server"
hdf.ReliesOn="Quanta System Manager SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector provides the hardware monitoring of the Quanta Rack Mount Server Unit through the SNMP Agent of Quanta System Manager. As Quanta System Manager is an application exposing the data about other systems, this connector needs to be configured for a separate ""Management Card/Chip"" host, even if Quanta System Manager is installed on the same system as the PATROL Agent."
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB"

// DETECTION
// Does a get_next to see if there that there is come CPU information

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.7244.1.2.1.3.1.1.3"



// ENCLOSURE: Rack Mount Server Unit


// Get the model name and manufacturer of the rack mount unit along with serial and part numbers
// ID;Model;ChassisType;SerialNumber;FRU;PartNumber;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.6.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="2,7,4,6,12,13"

//Excluding Lines without Serial Number
Enclosure.Discovery.Source(1).Compute(1).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(1).Column="4"
Enclosure.Discovery.Source(1).Compute(1).String="MSHW_"

Enclosure.Discovery.Source(1).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(2).Column="4"
Enclosure.Discovery.Source(1).Compute(2).String="_n"

//Exclude Lines that do not contain serial numbers so that we take the enclosure unit with serial number
Enclosure.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Enclosure.Discovery.Source(1).Compute(3).Column="4"
Enclosure.Discovery.Source(1).Compute(3).ValueList="MSHW__n"

// ID;Model;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Compute(4).Type="Replace"
Enclosure.Discovery.Source(1).Compute(4).Column="4"
Enclosure.Discovery.Source(1).Compute(4).Replace="MSHW_"
Enclosure.Discovery.Source(1).Compute(4).ReplaceBy=""

Enclosure.Discovery.Source(1).Compute(5).Type="Replace"
Enclosure.Discovery.Source(1).Compute(5).Column="4"
Enclosure.Discovery.Source(1).Compute(5).Replace="_n"
Enclosure.Discovery.Source(1).Compute(5).ReplaceBy=""

// ID;Model - ;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Compute(6).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(6).Column="2"
Enclosure.Discovery.Source(1).Compute(6).String=" - "

// Identify the FRU and Part Number
// ID;Model - ChassisType;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.Source(1).Compute(7).Type="RightConcat"
Enclosure.Discovery.Source(1).Compute(7).Column="2"
Enclosure.Discovery.Source(1).Compute(7).String=Column(3)

// Add "Part Number: " to AdditionalInformation2
Enclosure.Discovery.Source(1).Compute(8).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(8).Column="6"
Enclosure.Discovery.Source(1).Compute(8).String="Part Number: "

//Collect BIOS Version
Enclosure.Discovery.Source(2).Type="SnmpGet"
Enclosure.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.7244.1.2.1.1.8.0"

// Instance Table
// ID;Model - ChassisType;ChassisType;SerialNumber;Vendor;FRU;PartNumber;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(5)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.BIOSVersion=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Type=InstanceTable.Column(3)

// Collect
Enclosure.Collect.Type="MonoInstance"


// Get the Corresponding Chassis Unit Status
Enclosure.Collect.Source(1).Type="SnmpGet"
Enclosure.Collect.Source(1).SnmpOid="1.3.6.1.4.1.7244.1.2.1.1.4.0"

Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=1

// PATROLStatus;OperState;
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=1
Enclosure.Collect.Source(1).Compute(2).TranslationTable="enclosureStatusTranslationTable"

// Translate second StatusCode into a more readable string
// PATROLStatus;StatusInformation;
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=2
Enclosure.Collect.Source(1).Compute(3).TranslationTable="enclosureStatusInformationTranslationTable"

// The statusTranslationTable
enclosureStatusTranslationTable(1)="OK"
enclosureStatusTranslationTable(2)="WARN"
enclosureStatusTranslationTable(3)="WARN"
enclosureStatusTranslationTable(4)="ALARM"
enclosureStatusTranslationTable(5)="WARN"
enclosureStatusTranslationTable(Default)="UNKNOWN"

// The statusTranslationTable
enclosureStatusInformationTranslationTable(1)="Power ON"
enclosureStatusInformationTranslationTable(2)="Power OverLoad"
enclosureStatusInformationTranslationTable(3)="Interlock"
enclosureStatusInformationTranslationTable(4)="Power at Fault"
enclosureStatusInformationTranslationTable(5)="Power Control Fault"


// Value Table
// ID;ChassisStatus;Power Consumption;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Status=ValueTable.Column(1)
Enclosure.Collect.StatusInformation=ValueTable.Column(2)


//
// CPUS
//

//
// CPU discovery
// ID;Name;Speed;Status;VendorCode;Model;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.1.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="1,3,6,2,4,5"

// Remove processors whose Status is "0" (zero)
// because it means: no processor
// ID;Name;Speed;Status;VendorCode;Model;
CPU.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=4
CPU.Discovery.Source(1).Compute(1).RegExp="^$"

//Add - to the right of the model name
// ID;Name;Speed;Status;VendorCode;Model;
CPU.Discovery.Source(1).Compute(2).Type="RightConcat"
CPU.Discovery.Source(1).Compute(2).Column=6
CPU.Discovery.Source(1).Compute(2).String=" - "

//Add Speed to the right of the Model
// ID;Name;Speed;Status;VendorCode;Model;
CPU.Discovery.Source(1).Compute(3).Type="RightConcat"
CPU.Discovery.Source(1).Compute(3).Column=6
CPU.Discovery.Source(1).Compute(3).String=Column(3)


// Instance Table
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(2)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(5)
CPU.Discovery.Instance.Model=InstanceTable.Column(6)
CPU.Discovery.Instance.MaximumSpeed=InstanceTable.Column(3)

// Collect

// Collect is multi-instance (all instances in one shot)
CPU.Collect.Type="MultiInstance"

// ID;Speed;Status
CPU.Collect.Source(1).Type="SnmpTable"
CPU.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.1.1"
CPU.Collect.Source(1).SnmpTableSelectColumns="1,6,2"

// Duplicate status, because we will translate it two times
// ID;Speed;Status;Status
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column=3

//Convert Speed to a number and keep only first column
CPU.Collect.Source(1).Compute(2).Type="Extract"
CPU.Collect.Source(1).Compute(2).Column=2
CPU.Collect.Source(1).Compute(2).SubColumn=1


// Translate Status into PATROLStatus
// ID;Speed;PATROLStatus;Status
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column=3
CPU.Collect.Source(1).Compute(3).TranslationTable="cpuStatusTranslationTable"

// The cpuStatusTranslationTable
cpuStatusTranslationTable(1)="OK"
cpuStatusTranslationTable(0)="ALARM"
cpuStatusTranslationTable(Default)="UNKNOWN"

// Translate second Status into more readable string
// ID;Speed;PATROLStatus;StatusInformation
CPU.Collect.Source(1).Compute(4).Type="Translate"
CPU.Collect.Source(1).Compute(4).Column=4
CPU.Collect.Source(1).Compute(4).TranslationTable="cpuStatusInformationTranslationTable"

// The cpuStatusInformationTranslationTable
cpuStatusInformationTranslationTable(0)="Processor Not Present"
cpuStatusInformationTranslationTable(1)="Processor Present"
cpuStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
cpu.Collect.ValueTable=%CPU.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.CurrentSpeed=ValueTable.Column(2)
cpu.Collect.Status=ValueTable.Column(3)
cpu.Collect.StatusInformation=ValueTable.Column(4)

//
// Memory
//

//
// Memory discovery


// ID;Location;Presence;CapacityMB;MemoryType;Frequency
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.2.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="1,3,2,6,4,5"

//Map only memory modules that are Present
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=3
Memory.Discovery.Source(1).Compute(1).ValueList="0"

// Add Identifiers
// ID;Location;Presence;CapacityMB;MemoryType;Frequency
Memory.Discovery.Source(1).Compute(2).Type="Extract"
Memory.Discovery.Source(1).Compute(2).Column=5
Memory.Discovery.Source(1).Compute(2).SubColumn=1

Memory.Discovery.Source(1).Compute(3).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(3).Column=2
Memory.Discovery.Source(1).Compute(3).String="Location: "

Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=6
Memory.Discovery.Source(1).Compute(4).String="Speed: "

// InstanceTable = Source(1)
// ID;Location;Presence;CapacityMB;MemoryType;Frequency
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Memory.Discovery.Instance.Type=InstanceTable.Column(5)
Memory.Discovery.Instance.Size=InstanceTable.Column(4)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(2)
Memory.Discovery.Instance.Type=InstanceTable.Column(5)
Memory.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(6)

//
// Memory collect

// Collect type is MultiInstance
Memory.Collect.Type="MultiInstance"

// ID;memoryStatus;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.2.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="1,2"

// Duplicate status, because we will translate it two times
// ID;memoryStatus;memoryStatus;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate memoryStatus into PATROLStatus
// ID;PATROLStatus;memoryStatus
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="memoryStatusTranslationTable"

// The memoryStatusTranslationTable
memoryStatusTranslationTable(1)="OK"
memoryStatusTranslationTable(0)="ALARM"
memoryStatusTranslationTable(Default)="UNKNOWN"

// Translate second Status into more readable string
// ID;PATROLStatus;StatusInformation
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=3
Memory.Collect.Source(1).Compute(3).TranslationTable="memoryStatusInformationTranslationTable"

// The memoryStatusInformationTranslationTable
memoryStatusInformationTranslationTable(0)="Memory Not Present"
memoryStatusInformationTranslationTable(1)="Memory Present"
memoryStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)

// POWER SUPPLIES

// Power Supply discovery

//We shall do a SNMPGet discovery as we have only 2 powersupplies

//ispresence
PowerSupply.Discovery.Source(1).Type="SnmpGet"
PowerSupply.Discovery.Source(1).SnmpOid="1.3.6.1.4.1.7244.1.2.1.2.8.0"

// Add Display Name
//isPresence,displayname
PowerSupply.Discovery.Source(1).Compute(1).Type="RightConcat"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).String="PowerSupply 0"

// NOW for Second PowerSupply

//ispresence
PowerSupply.Discovery.Source(2).Type="SnmpGet"
PowerSupply.Discovery.Source(2).SnmpOid="1.3.6.1.4.1.7244.1.2.1.2.9.0"

// Add Display Name
//isPresence,displayname
PowerSupply.Discovery.Source(2).Compute(1).Type="RightConcat"
PowerSupply.Discovery.Source(2).Compute(1).Column=2
PowerSupply.Discovery.Source(2).Compute(1).String="PowerSupply 1"

// Table Union
// Source(3) = Table Union of Source(1) and Source(2)

PowerSupply.Discovery.Source(3).Type="TableUnion"
PowerSupply.Discovery.Source(3).Table1=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Source(3).Table2=%PowerSupply.Discovery.Source(2)%

// Keep only the lines/power-supplies with a value for their presence and Omit all lines with "" as isPrsence
PowerSupply.Discovery.Source(3).Compute(1).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(3).Compute(1).Column=1
PowerSupply.Discovery.Source(3).Compute(1).RegExp="^$"

// InstanceTable = Source(3)
//isPresence,displayname
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(3)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(2)


//
// PowerSupply collect


// Collect type is mono-instance
PowerSupply.Collect.Type="MonoInstance"

//Status
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.7244.1.2.1.2.8.0"

// Add Display Name
//Status,powersupplyStatus;displayname
PowerSupply.Collect.Source(1).Compute(2).Type="RightConcat"
PowerSupply.Collect.Source(1).Compute(2).Column=3
PowerSupply.Collect.Source(1).Compute(2).String="PowerSupply 0"

// Duplicate status, because we will translate it two times
//Status,powersupplyStatus;
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column=1

// Translate powersupplyStatus into PATROLStatus
// PATROLStatus;displayname;powersupplyStatus
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column=1
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;displayname;StatusInformation;
PowerSupply.Collect.Source(1).Compute(4).Type="Translate"
PowerSupply.Collect.Source(1).Compute(4).Column=2
PowerSupply.Collect.Source(1).Compute(4).TranslationTable="PowerSupplyStatusInformationTranslationTable"


// NOW for Second PowerSupply

//Status
PowerSupply.Collect.Source(2).Type="SnmpGet"
PowerSupply.Collect.Source(2).SnmpOid="1.3.6.1.4.1.7244.1.2.1.2.9.0"

// Add Display Name
//Status,powersupplyStatus;displayname
PowerSupply.Collect.Source(2).Compute(2).Type="RightConcat"
PowerSupply.Collect.Source(2).Compute(2).Column=3
PowerSupply.Collect.Source(2).Compute(2).String="PowerSupply 1"


// Duplicate status, because we will translate it two times
//Status,powersupplyStatus;
PowerSupply.Collect.Source(2).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(2).Compute(1).Column=1

// Translate powersupplyStatus into PATROLStatus
// PATROLStatus;powersupplyStatus;displayname;
PowerSupply.Collect.Source(2).Compute(3).Type="Translate"
PowerSupply.Collect.Source(2).Compute(3).Column=1
PowerSupply.Collect.Source(2).Compute(3).TranslationTable="PowerSupplyStatusTranslationTable"

// Translate second Status into more readable string
// PATROLStatus;StatusInformation;displayname;
PowerSupply.Collect.Source(2).Compute(4).Type="Translate"
PowerSupply.Collect.Source(2).Compute(4).Column=2
PowerSupply.Collect.Source(2).Compute(4).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(1)="OK"
PowerSupplyStatusTranslationTable(2)="ALARM"
PowerSupplyStatusTranslationTable(4)="ALARM"
PowerSupplyStatusTranslationTable(8)="ALARM"
PowerSupplyStatusTranslationTable(16)="ALARM"
PowerSupplyStatusTranslationTable(32)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(1)="Present"
PowerSupplyStatusInformationTranslationTable(2)="Failure Dectected"
PowerSupplyStatusInformationTranslationTable(4)="Predictive Failure"
PowerSupplyStatusInformationTranslationTable(8)="PowerSupply Input Lost"
PowerSupplyStatusInformationTranslationTable(16)="PowerSupply Lost Or Out Of Range"
PowerSupplyStatusInformationTranslationTable(32)="PowerSupply Out Of Range"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// Table Union
// Source(3) = Table Union of Source(1) and Source(2)

PowerSupply.Collect.Source(3).Type="TableUnion"
PowerSupply.Collect.Source(3).Table1=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Source(3).Table2=%PowerSupply.Collect.Source(2)%

// InstanceTable = Source(3)
// PATROLStatus;StatusInformation;displayname;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(3)%
PowerSupply.Collect.DeviceID=ValueTable.Column(3)
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)


////////////////////////////////
// TEMPERATURES
//
// Temperature discovery
///////////////////////////////////
///////////////////////////////////

//NOTE : There are times when -99 can be returned as values for TemperatureReadings and Thresholds of the Quant Rack Unit. We are going to treat this is our discovery phase.

// Source(1) = temperature SNMP table
// ID;SensorLocationCode;AlarmThreshold;WarningThreshold;TemperatureReading;TemperatureStatus;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.4.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="1,3,6,7,4,2"

Temperature.Discovery.Source(1).Compute(1).Type="awk"
Temperature.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Instance table = Source(1)
// ID;SensorLocationCode;AlarmThreshold;WarningThreshold;TemperatureReading;TemperatureStatus;StatusActivation
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(3)
// Activate Temperature if a current reading exists
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(5)
// Activate Status only if no thresholds exist
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)

// Temperature collect

// Collect type is MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1)
// ID;CurrentReading;TemperatureStatus;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.4.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="1,4,2"

// Duplicate status
// ID;CurrentReading;TemperatureStatus;Status;
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column=3

// Translate TemperatureStatus into PATROLStatus
// ID;CurrentReading;PATROLStatus;Status;
Temperature.Collect.Source(1).Compute(2).Type="Translate"
Temperature.Collect.Source(1).Compute(2).Column=3
Temperature.Collect.Source(1).Compute(2).TranslationTable="TemperatureStatusTranslationTable"

// Translate Status into StatusInformation
// ID;CurrentReading;PATROLStatus;StatusInformation;
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column=4
Temperature.Collect.Source(1).Compute(3).TranslationTable="TemperatureStatusInformationTranslationTable"

// The ValueTable = Source(1)
// ID;CurrentReading;PATROLStatus;StatusInformation;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Temperature=ValueTable.Column(2)
Temperature.Collect.Status=ValueTable.Column(3)
Temperature.Collect.StatusInformation=ValueTable.Column(4)

// The TemperatureStatusTranslationTable
TemperatureStatusTranslationTable(1)="WARN"
TemperatureStatusTranslationTable(2)="WARN"
TemperatureStatusTranslationTable(3)="OK"
TemperatureStatusTranslationTable(4)="WARN"
TemperatureStatusTranslationTable(5)="ALARM"
TemperatureStatusTranslationTable(6)="ALARM"
TemperatureStatusTranslationTable(Default)="UNKNOWN"

// The TemperatureStatusInformationTranslationTable
TemperatureStatusInformationTranslationTable(1)="Other"
TemperatureStatusInformationTranslationTable(2)="Unknown"
TemperatureStatusInformationTranslationTable(3)="OK"
TemperatureStatusInformationTranslationTable(4)="Non Critical"
TemperatureStatusInformationTranslationTable(5)="Critical"
TemperatureStatusInformationTranslationTable(6)="Non Recoverable"
TemperatureStatusInformationTranslationTable(Default)="Unknown Status"


////////////////////////////////
// FANS
//
// Fan discovery
///////////////////////////////////
///////////////////////////////////

//NOTE : There are times when -99 can be returned as values for FanSpeed and Thresholds of the Quant Rack Unit. We are going to treat this is our discovery phase.

// Source(1) = Fan SNMP table
// ID;SensorLocationCode;AlarmThreshold;WarningThreshold;FanSpeed;FanStatus;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.3.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="1,3,9,8,4,2"

Fan.Discovery.Source(1).Compute(1).Type="awk"
Fan.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(1)

// Instance table = Source(1)
// ID;SensorLocationCode;AlarmThreshold;WarningThreshold;FanSpeed;FanStatus;StatusActivation
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(3)
// Activate Fan if a Fan Speed exists
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
// Activate Status only if no thresholds exist
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)

// Fan collect

// Collect type is MultiInstance
Fan.Collect.Type="MultiInstance"

// Source(1)
// ID;FanSpeed;FanStatus;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.3.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="1,4,2"

// Duplicate status
// ID;FanSpeed;FanStatus;Status;
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=3

// Translate FanStatus into PATROLStatus
// ID;FanSpeed;PATROLStatus;Status;
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=3
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// Translate Status into StatusInformation
// ID;FanSpeed;PATROLStatus;StatusInformation;
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=4
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The ValueTable = Source(1)
// ID;FanSpeed;PATROLStatus;StatusInformation;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Speed=ValueTable.Column(2)
Fan.Collect.Status=ValueTable.Column(3)
Fan.Collect.StatusInformation=ValueTable.Column(4)

// The FanStatusTranslationTable
FanStatusTranslationTable(1)="WARN"
FanStatusTranslationTable(2)="WARN"
FanStatusTranslationTable(3)="OK"
FanStatusTranslationTable(4)="WARN"
FanStatusTranslationTable(5)="ALARM"
FanStatusTranslationTable(6)="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(1)="Other"
FanStatusInformationTranslationTable(2)="Unknown"
FanStatusInformationTranslationTable(3)="OK"
FanStatusInformationTranslationTable(4)="Non Critical"
FanStatusInformationTranslationTable(5)="Critical"
FanStatusInformationTranslationTable(6)="Non Recoverable"
FanStatusInformationTranslationTable(Default)="Unknown Status"

////////////////////////////////
// Voltages
//
// Voltage discovery
///////////////////////////////////
///////////////////////////////////

//NOTE : There are times when -99 can be returned as values for Readings and Thresholds of the Quant Rack Unit. We are going to treat this is our discovery phase.

// Source(1) = Voltage SNMP table
// ID;SensorLocationCode;UpperThreshold;LowerThreshold;VoltageReading;VoltageStatus;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.5.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="1,3,6,9,4,2"

Voltage.Discovery.Source(1).Compute(1).Type="awk"
Voltage.Discovery.Source(1).Compute(1).AwkScript=EmbeddedFile(2)

// Instance table = Source(1)
// ID;SensorLocationCode;UpperThreshold;LowerThreshold;VoltageReading;VoltageStatus;StatusActivation
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(2)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(3)
// Activate Voltage if a Voltage Reading exists
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(5)
// Activate Status only if no thresholds exist
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)

// Voltage collect

// Collect type is MultiInstance
Voltage.Collect.Type="MultiInstance"

// Source(1)
// ID;VoltageReading;VoltageStatus;
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.7244.1.2.1.3.5.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="1,4,2"

// Duplicate status
// ID;VoltageReading;VoltageStatus;Status;
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column=3

// Translate VoltageStatus into PATROLStatus
// ID;VoltageReading;PATROLStatus;Status;
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column=3
Voltage.Collect.Source(1).Compute(2).TranslationTable="VoltageStatusTranslationTable"

// Translate Status into StatusInformation
// ID;VoltageReading;PATROLStatus;StatusInformation;
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column=4
Voltage.Collect.Source(1).Compute(3).TranslationTable="VoltageStatusInformationTranslationTable"

// The ValueTable = Source(1)
// ID;VoltageReading;PATROLStatus;StatusInformation;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)
Voltage.Collect.Status=ValueTable.Column(3)
Voltage.Collect.StatusInformation=ValueTable.Column(4)

// The VoltageStatusTranslationTable
VoltageStatusTranslationTable(1)="WARN"
VoltageStatusTranslationTable(2)="WARN"
VoltageStatusTranslationTable(3)="OK"
VoltageStatusTranslationTable(4)="WARN"
VoltageStatusTranslationTable(5)="ALARM"
VoltageStatusTranslationTable(6)="ALARM"
VoltageStatusTranslationTable(Default)="UNKNOWN"

// The VoltageStatusInformationTranslationTable
VoltageStatusInformationTranslationTable(1)="Other"
VoltageStatusInformationTranslationTable(2)="Unknown"
VoltageStatusInformationTranslationTable(3)="OK"
VoltageStatusInformationTranslationTable(4)="Non Critical"
VoltageStatusInformationTranslationTable(5)="Critical"
VoltageStatusInformationTranslationTable(6)="Non Recoverable"
VoltageStatusInformationTranslationTable(Default)="Unknown Status"



/////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = an awk script that remove all negative values with " "
///
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS=";";}
{
	if($3 < 0) AlarmThreshold = ""; else AlarmThreshold = $3;
	if($4 < 0) WarningThreshold = ""; else WarningThreshold = $4;
	if($5 < 0) SensorReading = ""; else SensorReading = $5;
	if(AlarmThreshold == "" && WarningThreshold == "" || SensorReading == "") StatusActivation=1;
	print $1";"$2";"AlarmThreshold";"WarningThreshold";"SensorReading";"$6";"StatusActivation";"
}
EmbeddedFile(1).End

/////////////////////////////////////////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(2) = an awk script that remove all negative values with " " for Voltage
///
///
////////////////////////////////////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {FS=";";}
{
	if ($3 < 0 ) UpperThreshold = ""; else UpperThreshold = $3;
	if ($4 < 0 ) LowerThreshold = ""; else LowerThreshold = $4;
	if ($5 < 0 ) SensorReading = ""; else SensorReading = $5;
	if (UpperThreshold == "" && LowerThreshold == "" || SensorReading == "") StatusActivation=1;
	print $1";"$2";"UpperThreshold";"LowerThreshold";"SensorReading";"$6";"StatusActivation";"
}
EmbeddedFile(2).End
