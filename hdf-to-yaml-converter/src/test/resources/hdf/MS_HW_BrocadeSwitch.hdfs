////////////////////////////////////////////////////////////////
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//
//      Supports: Switches that support Brocade Switches
//                Connects to a SNMP agent
//				        Improves the monitoring over standard Fiber Alliance Connector
//


//
// Header
//

hdf.DisplayName="Brocade SAN Switch"
hdf.TypicalPlatform="Brocade SAN"
hdf.ReliesOn="Brocade SNMP Agent (fcSwitch)"
hdf.Version="1.0"
hdf.Comments="This connector discovers the enclosure and fiber-channel ports of SAN switches as well as the various environment sensors (temperatures, fans, power supplies, etc.). It relies on the SNMP protocol and supports the Brocade MIB (fcSwitch-MIB)."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Storage"

// Supersedes Fiber Alliance Switch and the generic MIB-2 based connector
hdf.Supersedes="MS_HW_FibreAllianceSwitch.hdf,MS_HW_GenericSwitchEnclosure.hdf"





//
// DETECTION
//
Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.1588.2.1.1.1.1"
// Detection.Criteria(1).ExpectedResult="^4$"


//
// Enclosure
//

// Source(1) = 	connUnitTable SNMP table
// ID,Model,Manufacturer,SerialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.50.2.4.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,5,6,8"

// Replace abrivitation BRD with Brocade
// ID,Model,Manufacturer,SerialNumber
Enclosure.Discovery.Source(1).Compute(1).Type="Replace"
Enclosure.Discovery.Source(1).Compute(1).Column=3
Enclosure.Discovery.Source(1).Compute(1).Replace="BRD"
Enclosure.Discovery.Source(1).Compute(1).ReplaceBy="Brocade"

// InstanceTable = Source(1)
// Class;Status;ID;SupplierID;PartNumber;SerialNumber
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Chassis"


//
// TEMPERATURES
//

//
// Discovery

// Source(1) = swSensorEntry
// ID;SensorType;Status;Value;SensorDescription;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5"

// Keep only temperature sensors (Type 1)
// ID;SensorType;Status;Value;SensorDescription;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=2
Temperature.Discovery.Source(1).Compute(1).ValueList="1"

// Exclude Values of -2147483648 as these represent unknown
// ID;SensorType;Status;Value;SensorDescription;
Temperature.Discovery.Source(1).Compute(2).Type="Replace"
Temperature.Discovery.Source(1).Compute(2).Column=4
Temperature.Discovery.Source(1).Compute(2).Replace="-2147483648"
Temperature.Discovery.Source(1).Compute(2).ReplaceBy=""

// Exclude Status Values of 6 (Absent)
// ID;SensorType;Status;Value;SensorDescription;
Temperature.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Temperature.Discovery.Source(1).Compute(3).Column=3
Temperature.Discovery.Source(1).Compute(3).ValueList="6"

// InstanceTable = Source(1)
// ID;SensorType;Status;Value;SensorDescription;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(5)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
// Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)



//
// Collect

// Collect type = multi-instance
Temperature.Collect.Type="MultiInstance"

// Source(1) = connUnitSensorTable SNMP Table
// ID;Status;Value;
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Translate the first column status into a PATROLStatus
// ID;PatrolStatus;Value;
Temperature.Collect.Source(1).Compute(1).Type="Translate"
Temperature.Collect.Source(1).Compute(1).Column=2
Temperature.Collect.Source(1).Compute(1).TranslationTable="SensorStatusTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;Value;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(3)


//
// FANS
//

//
// Discovery

// Source(1) = swSensorEntry
// ID;SensorType;Status;Value;SensorDescription;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,4,5"

// Keep only Fabs sensors (Type 2)
// ID;SensorType;Status;Value;SensorDescription;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).ValueList="2"

// Exclude Values of -2147483648 as these represent unknown
// ID;SensorType;Status;Value;SensorDescription;
Fan.Discovery.Source(1).Compute(2).Type="Replace"
Fan.Discovery.Source(1).Compute(2).Column=4
Fan.Discovery.Source(1).Compute(2).Replace="-2147483648"
Fan.Discovery.Source(1).Compute(2).ReplaceBy=""

// Exclude Status Values of 6 (Absent)
// ID;SensorType;Status;Value;SensorDescription;
Fan.Discovery.Source(1).Compute(3).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).ValueList="6"

// InstanceTable = Source(1)
// ID;SensorType;Status;Value;SensorDescription;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(5)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(4)
// Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(3)

//
// Collect

// Collect type = multi-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = connUnitSensorTable SNMP Table
// ID;Status;Value;
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,3,4"

// Translate the first column status into a PATROLStatus
// ID;PatrolStatus;Value;
Fan.Collect.Source(1).Compute(1).Type="Translate"
Fan.Collect.Source(1).Compute(1).Column=2
Fan.Collect.Source(1).Compute(1).TranslationTable="SensorStatusTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;Value;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.Speed=ValueTable.Column(3)


//
// POWER SUPPLIES
//

//
// Discovery

// Source(1) = swSensorEntry
// ID;SensorType;Status;SensorDescription;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,2,3,5"

// Keep only Power Supply sensors (Type 3)
// ID;SensorType;Status;SensorDescription;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).ValueList="3"

// Exclude Status Values of 6 (Absent)
// ID;SensorType;Status;SensorDescription;
PowerSupply.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
PowerSupply.Discovery.Source(1).Compute(2).Column=3
PowerSupply.Discovery.Source(1).Compute(2).ValueList="6"

// InstanceTable = Source(1)
// ID;SensorType;Status;Value;SensorDescription;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(4)

//
// Collect

// Collect type = multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = connUnitSensorTable SNMP Table
// ID;Status;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.1.22.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,3"

// Translate the first column status into a PATROLStatus
// ID;PatrolStatus;Value;
PowerSupply.Collect.Source(1).Compute(1).Type="Translate"
PowerSupply.Collect.Source(1).Compute(1).Column=2
PowerSupply.Collect.Source(1).Compute(1).TranslationTable="SensorStatusTranslationTable"

// ValueTable = Source(1)
// ID;PatrolStatus;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)


// SensorStatusTranslationTable
SensorStatusTranslationTable(1)="UNKNOWN"
SensorStatusTranslationTable(2)="ALARM"
SensorStatusTranslationTable(3)="WARN"
SensorStatusTranslationTable(4)="OK"
SensorStatusTranslationTable(5)="WARN"
SensorStatusTranslationTable(6)="ALARM"
SensorStatusTranslationTable(Default)="UNKNOWN"


// FC PORTS (as NetworkCard devices)
//

//
// Discovery

// Source(1) = connUnitPortTable SNMP Table
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Type="SnmpTable"
NetworkCard.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.6.2.1"
NetworkCard.Discovery.Source(1).SnmpTableSelectColumns="1,3,7,34,35,37,39"

// Exclude Slots with No SFP (1= No Card, 2=No Transceiver)
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
NetworkCard.Discovery.Source(1).Compute(1).Column=2
NetworkCard.Discovery.Source(1).Compute(1).ValueList="1,2"

// Translate Wave Type
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(2).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(2).Column=3
NetworkCard.Discovery.Source(1).Compute(2).TranslationTable="WaveTypeTranslationTable"

// WaveTypeTranslationTable
WaveTypeTranslationTable(2)="LongWave Laser"
WaveTypeTranslationTable(3)="ShortWave Laser"
WaveTypeTranslationTable(4)="LongWave LED"
WaveTypeTranslationTable(5)="Copper"
WaveTypeTranslationTable(Default)=""

// Translate Admin Speed
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(3).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(3).Column=5
NetworkCard.Discovery.Source(1).Compute(3).TranslationTable="AdminSpeedTranslationTable"

// AdminSpeedTranslationTable
// Note: 3 is AutoNegotiate
AdminSpeedTranslationTable(1)="1000"
AdminSpeedTranslationTable(2)="2000"
AdminSpeedTranslationTable(3)=""
AdminSpeedTranslationTable(4)="4000"
AdminSpeedTranslationTable(5)="8000"
AdminSpeedTranslationTable(6)="10000"
AdminSpeedTranslationTable(Default)=""

// Translate Port Type
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(4).Type="Translate"
NetworkCard.Discovery.Source(1).Compute(4).Column=7
NetworkCard.Discovery.Source(1).Compute(4).TranslationTable="PortTypeTranslationTable"

// PortTypeTranslationTable
PortTypeTranslationTable(3)="FC Port FL"
PortTypeTranslationTable(4)="FC Port F"
PortTypeTranslationTable(5)="FC Port E"
PortTypeTranslationTable(6)="FC Port G"
PortTypeTranslationTable(7)="FC Port EX"
PortTypeTranslationTable(Default)="FC Port"

// Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(5).Type="Replace"
NetworkCard.Discovery.Source(1).Compute(5).Column=4
NetworkCard.Discovery.Source(1).Compute(5).Replace=" 00 00 00 00 00 00 00 00"
NetworkCard.Discovery.Source(1).Compute(5).ReplaceBy=""

// Remove the spaces from the WWN
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;
NetworkCard.Discovery.Source(1).Compute(6).Type="Replace"
NetworkCard.Discovery.Source(1).Compute(6).Column=4
NetworkCard.Discovery.Source(1).Compute(6).Replace=" "
NetworkCard.Discovery.Source(1).Compute(6).ReplaceBy=""

NetworkCard.Discovery.Source(1).Compute(7).Type="LeftConcat"
NetworkCard.Discovery.Source(1).Compute(7).Column=3
NetworkCard.Discovery.Source(1).Compute(7).String="Wave Type: "

// Source(2) = connUnitSnsTable SNMP Table
// RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
NetworkCard.Discovery.Source(2).Type="SnmpTable"
NetworkCard.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.7.2.1"
NetworkCard.Discovery.Source(2).SnmpTableSelectColumns="4,13,5,6"

// Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
// RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
NetworkCard.Discovery.Source(2).Compute(1).Type="Replace"
NetworkCard.Discovery.Source(2).Compute(1).Column=1
NetworkCard.Discovery.Source(2).Compute(1).Replace=" 00 00 00 00 00 00 00 00"
NetworkCard.Discovery.Source(2).Compute(1).ReplaceBy=""
NetworkCard.Discovery.Source(2).Compute(2).Type="Replace"
NetworkCard.Discovery.Source(2).Compute(2).Column=2
NetworkCard.Discovery.Source(2).Compute(2).Replace=" 00 00 00 00 00 00 00 00"
NetworkCard.Discovery.Source(2).Compute(2).ReplaceBy=""

// Remove the spaces from the WWN
// RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
NetworkCard.Discovery.Source(2).Compute(3).Type="Replace"
NetworkCard.Discovery.Source(2).Compute(3).Column=1
NetworkCard.Discovery.Source(2).Compute(3).Replace=" "
NetworkCard.Discovery.Source(2).Compute(3).ReplaceBy=""
NetworkCard.Discovery.Source(2).Compute(4).Type="Replace"
NetworkCard.Discovery.Source(2).Compute(4).Column=2
NetworkCard.Discovery.Source(2).Compute(4).Replace=" "
NetworkCard.Discovery.Source(2).Compute(4).ReplaceBy=""
NetworkCard.Discovery.Source(2).Compute(5).Type="Replace"
NetworkCard.Discovery.Source(2).Compute(5).Column=4
NetworkCard.Discovery.Source(2).Compute(5).Replace=" "
NetworkCard.Discovery.Source(2).Compute(5).ReplaceBy=""

// Add decriptive to Remote Port
// RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
NetworkCard.Discovery.Source(2).Compute(6).Type="LeftConcat"
NetworkCard.Discovery.Source(2).Compute(6).Column=3
NetworkCard.Discovery.Source(2).Compute(6).String="Remote Host: "

// Add decriptive to Remote Node Name
// RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName
NetworkCard.Discovery.Source(2).Compute(7).Type="LeftConcat"
NetworkCard.Discovery.Source(2).Compute(7).Column=4
NetworkCard.Discovery.Source(2).Compute(7).String="Remote Node Name: "

// Source(3) = Table joint of Source(1) and Source(2)
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;
NetworkCard.Discovery.Source(3).Type="TableJoint"
NetworkCard.Discovery.Source(3).LeftTable=%NetworkCard.Discovery.Source(1)%
NetworkCard.Discovery.Source(3).RightTable=%NetworkCard.Discovery.Source(2)%
NetworkCard.Discovery.Source(3).LeftKeyColumn=4
NetworkCard.Discovery.Source(3).RightKeyColumn=2
NetworkCard.Discovery.Source(3).DefaultRightLine=";;;;"

// Source(4) = connUnitPortTable SNMP Table from MIB2 (speed is not available in Brocade MIB)
// WWN;SpeedKB;
NetworkCard.Discovery.Source(4).Type="SnmpTable"
NetworkCard.Discovery.Source(4).SnmpTableOid="1.3.6.1.3.94.1.10.1"
NetworkCard.Discovery.Source(4).SnmpTableSelectColumns="10,15"

// Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
// WWN;SpeedKB;
NetworkCard.Discovery.Source(4).Compute(1).Type="Replace"
NetworkCard.Discovery.Source(4).Compute(1).Column=1
NetworkCard.Discovery.Source(4).Compute(1).Replace=" 00 00 00 00 00 00 00 00"

// Remove the spaces from the WWN
// WWN;SpeedKB;
NetworkCard.Discovery.Source(4).Compute(2).Type="Replace"
NetworkCard.Discovery.Source(4).Compute(2).Column=1
NetworkCard.Discovery.Source(4).Compute(2).Replace=" "
NetworkCard.Discovery.Source(4).Compute(2).ReplaceBy=""

// Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
// WWN;SpeedMB;
NetworkCard.Discovery.Source(4).Compute(3).Type="Awk"
NetworkCard.Discovery.Source(4).Compute(3).AwkScript=EmbeddedFile(1)
NetworkCard.Discovery.Source(4).Compute(3).KeepOnlyRegExp="^MSHW;"
NetworkCard.Discovery.Source(4).Compute(3).Separators=";"
NetworkCard.Discovery.Source(4).Compute(3).SelectColumns="2,3"


// Source(5) = Table joint of Source(3) and Source(4)
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;WWN;SpeedMB;
NetworkCard.Discovery.Source(5).Type="TableJoint"
NetworkCard.Discovery.Source(5).LeftTable=%NetworkCard.Discovery.Source(3)%
NetworkCard.Discovery.Source(5).RightTable=%NetworkCard.Discovery.Source(4)%
NetworkCard.Discovery.Source(5).LeftKeyColumn=4
NetworkCard.Discovery.Source(5).RightKeyColumn=1
NetworkCard.Discovery.Source(5).DefaultRightLine=";;"

// InstanceTable = Source(5)
// PortIndex;PhysicalState;WaveType;WWN;AdminSpeed;Name;PortType;RemoteWWN;PortWWN;RemotePortSymb;RemoteNodeName;WWN;SpeedMB;
NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(5)%
NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(6)
NetworkCard.Discovery.Instance.Bandwidth=InstanceTable.Column(13)
NetworkCard.Discovery.Instance.PhysicalAddress=InstanceTable.Column(4)
NetworkCard.Discovery.Instance.PhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.DeviceType=InstanceTable.Column(7)
NetworkCard.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
NetworkCard.Discovery.Instance.RemotePhysicalAddress=InstanceTable.Column(8)
NetworkCard.Discovery.Instance.RemotePhysicalAddressType="WWN"
NetworkCard.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(10)
NetworkCard.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(11)
NetworkCard.Discovery.Instance.ParameterActivation.LinkSpeed=InstanceTable.Column(13)


//
// Collect

// Collect type = multi-instance
NetworkCard.Collect.Type="MultiInstance"

// Source(1) = connUnitPortTable SNMP Table
// ID;Name;PhysicalState;LinkStatus;wwn
NetworkCard.Collect.Source(1).Type="SnmpTable"
NetworkCard.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.1.1.6.2.1"
NetworkCard.Collect.Source(1).SnmpTableSelectColumns="1,37,3,5,34"

// Duplicate PhysicalState
// ID;Name;PhysicalState;PhysicalState;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(1).Type="DuplicateColumn"
NetworkCard.Collect.Source(1).Compute(1).Column=3

// Translate the first column status into a PATROLStatus
// ID;Name;PATROLStatus;PhysicalState;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
NetworkCard.Collect.Source(1).Compute(2).Column=3
NetworkCard.Collect.Source(1).Compute(2).TranslationTable="PortStatusTranslationTable"

// The PortStatusTranslationTable
// 4 & 5 are dealt with by Link Status
PortStatusTranslationTable(1)="ALARM"
PortStatusTranslationTable(2)="ALARM"
PortStatusTranslationTable(3)="ALARM"
PortStatusTranslationTable(4)="OK"
PortStatusTranslationTable(5)="OK"
PortStatusTranslationTable(6)="OK"
PortStatusTranslationTable(7)="ALARM"
PortStatusTranslationTable(8)="ALARM"
PortStatusTranslationTable(9)="WARN"
PortStatusTranslationTable(Default)="UNKNOWN"

// Translate the second column status into a more readable string
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
NetworkCard.Collect.Source(1).Compute(3).Column=4
NetworkCard.Collect.Source(1).Compute(3).TranslationTable="PortStatusInformationTranslationTable"

// The PortStatusInformationTranslationTable
PortStatusInformationTranslationTable(1)="Card No Longer Present"
PortStatusInformationTranslationTable(2)="Transceiver No Longer Present"
PortStatusInformationTranslationTable(3)="Laser Fault"
PortStatusInformationTranslationTable(4)="No Light"
PortStatusInformationTranslationTable(5)="No Sync"
PortStatusInformationTranslationTable(6)=""
PortStatusInformationTranslationTable(7)="Port Faulty"
PortStatusInformationTranslationTable(8)="Failed Diagnostics"
PortStatusInformationTranslationTable(9)="Port is Locking to Reference Signal"
PortStatusInformationTranslationTable(Default)="Unknown Status"

// Translate the third column status into a LinkStatus value
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
NetworkCard.Collect.Source(1).Compute(4).Column=5
NetworkCard.Collect.Source(1).Compute(4).TranslationTable="PortLinkStatusInformationTranslationTable"

// The PortLinkStatusInformationTranslationTable
PortLinkStatusInformationTranslationTable(1)="OK"
PortLinkStatusInformationTranslationTable(2)="WARN"
PortLinkStatusInformationTranslationTable(3)="WARN"
PortLinkStatusInformationTranslationTable(Default)="OK"


// Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(5).Type="Replace"
NetworkCard.Collect.Source(1).Compute(5).Column=6
NetworkCard.Collect.Source(1).Compute(5).Replace=" 00 00 00 00 00 00 00 00"
NetworkCard.Collect.Source(1).Compute(5).ReplaceBy=""

// Remove the spaces from the WWN
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;wwn
NetworkCard.Collect.Source(1).Compute(6).Type="Replace"
NetworkCard.Collect.Source(1).Compute(6).Column=6
NetworkCard.Collect.Source(1).Compute(6).Replace=" "
NetworkCard.Collect.Source(1).Compute(6).ReplaceBy=""


// Source(2) = connUnitPortTable SNMP Table from MIB2 (speed is not available in Brocade MIB)
// WWN;SpeedKB;
NetworkCard.Collect.Source(2).Type="SnmpTable"
NetworkCard.Collect.Source(2).SnmpTableOid="1.3.6.1.3.94.1.10.1"
NetworkCard.Collect.Source(2).SnmpTableSelectColumns="10,15"

// Remove the trailing " 00 00 00 00 00 00 00 00" from the WWN address
// WWN;SpeedKB;
NetworkCard.Collect.Source(2).Compute(1).Type="Replace"
NetworkCard.Collect.Source(2).Compute(1).Column=1
NetworkCard.Collect.Source(2).Compute(1).Replace=" 00 00 00 00 00 00 00 00"

// Remove the spaces from the WWN
// WWN;SpeedKB;
NetworkCard.Collect.Source(2).Compute(2).Type="Replace"
NetworkCard.Collect.Source(2).Compute(2).Column=1
NetworkCard.Collect.Source(2).Compute(2).Replace=" "
NetworkCard.Collect.Source(2).Compute(2).ReplaceBy=""

// Use an awk script to detect if speed is divisible by 106.25, 102.5 or 100 to get MBITs
// WWN;SpeedMB;
NetworkCard.Collect.Source(2).Compute(3).Type="Awk"
NetworkCard.Collect.Source(2).Compute(3).AwkScript=EmbeddedFile(1)
NetworkCard.Collect.Source(2).Compute(3).KeepOnlyRegExp="^MSHW;"
NetworkCard.Collect.Source(2).Compute(3).Separators=";"
NetworkCard.Collect.Source(2).Compute(3).SelectColumns="2,3"

// Source(3) = Table joint of Source(1) and Source(2)
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;
NetworkCard.Collect.Source(3).Type="TableJoint"
NetworkCard.Collect.Source(3).LeftTable=%NetworkCard.Collect.Source(1)%
NetworkCard.Collect.Source(3).RightTable=%NetworkCard.Collect.Source(2)%
NetworkCard.Collect.Source(3).LeftKeyColumn=6
NetworkCard.Collect.Source(3).RightKeyColumn=1
NetworkCard.Collect.Source(3).DefaultRightLine=";;"


// Source(4) = connUnitPortStatTable SNMP Table
// PortIndex;ErrorCountHex;TransmitTotalHex;ReceiveTotalHex;TransmitttedBytesHex;ReceivedBytesHex;
NetworkCard.Collect.Source(4).Type="SnmpTable"
NetworkCard.Collect.Source(4).SnmpTableOid="1.3.6.1.3.94.4.5.1"
NetworkCard.Collect.Source(4).SnmpTableSelectColumns="2,3,4,5,6,7"

// Convert all these values from hex to dec
// PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
NetworkCard.Collect.Source(4).Compute(1).Type="Convert"
NetworkCard.Collect.Source(4).Compute(1).Column=2
NetworkCard.Collect.Source(4).Compute(1).ConversionType="hex2dec"
NetworkCard.Collect.Source(4).Compute(2).Type="Convert"
NetworkCard.Collect.Source(4).Compute(2).Column=3
NetworkCard.Collect.Source(4).Compute(2).ConversionType="hex2dec"
NetworkCard.Collect.Source(4).Compute(3).Type="Convert"
NetworkCard.Collect.Source(4).Compute(3).Column=4
NetworkCard.Collect.Source(4).Compute(3).ConversionType="hex2dec"
NetworkCard.Collect.Source(4).Compute(4).Type="Convert"
NetworkCard.Collect.Source(4).Compute(4).Column=5
NetworkCard.Collect.Source(4).Compute(4).ConversionType="hex2dec"
NetworkCard.Collect.Source(4).Compute(5).Type="Convert"
NetworkCard.Collect.Source(4).Compute(5).Column=6
NetworkCard.Collect.Source(4).Compute(5).ConversionType="hex2dec"

// Source(5) = Table joint of Source(3) and Source(4)
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
NetworkCard.Collect.Source(5).Type="TableJoint"
NetworkCard.Collect.Source(5).LeftTable=%NetworkCard.Collect.Source(3)%
NetworkCard.Collect.Source(5).RightTable=%NetworkCard.Collect.Source(4)%
NetworkCard.Collect.Source(5).LeftKeyColumn=1
NetworkCard.Collect.Source(5).RightKeyColumn=1
NetworkCard.Collect.Source(5).DefaultRightLine=";;;;;;"


// ValueTable = Source(1)
// ID;Name;PATROLStatus;StatusInformation;LinkStatus;WWN;WWN;SpeedMB;PortIndex;ErrorCount;TransmittedPackets;ReceivedPackets;TransmittedBytes;ReceivedBytes;
NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(5)%
NetworkCard.Collect.DeviceID=ValueTable.Column(2)
NetworkCard.Collect.Status=ValueTable.Column(3)
NetworkCard.Collect.StatusInformation=ValueTable.Column(4)
NetworkCard.Collect.LinkStatus=ValueTable.Column(5)
NetworkCard.Collect.LinkSpeed=ValueTable.Column(8)
NetworkCard.Collect.DuplexMode="full"
NetworkCard.Collect.ErrorCount=ValueTable.Column(10)
NetworkCard.Collect.TransmittedPackets=ValueTable.Column(11)
NetworkCard.Collect.ReceivedPackets=ValueTable.Column(12)
NetworkCard.Collect.TransmittedBytes=ValueTable.Column(13)
NetworkCard.Collect.ReceivedBytes=ValueTable.Column(14)

//
//
// OTHER DEVICES
// Port Modules, Control Processors, CR Switching Blades

//
// Discovery

// Source(1) = fruTable
// ID,DeviceType,SlotID
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.2.1.5.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3"

// Keep only CPs(4),CP-Other(5),SwitchBlade(6),WWN(7),CR Switching Blades(10)
// ID,DeviceType,SlotID
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=2
OtherDevice.Discovery.Source(1).Compute(1).ValueList="4,5,6,7,10"

// Add a descriptor to SlotID
// ID,DeviceType,SlotID
OtherDevice.Discovery.Source(1).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(1).Compute(2).Column=3
OtherDevice.Discovery.Source(1).Compute(2).String="Location: "

// Translate the DeviceType
// ID,DeviceType,SlotID
OtherDevice.Discovery.Source(1).Compute(3).Type="Translate"
OtherDevice.Discovery.Source(1).Compute(3).Column=2
OtherDevice.Discovery.Source(1).Compute(3).TranslationTable="OtherDeviceTypeTT"

// InstanceTable = Source(1)
// ID,DeviceType,SlotID
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(2)

// OtherDeviceTypeTT
OtherDeviceTypeTT(4)="CP"
OtherDeviceTypeTT(5)="CP-Other"
OtherDeviceTypeTT(6)="SB"
OtherDeviceTypeTT(7)="WWN"
OtherDeviceTypeTT(10)="CR-SB"


//
// Collect

// Collect type = multi-instance
OtherDevice.Collect.Type="MultiInstance"


// Source(1) = fruTable
// ID,Status
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.1588.2.1.2.1.5.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,2"

// Translate the DeviceType
// ID,Status,StatusInfo
OtherDevice.Collect.Source(1).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(1).Compute(1).Column=2

// Translate the DeviceType
// ID,Status,StatusInfo
OtherDevice.Collect.Source(1).Compute(2).Type="Translate"
OtherDevice.Collect.Source(1).Compute(2).Column=2
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="OtherDeviceStatusTT"

// OtherDeviceStatusTT
OtherDeviceStatusTT(1)="UNKNOWN"
OtherDeviceStatusTT(2)="UNKNOWN"
OtherDeviceStatusTT(3)="OK"
OtherDeviceStatusTT(4)="WARN"
OtherDeviceStatusTT(5)="ALARM"
OtherDeviceStatusTT(Default)="UNKNOWN"

// Translate the DeviceType
// ID,DeviceType,SlotID
OtherDevice.Collect.Source(1).Compute(3).Type="Translate"
OtherDevice.Collect.Source(1).Compute(3).Column=3
OtherDevice.Collect.Source(1).Compute(3).TranslationTable="OtherDeviceStatusInfoTT"

// OtherDeviceStatusInfoTT
OtherDeviceStatusInfoTT(1)="Other Status"
OtherDeviceStatusInfoTT(2)="Unknown Status"
OtherDeviceStatusInfoTT(3)="On"
OtherDeviceStatusInfoTT(4)="Off"
OtherDeviceStatusInfoTT(5)="Faulty"
OtherDeviceStatusInfoTT(Default)="UNKNOWN"

// ValueTable = Source(1)
// ID;PatrolStatus;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)

////////////////////////////////////////////////////////:
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = awk script that parses
///    WWN;Speed;
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN {FS="[;]"}
$2 ~ /[0-9]+/ {
   if (($2 / 10625) == int($2 / 10625)) { speed = ($2 / 106.25) }
   else if (($2 / 1250) == int($2 / 1250)) { speed = ($2 / 125.0) }
   else { speed =  $2 / 100}
   print "MSHW;" $1 ";" speed ";"
   }
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////
