//
//
//                 C O N N E C T O R
//
//                       f o r
//
//                 Hardware Sentry
//
//                 by Sentry Software (c)
//
//                  MS_HW_SunRaidctl.hdf
//
//      Supports: Sun machines
//			Monitors: Raid contollers, arrays and disks managed by Raidctl
//      Connects to: RaidCtl under Solaris
//
//

//
// HEADER
//

hdf.DisplayName="Oracle/Sun Solaris - RAID Disks (raidctl)"
hdf.TypicalPlatform="Oracle/Sun"
hdf.ReliesOn="Sun Solaris system commands (raidctl)"
hdf.Comments="This connector discovers and monitors physical disks and logical disks behind a physical RAID controller."
hdf.Version="1.0"
hdf.RemoteSupport="true"
hdf.AppliesToOS="Solaris"


//
// DETECTION
//

Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="SunOS,Solaris"

Detection.Criteria(2).Type="OSCommand"
Detection.Criteria(2).CommandLine="%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S"
Detection.Criteria(2).ExpectedResult="^[0-9]"
Detection.Criteria(2).ForceSerialization=1
Detection.Criteria(2).ErrorMessage="There is no disk attached to the controller(s)."


//
// SUDO-able commands
//
Sudo(1).Command="/usr/sbin/raidctl"


//#################
// DISK CONTROLLER
//#################

//
// Discovery
//

// Source(1) = Runs shell script that takes results from raidctl -S, then runs them through raidctl -l to get controller information
// MSHW;Controller Number;Model;Firmware
DiskController.Discovery.Source(1).Type="OsCommand"
DiskController.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(1)%"
DiskController.Discovery.Source(1).ForceSerialization=1
DiskController.Discovery.Source(1).KeepOnlyRegExp="^MSHW;"
DiskController.Discovery.Source(1).Separators=";"
DiskController.Discovery.Source(1).SelectColumns="2,3,4"

// Source(2) = Runs raidctl -S
// MSHW;Controller Number;Model;Firmware
DiskController.Discovery.Source(2).Type="OsCommand"
DiskController.Discovery.Source(2).CommandLine="%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S"
DiskController.Discovery.Source(2).ForceSerialization=1

// Reformat raidctl -S output to give us a dependency table to link controllers to disks to arrays
// MSHW;Controller Number;Array;Disk
DiskController.Discovery.Source(2).Compute(1).Type="Awk"
DiskController.Discovery.Source(2).Compute(1).AwkScript=EmbeddedFile(2)
DiskController.Discovery.Source(2).Compute(1).KeepOnlyRegExp="^MSHW;"
DiskController.Discovery.Source(2).Compute(1).Separators=";"
DiskController.Discovery.Source(2).Compute(1).SelectColumns="2,3,4"

// Source (3) Table Join of Source (1) and Source (2) to keep only controllers that have logical disks (arrays) associated with them
// Controller Number;Model;Firmware;Controller Number;Array;Disk
DiskController.Discovery.Source(3).Type="TableJoint"
DiskController.Discovery.Source(3).LeftTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Source(3).RightTable=%DiskController.Discovery.Source(2)%
DiskController.Discovery.Source(3).LeftKeyColumn=1
DiskController.Discovery.Source(3).RightKeyColumn=1

// InstanceTable = Source(3)
// Controller Number;Model;Firmware;Controller Number;Array;Disk
DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(3)%
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(1)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)
DiskController.Discovery.Instance.Model=InstanceTable.Column(2)
DiskController.Discovery.Instance.FirmwareVersion=InstanceTable.Column(3)



//###############
// LOGICAL DISKS
//###############

//
// Discovery
//
// Source(1) = List all logical drives and  info
// MSHW;Logical disks;size;raid type
LogicalDisk.Discovery.Source(1).Type="OsCommand"
LogicalDisk.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(3)%"
LogicalDisk.Discovery.Source(1).ForceSerialization=1
LogicalDisk.Discovery.Source(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Discovery.Source(1).Separators=";"
LogicalDisk.Discovery.Source(1).SelectColumns="2,3,4"

// Translate size into bytes
// Logical disks;size;raid type
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column=2
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1073741824"

// Source (2) Table Join of Source (1) and DiskController Source (2)
// Logical disks;size;raid type;Controller Number;Array;Disk
LogicalDisk.Discovery.Source(2).Type="TableJoint"
LogicalDisk.Discovery.Source(2).LeftTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Source(2).RightTable=%DiskController.Discovery.Source(2)%
LogicalDisk.Discovery.Source(2).LeftKeyColumn=1
LogicalDisk.Discovery.Source(2).RightKeyColumn=2

// The InstanceTable
// Logical disks;size;raid type;Controller Number;Array;Disk
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(2)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.RAIDLevel=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(4)


//
// Collect
//

// Collect type = MultiInstance
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = List all logical drives and status of those
// The status can be either OPTIMAL, DEGRADED, FAILED, or SYNCING.
// MSHW;ID;Status
LogicalDisk.Collect.Source(1).Type="OsCommand"
LogicalDisk.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(4)%"
LogicalDisk.Collect.Source(1).ForceSerialization=1
LogicalDisk.Collect.Source(1).KeepOnlyRegExp="^MSHW;"
LogicalDisk.Collect.Source(1).Separators=";"
LogicalDisk.Collect.Source(1).SelectColumns="2,3"

// Duplicate the status column
// ID;Status;Status
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL status
// ID;PATROLStatus;Status
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column=2
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable("OPTIMAL")="OK"
LogicalDiskStatusTranslationTable("DEGRADED")="WARN"
LogicalDiskStatusTranslationTable("FAILED")="ALARM"
LogicalDiskStatusTranslationTable("SYNCING")="OK"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// ID;PATROLStatus;StatusInformation
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="3"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable("OPTIMAL")="Optimal"
LogicalDiskStatusInformationTranslationTable("DEGRADED")="Degraded"
LogicalDiskStatusInformationTranslationTable("FAILED")="Failed"
LogicalDiskStatusInformationTranslationTable("SYNCING")="Syncing"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown"

// The ValueTable = source(1)
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)


//################
// PHYSICAL DISKS
//################

//
// Discovery
//
// Source(1) = List all physical disks and  their status - Status: GOOD/FAILED/MISSING
// MSHW;ID;Size;Status
PhysicalDisk.Discovery.Source(1).Type="OsCommand"
PhysicalDisk.Discovery.Source(1).CommandLine="/bin/sh %EmbeddedFile(5)%"
PhysicalDisk.Discovery.Source(1).ForceSerialization=1
PhysicalDisk.Discovery.Source(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Discovery.Source(1).Separators=";"
PhysicalDisk.Discovery.Source(1).SelectColumns="2,3"

// Translate size into bytes
// ID;Size
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=2
PhysicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1073741824"

// Source (2) Table join of Physical Disks and Controller
// ID;Size;Controller Number;Array;Disk
PhysicalDisk.Discovery.Source(2).Type="TableJoint"
PhysicalDisk.Discovery.Source(2).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(2).RightTable=%DiskController.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(2).LeftKeyColumn="1"
PhysicalDisk.Discovery.Source(2).RightKeyColumn="3"

// The InstanceTable
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(3)


//
// Collect
//

// Collect type = MultiInstance
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = List all physical disks and  their status
// The status can be either GOOD, FAILED or MISSING.
// MSHW;ID;Size;Status
PhysicalDisk.Collect.Source(1).Type="OsCommand"
PhysicalDisk.Collect.Source(1).CommandLine="/bin/sh %EmbeddedFile(5)%"
PhysicalDisk.Collect.Source(1).ForceSerialization=1
PhysicalDisk.Collect.Source(1).KeepOnlyRegExp="^MSHW;"
PhysicalDisk.Collect.Source(1).Separators=";"
PhysicalDisk.Collect.Source(1).SelectColumns="2,3,4"

// Duplicate the status column
// ID;Size;Status;Status
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column=3

// Translate the first status column into a PATROL status
// ID;Size;PATROLStatus;Status
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=3
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable("GOOD")="OK"
PhysicalDiskStatusTranslationTable("MISSING")="WARN"
PhysicalDiskStatusTranslationTable("FAILED")="ALARM"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// Translate the second status column into a more readable string
// ID;Size;PATROLStatus;StatusInformation
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column=4
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable("GOOD")="Good"
PhysicalDiskStatusInformationTranslationTable("MISSING")="Missing"
PhysicalDiskStatusInformationTranslationTable("FAILED")="Failed"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown"

// The ValueTable = source(1)
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(3)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(4)



///////////////////////////////////////////////////////////////
///
///    Embedded File 1
///
///    Runs shell script that takes results from raidctl -S, then runs them through raidctl -l to get controller information
///
///////////////////////////////////////////////////////////////
EmbeddedFile(1):
CONTROLLERLIST=`%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S|/usr/bin/nawk '{if ($2 ~ /"/) {print $1}}'`
for CONTROLLER in $CONTROLLERLIST
    do
    %{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -l $CONTROLLER | /usr/bin/nawk -v controller=$CONTROLLER '{if ($1 ~ /c[0-9]+/) {print ("MSHW;"controller";"$2";"$3";")}}'
    done
EmbeddedFile(1).End
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
///
///    Embedded File 2
///    Reformat raidctl -S output to give us a dependency table to link controllers to disks to arrays
///    MSHW;Controller Number;Array;Disk
///
///////////////////////////////////////////////////////////////
EmbeddedFile(2):
BEGIN {controller="";logicalDrive="";disk="";}
$2 ~ /"/ {controller=$1}
$1 ~ /c[0-9]t[0-9]d[0-9]/ {logicalDrive=$1;
                           for (i=3; i<=(NF-2); i++) { if ($i ~ /[0-9]\.[0-9]\.[0-9]/) {print ("MSHW;"controller";"logicalDrive";"$i);}}
                           }
EmbeddedFile(2).End
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
///
///    Embedded File 3
///    List all logical drives and  info
///    MSHW;Logical disks;size;raid type
///
///////////////////////////////////////////////////////////////
EmbeddedFile(3):
LOGICALDRIVELIST=`%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S|/usr/bin/nawk '{if ($1 ~ /c[0-9]t[0-9]d[0-9]/) {print $1}}'`
for LOGICALDRIVE in $LOGICALDRIVELIST
    do
    %{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -l $LOGICALDRIVE | /usr/bin/nawk -v logicalDrive=$LOGICALDRIVE '{if ($1 ~ /c[0-9]t[0-9]d[0-9]/) {size=$2;
                                                                                                             raid=$NF; gsub (/[A-Z]/,"",raid);
                                                                                                             if (size ~ /[Gg]/) {gsub (/[Gg]/,"",size) ; }
                                                                                                             if (size ~ /[Mm]/) {gsub (/[Mm]/,"",size) ; size = size / 1024};
                                                                                                             if (size ~ /[Tt]/) {gsub (/[Tt]/,"",size) ; size = size * 1024};
                                                                                                             print ("MSHW;"logicalDrive";"size";"raid";")}}'
    done
EmbeddedFile(3).End
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
///
///    Embedded File 4
///    List all logical volumes and  their status
///    MSHW;ID;Status;
///
///////////////////////////////////////////////////////////////
EmbeddedFile(4):
LOGICALDRIVELIST=`%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S|/usr/bin/nawk '{if ($1 ~ /c[0-9]t[0-9]d[0-9]/) {print $1}}'`
for VOLUME in $LOGICALDRIVELIST
		do
		%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -l $VOLUME | egrep 'OPTIMAL|DEGRADED|FAILED|SYNCING' | awk '{print ("MSHW;"$1";"$4";")}'
		done

EmbeddedFile(4).End
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
///
///    Embedded File 5
///    List all physical disks and  their status
///    MSHW;ID;Size;Status; - Status: GOOD/FAILED/MISSING
///
///////////////////////////////////////////////////////////////
EmbeddedFile(5):
LOGICALDRIVELIST=`%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -S|/usr/bin/nawk '{if ($1 ~ /c[0-9]t[0-9]d[0-9]/) {print $1}}'`
for VOLUME in $LOGICALDRIVELIST
		do
		%{SUDO:/usr/sbin/raidctl}/usr/sbin/raidctl -l $VOLUME | /usr/bin/nawk '{if ($1 ~ /[0-9]\056[0-9]\056[0-9]/) {Size=$2;
                                                                                        if (Size ~ /[Gg]/) {gsub (/[Gg]/,"",Size) ; }
                                                                                        if (Size ~ /[Mm]/) {gsub (/[Mm]/,"",Size) ; Size = Size / 1024};
                                                                                        if (Size ~ /[Tt]/) {gsub (/[Tt]/,"",Size) ; Size = Size * 1024};
                                                                                        print ("MSHW;"$1";"Size";"$3";")}}'
		done
EmbeddedFile(5).End
///////////////////////////////////////////////////////////////////
