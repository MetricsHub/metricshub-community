#
# ╔═╗┌─┐┌─┐┌┐┌╔╦╗┌─┐┬  ┌─┐┌┬┐┌─┐┌┬┐┬─┐┬ ┬
# ║ ║├─┘├┤ │││ ║ ├┤ │  ├┤ │││├┤  │ ├┬┘└┬┘
# ╚═╝┴  └─┘┘└┘ ╩ └─┘┴─┘└─┘┴ ┴└─┘ ┴ ┴└─ ┴
#
# OpenTelemetry Collector Configuration
#
# For more information, see:
# https://opentelemetry.io/docs/collector/configuration/
#

# INPUTS
receivers:
  # OTLP
  # Receives data via gRPC or HTTP using OTLP format.
  # More information:
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver
  otlp:
    protocols:
      grpc:
        endpoint: localhost:4317
        tls:
          cert_file: security/otel.crt
          key_file: security/otel.key
        auth:
          authenticator: basicauth

  # prometheus
  # Polls the internal Prometheus Exporter embedded with the OpenTelemetry Collector on port 8888
  # More information:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
  # Simply add "prometheus/internal" to the pipeline in the receivers array, to export these internal
  # metrics.
  prometheus/internal:
    config:
      scrape_configs:
        - job_name: otel-collector-internal
          scrape_interval: 60s
          static_configs:
            - targets: [ localhost:8888 ]

# PROCESSING
processors:

  # memory_limiter
  # Limits the memory usage of the collector. See:
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/memorylimiterprocessor
  memory_limiter:
    check_interval: 1s
    limit_mib: 2000
    spike_limit_mib: 400

  # filter
  # Filtering of the metrics. You can specify several filter configurations.
  # Filtering options are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
  # Don't forget to add your filter entries (e.g. "filter/1") to the pipeline in the processors array to activate it.
  filter/keep1HostOnly:
    metrics:
      include:
        match_type: expr
        expressions:
        - Label("host.name") == "my-server.big-corp.com"

  # batch
  # Processes and sends data in batch of 10s. See:
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/batchprocessor
  batch:
    timeout: 10s

  # resourcedetection
  # The resource detection processor is used to detect resource information from the host. See:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor
  resourcedetection:
    detectors: [system]
    override: false

  # metricstransform
  # Some post-processing of metrics before sending then out
  # All possible actions are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricstransformprocessor
  # Add "metricstransform" to the pipeline in the processors array to activate it.
  metricstransform:
    transforms:
      include: hw_.*
      match_type: regexp
      action: update
      operations:
        - action: add_label
          new_label: prod_level
          new_value: production

# OUTPUT
exporters:

  # BMC Helix
  # Using Prometheus Remote Write protocol
  prometheusremotewrite/helix:
    # endpoint is the URL pointing to your Helix environment, at onbmc.com
    # apiToken can be retrieved in BMC Helix Operations Management > Administration > Repository
    endpoint: https://your-helix-env.onbmc.com/metrics-gateway-service/api/v1.0/prometheus
    headers:
      Authorization: Bearer <apiToken>
    resource_to_telemetry_conversion:
      enabled: true

  # Prometheus Server with Remote Write protocol
  # All options are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/prometheusremotewriteexporter
  # Note: The Prometheus server must have been started with the --web.enable-remote-write-receiver option
  prometheusremotewrite/your-server:
    endpoint: http://prom-server:9090/api/v1/write
    resource_to_telemetry_conversion:
      enabled: true

  # Datadog
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/datadogexporter
  datadog/api:
    api:
      key: <apikey> # Check your Datadog's Organization Settings
    metrics:
      resource_attributes_as_tags: true

  # Prometheus exporter
  # Exports data to a Prometheus back-end
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/prometheusexporter
  prometheus:
    endpoint: "0.0.0.0:24375"
    send_timestamps: true
    metric_expiration: 15m
    resource_to_telemetry_conversion:
      enabled: true

  # Logging
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/loggingexporter
  logging:
    loglevel: debug

  # Splunk SignalFx
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/signalfxexporter
  signalfx:
    # Access token to send data to SignalFx.
    access_token: <access_token>
    # SignalFx realm where the data will be received.
    realm: eu0
    # Timeout for the send operations.
    timeout: 10s
    # Defines if the exporter should scrape host metadata.
    sync_host_metadata: true

# EXTRAS
extensions:

  # healthcheck
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/healthcheckextension
  health_check:

  # zPages
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
  zpages:

  # hwsagent
  # Starts the Hardware Sentry Agent as a child process of the OpenTelemetry Collector
  hws_agent:

  # basicauth
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
  basicauth:
    htpasswd:
      file: security/.htpasswd

# ACTUAL COLLECTOR PIPELINE DESCRIPTION
service:
  telemetry:
    logs:
      level: info # Change to debug for more details
    metrics:
      address: localhost:8888
      level: basic
  extensions: [health_check, basicauth, hws_agent]
  pipelines:
    metrics:
      receivers: [otlp, prometheus/internal]
      processors: [memory_limiter, batch, resourcedetection, metricstransform]
      exporters: [prometheusremotewrite/your-server] # List here the platform of your choice
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resourcedetection]
      exporters: [] # List here the platform of your choice