#
# ╔═╗┌─┐┌─┐┌┐┌╔╦╗┌─┐┬  ┌─┐┌┬┐┌─┐┌┬┐┬─┐┬ ┬
# ║ ║├─┘├┤ │││ ║ ├┤ │  ├┤ │││├┤  │ ├┬┘└┬┘
# ╚═╝┴  └─┘┘└┘ ╩ └─┘┴─┘└─┘┴ ┴└─┘ ┴ ┴└─ ┴
#
# OpenTelemetry Collector Configuration
#
# For more information, see:
# https://opentelemetry.io/docs/collector/configuration/
#

# INPUTS
receivers:

  # prometheus_exec
  # Executes Hardware Sentry Exporter for Prometheus and scrape it
  # For more information about execution options:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusexecreceiver
  #
  # Hardware Sentry Exporter for Prometheus configuration file is config/hws-config.yaml by default.
  # That's were you configure the systems to be monitored.
  # Change the below command line if you choose to change the location or name of the configuration file.
  prometheus_exec/hws-exporter:
    exec: "\"bin\\hws-exporter.cmd\" --target.config.file=\"config\\hws-config.yaml\" --server.port={{port}}"
    port: 24375
    scrape_interval: 2m

  # prometheus
  # Polls the internal Prometheus Exporter embedded with the OpenTelemetry Collector on port 8888
  # More information:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
  # Simply add "prometheus/internal" to the pipeline in the receivers array, to export these internal
  # metrics.
  prometheus/internal:
    config:
      scrape_configs:
        - job_name: otel-collector-internal
          scrape_interval: 60s
          static_configs:
            - targets: ["0.0.0.0:8888"]

# PROCESSING
processors:

  # memory_limiter
  # Limits the memory usage of the collector. See:
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/memorylimiterprocessor
  memory_limiter:
    check_interval: 1s
    limit_mib: 2000
    spike_limit_mib: 400

  # filter
  # Filtering of the metrics. You can specify several filter configurations.
  # Filtering options are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
  # Don't forget to add your filter entries (e.g. "filter/1") to the pipeline in the processors array to activate it.
  filter/keep1HostOnly:
    metrics:
      include:
        match_type: expr
        expressions:
        - Label("fqdn") == "my-server.big-corp.com"

  # batch
  # Processes and sends data in batch of 10s. See:
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/batchprocessor
  batch:
    timeout: 10s

  # metricstransform
  # Some post-processing of metrics before sending then out
  # All possible actions are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricstransformprocessor
  # Add "metricstransform" to the pipeline in the processors array to activate it.
  metricstransform:
    transforms:
      include: hw_.*
      match_type: regexp
      action: update
      operations:
        - action: add_label
          new_label: prod_level
          new_value: production

# OUTPUT
exporters:

  # BMC Helix
  # Using Prometheus Remote Write protocol
  prometheusremotewrite/helix:
    # endpoint is the URL pointing to your Helix environment, at onbmc.com
    # apiToken can be retrieved in BMC Helix Operations Management > Administration > Repository
    endpoint: https://your-helix-env.onbmc.com/metrics-gateway-service/api/v1.0/prometheus
    headers:
      Authorization: Bearer <apiToken>

  # Prometheus Server with Remote Write protocol
  # All options are described at:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/prometheusremotewriteexporter
  # Note: The Prometheus server must have been started with the --enable-feature=remote-write-receiver option
  prometheusremotewrite/your-server:
    endpoint: http://prom-server:9090/api/v1/write

  # Datadog
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/datadogexporter
  datadog/api:
    api:
      key: <apikey> # Check your Datadog's Organization Settings

  ## Logging
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/loggingexporter
  logging:
    loglevel: debug

# EXTRAS
extensions:

  # healthcheck
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/healthcheckextension
  health_check:

  # zPages
  # https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
  zpages:

# ACTUAL COLLECTOR PIPELINE DESCRIPTION
service:
  telemetry:
    logs:
      level: info # Change to debug more more details
  extensions: [health_check]
  pipelines:
    metrics:
      receivers: [prometheus_exec/hws-exporter,prometheus/internal]
      processors: [memory_limiter,batch]
      exporters: [prometheusremotewrite/your-server] # List here the platform of your choice