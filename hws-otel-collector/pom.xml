<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sentrysoftware.hardware.matrix</groupId>
		<artifactId>matrix</artifactId>
		<version>2.0.00-SNAPSHOT</version>
	</parent>

	<artifactId>hws-otel-collector</artifactId>
	<packaging>pom</packaging>

	<name>Hardware Sentry OpenTelemetry Collector</name>
	<description>A custom OpenTelemetry Collector that runs Hardware Sentry Agent and exports to various formats and platforms</description>

	<properties>

		<!-- Sentry Skin Version (to be used in site.xml and therefore be consistent with the Velocity Tool artifact!) -->
		<sentrySkinVersion>5.0</sentrySkinVersion>

		<!-- OpenTelemetry Collector Version -->
		<otelVersion>0.45.0</otelVersion>

		<!-- commitId is displayed as Last Commit ID in the about.html page of the documentation -->
		<commitId>${buildNumber}</commitId>

	</properties>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>hws-agent</artifactId>
			<version>${project.version}</version>
			<classifier>dist</classifier>
			<type>zip</type>
		</dependency>
	</dependencies>

	<build>

		<plugins>

			<!-- resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-go-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/hws-otel-collector</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/go</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- mvn-golang-wrapper -->
			<plugin>
				<groupId>com.igormaznitsa</groupId>
				<artifactId>mvn-golang-wrapper</artifactId>
				<version>2.3.9</version>
				<extensions>true</extensions>
				<configuration>
					<goVersion>1.17</goVersion>
				</configuration>

				<executions>

					<!-- go mod tidy -compat=1.17 -->
					<!-- Ensure that the go.mod file matches the source code in the module -->
					<execution>
						<phase>compile</phase>
						<id>mod-tidy</id>
						<goals>
							<goal>mod</goal>
						</goals>
						<configuration>
							<sources>${project.build.directory}/hws-otel-collector/collector</sources>
							<command>tidy</command>
							<arguments>
								<argument>-compat=1.17</argument>
							</arguments>
							<env>
								<CGO_ENABLED>0</CGO_ENABLED>
							</env>
						</configuration>
					</execution>

					<!-- go mod download all -->
					<!-- Download the named modules into the module cache -->
					<execution>
						<phase>compile</phase>
						<id>mod-download-all</id>
						<goals>
							<goal>mod</goal>
						</goals>
						<configuration>
							<sources>${project.build.directory}/hws-otel-collector/collector</sources>
							<command>download</command>
							<arguments>
								<argument>all</argument>
							</arguments>
							<env>
								<CGO_ENABLED>0</CGO_ENABLED>
							</env>
						</configuration>
					</execution>

					<!-- go build -buildmode=default -ldflags -s -w -o target\windows-amd64\hws-otel-collector.exe -trimpath -->
					<!-- Build the Windows-AMD64 collector -->
					<execution>
						<phase>compile</phase>
						<id>build-win</id>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<sources>${project.build.directory}/hws-otel-collector/collector</sources>
							<resultFolder>${project.build.directory}/windows-amd64</resultFolder>
							<resultName>${project.artifactId}.exe</resultName>
							<ldFlags>
								<ldFlag>-s</ldFlag>
								<ldFlag>-w</ldFlag>
							</ldFlags>
							<buildFlags>
								<buildFlag>-trimpath</buildFlag>
							</buildFlags>
							<targetOs>windows</targetOs>
							<targetArch>amd64</targetArch>
							<env>
								<CGO_ENABLED>0</CGO_ENABLED>
							</env>
						</configuration>
					</execution>

					<!-- go build -buildmode=default -ldflags -s -w -o target/linux-amd64/hws-otel-collector -trimpath -->
					<!-- Build the Linux-AMD64 collector -->
					<execution>
						<phase>compile</phase>
						<id>build-linux</id>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<sources>${project.build.directory}/hws-otel-collector/collector</sources>
							<resultFolder>${project.build.directory}/linux-amd64</resultFolder>
							<resultName>${project.artifactId}</resultName>
							<ldFlags>
								<ldFlag>-s</ldFlag>
								<ldFlag>-w</ldFlag>
							</ldFlags>
							<buildFlags>
								<buildFlag>-trimpath</buildFlag>
							</buildFlags>
							<targetOs>linux</targetOs>
							<targetArch>amd64</targetArch>
							<env>
								<CGO_ENABLED>0</CGO_ENABLED>
							</env>
						</configuration>
					</execution>

					<!-- go build -buildmode=default -ldflags -s -w -o target/darwin-arm64/hws-otel-collector -trimpath -->
					<!-- Build the Darwin-ARM64 collector -->
					<execution>
						<phase>compile</phase>
						<id>build-darwin</id>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<sources>${project.build.directory}/hws-otel-collector/collector</sources>
							<resultFolder>${project.build.directory}/darwin-arm64</resultFolder>
							<resultName>${project.artifactId}</resultName>
							<ldFlags>
								<ldFlag>-s</ldFlag>
								<ldFlag>-w</ldFlag>
							</ldFlags>
							<buildFlags>
								<buildFlag>-trimpath</buildFlag>
							</buildFlags>
							<targetOs>darwin</targetOs>
							<targetArch>arm64</targetArch>
							<env>
								<CGO_ENABLED>0</CGO_ENABLED>
							</env>
						</configuration>
					</execution>

				</executions>

			</plugin>

			<!-- site -->
			<!-- Configuration of the site plugin, to also generate automatic reports (Reference Guide, etc.)
				 and leverage the Sentry Maven Skin (which requires the "Velocity Tools", i.e. Java code that
				 handles most advanced parsing operations -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<configuration>
					<generateReports>true</generateReports>
					<generateProjectInfo>false</generateProjectInfo>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
					<relativizeDecorationLinks>true</relativizeDecorationLinks>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.sentrysoftware.doc</groupId>
						<artifactId>sentry-skin-velocity-tools</artifactId>
						<version>${sentrySkinVersion}</version>
					</dependency>
				</dependencies>
				<executions>
					<!-- package -->
					<!-- Create the documentation at the same time we package the KM -->
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>site</goal>
							<goal>jar</goal>
						</goals>
						<configuration>
							<attach>true</attach>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- assembly -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>

					<!-- Windows-AMD64 -->
					<execution>
						<id>dist-windows-amd64</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/windows-amd64.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

					<!-- Linux-AMD64 -->
					<execution>
						<id>dist-linux-amd64</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/linux-amd64.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

					<!-- MacOS-ARM64 -->
					<execution>
						<id>dist-darwin-arm64</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/macos-arm64.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

				</executions>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>

			<!-- Disable the project-info-report plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<reportSets>
					<reportSet>
						<configuration>
							<skip>true</skip>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- The Connector Reference -->
			<plugin>
				<groupId>com.sentrysoftware.maven</groupId>
				<artifactId>hdf-maven-plugin</artifactId>
				<configuration>
					<sourceDirectory>${project.basedir}/../matrix-connectors/target/dependency</sourceDirectory>
					<terminology>otel</terminology>
				</configuration>
			</plugin>

			<!-- about-maven-plugin -->
			<!-- Force the JQL to include issues from MSHW and HC projects -->
			<plugin>
				<groupId>com.sentrysoftware.maven</groupId>
				<artifactId>about-maven-plugin</artifactId>
				<configuration>
					<jql>
<![CDATA[
(
	(
		project = HWS
		AND fixVersion > 0.9
		AND fixVersion <= ${formattedVersion.majorVersion}.${formattedVersion.minorVersion}.${formattedVersion.incrementalVersion}
	)
	OR
	(
		project = HC
		AND fixVersion > 25
		AND fixVersion <= ${formattedHcVersion.majorVersion}
	)
)
AND issuetype in standardIssueTypes()
ORDER BY priority DESC, created ASC
]]>
					</jql>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
