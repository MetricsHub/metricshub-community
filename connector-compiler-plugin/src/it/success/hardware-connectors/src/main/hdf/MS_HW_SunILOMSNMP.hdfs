//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//           Hardware Sentry KM for PATROL
//
//                 by Sentry Software (c)
//
//             MS_HW_SunILOMSNMP.hdf
//
//         Supports: Sun Blade server via ILOM (SNMP)
//
//

// HEADER

hdf.DisplayName="Oracle/Sun ILOM (SNMP)"
hdf.TypicalPlatform="Oracle/Sun"
hdf.ReliesOn="Sun/Oracle ILOM SNMP Agent"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring for the Sun/Oracle Blade servers with ILOM cards via SNMP"
hdf.RemoteSupport="true"
hdf.LocalSupport="false"
hdf.AppliesToOS="OOB,Storage,Network"
hdf.Supersedes="MS_HW_SunILOMSSH.hdf"

// DETECTION
// Does a get_next to see if there that there is come chassis information

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGet="1.3.6.1.4.1.42.2.70.101.1.1.2.1.5.1"
Detection.Criteria(1).ForceSerialization=1

//
// ENCLOSURES
//
//
// Discovery

// Get the Sensor Type table.
// SensorID;SensorType;SensorClass;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,1,2"
Enclosure.Discovery.Source(1).ForceSerialization=1

// Get the Sensor Status table.
// SensorID;Status;
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="ID,3"
Enclosure.Discovery.Source(2).ForceSerialization=1

// Get the LED Status table.
// SensorID;LEDState;
Enclosure.Discovery.Source(3).Type="SnmpTable"
Enclosure.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.12.1"
Enclosure.Discovery.Source(3).SnmpTableSelectColumns="ID,2"
Enclosure.Discovery.Source(3).ForceSerialization=1

// Translate the LEDStatus into a Normal Status
// SensorID;LEDState;
Enclosure.Discovery.Source(3).Compute(1).Type="Translate"
Enclosure.Discovery.Source(3).Compute(1).Column=2
Enclosure.Discovery.Source(3).Compute(1).TranslationTable="LEDStatusTranslationTable"

// Add Columns to match Sensor table (5)
// SensorID;SensorType;SensorClass;SensorID;LEDState;
Enclosure.Discovery.Source(3).Compute(2).Type="RightConcat"
Enclosure.Discovery.Source(3).Compute(2).Column=1
Enclosure.Discovery.Source(3).Compute(2).String=";;LED;"


// Get the Numeric Sensors table.
// SensorID;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Discovery.Source(4).Type="SnmpTable"
Enclosure.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Enclosure.Discovery.Source(4).SnmpTableSelectColumns="ID,4,8,9,10,11,2"
Enclosure.Discovery.Source(4).ForceSerialization=1

// Let's build up tables 2,3 and 4 into a single sensor table
// SensorID;SensorType;SensorClass;SensorID;Status;
Enclosure.Discovery.Source(5).Type="TableJoint"
Enclosure.Discovery.Source(5).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(5).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(5).LeftKeyColumn=1
Enclosure.Discovery.Source(5).RightKeyColumn=1
Enclosure.Discovery.Source(5).DefaultRightLine=";;"

// Combine the Status and LEDStatus tables (Sensors should only be in one, with priority to the LED table)
// SensorID;SensorType;SensorClass;SensorID;Status;
Enclosure.Discovery.Source(6).Type="TableUnion"
Enclosure.Discovery.Source(6).Table1=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Source(6).Table2=%Enclosure.Discovery.Source(5)%


// SensorID;SensorType;SensorClass;SensorID;Status;SensorID;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;
Enclosure.Discovery.Source(7).Type="TableJoint"
Enclosure.Discovery.Source(7).LeftTable=%Enclosure.Discovery.Source(6)%
Enclosure.Discovery.Source(7).RightTable=%Enclosure.Discovery.Source(4)%
Enclosure.Discovery.Source(7).LeftKeyColumn=1
Enclosure.Discovery.Source(7).RightKeyColumn=1
Enclosure.Discovery.Source(7).DefaultRightLine=";;;;;;"

// Remove extra SensorId
//      1        2          3         5      7           8       9       10     11     12
// SensorID;SensorType;SensorClass;Status;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Discovery.Source(7).Compute(1).Type="KeepColumns"
Enclosure.Discovery.Source(7).Compute(1).ColumnNumbers="1,2,3,5,7,8,9,10,11,12"

// Get the Sensor FRU list table.
// SensorID;PhysDesc;ParentID;Class;Name;Firmware;SerialNumber;Manufacturer;Model;
Enclosure.Discovery.Source(8).Type="SnmpTable"
Enclosure.Discovery.Source(8).SnmpTableOid="1.3.6.1.2.1.47.1.1.1.1"
Enclosure.Discovery.Source(8).SnmpTableSelectColumns="ID,2,4,5,7,9,11,12,13"
Enclosure.Discovery.Source(8).ForceSerialization=1

// Now Attach Each Sensor to the FRU info
// SensorID;PhysDesc;ParentID;Class;Name;Firmware;SerialNumber;Manufacturer;Model;SensorID;SensorType;SensorClass;Status;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Discovery.Source(9).Type="TableJoint"
Enclosure.Discovery.Source(9).LeftTable=%Enclosure.Discovery.Source(8)%
Enclosure.Discovery.Source(9).RightTable=%Enclosure.Discovery.Source(7)%
Enclosure.Discovery.Source(9).LeftKeyColumn=1
Enclosure.Discovery.Source(9).RightKeyColumn=1
Enclosure.Discovery.Source(9).DefaultRightLine=";;;;;;;;;"

// Awk the table to process the Sensors
// MSHW_CLASS;.....
Enclosure.Discovery.Source(9).Compute(1).Type="Awk"
Enclosure.Discovery.Source(9).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Discovery.Source(9).Compute(1).KeepOnlyRegExp="^MSHW"

// Make a copy for Enclosure Discovery
// MSHW_CLASS;.....
Enclosure.Discovery.Source(10)=%Enclosure.Discovery.Source(9)%

// Keep Only Enclosure
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;ChassisConsumedPower;
Enclosure.Discovery.Source(10).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(10).Compute(1).Column=1
Enclosure.Discovery.Source(10).Compute(1).RegExp="MSHW_ENC"

// Instance Table
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;ChassisConsumedPower;
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(10)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Enclosure.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(6)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(7)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Enclosure.Discovery.Instance.FirmwareVersion=InstanceTable.Column(4)
Enclosure.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(8)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)
Enclosure.Discovery.Instance.ParameterActivation.PowerConsumption=InstanceTable.Column(12)

//
// Collect

// Collect type is mono-instance
Enclosure.Collect.Type="MultiInstance"

// The StatusTranslationTable
// Translating to other numbers to prevent script from crashing
// Numbers are higher than "7" which is OK for normal status
// Thus will be ignored unless translated in main script.
// LED 1 = Unknown
LEDStatusTranslationTable(1)=""
// LED 2 = Off   Translating to 8
LEDStatusTranslationTable(2)="8"
// LED 3 = Steady  Translating to 9
LEDStatusTranslationTable(3)="9"
// LED 4 = Alternating  Translating to 10
LEDStatusTranslationTable(4)="10"
LEDStatusTranslationTable(Default)=""


// Get the Sensor Type table.
// SensorID;SensorType;SensorClass;
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.6.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="ID,1,2"
Enclosure.Collect.Source(1).ForceSerialization=1

// Get the Sensor Status table.
// SensorID;Status;
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.2.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="ID,3"
Enclosure.Collect.Source(2).ForceSerialization=1

// Get the LED Status table.
// SensorID;State;
Enclosure.Collect.Source(3).Type="SnmpTable"
Enclosure.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.12.1"
Enclosure.Collect.Source(3).SnmpTableSelectColumns="ID,2"
Enclosure.Collect.Source(3).ForceSerialization=1

// Translate the LEDStatus into a Normal Status
// SensorID;State;
Enclosure.Collect.Source(3).Compute(1).Type="Translate"
Enclosure.Collect.Source(3).Compute(1).Column=2
Enclosure.Collect.Source(3).Compute(1).TranslationTable="LEDStatusTranslationTable"

// Add Columns to match Sensor table (5)
// SensorID;SensorType;SensorClass;SensorID;State;
Enclosure.Collect.Source(3).Compute(2).Type="RightConcat"
Enclosure.Collect.Source(3).Compute(2).Column=1
Enclosure.Collect.Source(3).Compute(2).String=";;LED;"


// Get the Numeric Sensors table.
// SensorID;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Collect.Source(4).Type="SnmpTable"
Enclosure.Collect.Source(4).SnmpTableOid="1.3.6.1.4.1.42.2.70.101.1.1.8.1"
Enclosure.Collect.Source(4).SnmpTableSelectColumns="ID,4,8,9,10,11,2"
Enclosure.Collect.Source(4).ForceSerialization=1

// Let's build up tables 2,3 and 4 into a single sensor table
// SensorID;SensorType;SensorClass;SensorID;Status;
Enclosure.Collect.Source(5).Type="TableJoint"
Enclosure.Collect.Source(5).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(5).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(5).LeftKeyColumn=1
Enclosure.Collect.Source(5).RightKeyColumn=1
Enclosure.Collect.Source(5).DefaultRightLine=";;"

// Combine the Status and LEDStatus tables (Sensors should only be in one, with priority to the LED table)
// SensorID;SensorType;SensorClass;SensorID;Status;
Enclosure.Collect.Source(6).Type="TableUnion"
Enclosure.Collect.Source(6).Table1=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(6).Table2=%Enclosure.Collect.Source(5)%


// SensorID;SensorType;SensorClass;SensorID;Status;SensorID;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Collect.Source(7).Type="TableJoint"
Enclosure.Collect.Source(7).LeftTable=%Enclosure.Collect.Source(6)%
Enclosure.Collect.Source(7).RightTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(7).LeftKeyColumn=1
Enclosure.Collect.Source(7).RightKeyColumn=1
Enclosure.Collect.Source(7).DefaultRightLine=";;;;;;"

// Remove extra SensorId
//      1        2          3         5      7           8       9       10     11      12
// SensorID;SensorType;SensorClass;Status;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Collect.Source(7).Compute(1).Type="KeepColumns"
Enclosure.Collect.Source(7).Compute(1).ColumnNumbers="1,2,3,5,7,8,9,10,11,12"

// Get the Sensor FRU list table.
// SensorID;PhysDesc;ParentID;Class;Name;Firmware;SerialNumber;Manufacturer;Model;
Enclosure.Collect.Source(8).Type="SnmpTable"
Enclosure.Collect.Source(8).SnmpTableOid="1.3.6.1.2.1.47.1.1.1.1"
Enclosure.Collect.Source(8).SnmpTableSelectColumns="ID,2,4,5,7,9,11,12,13"
Enclosure.Collect.Source(8).ForceSerialization=1

// Now Attach Each Sensor to the FRU info
// SensorID;PhysDesc;ParentID;Class;Name;Firmware;SerialNumber;Manufacturer;Model;SensorID;SensorType;SensorClass;Status;CurrentValue;LowerNC;UpperNC;LowerC;UpperC;Exponent;
Enclosure.Collect.Source(9).Type="TableJoint"
Enclosure.Collect.Source(9).LeftTable=%Enclosure.Collect.Source(8)%
Enclosure.Collect.Source(9).RightTable=%Enclosure.Collect.Source(7)%
Enclosure.Collect.Source(9).LeftKeyColumn=1
Enclosure.Collect.Source(9).RightKeyColumn=1
Enclosure.Collect.Source(9).DefaultRightLine=";;;;;;;;;"

// Awk the table to process the Sensors
// MSHW_CLASS;.....
Enclosure.Collect.Source(9).Compute(1).Type="Awk"
Enclosure.Collect.Source(9).Compute(1).AwkScript=EmbeddedFile(1)
Enclosure.Collect.Source(9).Compute(1).KeepOnlyRegExp="^MSHW"

// Make a copy for Enclosure Discovery
// MSHW_CLASS;.....
Enclosure.Collect.Source(10)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;MSHWNUMERIC[ID];PowerConsumption;
Enclosure.Collect.Source(10).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(10).Compute(1).Column=1
Enclosure.Collect.Source(10).Compute(1).RegExp="MSHW_ENC"


// Then we translate DMTF's OperationStatus code into OK/WARN/ALARM (for the Status parameter)
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;PatrolStatus;StatusInformation;SensorList;MSHWNUMERIC[ID];PowerConsumption;
Enclosure.Collect.Source(10).Compute(2).Type="ArrayTranslate"
Enclosure.Collect.Source(10).Compute(2).Column=8
Enclosure.Collect.Source(10).Compute(2).TranslationTable="StatusTranslationTable"

// The StatusTranslationTable
StatusTranslationTable(1)="ALARM"
StatusTranslationTable(2)="ALARM"
StatusTranslationTable(3)="WARN"
StatusTranslationTable(4)="ALARM"
StatusTranslationTable(5)="WARN"
StatusTranslationTable(6)="WARN"
StatusTranslationTable(7)="OK"
StatusTranslationTable(Default)="UNKNOWN"

// Then we consolodate the Status Codes into a Single Status
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;PatrolStatus;StatusInformation;SensorList;MSHWNUMERIC[ID];PowerConsumption;
Enclosure.Collect.Source(10).Compute(3).Type="Convert"
Enclosure.Collect.Source(10).Compute(3).Column=8
Enclosure.Collect.Source(10).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_ENC;SensorID;Name;Firmware;SerialNumber;Manufacturer;Model;PatrolStatus;StatusInformation;SensorList;MSHWNUMERIC[ID];PowerConsumption;
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(10)%
Enclosure.Collect.DeviceID=ValueTable.Column(2)
Enclosure.Collect.Status=ValueTable.Column(8)
Enclosure.Collect.StatusInformation=ValueTable.Column(9)
Enclosure.Collect.PowerConsumption=ValueTable.Column(12)


// Temperatures

// Discovery
//
Temperature.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only Temperature Sensors
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=1
Temperature.Discovery.Source(1).Compute(1).ValueList="MSHW_TEMP"

// InstanceTable = Source(1)
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Temperature.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(4)
Temperature.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)
Temperature.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)

//
// Collect

// Collect type is mono-instance
Temperature.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
Temperature.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).ValueList="MSHW_TEMP"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Temperature.Collect.Source(1).Compute(2).Column=7
Temperature.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Collect.Source(1).Compute(3).Type="Convert"
Temperature.Collect.Source(1).Compute(3).Column=7
Temperature.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_TEMP;SensorID;Name;CurrentValue;UpperNC;UpperC;Status;StatusInformation;SensorList;
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(4)
Temperature.Collect.Status=ValueTable.Column(7)
Temperature.Collect.StatusInformation=ValueTable.Column(8)


// Fans

// Discovery
//
Fan.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only Fan Sensors
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=1
Fan.Discovery.Source(1).Compute(1).ValueList="MSHW_FAN"


// InstanceTable = Source(1)
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Fan.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(8)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(9)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(7)
Fan.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(4)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)

//
// Collect

// Collect type is mono-instance
Fan.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
Fan.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Collect.Source(1).Compute(1).Column=1
Fan.Collect.Source(1).Compute(1).ValueList="MSHW_FAN"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Fan.Collect.Source(1).Compute(2).Column=4
Fan.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Collect.Source(1).Compute(3).Type="Convert"
Fan.Collect.Source(1).Compute(3).Column=4
Fan.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_FAN;SensorID;Name;Status;StatusInformation;SensorList;CurrentValue;LowerNC;LowerC;
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Speed=ValueTable.Column(7)
Fan.Collect.Status=ValueTable.Column(4)
Fan.Collect.StatusInformation=ValueTable.Column(5)

// PowerSupplys

// Discovery
//
PowerSupply.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only PowerSupply Sensors
// MSHW_PSU;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=1
PowerSupply.Discovery.Source(1).Compute(1).ValueList="MSHW_PSU"

// MSHW_PSU;SensorID;Name;SerialNumber: <serialNumber>;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Discovery.Source(1).Compute(2).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(2).Column=4
PowerSupply.Discovery.Source(1).Compute(2).String="Serial Number: "

// MSHW_PSU;SensorID;Name;SerialNumber: <serialNumber>;Manufacturer;Model: <Model>;Status;StatusInformation;SensorList;
PowerSupply.Discovery.Source(1).Compute(3).Type="LeftConcat"
PowerSupply.Discovery.Source(1).Compute(3).Column=6
PowerSupply.Discovery.Source(1).Compute(3).String="Model: "

// InstanceTable = Source(1)
// MSHW_PSU;SensorID;Name;SerialNumber: <serialNumber>;Manufacturer;Model: <Model>;Status;StatusInformation;Sensor List: <SensorList>;
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PowerSupply.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(4)
PowerSupply.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(6)
PowerSupply.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(9)

//
// Collect

// Collect type is mono-instance
PowerSupply.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
PowerSupply.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_PSU;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Collect.Source(1).Compute(1).Column=1
PowerSupply.Collect.Source(1).Compute(1).ValueList="MSHW_PSU"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_PSU;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PowerSupply.Collect.Source(1).Compute(2).Column=7
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_PSU;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Collect.Source(1).Compute(3).Type="Convert"
PowerSupply.Collect.Source(1).Compute(3).Column=7
PowerSupply.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_PSU;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(2)
PowerSupply.Collect.Status=ValueTable.Column(7)
PowerSupply.Collect.StatusInformation=ValueTable.Column(8)



// Voltages

// Discovery
//
Voltage.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only Voltage Sensors
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column=1
Voltage.Discovery.Source(1).Compute(1).ValueList="MSHW_VOLT"

// InstanceTable = Source(1)
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Voltage.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(6)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(4)
Voltage.Discovery.Instance.ParameterActivation.Status=InstanceTable.Column(7)
Voltage.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)

//
// Collect

// Collect type is mono-instance
Voltage.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
Voltage.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Voltage.Collect.Source(1).Compute(1).Column=1
Voltage.Collect.Source(1).Compute(1).ValueList="MSHW_VOLT"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Voltage.Collect.Source(1).Compute(2).Column=7
Voltage.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Collect.Source(1).Compute(3).Type="Convert"
Voltage.Collect.Source(1).Compute(3).Column=7
Voltage.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_VOLT;SensorID;Name;CurrentValue;LowerNC;UpperNC;Status;StatusInformation;SensorList;
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Voltage=ValueTable.Column(4)
Voltage.Collect.Status=ValueTable.Column(7)
Voltage.Collect.StatusInformation=ValueTable.Column(8)


// Memorys

// Discovery
//
Memory.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only Memory Sensors
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=1
Memory.Discovery.Source(1).Compute(1).ValueList="MSHW_MEM"

// InstanceTable = Source(1)
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(2)
Memory.Discovery.Instance.DisplayID=InstanceTable.Column(3)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(6)
Memory.Discovery.Instance.Size=InstanceTable.Column(4)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(5)
Memory.Discovery.Instance.Model=InstanceTable.Column(7)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(10)

//
// Collect

// Collect type is mono-instance
Memory.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
Memory.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Memory.Collect.Source(1).Compute(1).Column=1
Memory.Collect.Source(1).Compute(1).ValueList="MSHW_MEM"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Collect.Source(1).Compute(2).Type="ArrayTranslate"
Memory.Collect.Source(1).Compute(2).Column=8
Memory.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Collect.Source(1).Compute(3).Type="Convert"
Memory.Collect.Source(1).Compute(3).Column=8
Memory.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_MEM;SensorID;Name;Size;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(2)
Memory.Collect.Status=ValueTable.Column(8)
Memory.Collect.StatusInformation=ValueTable.Column(9)

// CPUs

// Discovery
//
CPU.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only CPU Sensors
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=1
CPU.Discovery.Source(1).Compute(1).ValueList="MSHW_CPU"

// InstanceTable = Source(1)
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(2)
CPU.Discovery.Instance.DisplayID=InstanceTable.Column(3)
CPU.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)

//
// Collect

// Collect type is mono-instance
CPU.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
CPU.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
CPU.Collect.Source(1).Compute(1).Column=1
CPU.Collect.Source(1).Compute(1).ValueList="MSHW_CPU"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Collect.Source(1).Compute(2).Type="ArrayTranslate"
CPU.Collect.Source(1).Compute(2).Column=4
CPU.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Collect.Source(1).Compute(3).Type="Convert"
CPU.Collect.Source(1).Compute(3).Column=4
CPU.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_CPU;SensorID;Name;Status;StatusInformation;SensorList;
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.DeviceID=ValueTable.Column(2)
CPU.Collect.Status=ValueTable.Column(4)
CPU.Collect.StatusInformation=ValueTable.Column(5)

// OtherDevices

// Discovery
//
OtherDevice.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only OtherDevice Sensors
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).ValueList="MSHW_OTHER"

// InstanceTable = Source(1)
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(4)
OtherDevice.Discovery.Instance.Type=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)


//
// Collect

// Collect type is mono-instance
OtherDevice.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
OtherDevice.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
OtherDevice.Collect.Source(1).Compute(1).Column=1
OtherDevice.Collect.Source(1).Compute(1).ValueList="MSHW_OTHER"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Collect.Source(1).Compute(2).Type="ArrayTranslate"
OtherDevice.Collect.Source(1).Compute(2).Column=5
OtherDevice.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Collect.Source(1).Compute(3).Type="Convert"
OtherDevice.Collect.Source(1).Compute(3).Column=5
OtherDevice.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_OTHER;PhysDesc;SensorID;Name;Status;StatusInformation;SensorList;
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.DeviceID=ValueTable.Column(3)
OtherDevice.Collect.Status=ValueTable.Column(5)
OtherDevice.Collect.StatusInformation=ValueTable.Column(6)

// PhysicalDisk

// Discovery
//
PhysicalDisk.Discovery.Source(1)=%Enclosure.Discovery.Source(9)%

// Keep Only PhysicalDisk Sensors
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Discovery.Source(1).Compute(1).Column=1
PhysicalDisk.Discovery.Source(1).Compute(1).ValueList="MSHW_PHYDISK"

// InstanceTable = Source(1)
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.DisplayID=InstanceTable.Column(3)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(9)

//
// Collect

// Collect type is mono-instance
PhysicalDisk.Collect.Type="MultiInstance"

// Make a copy for Enclosure Collect
// MSHW_CLASS;.....
PhysicalDisk.Collect.Source(1)=%Enclosure.Collect.Source(9)%

// Keep Only Enclosure
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PhysicalDisk.Collect.Source(1).Compute(1).Column=1
PhysicalDisk.Collect.Source(1).Compute(1).ValueList="MSHW_PHYDISK"

// Then we translate Status code into OK/WARN/ALARM (for the Status parameter)
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Collect.Source(1).Compute(2).Type="ArrayTranslate"
PhysicalDisk.Collect.Source(1).Compute(2).Column=7
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="StatusTranslationTable"

// Then we consolodate the Status Codes into a Single Status
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Collect.Source(1).Compute(3).Type="Convert"
PhysicalDisk.Collect.Source(1).Compute(3).Column=7
PhysicalDisk.Collect.Source(1).Compute(3).ConversionType="Array2SimpleStatus"

// ValueTable = Source(1)
// MSHW_PHYDISK;SensorID;Name;SerialNumber;Manufacturer;Model;Status;StatusInformation;SensorList;
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(2)
PhysicalDisk.Collect.Status=ValueTable.Column(7)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(8)



////////////////////////////////////////////////////////
///
///    E M B E D D E D   F I L E ! ! !
///
///    EmbeddedFile(1) = Sensor Processing AWK
///
/////////////////////////////////////////////////////////
EmbeddedFile(1):
BEGIN { FS="[;]"; ChassisFound=-1; }
function AppendStatus(StatusID) {
	if (Status != "") {
		PrintArray[StatusID] = 1
		StatusArray[StatusID] = StatusArray[StatusID] "|" Status
		SensorArray[StatusID] = SensorArray[StatusID] " " Name

		if (Status < 7) {
			StatusInformation[StatusID] = StatusInformation[StatusID] " " Name
		}
  }
	# For numeric sensors we initialize Status to ensure that the sensors are printed.
}

function createMSHWPRINT(MSHWCLASS,ID) {
	# Before we start, lets see if we can reclassify MSHW_OTHER devices by their name
	if (MSHWCLASS ~ /MSHW_OTHER/) {

		#Unwanted Sensors - Set Status to Null
		if (Name ~ /.OK2RM$/ ) { Status = ""}

		#CPU
		if ( Name ~ /MB.P[0-9]+$/ ) { MSHWCLASS = "MSHW_CPU" }

		#ENC

		#NETWORK

		#PHYDISK
		if ( Name ~ /HDD[0-9]/ ) { MSHWCLASS = "MSHW_PHYDISK" }

		#PSU
		if ( Name ~ /SYS.PS_FAULT/ ) { MSHWCLASS = "MSHW_PSU" }
		if ( Name ~ /SYS.PS[0-9]/ ) { MSHWCLASS = "MSHW_PSU" }

		#OTHER

		#FAN
		if ( Name ~ /FM[0-9]/ ) { MSHWCLASS = "MSHW_FAN" }
		if ( Name ~ /SYS.FAN_FAULT]/ ) { MSHWCLASS = "MSHW_FAN" }
		if ( Name ~ /FANBD]/ ) { MSHWCLASS = "MSHW_FAN" }

		#VOLT

		#TEMP
		if ( Name ~ /TEMP_FAULT/ ) { MSHWCLASS = "MSHW_TEMP" }

		#MEM
		if ( Name ~ /DIMM/ ) { MSHWCLASS = "MSHW_MEM" }
		if ( Name ~ /MB.P[0-9]+.D[0-9]+.SERVICE/ ) { MSHWCLASS = "MSHW_MEM" }

		#LED
		if ( Name ~ /LOCATE/ ) { MSHWCLASS = "MSHW_LED" }
		if ( Name ~ /^.SYS.OK$]/ ) { MSHWCLASS = "MSHW_LED" }
	}

	# Now let's reclassify troublesome sensors
	if (MSHWCLASS ~ /MSHW_ENC/ && Name ~ /SYS.MIDPLANE/) { MSHWCLASS = "MSHW_OTHER" }
	if (MSHWCLASS ~ /MSHW_ENC/ && Name ~ /SYS.IOCFG/) { MSHWCLASS = "MSHW_OTHER" }
	# Print by class
	if (MSHWCLASS ~ /MSHW_CPU/) {
		functionreturns = "MSHW_CPU;"ID";"Name";"
	}
	else if (MSHWCLASS ~ /MSHW_ENC/) {
	  # The model number for Enclosure is not very good, let's use the PhysDesc
	  Model = PhysDesc;
	  functionreturns = "MSHW_ENC;"ID";"Name";"Firmware";"SerialNumber";"Manufacturer";"Model";"
	}
	else if (MSHWCLASS ~ /MSHW_NETWORK/) { functionreturns = "MSHW_NETWORK;"ID";"Name";" }
	else if (MSHWCLASS ~ /MSHW_PHYDISK/) { functionreturns = "MSHW_PHYDISK;"ID";"Name";"SerialNumber";"Manufacturer";"Model";" }
	else if (MSHWCLASS ~ /MSHW_PSU/) { functionreturns = "MSHW_PSU;"ID";"Name";"SerialNumber";"Manufacturer";"Model";" }
	else if (MSHWCLASS ~ /MSHW_OTHER/) { functionreturns = "MSHW_OTHER;"PhysDesc";"ID";"Name";" }
	else if (MSHWCLASS ~ /MSHW_FAN/) { functionreturns = "MSHW_FAN;"ID";"Name";" }
	else if (MSHWCLASS ~ /MSHW_VOLT/) {
	  if ( LowerNC != "") { LowerNC = LowerNC * 1000 }
	  if ( UpperNC != "") { UpperNC = UpperNC * 1000 }
	  if ( CurrentValue != "") { CurrentValue = CurrentValue * 1000 }

		functionreturns = "MSHW_VOLT;"ID";"Name";"CurrentValue";"LowerNC";"UpperNC";"
	}
	else if (MSHWCLASS ~ /MSHW_TEMP/) { functionreturns = "MSHW_TEMP;"ID";"Name";"CurrentValue";"UpperNC";"UpperC";" }
	else if (MSHWCLASS ~ /MSHW_MEM/) { functionreturns = "MSHW_MEM;"ID";"Name";"Size";"SerialNumber";"Manufacturer";"Model";" }
	else if (MSHWCLASS ~ /MSHW_LED/) {}
	else {functionreturns = "ERROR UNKNOWN CLASS"}
	return functionreturns
}

# MAIN AWK

NF > 8 && $1 ~ /^[0-9]+$/ {
	# Deal with the numeric exponent
	Exponent     = $19
	if (Exponent == -3) { Exponent = 0.001 }
	else if (Exponent == -2) { Exponent = 0.01 }
	else if (Exponent == -1) { Exponent = 0.1 }
	else if (Exponent == 0) { Exponent = 1 }
	else if (Exponent == 1) { Exponent = 10 }
	else if (Exponent == 2) { Exponent = 100 }
	else if (Exponent == 3) { Exponent = 1000 }
	else {Exponent = 1}

	SensorID     = $1
	PhysDesc     = $2
	ParentID     = $3
	Class        = $4
	Name         = $5
	Firmware     = $6
	SerialNumber = $7
	Manufacturer = $8
	Model        = $9
#	SensorType   = $11
	SensorClass  = $12
	Status       = $13
	CurrentValue = $14 ; CurrentValue = CurrentValue * Exponent
	LowerNC      = $15 ; LowerNC = LowerNC * Exponent ; if (LowerNC==0) {LowerNC = ""}
	UpperNC      = $16 ; UpperNC = UpperNC * Exponent ; if (UpperNC==0) {UpperNC = ""}
	LowerC       = $17 ; LowerC = LowerC * Exponent ; if (LowerC==0) {LowerC = ""}
	UpperC       = $18 ; UpperC = UpperC * Exponent ; if (UpperC==0) {UpperC = ""}

	# 1 - Other
	if (Class == 1) {
		if ( PhysDesc ~ /^BIOS/ ) {
			PhysDesc = "BIOS"
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
			AppendStatus(SensorID)
		}
		else if ( PhysDesc ~ /^Network/ ) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_NETWORK",SensorID)
			AppendStatus(SensorID)
		}
		else if ( PhysDesc ~ /^Processor/ || PhysDesc ~ /^Host Processor/ ) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_CPU",SensorID)
			AppendStatus(SensorID) ;
		}
		else if ( PhysDesc ~ /^CPU Core/ ) {
			AppendStatus(ParentID)

			# Create a Child ID in case the Parent is not found
      MSHWCHILDPRINT[ParentID] = createMSHWPRINT("MSHW_OTHER",ParentID)
      coreParentID[SensorID]=ParentID
		}
		else if ( PhysDesc ~ /^L1 Bank/ ) {
			# add another layer of parenting
			coreParentID[SensorID]=coreParentID[ParentID]
			AppendStatus(coreParentID[ParentID])
		}
		else if ( PhysDesc ~ /^[ID]Cache/ ) {
			# add another layer of parenting
			coreParentID[SensorID]=coreParentID[ParentID] ;
			AppendStatus(coreParentID[ParentID])
		}
		else if ( PhysDesc ~ /^L[0-9]+ Bank/ ) {
			# add another layer of parenting
			coreParentID[SensorID]=coreParentID[ParentID]  ;
			AppendStatus(coreParentID[ParentID]) ;
		}
		else if ( PhysDesc ~ /^Indicator/ ) {
			#These should be LEDs, so translate status
      # 8=Off  9=On 10=Blinking
      # to 2=Major 5=Warn 7=OK

			if ((Name ~ /FAULT$/) || (Name ~ /SERVICE$/) ) {
				if (Status == 8 ) { Status = 7}
				if (Status == 9 ) { Status = 2}
				if (Status == 10 ) { Status = 2}
			}
			if (Name ~ /OK$/ ) {
				if (Status == 8 ) { Status = 2}
				if (Status == 9 ) { Status = 7}
				if (Status == 10 ) { Status = 7}
			}
			if (Name ~ /OK2RM$/ ) {
				if (Status == 8 ) { Status = 7}
				if (Status == 9 ) { Status = 5}
				if (Status == 10 ) { Status = 5}
			}
			AppendStatus(ParentID)
			# Create a Child ID in case the Parent is not found
			MSHWCHILDPRINT[ParentID] = createMSHWPRINT("MSHW_OTHER",ParentID)
    }
		else {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
			AppendStatus(SensorID)
		}
	}

	# 2 - Unknown
	if (Class == 2) {
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
		AppendStatus(SensorID)
	}

	# 3 - Chassis
	if (Class == 3) {
		ChassisFound = SensorID
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_ENC",SensorID)
		AppendStatus(SensorID)
		PrintArray[SensorID] = 1
	}

	# 4 - Backplane
	if (Class == 4) {
		PhysDesc = "Backplane"
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
		AppendStatus(SensorID)
	}

	# 5 - Container
	if (Class == 5) {
		if ( PhysDesc ~ /Motherboard/ ) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
			AppendStatus(SensorID)
		}
		else if ( PhysDesc ~ /Disk/ ) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_PHYDISK",SensorID)
			AppendStatus(SensorID)
		}
		else {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)
		}
	}

	# 6 - PowerSupply
	if (Class == 6) {
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_PSU",SensorID)
		AppendStatus(SensorID)
	}

	# 7 - Fan
	if (Class == 7) {
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_FAN",SensorID)
		AppendStatus(SensorID)
	}

	# 8 - Sensor
	if (Class == 8) {
		# Sensors to Ignore
		if (Name == "/SYS/PWRBS") { next }

		# Chassis Consumed Power Sum
		if (Name ~ /INPUT_POWER$/) {
			ChassisConsumedPower = ChassisConsumedPower + CurrentValue ;
			next
		}
		# 1 - Other - Attach it to its parent
		if (SensorClass == 1) {
			AppendStatus(ParentID)
			# Create a Child ID in case the Parent is not found
			MSHWCHILDPRINT[ParentID] = createMSHWPRINT("MSHW_OTHER",ParentID)
		}

		# 4 - Voltage
		if (SensorClass == 4) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_VOLT",SensorID)
			PrintArray[SensorID] = 1
			AppendStatus(SensorID)
		}

		# 3 - Temperature
		if (SensorClass == 3) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_TEMP",SensorID)
			PrintArray[SensorID] = 1
			AppendStatus(SensorID)
		}

		# 6 - Tachometer - Attach it to its parent - Set MSHWNUMERIC to add numeric columns to the end.
		if (SensorClass == 6) {
			MSHWNUMERIC[ParentID] = CurrentValue";"LowerNC";"LowerC";"
			PrintArray[ParentID] = 1
			AppendStatus(ParentID)
			# Create a Child ID in case the Parent is not found
			MSHWCHILDPRINT[ParentID] = createMSHWPRINT("MSHW_FAN",ParentID)
		}

		# 12 - Presence - Attach it to its parent
		if (SensorClass == 12) {
			# if there is a coreParentID, then attach it to that
			if ( coreParentID[ParentID] != "" ) {
				AppendStatus(coreParentID[ParentID])
			}
			else {
				AppendStatus(ParentID)
			}

			# Create a Child ID in case the Parent is not found
			MSHWCHILDPRINT[ParentID] = createMSHWPRINT("MSHW_OTHER",ParentID)
		}
	}

	# 9 - Module
	if (Class == 9) {
		if ( PhysDesc ~ /DIMM/ ) {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_MEM",SensorID)
			AppendStatus(SensorID) ;
		}
		else {
			MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_OTHER",SensorID)}
		}

	# 10 - Port (Not yet seen in debugs)
	if (Class == 10) {
		MSHWPRINT[SensorID] = createMSHWPRINT("MSHW_NETWORK",SensorID)
		AppendStatus(SensorID)
	}

	# 11 - Stack
	if (Class == 11) { }

	# 12 - CPU (Not yet seen in debugs)
	if (Class == 12) {
		MSHWPRINT[SensorID] =  createMSHWPRINT("MSHW_CPU",SensorID)
		AppendStatus(SensorID)
	}
}

END {
	for (ID in PrintArray) {
		# If we did not find a parent for a sensor
		if (MSHWPRINT[ID] == "") {
			MSHWPRINT[ID] = MSHWCHILDPRINT[ID]
		}
		if (ID == ChassisFound) {
			print MSHWPRINT[ID] StatusArray[ID] ";Alerting Sensors: " StatusInformation[ID] ";Sensors: " SensorArray[ID] ";" MSHWNUMERIC[ID] ";" ChassisConsumedPower ";"
		}
		else {
			print MSHWPRINT[ID] StatusArray[ID] ";Alerting Sensors: " StatusInformation[ID] ";Sensors: " SensorArray[ID] ";" MSHWNUMERIC[ID]
		}
	}

	if (ChassisFound == -1) {
		print "MSHW_ENC;1;/SYS;;;;;"
	}
}
EmbeddedFile(1).End
/////////////////////////////////////////////////////////////////////////////
