////////////////////////////////////////////////////////////////#
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//           Hardware Sentry KM for PATROL
//
//                 by Sentry Software (c)
//
//
//      Supports: IBM Director Agents version 4.x
//                on Linux
//
//

// This .HDF monitors IBM xSeries and Netfinity computers under Linux
// It uses the IBM Director Agent information
// The IBM Director Agent information is retrieved through WBEM

#include MS_HW_CIMProcessorFamily.hhdf

// Header

hdf.DisplayName="IBM Director Agent 4.x - Linux"
hdf.TypicalPlatform="IBM xSeries"
hdf.ReliesOn="IBM Director Agent 4.x"
hdf.Version="1.1"
hdf.Comments="This connector provides hardware monitoring through the IBM Director Agent version 4.x which supports some (not all) xSeries servers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="Linux"

// Constant
Constant.PathToCimCli="/opt/IBM/director/CIMOM/bin"

// Sudo-able commands
Sudo(1).Command="/opt/IBM/director/CIMOM/bin/cimcli"


// Detection

// OS must be Windows
Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="Linux"

// The WBEM layer (cimserver) must be running
Detection.Criteria(2).Type="Process"
Detection.Criteria(2).ProcessCommandLine="cimserver"

// The cimcli utility must be present
Detection.Criteria(3).Type="OSCommand"
Detection.Criteria(3).CommandLine="ls /opt/IBM/director/CIMOM/bin/cimcli"
Detection.Criteria(3).ExpectedResult="^/opt/IBM/director/CIMOM/bin/cimcli$"

// Verify that the root/ibmsd WBEM namespace actually exists
Detection.Criteria(4).Type="WBEM"
Detection.Criteria(4).WbemNameSpace="root"
Detection.Criteria(4).WbemQuery="SELECT Name FROM __NAMESPACE"
Detection.Criteria(4).ExpectedResult="^ibmsd;$"

// The IBMPSG_ComputerSystemDetails WBEM class must be instantiated
Detection.Criteria(5).Type="WBEM"
Detection.Criteria(5).WbemNameSpace="root/ibmsd"
Detection.Criteria(5).WbemQuery="SELECT Name FROM IBMPSG_ComputerSystemDetails"
Detection.Criteria(5).ErrorMessage="The IBM Director Agent seems to not be working properly. Please reinstall the IBM Director Agent."

// Enclosure: computer

// Source(1) = the IBMPSG_ComputerSystemDetails WBEM class
Enclosure.Discovery.Source(1).Type="WBEM"
Enclosure.Discovery.Source(1).WbemNameSpace="root/ibmsd"
Enclosure.Discovery.Source(1).WbemQuery="SELECT Vendor, Model, SerialNumber FROM IBMPSG_ComputerSystemDetails"

// Extract the first 4 chars of the Model field (which is actually a number)
Enclosure.Discovery.Source(1).Compute(1).Type="Substring"
Enclosure.Discovery.Source(1).Compute(1).Column="2"
Enclosure.Discovery.Source(1).Compute(1).Start="1"
Enclosure.Discovery.Source(1).Compute(1).Length="4"

// Translate the model number into a more readable string
Enclosure.Discovery.Source(1).Compute(2).Type="Translate"
Enclosure.Discovery.Source(1).Compute(2).Column="2"
Enclosure.Discovery.Source(1).Compute(2).TranslationTable="ModelTranslationTable"

// InstanceTable = Source(1)
// Note: InstanceTable must contain only one line!
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID="DIR4"
Enclosure.Discovery.Instance.Vendor=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Enclosure.Discovery.Instance.Type="Computer"

// Collect

Enclosure.Collect.Type="MonoInstance"

// Source(1) = The IBMPSG_SystemEnclosure WBEM class
Enclosure.Collect.Source(1).Type="WBEM"
Enclosure.Collect.Source(1).WbemQuery="SELECT IntrusionStatus,Tag FROM IBMPSG_SystemEnclosure"
Enclosure.Collect.Source(1).WbemNameSpace="root/ibmsd"

Enclosure.Collect.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Collect.Source(1).Compute(1).Column="2"
Enclosure.Collect.Source(1).Compute(1).RegExp="0$"

Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column="1"
Enclosure.Collect.Source(1).Compute(2).TranslationTable="enclosureIntrusionStatusTranslationTable"

Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.IntrusionStatus=ValueTable.Column(1)

enclosureIntrusionStatusTranslationTable(0)="OK"
enclosureIntrusionStatusTranslationTable(1)="OK"
enclosureIntrusionStatusTranslationTable(2)="ALARM"

// CPUs

// Discovery

// CurrentClockSpeed,DeviceID,Manufacturer,Family
cpu.Discovery.Source(1).Type="WBEM"
cpu.Discovery.Source(1).WbemQuery="SELECT CurrentClockSpeed,DeviceID,Family,Manufacturer FROM IBMPSG_Processor"
cpu.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// Translate the Family number into a model name
cpu.Discovery.Source(1).Compute(1).Type="Translate"
cpu.Discovery.Source(1).Compute(1).Column="3"
cpu.Discovery.Source(1).Compute(1).TranslationTable="cpuFamilyTranslationTable"

// Replace GenuineIntel by Intel and AuthenticAMD by AMD
cpu.Discovery.Source(1).Compute(2).Type="Replace"
cpu.Discovery.Source(1).Compute(2).Column="4"
cpu.Discovery.Source(1).Compute(2).Replace="GenuineIntel"
cpu.Discovery.Source(1).Compute(2).ReplaceBy="Intel"

cpu.Discovery.Source(1).Compute(3).Type="Replace"
cpu.Discovery.Source(1).Compute(3).Column="4"
cpu.Discovery.Source(1).Compute(3).Replace="AuthenticAMD"
cpu.Discovery.Source(1).Compute(3).ReplaceBy="AMD"

// InstanceTable = Source(1)
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(2)
cpu.Discovery.Instance.Vendor=InstanceTable.Column(4)
cpu.Discovery.Instance.Model=InstanceTable.Column(3)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(1)
cpu.Discovery.Instance.AttachedToDeviceID="DIR4"
cpu.Discovery.Instance.AttachedToDeviceType="Computer"

// Collect

cpu.Collect.Type="MultiInstance"

// Source(1) = The IBMPSG_Processor WBEM class
cpu.Collect.Source(1).Type="WBEM"
cpu.Collect.Source(1).WbemQuery="SELECT DeviceID,CPUStatus FROM IBMPSG_Processor"
cpu.Collect.Source(1).WbemNameSpace="root/ibmsd"

cpu.Collect.Source(1).Compute(1).Type="DuplicateColumn"
cpu.Collect.Source(1).Compute(1).Column="2"

cpu.Collect.Source(1).Compute(2).Type="Translate"
cpu.Collect.Source(1).Compute(2).Column="2"
cpu.Collect.Source(1).Compute(2).TranslationTable="cpuStatusTranslationTable"

cpu.Collect.Source(1).Compute(3).Type="Translate"
cpu.Collect.Source(1).Compute(3).Column="3"
cpu.Collect.Source(1).Compute(3).TranslationTable="cpuStatusInformationTranslationTable"

cpu.Collect.ValueTable=%cpu.Collect.Source(1)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(2)
cpu.Collect.StatusInformation=ValueTable.Column(3)

// The cpuStatusTranslationTable
cpuStatusTranslationTable(1)="OK"
cpuStatusTranslationTable(2)="OK"
cpuStatusTranslationTable(3)="ALARM"
cpuStatusTranslationTable(4)="OK"
cpuStatusTranslationTable(7)="OK"
cpuStatusTranslationTable("OK")="OK"
cpuStatusTranslationTable(Default)="UNKNOWN"

// The cpuStatusInformationTranslationTable
cpuStatusInformationTranslationTable(1)=""
cpuStatusInformationTranslationTable(2)="Disabled by User"
cpuStatusInformationTranslationTable(3)="Disabled by BIOS (POST Error)"
cpuStatusInformationTranslationTable(4)="Idle"
cpuStatusInformationTranslationTable(7)="Other status"
cpuStatusInformationTranslationTable("OK")=""
cpuStatusInformationTranslationTable(Default)="Unknown Status"

// The cpuStatusTranslationTable
//cpuStatusTranslationTable("OK")="OK"
//cpuStatusTranslationTable("Error")="ALARM"
//cpuStatusTranslationTable("Degraded")="WARN"
//cpuStatusTranslationTable("Pred Fail")="WARN"
//cpuStatusTranslationTable("Starting")="WARN"
//cpuStatusTranslationTable("Stopping")="WARN"
//cpuStatusTranslationTable("Service")="WARN"
//cpuStatusTranslationTable("Stressed")="WARN"
//cpuStatusTranslationTable("NonRecover")="ALARM"
//cpuStatusTranslationTable("No Contact")="WARN"
//cpuStatusTranslationTable("Lost Comm")="WARN"
//cpuStatusTranslationTable("Stopped")="OK"
//cpuStatusTranslationTable(default)="OK"

// The cpuStatusInformationTranslationTable
//cpuStatusInformationTranslationTable("OK")=""
//cpuStatusInformationTranslationTable("Error")="Error"
//cpuStatusInformationTranslationTable("Degraded")="Degraded"
//cpuStatusInformationTranslationTable("Pred Fail")="Predicted Failure"
//cpuStatusInformationTranslationTable("Starting")="Starting"
//cpuStatusInformationTranslationTable("Stopping")="Stopping"
//cpuStatusInformationTranslationTable("Service")="Service"
//cpuStatusInformationTranslationTable("Stressed")="Stressed"
//cpuStatusInformationTranslationTable("NonRecover")="Non Recover"
//cpuStatusInformationTranslationTable("No Contact")="No Contact"
//cpuStatusInformationTranslationTable("Lost Comm")="Lost Communication"
//cpuStatusInformationTranslationTable("Stopped")="Stopped"
//cpuStatusInformationTranslationTable(default)="Unknown status"

// Memory

// Discovery
Memory.Discovery.Source(1).Type="WBEM"
Memory.Discovery.Source(1).WbemQuery="SELECT Capacity,BankLabel,SerialNumber,Tag,TypeDetail FROM IBMPSG_PhysicalMemory"
Memory.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// Convert size to MB
Memory.Discovery.Source(1).Compute(1).Type="Divide"
Memory.Discovery.Source(1).Compute(1).Column="1"
Memory.Discovery.Source(1).Compute(1).DivideBy="1048576"

// Translate memory type
Memory.Discovery.Source(1).Compute(2).Column="5"
Memory.Discovery.Source(1).Compute(2).Type="PerBitTranslation"
Memory.Discovery.Source(1).Compute(2).BitList="1,2,3,4,5,6,7,8,9,10,11,12,13"
Memory.Discovery.Source(1).Compute(2).BitTranslationTable="MemoryBitTranslationTable"

// InstanceTable = Source(1)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(4)
Memory.Discovery.Instance.Size=InstanceTable.Column(1)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(2)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(3)
Memory.Discovery.Instance.Type=InstanceTable.Column(5)
Memory.Discovery.Instance.AttachedToDeviceID="DIR4"
Memory.Discovery.Instance.AttachedToDeviceType="computer"

MemoryBitTranslationTable(1,1)="Reserved"
MemoryBitTranslationTable(2,1)="Other type"
MemoryBitTranslationTable(3,1)="Unknown type"
MemoryBitTranslationTable(4,1)="Fast-paged"
MemoryBitTranslationTable(5,1)="Static column"
MemoryBitTranslationTable(6,1)="Pseudo-static"
MemoryBitTranslationTable(7,1)="Rambus"
MemoryBitTranslationTable(8,1)="Synchronous"
MemoryBitTranslationTable(9,1)="CMOS"
MemoryBitTranslationTable(10,1)="EDO"
MemoryBitTranslationTable(11,1)="DRAM"
MemoryBitTranslationTable(12,1)="Cache DRAM"
MemoryBitTranslationTable(13,1)="Non-volatile"

// Collect

Memory.Collect.Type="MultiInstance"

// Source(1) = The IBMPSG_Processor WBEM class
Memory.Collect.Source(1).Type="WBEM"
Memory.Collect.Source(1).WbemQuery="SELECT HasError,Tag FROM IBMPSG_PhysicalMemory"
Memory.Collect.Source(1).WbemNameSpace="root/ibmsd"

Memory.Collect.Source(1).Compute(1).Type="Translate"
Memory.Collect.Source(1).Compute(1).Column="1"
Memory.Collect.Source(1).Compute(1).TranslationTable="memoryStatusTranslationTable"

Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(2)
Memory.Collect.Status=ValueTable.Column(1)

// The memoryStatusTranslationTable
memoryStatusTranslationTable("FALSE")="OK"
memoryStatusTranslationTable("TRUE")="ALARM"

// Fans

// Discovery

// Source(1) = the IBMPSG_Fan WBEM class
Fan.Discovery.Source(1).Type="WBEM"
Fan.Discovery.Source(1).WbemQuery="SELECT DeviceID, FanType, UpperThresholdCritical FROM IBMPSG_Tachometer"
Fan.Discovery.Source(1).WbemNameSpace="root/ibmsd"
Fan.Discovery.Source(1).Compute(1).Type="Translate"
Fan.Discovery.Source(1).Compute(1).Column="2"
Fan.Discovery.Source(1).Compute(1).TranslationTable="FanTypeTranslationTable"

// InstanceTable = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(2)
// We got a "warning" threshold
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
// We have no "alarm" threshold hence we set it to 0 (zero) ( = stopped)
Fan.Discovery.Instance.AlarmThreshold="0"
// Remark, we won't get any status information, so these thresholds are the only
// way to send alerts about fans
Fan.Discovery.Instance.AttachedToDeviceID="DIR4"
Fan.Discovery.Instance.AttachedToDeviceType="Computer"

// The FanTypeTranslationTable
FanTypeTranslationTable(1)="System"
FanTypeTranslationTable(2)="Power-Supply"
FanTypeTranslationTable(3)="CPU"
FanTypeTranslationTable(default)=""

// Collect

// The collect (as all WBEM-based collects) is "MultiInstance"
Fan.Collect.Type="MultiInstance"

// Source(1) = The IBMPSG_Tachometer WBEM class
Fan.Collect.Source(1).Type="WBEM"
Fan.Collect.Source(1).WbemQuery="SELECT CurrentReading,DeviceID FROM IBMPSG_Tachometer"
Fan.Collect.Source(1).WbemNameSpace="root/ibmsd"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(2)
Fan.Collect.Speed=ValueTable.Column(1)
// No status is collected

// Temperatures

// Discovery

// Source(1) = The IBMPSG_TemperatureSensor WBEM class
Temperature.Discovery.Source(1).Type="WBEM"
Temperature.Discovery.Source(1).WbemQuery="SELECT DeviceID, LowerThresholdCritical, LowerThresholdNonCritical, TempLocation FROM IBMPSG_TemperatureSensor"
Temperature.Discovery.Source(1).WbemNameSpace="root/ibmsd"
Temperature.Discovery.Source(1).Compute(1).Type="Translate"
Temperature.Discovery.Source(1).Compute(1).Column="4"
Temperature.Discovery.Source(1).Compute(1).TranslationTable="TemperatureTypeTranslationTable"

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(4)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(3)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(2)
Temperature.Discovery.Instance.AttachedToDeviceID="DIR4"
Temperature.Discovery.Instance.AttachedToDeviceType="Computer"

// Collect

// Like all WBEM collects, this one is "MultiInstance"
Temperature.Collect.Type="MultiInstance"

// Source(1) = the IBMPSG_TemperatureSensor WBEM class
Temperature.Collect.Source(1).Type="WBEM"
Temperature.Collect.Source(1).WbemQuery="SELECT CurrentReading,DeviceID FROM IBMPSG_TemperatureSensor"
Temperature.Collect.Source(1).WbemNameSpace="root/ibmsd"

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(2)
Temperature.Collect.Temperature=ValueTable.Column(1)

// The TemperatureTypeTranslationTable
TemperatureTypeTranslationTable(1)="Motherboard"
TemperatureTypeTranslationTable(2)="CPU"
TemperatureTypeTranslationTable(3)="Power Supply"
TemperatureTypeTranslationTable(4)="DASD"
TemperatureTypeTranslationTable(default)=""

// Voltages

// Discovery

// Source(1) = all the instances of the IBMPSG_VoltageSensor class
Voltage.Discovery.Source(1).Type="Wbem"
Voltage.Discovery.Source(1).WbemQuery="SELECT DeviceID,LowerThresholdNonCritical,UpperThresholdNonCritical,VoltageType FROM IBMPSG_VoltageSensor"
Voltage.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// Translate the voltage type into a more readable string
Voltage.Discovery.Source(1).Compute(1).Type="Translate"
Voltage.Discovery.Source(1).Compute(1).Column="4"
Voltage.Discovery.Source(1).Compute(1).TranslationTable="VoltageTypeTranslationTable"

// Here is the instance table = source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(4)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(2)
Voltage.Discovery.Instance.AttachedToDeviceID="DIR4"
Voltage.Discovery.Instance.AttachedToDeviceType="Computer"

// The VoltageTypeTranslationTable
VoltageTypeTranslationTable(0)=""
VoltageTypeTranslationTable(1)="+2.5a V"
VoltageTypeTranslationTable(2)="+2.5b V"
VoltageTypeTranslationTable(3)="+3.3 V"
VoltageTypeTranslationTable(4)="+5 V"
VoltageTypeTranslationTable(5)="+12 V"
VoltageTypeTranslationTable(6)="-12 V"
VoltageTypeTranslationTable(7)="-5 V"
VoltageTypeTranslationTable(8)="VIO"
VoltageTypeTranslationTable(9)="Vcore"
VoltageTypeTranslationTable(10)="Bus"
VoltageTypeTranslationTable(11)="+1.25 V"
VoltageTypeTranslationTable(12)="+1.5 V"
VoltageTypeTranslationTable(13)="+18 V"
VoltageTypeTranslationTable(14)="+1.8 V"
VoltageTypeTranslationTable(15)="Remote +12 V"
VoltageTypeTranslationTable(16)="Remote -12 V"
VoltageTypeTranslationTable(17)="Remote +5 V"
VoltageTypeTranslationTable(18)="Remote +3.3 V"
VoltageTypeTranslationTable(19)="Remote +2.5 V"
VoltageTypeTranslationTable(20)="Remote +1.25 V"
VoltageTypeTranslationTable(21)="Remote +1.5 V"
VoltageTypeTranslationTable(22)="Remote +18 V"
VoltageTypeTranslationTable(23)="Remote +1.8 V"
VoltageTypeTranslationTable(Default)=""

// Collect

// It's a "MultiInstance" collect
Voltage.Collect.Type="MultiInstance"

// Source(1) = the IBMPSG_VoltageSensor class
Voltage.Collect.Source(1).Type="Wbem"
Voltage.Collect.Source(1).WbemQuery="SELECT CurrentReading,DeviceID FROM IBMPSG_VoltageSensor"
Voltage.Collect.Source(1).WbemNameSpace="root/ibmsd"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(2)
Voltage.Collect.Voltage=ValueTable.Column(1)

//  Power supplies

// Discovery

// Source(1) = The IBMPSG_PowerSupply table
PowerSupply.Discovery.Source(1).Type="Wbem"
PowerSupply.Discovery.Source(1).WbemQuery="SELECT DeviceID FROM IBMPSG_PowerSupply"
PowerSupply.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// The instance table:
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID="DIR4"
PowerSupply.Discovery.Instance.AttachedToDeviceType="Computer"


// Collect

// Collect type : multi instance (one source for several instances)
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = the simple IBMPSG_PowerSupply table/class
// DeviceID;WBEMStatus
PowerSupply.Collect.Source(1).Type="Wbem"
PowerSupply.Collect.Source(1).WbemQuery="SELECT DeviceID,Status FROM IBMPSG_PowerSupply"
PowerSupply.Collect.Source(1).WbemNameSpace="root/ibmsd"

// Duplicate the status column
// DeviceID;WBEMStatus;WBEMStatus
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="2"

// Translate the first WBEM status column into a PATROL status
// DeviceID;PatrolStatus;WBEMStatus
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="2"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable("OK")="OK"
PowerSupplyStatusTranslationTable("Error")="ALARM"
PowerSupplyStatusTranslationTable("Degraded")="WARN"
PowerSupplyStatusTranslationTable("Pred Fail")="WARN"
PowerSupplyStatusTranslationTable("Starting")="WARN"
PowerSupplyStatusTranslationTable("Stopping")="WARN"
PowerSupplyStatusTranslationTable("Service")="WARN"
PowerSupplyStatusTranslationTable("Stressed")="WARN"
PowerSupplyStatusTranslationTable("NonRecover")="ALARM"
PowerSupplyStatusTranslationTable("No Contact")="WARN"
PowerSupplyStatusTranslationTable("Lost Comm")="WARN"
PowerSupplyStatusTranslationTable("Stopped")="OK"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// Translate the second WBEM status column into a PATROL status
// DeviceID;PatrolStatus;StatusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="3"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable("OK")=""
PowerSupplyStatusInformationTranslationTable("Error")="Error"
PowerSupplyStatusInformationTranslationTable("Degraded")="Degraded"
PowerSupplyStatusInformationTranslationTable("Pred Fail")="Predicted Failure"
PowerSupplyStatusInformationTranslationTable("Starting")="Starting"
PowerSupplyStatusInformationTranslationTable("Stopping")="Stopping"
PowerSupplyStatusInformationTranslationTable("Service")="Service"
PowerSupplyStatusInformationTranslationTable("Stressed")="Stressed"
PowerSupplyStatusInformationTranslationTable("NonRecover")="Non Recover"
PowerSupplyStatusInformationTranslationTable("No Contact")="No Contact"
PowerSupplyStatusInformationTranslationTable("Lost Comm")="Lost Communication"
PowerSupplyStatusInformationTranslationTable("Stopped")="Stopped"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// The ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(2)
PowerSupply.Collect.StatusInformation=ValueTable.Column(3)

// Disk controllers

// Based on the IBMPSG_RAIDController WBEM class
// This class includes all RAID controllers  and the more specific IBM ServerRAID controllers
// The ControllerID property will be used to identify the controller in the PhysicalDisk and
// LogicalDisk discoveries
DiskController.Discovery.Source(1).Type="WBEM"
DiskController.Discovery.Source(1).WbemQuery="SELECT BIOSVersion, ControllerID, DeviceID, DriverVersion, FirmwareVersion, Manufacturer, Model FROM IBMPSG_RAIDController"
DiskController.Discovery.Source(1).WbemNameSpace="root/ibmsd"

DiskController.Discovery.InstanceTable=%DiskController.Discovery.Source(1)%
DiskController.Discovery.Instance.Vendor=InstanceTable.Column(6)
DiskController.Discovery.Instance.Model=InstanceTable.Column(7)
DiskController.Discovery.Instance.DeviceID=InstanceTable.Column(3)
DiskController.Discovery.Instance.BiosVersion=InstanceTable.Column(1)
DiskController.Discovery.Instance.DriverVersion=InstanceTable.Column(4)
DiskController.Discovery.Instance.FirmwareVersion.InstanceTable.Column(5)
DiskController.Discovery.Instance.ControllerNumber=InstanceTable.Column(2)
DiskController.Discovery.Instance.AttachedToDeviceID="DIR4"
DiskController.Discovery.Instance.AttachedToDeviceType="Computer"

//  Physical disks

// Discovery

// We use 2 WBEM classes:
// - IBMPSG_RAIDDiskDrive (that includes the ControllerID information)
// - IBMPSG_PhysicalDiskDrive (that includes Model, Manufacturer, Size, etc.)
// These two tables will be joint on IBMPSG_RaidDiskDrive.DeviceID = IBMPSG_PhysicalDiskDrive.Tag
// Except that IBMPSG_RAIDDiskDrive.Device looks like "IBM:ServeRAID:ControllerID:1:ChannelID:1:DiskDriveID:5:DiskDrive"
// and that IBMPSG_PhysicalDiskDrive.Tag looks like "IBM:ServeRAID:ControllerID:1:ChannelID:1:DeviceID:5:DiskDrive"
// Very similar isn't it? Look carefully: there is "DiskDriveID" in one, and "DeviceID" in the other. Tricky, mmmh?
// So we'll replace the "DiskDriveID" work by "DeviceID" in order to join the two tables

// Source(1) = IBMPSG_RAIDDiskDrive table
PhysicalDisk.Discovery.Source(1).Type="WBEM"
PhysicalDisk.Discovery.Source(1).WbemQuery="SELECT ControllerID,DeviceID,DiskDriveID FROM IBMPSG_RAIDDiskDrive"
PhysicalDisk.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// Source(2) = IBMPSG_PhysicalDiskDrive table
PhysicalDisk.Discovery.Source(2).Type="WBEM"
PhysicalDisk.Discovery.Source(2).WbemQuery="SELECT Capacity,Manufacturer,Model,SerialNumber,Tag FROM IBMPSG_PhysicalDiskDrive"
PhysicalDisk.Discovery.Source(2).WbemNameSpace="root/ibmsd"

// Replace :DiskDriveID: by :DeviceID: in the IBMPSG_RAIDDiskDrive table
PhysicalDisk.Discovery.Source(1).Compute(1).Type="Replace"
PhysicalDisk.Discovery.Source(1).Compute(1).Column="2"
PhysicalDisk.Discovery.Source(1).Compute(1).Replace=":DeviceID:"
PhysicalDisk.Discovery.Source(1).Compute(1).ReplaceBy=":DiskDriveID:"

// Replace :DiskDriveID: by :DeviceID: in the IBMPSG_PhysicalDiskDrive table
// (yes, normally it is already done, but in fact, we cannot trust the IBM Director
// development team... ;-)
PhysicalDisk.Discovery.Source(2).Compute(1).Type="Replace"
PhysicalDisk.Discovery.Source(2).Compute(1).Column="5"
PhysicalDisk.Discovery.Source(2).Compute(1).Replace=":DeviceID:"
PhysicalDisk.Discovery.Source(2).Compute(1).ReplaceBy=":DiskDriveID:"

// Source(3) = The jointure
PhysicalDisk.Discovery.Source(3).Type="TableJoint"
PhysicalDisk.Discovery.Source(3).LeftTable=%PhysicalDisk.Discovery.Source(1)%
PhysicalDisk.Discovery.Source(3).RightTable=%PhysicalDisk.Discovery.Source(2)%
PhysicalDisk.Discovery.Source(3).LeftKeyColumn="2"
PhysicalDisk.Discovery.Source(3).RightKeyColumn="5"

// Finally here is the instance table...
// InstanceTable = ControllerID,DeviceID,DiskDriveID,Capacity,Manufacturer,Model,SerialNumber,Tag
PhysicalDisk.Discovery.InstanceTable=%PhysicalDisk.Discovery.Source(3)%
PhysicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(2)
PhysicalDisk.Discovery.Instance.Vendor=InstanceTable.Column(5)
PhysicalDisk.Discovery.Instance.Model=InstanceTable.Column(6)
PhysicalDisk.Discovery.Instance.Size=InstanceTable.Column(4)
PhysicalDisk.Discovery.Instance.SerialNumber=InstanceTable.Column(7)
PhysicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)

// Collect

// The physical disk collect is a "MultiInstance" collect
// Only ONE WBEM query will be done in order to get the information for all physical disks
// Less WBEM queries gives faster results
PhysicalDisk.Collect.Type="MultiInstance"

// Source(1) = the only source = the IBMPSG_RAIDDiskDrive table
PhysicalDisk.Collect.Source(1).Type="Wbem"
PhysicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,State FROM IBMPSG_RAIDDiskDrive"
PhysicalDisk.Collect.Source(1).WbemNameSpace="root/ibmsd"

// We must duplicate the "State" column
PhysicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PhysicalDisk.Collect.Source(1).Compute(1).Column="2"

// Then we translate the IBMPSG status code into OK/WARN/ALARM (for the Status parameter)
PhysicalDisk.Collect.Source(1).Compute(2).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(2).Column="2"
PhysicalDisk.Collect.Source(1).Compute(2).TranslationTable="PhysicalDiskStatusTranslationTable"

// And finally, we translate the IBMPSG status code into a more readable status string
PhysicalDisk.Collect.Source(1).Compute(3).Type="Translate"
PhysicalDisk.Collect.Source(1).Compute(3).Column="3"
PhysicalDisk.Collect.Source(1).Compute(3).TranslationTable="PhysicalDiskStatusInformationTranslationTable"

// Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
PhysicalDisk.Collect.ValueTable=%PhysicalDisk.Collect.Source(1)%
PhysicalDisk.Collect.DeviceID=ValueTable.Column(1)
PhysicalDisk.Collect.Status=ValueTable.Column(2)
PhysicalDisk.Collect.StatusInformation=ValueTable.Column(3)

// The PhysicalDiskStatusTranslationTable
PhysicalDiskStatusTranslationTable(0)="OK"
PhysicalDiskStatusTranslationTable(1)="OK"
PhysicalDiskStatusTranslationTable(4)="WARN"
PhysicalDiskStatusTranslationTable(5)="OK"
PhysicalDiskStatusTranslationTable(8)="ALARM"
PhysicalDiskStatusTranslationTable(129)="OK"
PhysicalDiskStatusTranslationTable(133)="OK"
PhysicalDiskStatusTranslationTable(137)="OK"
PhysicalDiskStatusTranslationTable(139)="WARN"
PhysicalDiskStatusTranslationTable(254)="OK"
PhysicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The PhysicalDiskStatusInformationTranslationTable
PhysicalDiskStatusInformationTranslationTable(0)="Empty"
PhysicalDiskStatusInformationTranslationTable(1)="Standby"
PhysicalDiskStatusInformationTranslationTable(4)="Defunct Hot Spare"
PhysicalDiskStatusInformationTranslationTable(5)="Standby Hot Spare"
PhysicalDiskStatusInformationTranslationTable(8)="Defunct"
PhysicalDiskStatusInformationTranslationTable(129)="Ready"
PhysicalDiskStatusInformationTranslationTable(133)="Hot Spare"
PhysicalDiskStatusInformationTranslationTable(137)="Online"
PhysicalDiskStatusInformationTranslationTable(139)="Rebuild"
PhysicalDiskStatusInformationTranslationTable(254)="Reserved"
PhysicalDiskStatusInformationTranslationTable(Default)="Unknown Status"

// Logical disks

// Discovery

// Source(1) = the only source = the IBMPSG_RAIDLogicalDrive table
LogicalDisk.Discovery.Source(1).Type="Wbem"
LogicalDisk.Discovery.Source(1).WbemQuery="SELECT ControllerID,DataSpace,DeviceID,RAIDLevel FROM IBMPSG_RAIDLogicalDrive"
LogicalDisk.Discovery.Source(1).WbemNameSpace="root/ibmsd"

// Convert the DataSpace column (MB) in bytes
LogicalDisk.Discovery.Source(1).Compute(1).Type="Multiply"
LogicalDisk.Discovery.Source(1).Compute(1).Column="2"
LogicalDisk.Discovery.Source(1).Compute(1).MultiplyBy="1048576"

// Here is the instance table
LogicalDisk.Discovery.InstanceTable=%LogicalDisk.Discovery.Source(1)%
LogicalDisk.Discovery.Instance.DeviceID=InstanceTable.Column(3)
LogicalDisk.Discovery.Instance.Size=InstanceTable.Column(2)
LogicalDisk.Discovery.Instance.RaidLevel=InstanceTable.Column(4)
LogicalDisk.Discovery.Instance.ControllerNumber=InstanceTable.Column(1)

// Collect

// It's a "MultiInstance" collect
// One WBEM query will be executed in order to get the info for all the logical drives
// Much faster!
LogicalDisk.Collect.Type="MultiInstance"

// Source(1) = the only source = the IBMPSG_RAIDLogicalDrive table
LogicalDisk.Collect.Source(1).Type="Wbem"
LogicalDisk.Collect.Source(1).WbemQuery="SELECT DeviceID,State FROM IBMPSG_RAIDLogicalDrive"
LogicalDisk.Collect.Source(1).WbemNameSpace="root/ibmsd"

// Duplicate the State column (because it'll be translated two times)
LogicalDisk.Collect.Source(1).Compute(1).Type="DuplicateColumn"
LogicalDisk.Collect.Source(1).Compute(1).Column="2"

// Translate the IBMPSG State column (the first one) into OK/WARN/ALARM
LogicalDisk.Collect.Source(1).Compute(2).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(2).Column="2"
LogicalDisk.Collect.Source(1).Compute(2).TranslationTable="LogicalDiskStatusTranslationTable"

// Translate the IBMPSG State column (the second one) into a more readable status information string
LogicalDisk.Collect.Source(1).Compute(3).Type="Translate"
LogicalDisk.Collect.Source(1).Compute(3).Column="3"
LogicalDisk.Collect.Source(1).Compute(3).TranslationTable="LogicalDiskStatusInformationTranslationTable"

// Now, here is the ValueTable: DeviceID;OK/WARN/ALARM;Status information
LogicalDisk.Collect.ValueTable=%LogicalDisk.Collect.Source(1)%
LogicalDisk.Collect.DeviceID=ValueTable.Column(1)
LogicalDisk.Collect.Status=ValueTable.Column(2)
LogicalDisk.Collect.StatusInformation=ValueTable.Column(3)

// The LogicalDiskStatusTranslationTable
LogicalDiskStatusTranslationTable(0)="OK"
LogicalDiskStatusTranslationTable(2)="ALARM"
LogicalDiskStatusTranslationTable(3)="OK"
LogicalDiskStatusTranslationTable(4)="WARN"
LogicalDiskStatusTranslationTable(5)="OK"
LogicalDiskStatusTranslationTable(6)="OK"
LogicalDiskStatusTranslationTable(20)="WARN"
LogicalDiskStatusTranslationTable(36)="WARN"
LogicalDiskStatusTranslationTable(Default)="UNKNOWN"

// The LogicalDiskStatusInformationTranslationTable
LogicalDiskStatusInformationTranslationTable(0)="Free"
LogicalDiskStatusInformationTranslationTable(2)="Offline"
LogicalDiskStatusInformationTranslationTable(3)=""
LogicalDiskStatusInformationTranslationTable(4)="Critical"
LogicalDiskStatusInformationTranslationTable(5)="Migration"
LogicalDiskStatusInformationTranslationTable(6)="System"
LogicalDiskStatusInformationTranslationTable(20)="Critical Migration"
LogicalDiskStatusInformationTranslationTable(36)="Critical System"
LogicalDiskStatusInformationTranslationTable(Default)="Unknown Status"


// The ModelTranslationTable
// See http://www.satech.com/ibm-memory-ibm-netfinity-memory.html
ModelTranslationTable(1880)="xSeries 346"
ModelTranslationTable(8476)="Netfinity 3000"
ModelTranslationTable(8477)="Netfinity 1000"
ModelTranslationTable(8478)="xSeries 200"
ModelTranslationTable(8479)="xSeries 200"
ModelTranslationTable(8480)="xSeries 205"
ModelTranslationTable(8481)="xSeries 200"
ModelTranslationTable(8482)="xSeries 206"
ModelTranslationTable(8645)="xSeries 220"
ModelTranslationTable(8646)="xSeries 220"
ModelTranslationTable(8647)="xSeries 225"
ModelTranslationTable(8649)="xSeries 225"
ModelTranslationTable(8651)="Netfinity 7000"
ModelTranslationTable(8652)="Netfinity 4000R"
//ModelTranslationTable(8652)="Netfinity A100"
ModelTranslationTable(8653)="Netfinity 4000R"
//ModelTranslationTable(8653)="Netfinity A100"
ModelTranslationTable(8654)="xSeries 130/135/330"
ModelTranslationTable(8655)="Netfinity 3500 M10"
//ModelTranslationTable(8656)="Netfinity 4500R"
ModelTranslationTable(8656)="xSeries 340"
ModelTranslationTable(8657)="Netfinity 3500 M20"
//ModelTranslationTable(8658)="Netfinity 5100"
ModelTranslationTable(8658)="xSeries 150/230"
ModelTranslationTable(8659)="Netfinity 5000"
ModelTranslationTable(8660)="Netfinity 5500"
ModelTranslationTable(8661)="Netfinity 5500 M10"
ModelTranslationTable(8662)="Netfinity 5500 M20"
//ModelTranslationTable(8664)="Netfinity 5600"
ModelTranslationTable(8664)="xSeries 240"
//ModelTranslationTable(8665)="Netfinity 7600"
ModelTranslationTable(8665)="xSeries 250"
ModelTranslationTable(8666)="Netfinity 7100"
ModelTranslationTable(8668)="xSeries 232"
ModelTranslationTable(8669)="xSeries 342"
ModelTranslationTable(8670)="xSeries 345"
ModelTranslationTable(8671)="xSeries 235"
ModelTranslationTable(8672)="xSeries 130/135/300"
ModelTranslationTable(8673)="xSeries 305"
ModelTranslationTable(8674)="xSeries 330"
ModelTranslationTable(8675)="xSeries 330"
ModelTranslationTable(8676)="xSeries 335"
ModelTranslationTable(8678)="BladeCenter HS20"
ModelTranslationTable(8680)="Netfinity 7000 M10"
//ModelTranslationTable(8681)="Netfinity 8500R"
ModelTranslationTable(8681)="xSeries 370"
//ModelTranslationTable(8682)="Netfinity 6000R"
ModelTranslationTable(8682)="xSeries 350"
ModelTranslationTable(8683)="xSeries 380"
ModelTranslationTable(8685)="xSeries 255"
ModelTranslationTable(8686)="xSeries 360"
ModelTranslationTable(8687)="xSeries 440"
ModelTranslationTable(8688)="xSeries 450"
ModelTranslationTable(8827)="xSeries 343"
ModelTranslationTable(8832)="BladeCenter HS20"
ModelTranslationTable(8834)="xSeries 382"
ModelTranslationTable(8836)="xSeries 306"
ModelTranslationTable(8837)="xSeries 336"
ModelTranslationTable(8839)="BladeCenter HS40"
ModelTranslationTable(8840)="xSeries 346"
ModelTranslationTable(8841)="xSeries 236"
ModelTranslationTable(8842)="BladeCenter JS20"
ModelTranslationTable(8847)="xSeries 343"
ModelTranslationTable(8855)="xSeries 455"
ModelTranslationTable(8861)="xSeries 365"
ModelTranslationTable(8862)="xSeries 365"
ModelTranslationTable(8870)="xSeries 445"
