//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//           Hardware Sentry KM for PATROL
//
//                 by Sentry Software (c)
//
//                   MS_HW_CpMgServTru64
//
//      Supports: HP Insight Manager (Server Agent) on Tru64 (some specific stuff)
//
//

// HEADER

hdf.DisplayName="HP Insight Management Agent - Server (Alpha)"
hdf.TypicalPlatform="HP ProLiant"
hdf.ReliesOn="HP Insight Management Agents"
hdf.Version="1.0"
hdf.Comments="This connector adds Alpha-specific hardware monitoring through the HP Insight Manager (Server Agent)."
hdf.MSHWRequiredVersion="1.2"
hdf.RemoteSupport="true"
hdf.AppliesToOS="OSF1,VMS"

// DETECTION

Detection.Criteria(1).Type="OS"
Detection.Criteria(1).KeepOnly="OSF1,VMS,OOB"

Detection.Criteria(2).Type="SNMP"
Detection.Criteria(2).SnmpGetNext="1.3.6.1.4.1.232"

// Enclosure: nothing, supposed to have been discovered by the standard CpMgServNT.hdf connector

// FANS

// Fan discovery

// Source(1) = cpqHeThermalFanTable
// ID;Present;LocationCode
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.6.2.6.6.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,3,4"

// Keep only fans that are actually present
// ID;Present;LocationCode
Fan.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column=2
Fan.Discovery.Source(1).Compute(1).ValueList="2"

// Translate the location code into a location string
// ID;Present;Location
Fan.Discovery.Source(1).Compute(2).Type="Translate"
Fan.Discovery.Source(1).Compute(2).Column=3
Fan.Discovery.Source(1).Compute(2).TranslationTable="FanTypeTranslationTable"

// Instance table = source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(3)

// The FanTypeTranslationTable
FanTypeTranslationTable(2)="System"
FanTypeTranslationTable(3)="CPU"
FanTypeTranslationTable(default)=""


// Fan collect

// Fan collect type is : mono-instance
Fan.Collect.Type="MonoInstance"

// Collect the status of the fan
// fanStatus
Fan.Collect.Source(1).Type="SnmpGet"
Fan.Collect.Source(1).SnmpOid="1.3.6.1.4.1.232.6.2.6.6.1.5.%Fan.Collect.DeviceID%"

// Duplicate the fanStatus column
// fanStatus;fanStatus
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="1"

// Translate the first fanStatus into a PATROL status
// PATROLStatus;fanStatus
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="1"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// Translate the second fanStatus into a more readable string
// PATROLStatus;statusInformation
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="2"
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// Collect table = source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.Status=ValueTable.Column(1)
Fan.Collect.StatusInformation=ValueTable.Column(2)

// The FanStatusTranslationTable
FanStatusTranslationTable(2)="OK"
FanStatusTranslationTable(4)="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(2)="OK"
FanStatusInformationTranslationTable(4)="Failed"
FanStatusInformationTranslationTable(Default)="Unknown Status"

// VOLTAGES
// No voltage

// POWER SUPPLIES

// Power Supply discovery
// We're getting only the overall power supply status

// Source(1) = Overall power supply information
// ID;Status;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.6.2.9"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,1"

// Keep only the line where the Status value is actually something
// ID;Status;
PowerSupply.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
PowerSupply.Discovery.Source(1).Compute(1).Column=2
PowerSupply.Discovery.Source(1).Compute(1).ValueList="2,3,4"

// InstanceTable = source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)


// Power Supply collect (mono-instance)
PowerSupply.Collect.Type="MonoInstance"

// Source(1) = snmpget of the global power supply condition
// Condition
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.232.6.2.9.1.%PowerSupply.Collect.DeviceID%"

// Duplicate the condition column
// Condition;Condition
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="1"

// Translate the first Condition column into a PATROL status
// PATROLStatus;Condition
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="1"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// Translate the second Condition column into a more readable string
// PATROLStatus;statusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="2"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// ValueTable = source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(2)="OK"
PowerSupplyStatusTranslationTable(3)="WARN"
PowerSupplyStatusTranslationTable(4)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(2)=""
PowerSupplyStatusInformationTranslationTable(3)="Degraded"
PowerSupplyStatusInformationTranslationTable(4)="Failed"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"


// Network cards are now discovered by the MIB-2 connector, thanks!

//
////
//// Network cards
////
//
////
//// Discovery
//
//// Source(1) = cpqNicIfPhysAdapterTable
//// ID;StateCode
//NetworkCard.Discovery.Source(1).Type="SnmpTable"
//NetworkCard.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.232.18.2.3.1.1"
//NetworkCard.Discovery.Source(1).SnmpTableSelectColumns="ID,13"
//
//// Convert the State code (active, standby) in a readable string
//// ID;State
//NetworkCard.Discovery.Source(1).Compute(1).Type="Translate"
//NetworkCard.Discovery.Source(1).Compute(1).Column="2"
//NetworkCard.Discovery.Source(1).Compute(1).TranslationTable="NetworkStateTranslationTable"
//
//// The NetworkStateTranslationTable
//NetworkStateTranslationTable(2)="Active"
//NetworkStateTranslationTable(3)="Standby"
//NetworkStateTranslationTable(Default)=""
//
//// InstanceTable = source(1)
//NetworkCard.Discovery.InstanceTable=%NetworkCard.Discovery.Source(1)%
//NetworkCard.Discovery.Instance.DeviceID=InstanceTable.Column(1)
//NetworkCard.Discovery.Instance.Vendor=InstanceTable.Column(2)
//
////
//// Collect
//
//NetworkCard.Collect.Type="MultiInstance"
//
//// Source(1) = cpqNicIfPhysAdapterTable
//// ID;Condition;Status
//NetworkCard.Collect.Source(1).Type="SnmpTable"
//NetworkCard.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.232.18.2.3.1.1"
//NetworkCard.Collect.Source(1).SnmpTableSelectColumns="ID,12,14"
//
//// Duplicate the Condition column
//// ID;Condition;Condition;Status
//NetworkCard.Collect.Source(1).Compute(1).Type="DuplicateColumn"
//NetworkCard.Collect.Source(1).Compute(1).Column="2"
//
//// Translate the first Condition column into a PATROL status
//// ID;PATROLStatus;Condition;Status
//NetworkCard.Collect.Source(1).Compute(2).Type="Translate"
//NetworkCard.Collect.Source(1).Compute(2).Column="2"
//NetworkCard.Collect.Source(1).Compute(2).TranslationTable="NetworkCardStatusTranslationTable"
//
//// The NetworkCardStatusTranslationTable
//NetworkCardStatusTranslationTable(2)="OK"
//NetworkCardStatusTranslationTable(3)="WARN"
//NetworkCardStatusTranslationTable(4)="ALARM"
//NetworkCardStatusTranslationTable(Default)="UNKNOWN"
//
//// Translate the second Condition column into a more readable string
//// ID;PATROLStatus;statusInformation;Status
//NetworkCard.Collect.Source(1).Compute(3).Type="Translate"
//NetworkCard.Collect.Source(1).Compute(3).Column="3"
//NetworkCard.Collect.Source(1).Compute(3).TranslationTable="NetworkCardStatusInformationTranslationTable"
//
//// The NetworkCardStatusInformationTranslationTable
//NetworkCardStatusInformationTranslationTable(2)=""
//NetworkCardStatusInformationTranslationTable(3)="Degraded"
//NetworkCardStatusInformationTranslationTable(4)="Failed"
//NetworkCardStatusInformationTranslationTable(Default)="Unknown Status"
//
//// Translate the Status column into a LinkStatus
//// ID;PATROLStatus;statusInformation;LinkStatus
//NetworkCard.Collect.Source(1).Compute(4).Type="Translate"
//NetworkCard.Collect.Source(1).Compute(4).Column="4"
//NetworkCard.Collect.Source(1).Compute(4).TranslationTable="LinkStatusTranslationTable"
//
//// The LinkStatusTranslationTable
//LinkStatusTranslationTable(4)="WARN"
//LinkStatusTranslationTable(Default)="OK"
//
//// ValueTable = source(1)
//NetworkCard.Collect.ValueTable=%NetworkCard.Collect.Source(1)%
//NetworkCard.Collect.DeviceID=ValueTable.Column(1)
//NetworkCard.Collect.Status=ValueTable.Column(2)
//NetworkCard.Collect.StatusInformation=ValueTable.Column(3)
//NetworkCard.Collect.LinkStatus=ValueTable.Column(4)
