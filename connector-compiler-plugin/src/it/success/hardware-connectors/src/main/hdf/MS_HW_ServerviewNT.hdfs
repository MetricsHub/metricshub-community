//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//           Hardware Sentry KM for PATROL
//
//                 by Sentry Software (c)
//
//                   MS_ServerviewNT
//
//      Supports: Fujitsu-Siemens Serverview
//
//

// HEADER

hdf.DisplayName="Fujitsu-Siemens Serverview"
hdf.TypicalPlatform="Fujitsu-Siemens PRIMERGY"
hdf.ReliesOn="Fujitsu-Siemens Serveview Agent"
hdf.Version="1.2"
hdf.Comments="This connector provides hardware monitoring through the Fujitsu-Siemens Serverview Agent which supports almost all Fujitsu-Siemens PRIMERGY servers."
hdf.RequiredMSHWVersion="1.3"
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"
hdf.Supersedes="MS_HW_IpmiTool.hdf,MS_HW_ServerviewWMI.hdf"

// DETECTION

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.231.2.10.2"


//
// ENCLOSURES
//

//
// Discovery

// Get the model name from the model code
// ID;Model;chassisCode;serialNumber
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.5.10.3.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="1,4,16,3"

// Convert the chassis code into an enclosure type
// ID;Model;EnclosureType;serialNumber
Enclosure.Discovery.Source(1).Compute(1).Type="Translate"
Enclosure.Discovery.Source(1).Compute(1).Column="3"
Enclosure.Discovery.Source(1).Compute(1).TranslationTable="EnclosureTypeTranslationTable"

// The EnclosureTypeTranslationTable
EnclosureTypeTranslationTable(2)="Computer"
EnclosureTypeTranslationTable(3)="Computer"
EnclosureTypeTranslationTable(4)="Enclosure"
EnclosureTypeTranslationTable(5)="Storage"
EnclosureTypeTranslationTable(Default)="Computer"

// InstanceTable = Source(1)
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="Fujitsu-Siemens"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.Type=InstanceTable.Column(3)
Enclosure.Discovery.Instance.SerialNumber=InstanceTable.Column(4)


//
// Collect

// Collect type is multi-instance
Enclosure.Collect.Type="MultiInstance"

// Source(1) = the cabinetInfosTable SNMP table (like discovery)
// ID;cabinetFrontDoorStatus;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOID="1.3.6.1.4.1.231.2.10.2.2.5.10.3.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="1,25,26"

// cabinetFrontDoorStatus and cabinetHousingOpenStatus are a number whose meaning is:
// 1 = unknown
// 2 = open
// 3 = closed
// Multiply cabinetFrontDoorStatus by 4 and then add cabinetHousingOpenStatus to it
// so that we have a single code for both housing and front door

// Multiply cabinetFrontDoorStatus by 4
Enclosure.Collect.Source(1).Compute(1).Type="Multiply"
Enclosure.Collect.Source(1).Compute(1).Column="2"
Enclosure.Collect.Source(1).Compute(1).MultiplyBy="4"

// Add cabinetHousingOpenStatus to cabinetFrontDoorStatus
// ID;intrusionCode;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Compute(2).Type="Add"
Enclosure.Collect.Source(1).Compute(2).Column="2"
Enclosure.Collect.Source(1).Compute(2).Add=Column(3)

// Translate intrusionCode into IntrusionStatus
// ID;intrusionStatus;cabinetHousingOpenStatus
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column="2"
Enclosure.Collect.Source(1).Compute(3).TranslationTable="IntrusionCodeTranslationTable"

// The IntrusionCodeTranslationTable
IntrusionCodeTranslationTable(8)="WARN"
IntrusionCodeTranslationTable(9)="WARN"
IntrusionCodeTranslationTable(10)="WARN"
IntrusionCodeTranslationTable(11)="WARN"
IntrusionCodeTranslationTable(2)="WARN"
IntrusionCodeTranslationTable(6)="WARN"
IntrusionCodeTranslationTable(14)="WARN"
IntrusionCodeTranslationTable(Default)="OK"

// ValueTable = Source(1)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.IntrusionStatus=ValueTable.Column(2)


//
// TEMPERATURES
//

//
// Temperature discovery

// Source(1) = temperatureSensorsTable SNMP table
// ID;enclosureID;Status;Purpose;warningThreshold;alarmThreshold;currentValue;
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.2.1.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,1,3,4,6,8,11"

// Keep only really available sensors
// ID;enclosureID;Status;Purpose;warningThreshold;alarmThreshold;currentValue;
Temperature.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Temperature.Discovery.Source(1).Compute(1).Column=3
Temperature.Discovery.Source(1).Compute(1).ValueList="3,5,6,7"

// Remove sensors with invalid values ('4294967295')
// ID;enclosureID;Status;Purpose;warningThreshold;alarmThreshold;currentValue;
// Temperature.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
// Temperature.Discovery.Source(1).Compute(2).Column=7
// Temperature.Discovery.Source(1).Compute(2).ValueList="4294967295"

// Translate the purpose code into a more readable string
// ID;enclosureID;Status;temperatureLocation;warningThreshold;alarmThreshold;currentValue;
Temperature.Discovery.Source(1).Compute(2).Type="Translate"
Temperature.Discovery.Source(1).Compute(2).TranslationTable="TemperatureTypeTranslationTable"
Temperature.Discovery.Source(1).Compute(2).Column=4

// Replace "-1" by an empty string to remove bad thresholds
// ID;enclosureID;Status;temperatureLocation;warningThreshold;alarmThreshold;currentValue;
Temperature.Discovery.Source(1).Compute(3).Type="Replace"
Temperature.Discovery.Source(1).Compute(3).Column=5
Temperature.Discovery.Source(1).Compute(3).Replace="-1"
Temperature.Discovery.Source(1).Compute(3).ReplaceBy=""
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=6
Temperature.Discovery.Source(1).Compute(4).Replace="-1"
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""


// The TemperatureTypeTranslationTable
TemperatureTypeTranslationTable(1)=""
TemperatureTypeTranslationTable(2)="Disabled"
TemperatureTypeTranslationTable(3)="CPU"
TemperatureTypeTranslationTable(4)="Ambient"
TemperatureTypeTranslationTable(5)="Housing"
TemperatureTypeTranslationTable(6)="Not available"
TemperatureTypeTranslationTable(7)="I/O Board"
TemperatureTypeTranslationTable(8)="Power Backplane"
TemperatureTypeTranslationTable(default)=""

// InstanceTable = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(4)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(6)
Temperature.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)

//
// Temperature collect

// Collect type is mono-instance
Temperature.Collect.Type="MonoInstance"

// Source(1) = snmp get directly on the tempCurrentValue OID
Temperature.Collect.Source(1).Type="SnmpGet"
Temperature.Collect.Source(1).SnmpOid="1.3.6.1.4.1.231.2.10.2.2.5.2.1.1.11.%Temperature.Collect.DeviceID%"

// Replaces collect values of 4294967295 with blank.  This will result in a no collect value, but will not generate any alarms
Temperature.Collect.Source(1).Compute(1).Type="Replace"
Temperature.Collect.Source(1).Compute(1).Column=1
Temperature.Collect.Source(1).Compute(1).Replace="4294967295"
Temperature.Collect.Source(1).Compute(1).ReplaceBy=""

// ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.Temperature=ValueTable.Column(1)


//
// FANS
//

//
// Fan discovery

// Source(1) = The fansTable SNMP table
// DeviceID;fanStatus;fanPurpose;enclosureID;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.2.2.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,3,4,1,8,16"

// Keep only fans that are present (status = 3 (ok), 4 (failed), 5 (pred fail), 6 (redundant fan failed))
// DeviceID;fanStatus;fanPurpose;enclosureID;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(1).Column="2"
Fan.Discovery.Source(1).Compute(1).ValueList="3,4,5,6"

// Keep only known fan types
// DeviceID;fanStatus;fanPurpose;enclosureID;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(2).Type="KeepOnlyMatchingLines"
Fan.Discovery.Source(1).Compute(2).Column="3"
Fan.Discovery.Source(1).Compute(2).ValueList="2,3,4,5,6"

// Translate fanPurpose into fanType
// DeviceID;fanStatus;fanType;enclosureID;fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(3).Type="Translate"
Fan.Discovery.Source(1).Compute(3).Column="3"
Fan.Discovery.Source(1).Compute(3).TranslationTable="FanTypeTranslationTable"

// Concat fanStatus to fanSpeed
// DeviceID;fanStatus;fanType;enclosureID;|fanStatus|fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(4).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(4).Column=5
Fan.Discovery.Source(1).Compute(4).String="|"
Fan.Discovery.Source(1).Compute(5).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(5).Column=5
Fan.Discovery.Source(1).Compute(5).String=Column(2)
Fan.Discovery.Source(1).Compute(6).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(6).Column=5
Fan.Discovery.Source(1).Compute(6).String="|"

// Replace "|3|0" by empty string because it means that the zero speed is a false one
// DeviceID;fanStatus;fanType;enclosureID;|fanStatus|fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(7).Type="Replace"
Fan.Discovery.Source(1).Compute(7).Column=5
Fan.Discovery.Source(1).Compute(7).Replace="|3|0"
Fan.Discovery.Source(1).Compute(7).ReplaceBy=""

// Now, extract the fanSpeed again
// DeviceID;fanStatus;fanType;enclosureID;|fanStatus|fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(8).Type="Extract"
Fan.Discovery.Source(1).Compute(8).Column=5
Fan.Discovery.Source(1).Compute(8).Subcolumn=3
Fan.Discovery.Source(1).Compute(8).SubSeparators="|"

// And replace the false 65535 value by empty string
// DeviceID;fanStatus;fanType;enclosureID;|fanStatus|fanSpeed;fanDesignation;
Fan.Discovery.Source(1).Compute(9).Type="Replace"
Fan.Discovery.Source(1).Compute(9).Column=5
Fan.Discovery.Source(1).Compute(9).Replace="65535"
Fan.Discovery.Source(1).Compute(9).ReplaceBy=""

Fan.Discovery.Source(1).Compute(10).Type="LeftConcat"
Fan.Discovery.Source(1).Compute(10).Column=6
Fan.Discovery.Source(1).Compute(10).String="Location: "

// InstanceTable = Source(1)
// DeviceID;fanStatus;fanType;enclosureID;|fanStatus|fanSpeed;fanDesignation;
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(3)
Fan.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(4)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(5)
Fan.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(6)


// The FanTypeTranslationTable
FanTypeTranslationTable(2)="Disabled"
FanTypeTranslationTable(3)="CPU"
FanTypeTranslationTable(4)="Component"
FanTypeTranslationTable(5)="Housing"
FanTypeTranslationTable(6)="Power-Supply"
FanTypeTranslationTable(default)=""

//
// Fan collect

// Collect type is "multi-instance"
Fan.Collect.Type="MultiInstance"

// Source(1) = The fansTable SNMP table
// DeviceID;fanStatus;fanSpeed
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.2.2.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,3,8"

// Duplicate the fanStatus column
// DeviceID;fanStatus;fanStatus;fanSpeed
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column="2"

// Translate fanStatus into PATROLStatus
// DeviceID;status;fanStatus;fanSpeed
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column="2"
Fan.Collect.Source(1).Compute(2).TranslationTable="FanStatusTranslationTable"

// The FanStatusTranslationTable
FanStatusTranslationTable(3)="OK"
FanStatusTranslationTable(4)="ALARM"
FanStatusTranslationTable(5)="WARN"
FanStatusTranslationTable(6)="WARN"
FanStatusTranslationTable(7)="OK"
FanStatusTranslationTable(8)="ALARM"
FanStatusTranslationTable(Default)="UNKNOWN"

// Translate the second fanStatus into a more readable string
// DeviceID;status;statusInformation;fanSpeed
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column="3"
Fan.Collect.Source(1).Compute(3).TranslationTable="FanStatusInformationTranslationTable"

// The FanStatusInformationTranslationTable
FanStatusInformationTranslationTable(3)=""
FanStatusInformationTranslationTable(4)="Failed"
FanStatusInformationTranslationTable(5)="Predicted Failure"
FanStatusInformationTranslationTable(6)="Failed Redundancy"
FanStatusInformationTranslationTable(7)="Not available"
FanStatusInformationTranslationTable(8)="Removed"
FanStatusInformationTranslationTable(Default)="Unknown Status"

// Remove fan speeds of 65535 (obviously invalid value)
// DeviceID;status;statusInformation;fanSpeed
Fan.Collect.Source(1).Compute(4).Type="Replace"
Fan.Collect.Source(1).Compute(4).Column="4"
Fan.Collect.Source(1).Compute(4).Replace="65535"
Fan.Collect.Source(1).Compute(4).ReplaceBy=""

// Now, we're trying to remove fan speeds of 0 (zero) when the status
// does not report any failure, which means that the zero value is a wrong one.
// This does happen with fan in external cabinets.

// A side effect of this workaround is that a failed fan in an external cabinet
// will generate too alerts: one on the Status parameter, and another one on the
// Speed parameter which will still be reported as zero.

// Concatenate "|status" to the speed
// DeviceID;status;statusInformation;fanSpeed|
Fan.Collect.Source(1).Compute(5).Type="RightConcat"
Fan.Collect.Source(1).Compute(5).Column="4"
Fan.Collect.Source(1).Compute(5).String="|"

// DeviceID;status;statusInformation;fanSpeed|status
Fan.Collect.Source(1).Compute(6).Type="RightConcat"
Fan.Collect.Source(1).Compute(6).Column="4"
Fan.Collect.Source(1).Compute(6).String=Column(2)

// Add | to the left of fanSpeed to ensure that we'll be removing only
// "0|OK" and not "0|OK" from "1250|OK"...
// DeviceID;status;statusInformation;|fanSpeed|status
Fan.Collect.Source(1).Compute(7).Type="LeftConcat"
Fan.Collect.Source(1).Compute(7).Column="4"
Fan.Collect.Source(1).Compute(7).String="|"

// Now, replace fanSpeed|status by an empty string if equals to 0|OK
// DeviceID;status;statusInformation;|fanSpeed|status
Fan.Collect.Source(1).Compute(8).Type="Replace"
Fan.Collect.Source(1).Compute(8).Column="4"
Fan.Collect.Source(1).Compute(8).Replace="|0|OK"
Fan.Collect.Source(1).Compute(8).ReplaceBy=""

// Now, re-extract fanSpeed from the |fanSpeed|status column
// DeviceID;status;statusInformation;fanSpeed
Fan.Collect.Source(1).Compute(9).Type="Extract"
Fan.Collect.Source(1).Compute(9).Column="4"
Fan.Collect.Source(1).Compute(9).SubColumn="2"
Fan.Collect.Source(1).Compute(9).SubSeparators="|"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)
Fan.Collect.Speed=ValueTable.Column(4)


//
// VOLTAGES
//

//
// Voltage discovery

// Source(1)
// ID;Status;VoltageType;CurrentValue;LowerThreshold;UpperThreshold;cabinetID
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.11.4.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,3,4,7,5,6,1"

// Remove voltages that are equal to -1
Voltage.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(1).Compute(1).Column="4"
Voltage.Discovery.Source(1).Compute(1).ValueList="-1"

// Exclude voltages whose status is 1 (unknown) or 2 (not-available)
Voltage.Discovery.Source(1).Compute(2).Type="ExcludeMatchingLines"
Voltage.Discovery.Source(1).Compute(2).Column="2"
Voltage.Discovery.Source(1).Compute(2).ValueList="1,2"

// Now, something tricky: sometimes the negative values are
// provided as an unsigned 16 bit integer, that is:
// -1 is provided as 65535, -2 as 65534, -10 as 65525, etc.
// So we're going to check if the value is greater than 32768
// (the 16th strongest bit set to 1), and if so, we're going
// to compute the actual voltage value

// Duplicate the thresholds value
// ID;Status;VoltageType;CurrentValue;LowerThreshold;LowerThreshold;UpperThreshold;UpperThreshold;cabinetID
Voltage.Discovery.Source(1).Compute(3).Type="DuplicateColumn"
Voltage.Discovery.Source(1).Compute(3).Column="5"
Voltage.Discovery.Source(1).Compute(4).Type="DuplicateColumn"
Voltage.Discovery.Source(1).Compute(4).Column="7"

// Remove the "minus" sign if any to check if the bit 15 is set
// ID;Status;VoltageType;CurrentValue;LowerThreshold;ABSOLUTELowerThreshold;UpperThreshold;ABSOLUTEUpperThreshold;cabinetID
Voltage.Discovery.Source(1).Compute(5).Type="Replace"
Voltage.Discovery.Source(1).Compute(5).Column="6"
Voltage.Discovery.Source(1).Compute(5).Replace="-"
Voltage.Discovery.Source(1).Compute(5).ReplaceBy=""
Voltage.Discovery.Source(1).Compute(6).Type="Replace"
Voltage.Discovery.Source(1).Compute(6).Column="8"
Voltage.Discovery.Source(1).Compute(6).Replace="-"
Voltage.Discovery.Source(1).Compute(6).ReplaceBy=""

// Check if the 16th strongest bit is set (bit 15)
// ID;Status;VoltageType;CurrentValue;LowerThreshold;LowerThresholdOffset;UpperThreshold;UpperThresholdOffset;cabinetID
Voltage.Discovery.Source(1).Compute(7).Type="PerBitTranslation"
Voltage.Discovery.Source(1).Compute(7).Column="6"
Voltage.Discovery.Source(1).Compute(7).BitList="15"
Voltage.Discovery.Source(1).Compute(7).BitTranslationTable="VoltageStrongestBitCheckTranslationTable"
Voltage.Discovery.Source(1).Compute(8).Type="PerBitTranslation"
Voltage.Discovery.Source(1).Compute(8).Column="8"
Voltage.Discovery.Source(1).Compute(8).BitList="15"
Voltage.Discovery.Source(1).Compute(8).BitTranslationTable="VoltageStrongestBitCheckTranslationTable"

VoltageStrongestBitCheckTranslationTable(15,1)="65536"
VoltageStrongestBitCheckTranslationTable(15,0)="0"

// Now convert the value from the unsigned integer to a signed integer
Voltage.Discovery.Source(1).Compute(9).Type="Substract"
Voltage.Discovery.Source(1).Compute(9).Column="5"
Voltage.Discovery.Source(1).Compute(9).Substract=Column(6)
Voltage.Discovery.Source(1).Compute(10).Type="Substract"
Voltage.Discovery.Source(1).Compute(10).Column="7"
Voltage.Discovery.Source(1).Compute(10).Substract=Column(8)


// Convert the voltage values from 100th of volts to milli-volts
Voltage.Discovery.Source(1).Compute(11).Type="Multiply"
Voltage.Discovery.Source(1).Compute(11).Column="5"
Voltage.Discovery.Source(1).Compute(11).MultiplyBy="10"

Voltage.Discovery.Source(1).Compute(12).Type="Multiply"
Voltage.Discovery.Source(1).Compute(12).Column="7"
Voltage.Discovery.Source(1).Compute(12).MultiplyBy="10"

// InstanceTable = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(3)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(7)
Voltage.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(9)

//
// Voltage collect

// Collect type = "multi instance"
Voltage.Collect.Type="MultiInstance"

// Source(1) = voltage table
// DeviceID;Voltage
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.11.4.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,7"

// Now do the same tricky thing as in the discovery (see above for more comments)

// Duplicate the voltage value
// DeviceID;Voltage;Voltage
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Remove the "minus" sign if any to check if the bit 15 is set
// DeviceID;Voltage;ABSOLUTEVoltage
Voltage.Collect.Source(1).Compute(2).Type="Replace"
Voltage.Collect.Source(1).Compute(2).Column="3"
Voltage.Collect.Source(1).Compute(2).Replace="-"
Voltage.Collect.Source(1).Compute(2).ReplaceBy=""

// Check if the 16th strongest bit is set
Voltage.Collect.Source(1).Compute(3).Type="PerBitTranslation"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).BitList="15"
Voltage.Collect.Source(1).Compute(3).BitTranslationTable="VoltageStrongestBitCheckTranslationTable"

// Now convert the value from the unsigned integer to a signed integer
Voltage.Collect.Source(1).Compute(4).Type="Substract"
Voltage.Collect.Source(1).Compute(4).Column="2"
Voltage.Collect.Source(1).Compute(4).Substract=Column(3)

// Convert the voltage value from 100th of volts to millivolts
Voltage.Collect.Source(1).Compute(5).Type="Multiply"
Voltage.Collect.Source(1).Compute(5).Column="2"
Voltage.Collect.Source(1).Compute(5).MultiplyBy="10"

// ValueTable = Source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(2)


//
// POWER SUPPLIES
//

//
// Power Supply discovery

// Source(1) = powerSupplyUnitsTable SNMP table
// DeviceID;cabinetID;KindOfName
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.11.2.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,1,4"

// InstanceTable = Source(1) (that was an easy one!)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.AttachedToDeviceID=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(3)
//
// Power Supply collect

// Collect type is "mono-instance"
PowerSupply.Collect.Type="MonoInstance"

// Source(1) = SNMP get on the powerSupplyUnitStatus OID
// powerSupplyUnitStatus
PowerSupply.Collect.Source(1).Type="SnmpGet"
PowerSupply.Collect.Source(1).SnmpOid="1.3.6.1.4.1.231.2.10.2.2.5.11.2.1.3.%PowerSupply.Collect.DeviceID%"

// Duplicate the powerSupplyUnitStatus
// powerSupplyUnitStatus;powerSupplyUnitStatus
PowerSupply.Collect.Source(1).Compute(1).Type="DuplicateColumn"
PowerSupply.Collect.Source(1).Compute(1).Column="1"

// Translate the first powerSupplyUnitStatus into a PATROL statuss
// status;powerSupplyUnitStatus
PowerSupply.Collect.Source(1).Compute(2).Type="Translate"
PowerSupply.Collect.Source(1).Compute(2).Column="1"
PowerSupply.Collect.Source(1).Compute(2).TranslationTable="PowerSupplyStatusTranslationTable"

// The PowerSupplyStatusTranslationTable
PowerSupplyStatusTranslationTable(2)="OK"
PowerSupplyStatusTranslationTable(3)="OK"
PowerSupplyStatusTranslationTable(4)="WARN"
PowerSupplyStatusTranslationTable(5)="WARN"
PowerSupplyStatusTranslationTable(6)="WARN"
PowerSupplyStatusTranslationTable(7)="ALARM"
PowerSupplyStatusTranslationTable(8)="ALARM"
PowerSupplyStatusTranslationTable(Default)="UNKNOWN"

// Translate the second powerSupplyUnitStatus into a more readable string
// status;statusInformation
PowerSupply.Collect.Source(1).Compute(3).Type="Translate"
PowerSupply.Collect.Source(1).Compute(3).Column="2"
PowerSupply.Collect.Source(1).Compute(3).TranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(2)="Not Present"
PowerSupplyStatusInformationTranslationTable(3)=""
PowerSupplyStatusInformationTranslationTable(4)="Failed"
PowerSupplyStatusInformationTranslationTable(5)="AC Failure"
PowerSupplyStatusInformationTranslationTable(6)="DC Failure"
PowerSupplyStatusInformationTranslationTable(7)="Critical Temperature"
PowerSupplyStatusInformationTranslationTable(8)="Not Manageable"
PowerSupplyStatusInformationTranslationTable(Default)="Unknown Status"

// Collect table = source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.Status=ValueTable.Column(1)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)



//
// MEMORY modules
//

//
// Discovery

// Source(1) = SNMP memoryTable
// ID;Status;Size;TypeCode;Socket;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.4.10.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="ID,3,6,8,9"

// Keep only lines where status is not "not-available (4)" and not "unknown (1)"
// ID;Status;Size;TypeCode;Socket;
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=2
Memory.Discovery.Source(1).Compute(1).ValueList="1,4"

// convert the size from bytes to megabytes
// ID;Status;SizeMB;TypeCode;Socket;
Memory.Discovery.Source(1).Compute(2).Type="Divide"
Memory.Discovery.Source(1).Compute(2).Column=3
Memory.Discovery.Source(1).Compute(2).DivideBy=1048576

// Memory type
// ID;Status;SizeMB;Type;Socket;
Memory.Discovery.Source(1).Compute(3).Type="PerBitTranslation"
Memory.Discovery.Source(1).Compute(3).Column=4
Memory.Discovery.Source(1).Compute(3).BitList="4,5,6,7,8,9"
Memory.Discovery.Source(1).Compute(3).BitTranslationTable="MemoryBitTranslationTable"

Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=5
Memory.Discovery.Source(1).Compute(4).String="Location: "

// InstanceTable = Source(1)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Size=InstanceTable.Column(3)
Memory.Discovery.Instance.Type=InstanceTable.Column(4)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)

// The MemoryTypeTranslationTable
MemoryTypeTranslationTable(1)="Unknown"
MemoryTypeTranslationTable(2)="Other"
MemoryTypeTranslationTable(3)="No-parity"
MemoryTypeTranslationTable(4)="Parity"
MemoryTypeTranslationTable(5)="Parity or EDC"
MemoryTypeTranslationTable(6)="EDC"
MemoryTypeTranslationTable(7)="EDO"
MemoryTypeTranslationTable(8)="Synchrone EDO"
MemoryTypeTranslationTable(default)=""

// The MemoryBitTranslationTable
MemoryBitTranslationTable(4,1)="EDO"
MemoryBitTranslationTable(5,1)="Parity"
MemoryBitTranslationTable(6,1)="ECC"
MemoryBitTranslationTable(7,1)="SIMM"
MemoryBitTranslationTable(8,1)="DIMM"
MemoryBitTranslationTable(9,1)="RIMM"

//
// Collect

// Collect type is "multi-instance"
Memory.Collect.Type="MultiInstance"

// Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
// ID;Status;ErrorCount
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.4.10.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="ID,3,10"

// Duplicate the status column
// ID;Status;Status;ErrorCount
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL Status
// ID;PATROLStatus;Status;ErrorCount
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column="2"
Memory.Collect.Source(1).Compute(2).TranslationTable="MemoryModuleStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PATROLStatus;StatusInformation;ErrorCount
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column="3"
Memory.Collect.Source(1).Compute(3).TranslationTable="MemoryModuleStatusInformationTranslationTable"

// ErrorCount: Replace 2^32 by 0
Memory.Collect.Source(1).Compute(4).Type="Replace"
Memory.Collect.Source(1).Compute(4).Column="4"
Memory.Collect.Source(1).Compute(4).Replace="4294967295"
Memory.Collect.Source(1).Compute(4).ReplaceBy="0"

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)
Memory.Collect.ErrorCount=ValueTable.Column(4)

// The MemoryModuleStatusTranslationTable
MemoryModuleStatusTranslationTable(2)="ALARM"
MemoryModuleStatusTranslationTable(3)="OK"
MemoryModuleStatusTranslationTable(5)="ALARM"
MemoryModuleStatusTranslationTable(6)="WARN"
MemoryModuleStatusTranslationTable(7)="OK"
MemoryModuleStatusTranslationTable(Default)="UNKNOWN"

// The MemoryModuleStatusInformationTranslationTable
MemoryModuleStatusInformationTranslationTable(2)="Error (Disabled)"
MemoryModuleStatusInformationTranslationTable(3)=""
MemoryModuleStatusInformationTranslationTable(4)="Empty Socket"
MemoryModuleStatusInformationTranslationTable(5)="Failed (Disabled)"
MemoryModuleStatusInformationTranslationTable(6)="Failing!"
MemoryModuleStatusInformationTranslationTable(7)="Hot Spare"
MemoryModuleStatusInformationTranslationTable(Default)="Unknown Status"

//
// CPUs
//

//
// Discovery

// Source(1) = SNMP cpuTable
// ID;Speed;Status;Model;Socket;Vendor;
CPU.Discovery.Source(1).Type="SnmpTable"
CPU.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.231.2.10.2.2.5.4.1.1"
CPU.Discovery.Source(1).SnmpTableSelectColumns="ID,3,6,8,9,10"

// Keep only lines where status is not "not-available (4)" and not "unknown (1)"
// ID;Speed;Status;Model;Socket;Vendor;
CPU.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
CPU.Discovery.Source(1).Compute(1).Column=3
CPU.Discovery.Source(1).Compute(1).ValueList="1,4"

// Remove Genuine from manufacturer's name
// ID;Speed;Status;Model;Socket;Vendor;
CPU.Discovery.Source(1).Compute(2).Type="Replace"
CPU.Discovery.Source(1).Compute(2).Column=6
CPU.Discovery.Source(1).Compute(2).Replace="Genuine"
CPU.Discovery.Source(1).Compute(2).ReplaceBy=""

// Replace "-1" by nothing: that's in case the CPU is disabled and its speed N/A
// ID;Speed;Status;Model;Socket;Vendor;
CPU.Discovery.Source(1).Compute(3).Type="Replace"
CPU.Discovery.Source(1).Compute(3).Column=2
CPU.Discovery.Source(1).Compute(3).Replace="-1"
CPU.Discovery.Source(1).Compute(3).ReplaceBy=""

// Add "Socket: " to the Socket column
CPU.Discovery.Source(1).Compute(4).Type="LeftConcat"
CPU.Discovery.Source(1).Compute(4).Column=5
CPU.Discovery.Source(1).Compute(4).String="Socket: "

// InstanceTable = Source(1)
CPU.Discovery.InstanceTable=%CPU.Discovery.Source(1)%
CPU.Discovery.Instance.DeviceID=InstanceTable.Column(1)
CPU.Discovery.Instance.MaximumSpeed=InstanceTable.Column(2)
CPU.Discovery.Instance.Model=InstanceTable.Column(4)
CPU.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(5)
CPU.Discovery.Instance.Vendor=InstanceTable.Column(6)

//
// Collect

// Collect type is "mono-instance" (one collect for each instance)
CPU.Collect.Type="MonoInstance"

// Source(1) = SNMP Get of the memModuleStatus of the SNMP memModulesTable table
// Status;
CPU.Collect.Source(1).Type="SnmpGet"
CPU.Collect.Source(1).SnmpOid="1.3.6.1.4.1.231.2.10.2.2.5.4.1.1.6.%CPU.Collect.DeviceID%"

// Duplicate the status column
// Status;Status
CPU.Collect.Source(1).Compute(1).Type="DuplicateColumn"
CPU.Collect.Source(1).Compute(1).Column="1"

// Translate the first status column into a PATROL Status
// PATROLStatus;Status
CPU.Collect.Source(1).Compute(2).Type="Translate"
CPU.Collect.Source(1).Compute(2).Column="1"
CPU.Collect.Source(1).Compute(2).TranslationTable="CPUStatusTranslationTable"

// Translate the second status column into a more readable string
// PATROLStatus;StatusInformation
CPU.Collect.Source(1).Compute(3).Type="Translate"
CPU.Collect.Source(1).Compute(3).Column="2"
CPU.Collect.Source(1).Compute(3).TranslationTable="CPUStatusInformationTranslationTable"

// The CPUStatusTranslationTable
CPUStatusTranslationTable(2)="WARN"
CPUStatusTranslationTable(3)="OK"
CPUStatusTranslationTable(5)="ALARM"
CPUStatusTranslationTable(6)="ALARM"
CPUStatusTranslationTable(7)="WARN"
CPUStatusTranslationTable(Default)="UNKNOWN"

// The CPUStatusInformationTranslationTable
CPUStatusInformationTranslationTable(2)="Disabled"
CPUStatusInformationTranslationTable(3)=""
CPUStatusInformationTranslationTable(4)="Empty Socket"
CPUStatusInformationTranslationTable(5)="Error"
CPUStatusInformationTranslationTable(6)="Failed"
CPUStatusInformationTranslationTable(7)="Missing Termination"
CPUStatusInformationTranslationTable(Default)="Unknown Status"

// ValueTable = Source(1)
CPU.Collect.ValueTable=%CPU.Collect.Source(1)%
CPU.Collect.Status=ValueTable.Column(1)
CPU.Collect.StatusInformation=ValueTable.Column(2)
