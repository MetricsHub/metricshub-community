//
//
//    H a r d w a r e   D e f i n i t i o n   F i l e
//
//                       f o r
//
//           Hardware Sentry KM for PATROL
//
//                 by Sentry Software (c)
//
//                   MS_HW_DellOpenManage
//
//      Connects to: Dell OpenManage
//
//


// Header

hdf.DisplayName="Dell OpenManage Server Administrator"
hdf.TypicalPlatform="Dell PowerEdge"
hdf.ReliesOn="Dell OpenManage Server Administrator"
hdf.Version="1.0"
hdf.Comments="This connector provides hardware monitoring through the Dell OpenManage Server Administrator SNMP agent which supports almost all Dell PowerEdge servers."
hdf.RemoteSupport="true"
hdf.AppliesToOS="NT,Linux"
hdf.Supersedes="MS_HW_IpmiTool.hdf,MS_HW_VMwareESX4i.hdf,MS_HW_VMwareESXi.hdf,MS_HW_VMwareESXiDisksIPMI.hdf,MS_HW_VMwareESXiDisksStorage.hdf"

// Detection

Detection.Criteria(1).Type="SNMP"
Detection.Criteria(1).SnmpGetNext="1.3.6.1.4.1.674.10892.1.300.10.1"

// Enclosure: computer

// Get the model code in the chassis table
// ID;Model;ServiceTag;ServiceCode;
Enclosure.Discovery.Source(1).Type="SnmpTable"
Enclosure.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.300.10.1"
Enclosure.Discovery.Source(1).SnmpTableSelectColumns="ID,9,11,49"

// Keep only the first chassis, which should be (I hope!) the main system chassis entry
// ID;Model;ServiceTag;ServiceCode;
Enclosure.Discovery.Source(1).Compute(1).Type="KeepOnlyMatchingLines"
Enclosure.Discovery.Source(1).Compute(1).Column=1
Enclosure.Discovery.Source(1).Compute(1).ValueList="1"

// Add "Serial Number: " to the ServiceTag column
// ID;Model;ServiceTag;ServiceCode;
Enclosure.Discovery.Source(1).Compute(2).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(2).Column=3
Enclosure.Discovery.Source(1).Compute(2).String="Serial Number: "

// Add "Alternative Serial Number: " to the ServiceCode column
// ID;Model;ServiceTag;ServiceCode;
Enclosure.Discovery.Source(1).Compute(3).Type="LeftConcat"
Enclosure.Discovery.Source(1).Compute(3).Column=4
Enclosure.Discovery.Source(1).Compute(3).String="Alternative Serial Number: "

// Check whether we will have the powerconsumption information
// Source(2) = powerUsageTable SNMP Table
// chassisIndex;systemWattage
Enclosure.Discovery.Source(2).Type="SnmpTable"
Enclosure.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.60.1"
Enclosure.Discovery.Source(2).SnmpTableSelectColumns="1,7"

// Source(3) = Table joint of Source(1) and Source(2)
// ID;Model;ServiceTag;ServiceCode;chassisIndex;systemWattage;
Enclosure.Discovery.Source(3).Type="TableJoint"
Enclosure.Discovery.Source(3).LeftTable=%Enclosure.Discovery.Source(1)%
Enclosure.Discovery.Source(3).RightTable=%Enclosure.Discovery.Source(2)%
Enclosure.Discovery.Source(3).LeftKeyColumn=1
Enclosure.Discovery.Source(3).RightKeyColumn=1
Enclosure.Discovery.Source(3).DefaultRightLine=";;"

// Now we have what is necessary to define the computer model
Enclosure.Discovery.InstanceTable=%Enclosure.Discovery.Source(3)%
Enclosure.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Enclosure.Discovery.Instance.Vendor="Dell"
Enclosure.Discovery.Instance.Model=InstanceTable.Column(2)
Enclosure.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Enclosure.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(4)
Enclosure.Discovery.Instance.Type="Computer"
Enclosure.Discovery.Instance.ParameterActivation.EnergyUsage=InstanceTable.Column(6)


// Collect
Enclosure.Collect.Type="MultiInstance"

// Source(1) = systemStateTable SNMP Table
// DeviceID;systemStateChassisStatus
Enclosure.Collect.Source(1).Type="SnmpTable"
Enclosure.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.300.10.1"
Enclosure.Collect.Source(1).SnmpTableSelectColumns="ID,4"

// Duplicate systemStateChassisStatus
// DeviceID;systemStateChassisStatus;systemStateChassisStatus
Enclosure.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Enclosure.Collect.Source(1).Compute(1).Column=2

// Translate the first systemStateChassisStatus into a PATROL status
// DeviceID;PATROLStatus;systemStateChassisStatus
Enclosure.Collect.Source(1).Compute(2).Type="Translate"
Enclosure.Collect.Source(1).Compute(2).Column=2
Enclosure.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second systemStateChassisStatus into a more readable string
// DeviceID;PATROLStatus;statusInformation
Enclosure.Collect.Source(1).Compute(3).Type="Translate"
Enclosure.Collect.Source(1).Compute(3).Column=3
Enclosure.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// Source(2) = intrusionTable SNMP Table
// chassisIndex;intrusionStatus
Enclosure.Collect.Source(2).Type="SnmpTable"
Enclosure.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.300.70.1"
Enclosure.Collect.Source(2).SnmpTableSelectColumns="1,5"

// Translate Dell's intrusion status into a PATROLStatus
// chassisIndex;intrusionStatus
Enclosure.Collect.Source(2).Compute(1).Type="Translate"
Enclosure.Collect.Source(2).Compute(1).Column=2
Enclosure.Collect.Source(2).Compute(1).TranslationTable="GenericStatusTranslationTable"

// Source(3) = Table joint of Source(1) and Source(2)
// DeviceID;PATROLStatus;statusInformation;chassisIndex;intrusionStatus
Enclosure.Collect.Source(3).Type="TableJoint"
Enclosure.Collect.Source(3).LeftTable=%Enclosure.Collect.Source(1)%
Enclosure.Collect.Source(3).RightTable=%Enclosure.Collect.Source(2)%
Enclosure.Collect.Source(3).LeftKeyColumn=1
Enclosure.Collect.Source(3).RightKeyColumn=1
Enclosure.Collect.Source(3).DefaultRightLine=";;"

// Source(4) = powerUsageTable SNMP Table
// chassisIndex;systemWattage
Enclosure.Collect.Source(4).Type="SnmpTable"
Enclosure.Collect.Source(4).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.60.1"
Enclosure.Collect.Source(4).SnmpTableSelectColumns="1,7"

// Convert Watt-hour into kilowatt-hour
// chassisIndex;energyUsage;
Enclosure.Collect.Source(4).Compute(1).Type="Divide"
Enclosure.Collect.Source(4).Compute(1).Column=2
Enclosure.Collect.Source(4).Compute(1).DivideBy=1000

// Source(5) = Table joint of Source(3) and Source(4)
// DeviceID;PATROLStatus;statusInformation;chassisIndex;intrusionStatus;chassisIndex;energyUsage;
Enclosure.Collect.Source(5).Type="TableJoint"
Enclosure.Collect.Source(5).LeftTable=%Enclosure.Collect.Source(3)%
Enclosure.Collect.Source(5).RightTable=%Enclosure.Collect.Source(4)%
Enclosure.Collect.Source(5).LeftKeyColumn=1
Enclosure.Collect.Source(5).RightKeyColumn=1
Enclosure.Collect.Source(5).DefaultRightLine=";;"

// The ValueTable = Source(5)
Enclosure.Collect.ValueTable=%Enclosure.Collect.Source(5)%
Enclosure.Collect.DeviceID=ValueTable.Column(1)
Enclosure.Collect.Status=ValueTable.Column(2)
Enclosure.Collect.StatusInformation=ValueTable.Column(3)
Enclosure.Collect.IntrusionStatus=ValueTable.Column(5)
Enclosure.Collect.EnergyUsage=ValueTable.Column(7)


// TEMPERATURES

// Temperature discovery

// Source(1) = the temperatureProbeTable SNMP table
// Temps are given in tenth of degrees celsius
// ID;currentReading;tempLocation;alarmThreshold;warningThreshold
Temperature.Discovery.Source(1).Type="SnmpTable"
Temperature.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.700.20.1"
Temperature.Discovery.Source(1).SnmpTableSelectColumns="ID,6,8,10,11"

// Convert tenth of celsius to celsius
// ID;currentReading;tempLocation;alarmThreshold;warningThreshold
Temperature.Discovery.Source(1).Compute(1).Type="Divide"
Temperature.Discovery.Source(1).Compute(1).Column=4
Temperature.Discovery.Source(1).Compute(1).DivideBy=10
Temperature.Discovery.Source(1).Compute(2).Type="Divide"
Temperature.Discovery.Source(1).Compute(2).Column=5
Temperature.Discovery.Source(1).Compute(2).DivideBy=10

// Remove " Temp" from the sensor location
// ID;currentReading;tempLocation;alarmThreshold;warningThreshold
Temperature.Discovery.Source(1).Compute(3).Type="Replace"
Temperature.Discovery.Source(1).Compute(3).Column=3
Temperature.Discovery.Source(1).Compute(3).Replace=" Temp"
Temperature.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove "BMC " from the sensor location
// ID;currentReading;tempLocation;alarmThreshold;warningThreshold
Temperature.Discovery.Source(1).Compute(4).Type="Replace"
Temperature.Discovery.Source(1).Compute(4).Column=3
Temperature.Discovery.Source(1).Compute(4).Replace="BMC "
Temperature.Discovery.Source(1).Compute(4).ReplaceBy=""

// Instance table = Source(1)
Temperature.Discovery.InstanceTable=%Temperature.Discovery.Source(1)%
Temperature.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Temperature.Discovery.Instance.ParameterActivation.Temperature=InstanceTable.Column(3)
Temperature.Discovery.Instance.TemperatureType=InstanceTable.Column(3)
Temperature.Discovery.Instance.WarningThreshold=InstanceTable.Column(5)
Temperature.Discovery.Instance.AlarmThreshold=InstanceTable.Column(4)

// Temperature collect

// Collect type is MultiInstance
Temperature.Collect.Type="MultiInstance"

// Source(1) = temperatureProbeTable SNMP Table
// DeviceID;temperatureProbeStatus;temperatureProbeReading
Temperature.Collect.Source(1).Type="SnmpTable"
Temperature.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.700.20.1"
Temperature.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Duplicate the temperatureProbeStatus column
// DeviceID;temperatureProbeStatus;temperatureProbeStatus;temperatureProbeReading
Temperature.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Temperature.Collect.Source(1).Compute(1).Column="2"

// The value given by OpenManage is in tenth of degrees, so convert it to degrees
// DeviceID;temperatureProbeStatus;temperatureProbeStatus;TemperatureCelsius
Temperature.Collect.Source(1).Compute(2).Type="Divide"
Temperature.Collect.Source(1).Compute(2).Column="4"
Temperature.Collect.Source(1).Compute(2).DivideBy="10"

// Translate first temperatureProbeStatus into a PATROL status
// DeviceID;PATROLStatus;temperatureProbeStatus;TemperatureCelsius
Temperature.Collect.Source(1).Compute(3).Type="Translate"
Temperature.Collect.Source(1).Compute(3).Column="2"
Temperature.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusTranslationTable"

// The TemperatureStatusTranslationTable
EnvironmentStatusTranslationTable(3)="OK"
EnvironmentStatusTranslationTable(4)="WARN"
EnvironmentStatusTranslationTable(5)="ALARM"
EnvironmentStatusTranslationTable(6)="ALARM"
EnvironmentStatusTranslationTable(7)="WARN"
EnvironmentStatusTranslationTable(8)="ALARM"
EnvironmentStatusTranslationTable(9)="ALARM"
EnvironmentStatusTranslationTable(10)="ALARM"
EnvironmentStatusTranslationTable(Default)="UNKNOWN"

// Translate second temperatureProbeStatus into a more readable string
// DeviceID;PATROLStatus;statusInformation;TemperatureCelsius
Temperature.Collect.Source(1).Compute(4).Type="Translate"
Temperature.Collect.Source(1).Compute(4).Column="3"
Temperature.Collect.Source(1).Compute(4).TranslationTable="EnvironmentStatusInformationTranslationTable"

// The TemperatureStatusInformationTranslationTable
EnvironmentStatusInformationTranslationTable(3)=""
EnvironmentStatusInformationTranslationTable(4)="Non-Critical Upper"
EnvironmentStatusInformationTranslationTable(5)="Critical Upper"
EnvironmentStatusInformationTranslationTable(6)="Unrecoverable Upper"
EnvironmentStatusInformationTranslationTable(7)="Non-Critical Lower"
EnvironmentStatusInformationTranslationTable(8)="Critical Lower"
EnvironmentStatusInformationTranslationTable(9)="Unrecoverable Lower"
EnvironmentStatusInformationTranslationTable(10)="Failed"
EnvironmentStatusInformationTranslationTable(Default)="Unknown Status"

// The ValueTable = Source(1)
Temperature.Collect.ValueTable=%Temperature.Collect.Source(1)%
Temperature.Collect.DeviceID=ValueTable.Column(1)
Temperature.Collect.Status=ValueTable.Column(2)
Temperature.Collect.StatusInformation=ValueTable.Column(3)
Temperature.Collect.Temperature=ValueTable.Column(4)



// FANS

// Fan discovery

// Source(1) = the coolingDeviceTable table
// ID;currentReading;coolingDeviceLocationName;warningThreshold;alarmThreshold;
Fan.Discovery.Source(1).Type="SnmpTable"
Fan.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.700.12.1"
Fan.Discovery.Source(1).SnmpTableSelectColumns="ID,6,8,12,13,16"

// Remove the word " FAN" from the coolingDeviceLocationName
// ID;currentReading;coolingDeviceLocationName;warningThreshold;alarmThreshold;
Fan.Discovery.Source(1).Compute(1).Type="Replace"
Fan.Discovery.Source(1).Compute(1).Column=3
Fan.Discovery.Source(1).Compute(1).Replace=" FAN"
Fan.Discovery.Source(1).Compute(1).ReplaceBy=""

// Remove the word " RPM" from the coolingDeviceLocationName
// ID;currentReading;coolingDeviceLocationName;warningThreshold;alarmThreshold;
Fan.Discovery.Source(1).Compute(2).Type="Replace"
Fan.Discovery.Source(1).Compute(2).Column=3
Fan.Discovery.Source(1).Compute(2).Replace=" RPM"
Fan.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove the word "BMC " from the coolingDeviceLocationName
// ID;currentReading;coolingDeviceLocationName;warningThreshold;alarmThreshold;
Fan.Discovery.Source(1).Compute(3).Type="Replace"
Fan.Discovery.Source(1).Compute(3).Column=3
Fan.Discovery.Source(1).Compute(3).Replace="BMC "
Fan.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove the word " Fan" from the coolingDeviceLocationName
// ID;currentReading;coolingDeviceLocationName;warningThreshold;alarmThreshold;
Fan.Discovery.Source(1).Compute(4).Type="Replace"
Fan.Discovery.Source(1).Compute(4).Column=3
Fan.Discovery.Source(1).Compute(4).Replace=" Fan"
Fan.Discovery.Source(1).Compute(4).ReplaceBy=""

// Instance Table = Source(1)
Fan.Discovery.InstanceTable=%Fan.Discovery.Source(1)%
Fan.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Fan.Discovery.Instance.FanType=InstanceTable.Column(3)
Fan.Discovery.Instance.ParameterActivation.Speed=InstanceTable.Column(3)
Fan.Discovery.Instance.WarningThreshold=InstanceTable.Column(4)
Fan.Discovery.Instance.AlarmThreshold=InstanceTable.Column(5)


// Fan collect

// Collect type = mono-instance
Fan.Collect.Type="MultiInstance"

// Source(1) = coolingDeviceTable SNMP Tabl
// DeviceID;coolingDeviceStatus;coolingDeviceReading
Fan.Collect.Source(1).Type="SnmpTable"
Fan.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.700.12.1"
Fan.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Duplicate the coolingDeviceStatus column
// DeviceID;coolingDeviceStatus;coolingDeviceStatus;coolingDeviceReading
Fan.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Fan.Collect.Source(1).Compute(1).Column=2

// Translate the first coolingDeviceStatus into a PATROL Status
// DeviceID;PATROLStatus;coolingDeviceStatus;coolingDeviceReading
Fan.Collect.Source(1).Compute(2).Type="Translate"
Fan.Collect.Source(1).Compute(2).Column=2
Fan.Collect.Source(1).Compute(2).TranslationTable="EnvironmentStatusTranslationTable"

// Translate the second coolingDeviceStatus into a more readable string
// DeviceID;PATROLStatus;statusInformation;coolingDeviceReading
Fan.Collect.Source(1).Compute(3).Type="Translate"
Fan.Collect.Source(1).Compute(3).Column=3
Fan.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusInformationTranslationTable"

// ValueTable = Source(1)
Fan.Collect.ValueTable=%Fan.Collect.Source(1)%
Fan.Collect.DeviceID=ValueTable.Column(1)
Fan.Collect.Status=ValueTable.Column(2)
Fan.Collect.StatusInformation=ValueTable.Column(3)
Fan.Collect.Speed=ValueTable.Column(4)


//
// VOLTAGES
//

// Voltage discovery

// Source(1) = voltageProbeTable SNMP Table
// ID;VoltageReading;voltageProbeLocationName;UpperThreshold;LowerThreshold;
Voltage.Discovery.Source(1).Type="SnmpTable"
Voltage.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.20.1"
Voltage.Discovery.Source(1).SnmpTableSelectColumns="ID,6,8,11,12"

// InstanceTable = Source(1)
Voltage.Discovery.InstanceTable=%Voltage.Discovery.Source(1)%
Voltage.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Voltage.Discovery.Instance.ParameterActivation.Voltage=InstanceTable.Column(2)
Voltage.Discovery.Instance.VoltageType=InstanceTable.Column(3)
Voltage.Discovery.Instance.UpperThreshold=InstanceTable.Column(4)
Voltage.Discovery.Instance.LowerThreshold=InstanceTable.Column(5)

// Voltage collect

// Collect type = mono-instance
Voltage.Collect.Type="MultiInstance"

// Source(1) = the voltageProbeTable
// ID;Status;VoltageReading
Voltage.Collect.Source(1).Type="SnmpTable"
Voltage.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.20.1"
Voltage.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Duplicate the status column
// ID;Status;Status;VoltageReading
Voltage.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Voltage.Collect.Source(1).Compute(1).Column="2"

// Translate the first status column into a PATROL Status
// ID;PATROLStatus;Status;VoltageReading
Voltage.Collect.Source(1).Compute(2).Type="Translate"
Voltage.Collect.Source(1).Compute(2).Column="2"
Voltage.Collect.Source(1).Compute(2).TranslationTable="EnvironmentStatusTranslationTable"

// Translate the second status column into a more readable string
// ID;PATROLStatus;statusInformation;VoltageReading
Voltage.Collect.Source(1).Compute(3).Type="Translate"
Voltage.Collect.Source(1).Compute(3).Column="3"
Voltage.Collect.Source(1).Compute(3).TranslationTable="EnvironmentStatusInformationTranslationTable"

// ValueTable = source(1)
Voltage.Collect.ValueTable=%Voltage.Collect.Source(1)%
Voltage.Collect.DeviceID=ValueTable.Column(1)
Voltage.Collect.Voltage=ValueTable.Column(4)
Voltage.Collect.Status=ValueTable.Column(2)
Voltage.Collect.StatusInformation=ValueTable.Column(3)


// POWER SUPPLIES

// Power Supply discovery

// Source(1) = the powerSupplyTable table
// ID;PowerSupplyPower;powerSupplyTypeCode;
PowerSupply.Discovery.Source(1).Type="SnmpTable"
PowerSupply.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.12.1"
PowerSupply.Discovery.Source(1).SnmpTableSelectColumns="ID,6,7"

// Translate the power supply type
// ID;PowerSupplyPower;powerSupplyType;
PowerSupply.Discovery.Source(1).Compute(1).Type="Translate"
PowerSupply.Discovery.Source(1).Compute(1).Column=3
PowerSupply.Discovery.Source(1).Compute(1).TranslationTable="PowerSupplyTypeTranslationTable"

// The PowerSupplyTypeTranslationTable
PowerSupplyTypeTranslationTable(3)="Linear"
PowerSupplyTypeTranslationTable(4)="Switching"
PowerSupplyTypeTranslationTable(5)="Battery"
PowerSupplyTypeTranslationTable(6)="UPS"
PowerSupplyTypeTranslationTable(7)="Converter"
PowerSupplyTypeTranslationTable(8)="Regulator"
PowerSupplyTypeTranslationTable(9)="AC"
PowerSupplyTypeTranslationTable(10)="DC"
PowerSupplyTypeTranslationTable(11)="VRM"
PowerSupplyTypeTranslationTable(Default)=""

// Convert the power from tenth of watts to watts
// ID;PowerSupplyPower;powerSupplyType;
PowerSupply.Discovery.Source(1).Compute(2).Type="Divide"
PowerSupply.Discovery.Source(1).Compute(2).Column=2
PowerSupply.Discovery.Source(1).Compute(2).DivideBy=10

// InstanceTable = Source(1)
PowerSupply.Discovery.InstanceTable=%PowerSupply.Discovery.Source(1)%
PowerSupply.Discovery.Instance.DeviceID=InstanceTable.Column(1)
PowerSupply.Discovery.Instance.PowerSupplyPower=InstanceTable.Column(2)
PowerSupply.Discovery.Instance.PowerSupplyType=InstanceTable.Column(3)


// Power Supply collect

// Collect type = multi-instance
PowerSupply.Collect.Type="MultiInstance"

// Source(1) = powerSupplyTable SNMP table
// DeviceID;stateSettings;Status;SensorState;
PowerSupply.Collect.Source(1).Type="SnmpTable"
PowerSupply.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.12.1"
PowerSupply.Collect.Source(1).SnmpTableSelectColumns="ID,4,5,11"

// Translate the powerSupplyStatus into a PATROL status
// DeviceID;stateSettings;PATROLStatus;SensorState;
PowerSupply.Collect.Source(1).Compute(1).Type="Translate"
PowerSupply.Collect.Source(1).Compute(1).Column=3
PowerSupply.Collect.Source(1).Compute(1).TranslationTable="GenericStatusTranslationTable"

// Add up stateSettings and SensorState for a per-bit translation
// DeviceID;stateSettings+SensorState*256;PATROLStatus;SensorState;
PowerSupply.Collect.Source(1).Compute(2).Type="Multiply"
PowerSupply.Collect.Source(1).Compute(2).Column=4
PowerSupply.Collect.Source(1).Compute(2).MultiplyBy=256

PowerSupply.Collect.Source(1).Compute(3).Type="Add"
PowerSupply.Collect.Source(1).Compute(3).Column=2
PowerSupply.Collect.Source(1).Compute(3).Add=Column(4)

// Translate the stateSettings+SensorState*256 into a more readable string
// DeviceID;StatusInformation;PATROLStatus;SensorState;
PowerSupply.Collect.Source(1).Compute(4).Type="PerBitTranslation"
PowerSupply.Collect.Source(1).Compute(4).Column=2
PowerSupply.Collect.Source(1).Compute(4).BitList="0,2,3,6,7,8,9,10,11,12,13,14"
PowerSupply.Collect.Source(1).Compute(4).BitTranslationTable="PowerSupplyStatusInformationTranslationTable"

// The PowerSupplyStatusInformationTranslationTable
PowerSupplyStatusInformationTranslationTable(0,1)=""
PowerSupplyStatusInformationTranslationTable(2,1)="Not Ready"
PowerSupplyStatusInformationTranslationTable(3,1)="Fan Failure"
PowerSupplyStatusInformationTranslationTable(6,1)="AC Switch On"
PowerSupplyStatusInformationTranslationTable(7,1)="AC Power On"
PowerSupplyStatusInformationTranslationTable(8,1)=""
PowerSupplyStatusInformationTranslationTable(9,1)="Failed"
PowerSupplyStatusInformationTranslationTable(10,1)="Predicted Failure"
PowerSupplyStatusInformationTranslationTable(11,1)="AC Lost"
PowerSupplyStatusInformationTranslationTable(12,1)="AC Lost or Out-of-range"
PowerSupplyStatusInformationTranslationTable(13,1)="AC Out-of-range"
PowerSupplyStatusInformationTranslationTable(14,1)="Configuration Error"


// ValueTable = Source(1)
PowerSupply.Collect.ValueTable=%PowerSupply.Collect.Source(1)%
PowerSupply.Collect.DeviceID=ValueTable.Column(1)
PowerSupply.Collect.Status=ValueTable.Column(3)
PowerSupply.Collect.StatusInformation=ValueTable.Column(2)


//
// Memory modules
//

// Discovery

// Source(1) = the physicalMemoryArrayTable snmp table
// ID;typeCode;location;size;manufacturer;PartNumber;SerialNumber;AssetTagName;
Memory.Discovery.Source(1).Type="SnmpTable"
Memory.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.50.1"
Memory.Discovery.Source(1).SnmpTableSelectColumns="ID,7,8,14,21,22,23,24"

// Keep memory modules for which the size is known
// ID;typeCode;location;size;manufacturer;PartNumber;SerialNumber;AssetTagName;
Memory.Discovery.Source(1).Compute(1).Type="ExcludeMatchingLines"
Memory.Discovery.Source(1).Compute(1).Column=4
Memory.Discovery.Source(1).Compute(1).ValueList="0,2147483647"

// Translate memory from KM in MB
// ID;typeCode;location;sizeMB;manufacturer;PartNumber;SerialNumber;AssetTagName;
Memory.Discovery.Source(1).Compute(2).Type="Divide"
Memory.Discovery.Source(1).Compute(2).Column=4
Memory.Discovery.Source(1).Compute(2).DivideBy="1024"

// Translate memory type
// ID;type;location;sizeMB;manufacturer;PartNumber;SerialNumber;AssetTagName;
Memory.Discovery.Source(1).Compute(3).Type="Translate"
Memory.Discovery.Source(1).Compute(3).Column=2
Memory.Discovery.Source(1).Compute(3).TranslationTable="MemoryTypeTranslationTable"

// Add "Location: " to the location column
// Add "Part Number: " to the part number column
// Add "Alternative Serial Number: " to the AssetTagName column
// ID;type;location;sizeMB;manufacturer;PartNumber;SerialNumber;AssetTagName;
Memory.Discovery.Source(1).Compute(4).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(4).Column=3
Memory.Discovery.Source(1).Compute(4).String="Location: Slot "

Memory.Discovery.Source(1).Compute(5).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(5).Column=6
Memory.Discovery.Source(1).Compute(5).String="Part Number: "

Memory.Discovery.Source(1).Compute(6).Type="LeftConcat"
Memory.Discovery.Source(1).Compute(6).Column=8
Memory.Discovery.Source(1).Compute(6).String="Alternative Serial Number: "

// InstanceTable = Source(1)
Memory.Discovery.InstanceTable=%Memory.Discovery.Source(1)%
Memory.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Memory.Discovery.Instance.Type=InstanceTable.Column(2)
Memory.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
Memory.Discovery.Instance.Size=InstanceTable.Column(4)
Memory.Discovery.Instance.Vendor=InstanceTable.Column(5)
Memory.Discovery.Instance.AdditionalInformation2=InstanceTable.Column(6)
Memory.Discovery.Instance.SerialNumber=InstanceTable.Column(7)
Memory.Discovery.Instance.AdditionalInformation3=InstanceTable.Column(8)


// MemoryTypeTranslationTable
MemoryTypeTranslationTable(1)="Other type"
MemoryTypeTranslationTable(2)="Unknown type"
MemoryTypeTranslationTable(3)="DRAM"
MemoryTypeTranslationTable(4)="EDRAM"
MemoryTypeTranslationTable(5)="VRAM"
MemoryTypeTranslationTable(6)="SRAM"
MemoryTypeTranslationTable(7)="RAM"
MemoryTypeTranslationTable(8)="ROM"
MemoryTypeTranslationTable(9)="Flash"
MemoryTypeTranslationTable(10)="EEPROM"
MemoryTypeTranslationTable(11)="FEPROM"
MemoryTypeTranslationTable(12)="EPROM"
MemoryTypeTranslationTable(13)="CDRAM"
MemoryTypeTranslationTable(14)="3DRAM"
MemoryTypeTranslationTable(15)="SDRAM"
MemoryTypeTranslationTable(16)="SGRAM"
MemoryTypeTranslationTable(17)="RDRAM"
MemoryTypeTranslationTable(18)="DDR"
MemoryTypeTranslationTable(19)="DDR2"
MemoryTypeTranslationTable(20)="DDR2 FB-DIMM"
MemoryTypeTranslationTable(24)="DDR3"
MemoryTypeTranslationTable(25)="FBD2"
MemoryTypeTranslationTable(26)="DDR4"
MemoryTypeTranslationTable(default)=""

//
// Collect

// Collect type is multi-instance
Memory.Collect.Type="MultiInstance"

// Source(1) = memoryDeviceTable SNMP table
// ID;Status;SingleBitErrorCount;MultiBitErrorCount;
Memory.Collect.Source(1).Type="SnmpTable"
Memory.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.50.1"
Memory.Collect.Source(1).SnmpTableSelectColumns="ID,5,18,19"

// Duplicate this status, because we will translate it two times
// ID;Status;Status;SingleBitErrorCount;MultiBitErrorCount;
Memory.Collect.Source(1).Compute(1).Type="DuplicateColumn"
Memory.Collect.Source(1).Compute(1).Column=2

// Translate the first Status into a PATROL status
// ID;PATROLStatus;Status;SingleBitErrorCount;MultiBitErrorCount;
Memory.Collect.Source(1).Compute(2).Type="Translate"
Memory.Collect.Source(1).Compute(2).Column=2
Memory.Collect.Source(1).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second status into a more readable string
// ID;PATROLStatus;StatusInformation;SingleBitErrorCount;MultiBitErrorCount;
Memory.Collect.Source(1).Compute(3).Type="Translate"
Memory.Collect.Source(1).Compute(3).Column=3
Memory.Collect.Source(1).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// Sum up SingleBitErrorCount and MultiBitErrorCount
// ID;PATROLStatus;StatusInformation;ErrorCount;MultiBitErrorCount;
Memory.Collect.Source(1).Compute(4).Type="Add"
Memory.Collect.Source(1).Compute(4).Column=4
Memory.Collect.Source(1).Compute(4).Add=Column(5)

// ValueTable = Source(1)
Memory.Collect.ValueTable=%Memory.Collect.Source(1)%
Memory.Collect.DeviceID=ValueTable.Column(1)
Memory.Collect.Status=ValueTable.Column(2)
Memory.Collect.StatusInformation=ValueTable.Column(3)
Memory.Collect.ErrorCount=ValueTable.Column(4)


//
// CPUs
//

// Discovery

// Source(1) = the processorDeviceTable snmp table
// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Type="SnmpTable"
cpu.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.30.1"
cpu.Discovery.Source(1).SnmpTableSelectColumns="ID,8,10,11,23"

// Translate the modelCode into a more readable string
// ID;vendor;model;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Compute(1).Type="Translate"
cpu.Discovery.Source(1).Compute(1).Column=3
cpu.Discovery.Source(1).Compute(1).TranslationTable="cpuFamilyTranslationTable"

// Remove "(R)" from processorDeviceBrandName
// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Compute(2).Type="Replace"
cpu.Discovery.Source(1).Compute(2).Column=5
cpu.Discovery.Source(1).Compute(2).Replace="(R)"
cpu.Discovery.Source(1).Compute(2).ReplaceBy=""

// Remove "AMD" from processorDeviceBrandName
// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Compute(3).Type="Replace"
cpu.Discovery.Source(1).Compute(3).Column=5
cpu.Discovery.Source(1).Compute(3).Replace="AMD"
cpu.Discovery.Source(1).Compute(3).ReplaceBy=""

// Remove "Intel" from processorDeviceBrandName
// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Compute(4).Type="Replace"
cpu.Discovery.Source(1).Compute(4).Column=5
cpu.Discovery.Source(1).Compute(4).Replace="Intel"
cpu.Discovery.Source(1).Compute(4).ReplaceBy=""

// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;
cpu.Discovery.Source(1).Compute(5).Type="LeftConcat"
cpu.Discovery.Source(1).Compute(5).Column=5
cpu.Discovery.Source(1).Compute(5).String="MSHW"

cpu.Discovery.Source(1).Compute(6).Type="RightConcat"
cpu.Discovery.Source(1).Compute(6).Column=5
cpu.Discovery.Source(1).Compute(6).String="MSHW"

// Replace "MSHWMSHW", i.e. a blank column with the modelCode.
cpu.Discovery.Source(1).Compute(7).Type="Replace"
cpu.Discovery.Source(1).Compute(7).Column=5
cpu.Discovery.Source(1).Compute(7).Replace="MSHWMSHW"
cpu.Discovery.Source(1).Compute(7).ReplaceBy=Column(3)

// Now get rid of any remaining MSHWs
// Caption,DeviceID
cpu.Discovery.Source(1).Compute(8).Type="Replace"
cpu.Discovery.Source(1).Compute(8).Column=5
cpu.Discovery.Source(1).Compute(8).Replace="MSHW"
cpu.Discovery.Source(1).Compute(8).ReplaceBy=""

// Source(2) = the processorStatusDeviceTable snmp table
// ID;Location;
cpu.Discovery.Source(2).Type="SnmpTable"
cpu.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.32.1"
cpu.Discovery.Source(2).SnmpTableSelectColumns="ID,7"

// Add "Location: " to the Location column
// ID;Location;
cpu.Discovery.Source(2).Compute(1).Type="LeftConcat"
cpu.Discovery.Source(2).Compute(1).Column=2
cpu.Discovery.Source(2).Compute(1).String="Location: Slot "

// Source(3) = table joint of Source(1) and Source(2)
// ID;vendor;modelCode;nominalSpeed;processorDeviceBrandName;ID;Location;
cpu.Discovery.Source(3).Type="TableJoint"
cpu.Discovery.Source(3).LeftTable=%cpu.Discovery.Source(1)%
cpu.Discovery.Source(3).RightTable=%cpu.Discovery.Source(2)%
cpu.Discovery.Source(3).LeftKeyColumn=1
cpu.Discovery.Source(3).RightKeyColumn=1
cpu.Discovery.Source(3).DefaultRightLine=";;"

// InstanceTable = Source(3)
cpu.Discovery.InstanceTable=%cpu.Discovery.Source(3)%
cpu.Discovery.Instance.DeviceID=InstanceTable.Column(1)
cpu.Discovery.Instance.Vendor=InstanceTable.Column(2)
cpu.Discovery.Instance.MaximumSpeed=InstanceTable.Column(4)
cpu.Discovery.Instance.Model=InstanceTable.Column(5)
cpu.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(7)

// The cpuFamilyTranslationTable
cpuFamilyTranslationTable(3)="8086"
cpuFamilyTranslationTable(4)="80286"
cpuFamilyTranslationTable(5)="386"
cpuFamilyTranslationTable(6)="486"
cpuFamilyTranslationTable(7)="8087"
cpuFamilyTranslationTable(8)="80287"
cpuFamilyTranslationTable(9)="80387"
cpuFamilyTranslationTable(10)="80487"
cpuFamilyTranslationTable(11)="Pentium"
cpuFamilyTranslationTable(12)="Pentium Pro"
cpuFamilyTranslationTable(13)="Pentium II"
cpuFamilyTranslationTable(14)="Pentium MMX"
cpuFamilyTranslationTable(15)="Celeron"
cpuFamilyTranslationTable(16)="Pentium II Xeon"
cpuFamilyTranslationTable(17)="Pentium III"
cpuFamilyTranslationTable(18)="Pentium III Xeon"
cpuFamilyTranslationTable(19)="Pentium III SpeedStep"
cpuFamilyTranslationTable(20)="Itanium"
cpuFamilyTranslationTable(21)="Xeon"
cpuFamilyTranslationTable(22)="Pentium 4"
cpuFamilyTranslationTable(23)="Xeon MP"
cpuFamilyTranslationTable(24)="Itanium 2"
cpuFamilyTranslationTable(25)="K5"
cpuFamilyTranslationTable(26)="K6"
cpuFamilyTranslationTable(27)="K6-2"
cpuFamilyTranslationTable(28)="K6-3"
cpuFamilyTranslationTable(29)="Athlon"
cpuFamilyTranslationTable(30)="2900"
cpuFamilyTranslationTable(31)="K6-2+"
cpuFamilyTranslationTable(32)="PowerPC"
cpuFamilyTranslationTable(33)="PowerPC 601"
cpuFamilyTranslationTable(34)="PowerPC 603"
cpuFamilyTranslationTable(35)="PowerPC 603+"
cpuFamilyTranslationTable(36)="PowerPC 604"
cpuFamilyTranslationTable(37)="PowerPC 620"
cpuFamilyTranslationTable(38)="PowerPC x704"
cpuFamilyTranslationTable(39)="PowerPC 750"
cpuFamilyTranslationTable(48)="Alpha"
cpuFamilyTranslationTable(49)="Alpha21064"
cpuFamilyTranslationTable(50)="Alpha21066"
cpuFamilyTranslationTable(51)="Alpha21164"
cpuFamilyTranslationTable(52)="Alpha21164PC"
cpuFamilyTranslationTable(53)="Alpha21164a"
cpuFamilyTranslationTable(54)="Alpha21264"
cpuFamilyTranslationTable(55)="Alpha21364"
cpuFamilyTranslationTable(64)="MIPS"
cpuFamilyTranslationTable(65)="MIPS R4000"
cpuFamilyTranslationTable(66)="MIPS R4200"
cpuFamilyTranslationTable(67)="MIPS R4400"
cpuFamilyTranslationTable(68)="MIPS R4600"
cpuFamilyTranslationTable(69)="MIPS R10000"
cpuFamilyTranslationTable(80)="SPARC"
cpuFamilyTranslationTable(81)="SuperSPARC"
cpuFamilyTranslationTable(82)="microSPARC II"
cpuFamilyTranslationTable(83)="microSPARC IIep"
cpuFamilyTranslationTable(84)="UltraSPARC"
cpuFamilyTranslationTable(85)="UltraSPARC II"
cpuFamilyTranslationTable(86)="UltraSPARC IIi"
cpuFamilyTranslationTable(87)="UltraSPARC III"
cpuFamilyTranslationTable(88)="UltraSPARC IIIi"
cpuFamilyTranslationTable(96)="68040"
cpuFamilyTranslationTable(97)="68xxx"
cpuFamilyTranslationTable(98)="68000"
cpuFamilyTranslationTable(99)="68010"
cpuFamilyTranslationTable(100)="68020"
cpuFamilyTranslationTable(101)="68030"
cpuFamilyTranslationTable(112)="Hobbit"
cpuFamilyTranslationTable(120)="Crusoe TM5000"
cpuFamilyTranslationTable(121)="Crusoe TM3000"
cpuFamilyTranslationTable(122)="Efficeon TM8000"
cpuFamilyTranslationTable(128)="Weitek"
cpuFamilyTranslationTable(131)="Athlon64"
cpuFamilyTranslationTable(132)="Opteron"
cpuFamilyTranslationTable(133)="Sempron"
cpuFamilyTranslationTable(134)="Turion64 Mobile"
cpuFamilyTranslationTable(135)="Dual Core Opteron"
cpuFamilyTranslationTable(136)="Athlon64 X2 Dual Core"
cpuFamilyTranslationTable(137)="Turion64 X2 Mobile"
cpuFamilyTranslationTable(138)="QuadCore Opteron"
cpuFamilyTranslationTable(139)="3rd Generation Opteron"
cpuFamilyTranslationTable(144)="PA-RISC"
cpuFamilyTranslationTable(145)="PA-RISC 8500"
cpuFamilyTranslationTable(146)="PA-RISC 8000"
cpuFamilyTranslationTable(147)="PA-RISC 7300LC"
cpuFamilyTranslationTable(148)="PA-RISC 7200"
cpuFamilyTranslationTable(149)="PA-RISC 7100LC"
cpuFamilyTranslationTable(150)="PA-RISC 7100"
cpuFamilyTranslationTable(160)="V30"
cpuFamilyTranslationTable(171)="Dual Core Xeon 5200"
cpuFamilyTranslationTable(172)="Dual Core Xeon 7200"
cpuFamilyTranslationTable(173)="Quad Core Xeon 7300"
cpuFamilyTranslationTable(174)="Quad Core Xeon 7400"
cpuFamilyTranslationTable(175)="MultiCore Xeon 7400"
cpuFamilyTranslationTable(176)="M1"
cpuFamilyTranslationTable(177)="M2"
cpuFamilyTranslationTable(180)="AS400"
cpuFamilyTranslationTable(182)="AthlonXP"
cpuFamilyTranslationTable(183)="AthlonMP"
cpuFamilyTranslationTable(184)="Duron"
cpuFamilyTranslationTable(185)="Pentium M"
cpuFamilyTranslationTable(186)="Celeron D"
cpuFamilyTranslationTable(187)="Pentium D"
cpuFamilyTranslationTable(188)="Pentium Extreme"
cpuFamilyTranslationTable(189)="Core Solo"
cpuFamilyTranslationTable(190)="Core2"
cpuFamilyTranslationTable(191)="Core2 Duo"
cpuFamilyTranslationTable(198)="Corei7"
cpuFamilyTranslationTable(199)="Dual Core Celeron"
cpuFamilyTranslationTable(200)="IBM390"
cpuFamilyTranslationTable(201)="G4"
cpuFamilyTranslationTable(202)="G5"
cpuFamilyTranslationTable(203)="ESA390G6"
cpuFamilyTranslationTable(204)="zArchitectur"
cpuFamilyTranslationTable(210)="VIAC7-M"
cpuFamilyTranslationTable(211)="VIAC7-D"
cpuFamilyTranslationTable(212)="VIAC7"
cpuFamilyTranslationTable(213)="VIAEden"
cpuFamilyTranslationTable(214)="MultiCore Xeon"
cpuFamilyTranslationTable(215)="Dual Core Xeon 3xxx"
cpuFamilyTranslationTable(216)="Quad Core Xeon 3xxx"
cpuFamilyTranslationTable(218)="Dual Core Xeon 5xxx"
cpuFamilyTranslationTable(219)="Quad Core Xeon 5xxx"
cpuFamilyTranslationTable(221)="Dual Core Xeon 7xxx"
cpuFamilyTranslationTable(222)="Quad Core Xeon 7xxx"
cpuFamilyTranslationTable(223)="MultiCore Xeon 7xxx"
cpuFamilyTranslationTable(250)="i860"
cpuFamilyTranslationTable(251)="i960"
cpuFamilyTranslationTable(default)=""

//
// Collect

// Collect type is multi-instance
cpu.Collect.Type="MultiInstance"

// Source(1) = processorDeviceTable SNMP table
// DeviceID;Status;Speed;
cpu.Collect.Source(1).Type="SnmpTable"
cpu.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.30.1"
cpu.Collect.Source(1).SnmpTableSelectColumns="ID,5,12"

// Translate the status into a PATROL Status
// DeviceID;PATROLStatus;Speed;
cpu.Collect.Source(1).Compute(1).Type="Translate"
cpu.Collect.Source(1).Compute(1).Column=2
cpu.Collect.Source(1).Compute(1).TranslationTable="GenericStatusTranslationTable"

// Source(2) = processorStatusDeviceTable SNMP table
// DeviceID;Status;
cpu.Collect.Source(2).Type="SnmpTable"
cpu.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.32.1"
cpu.Collect.Source(2).SnmpTableSelectColumns="ID,6"

// Translate the second status into a more readable string
// DeviceID;StatusInformation;
cpu.Collect.Source(2).Compute(1).Type="PerBitTranslation"
cpu.Collect.Source(2).Compute(1).Column=2
cpu.Collect.Source(2).Compute(1).BitList="0,1,5,7,8,9,10"
cpu.Collect.Source(2).Compute(1).BitTranslationTable="ProcessorStatusInformationTranslationTable"

// The ProcessorStatusInformationTranslationTable
ProcessorStatusInformationTranslationTable(0,1)="Internal Error"
ProcessorStatusInformationTranslationTable(1,1)="Thermal Trip"
ProcessorStatusInformationTranslationTable(5,1)="Configuration Error"
ProcessorStatusInformationTranslationTable(7,1)=""
ProcessorStatusInformationTranslationTable(8,1)="Disabled"
ProcessorStatusInformationTranslationTable(9,1)="Terminator"
ProcessorStatusInformationTranslationTable(10,1)="Throttled"
//ProcessorStatusInformationTranslationTable(Default)=""

// Source(3) = Table joint of Source(1) and Source(2)
// DeviceID;PATROLStatus;Speed;DeviceID;StatusInformation;
cpu.Collect.Source(3).Type="TableJoint"
cpu.Collect.Source(3).LeftTable=%cpu.Collect.Source(1)%
cpu.Collect.Source(3).RightTable=%cpu.Collect.Source(2)%
cpu.Collect.Source(3).LeftKeyColumn=1
cpu.Collect.Source(3).RightKeyColumn=1
cpu.Collect.Source(3).DefaultRightLine=";;"

// ValueTable = Source(3)
cpu.Collect.ValueTable=%cpu.Collect.Source(3)%
cpu.Collect.DeviceID=ValueTable.Column(1)
cpu.Collect.Status=ValueTable.Column(2)
cpu.Collect.StatusInformation=ValueTable.Column(5)
cpu.Collect.CurrentSpeed=ValueTable.Column(3)


//
// OTHER DEVICES (Embedded System Management EventLog)
//

//
// Discovery

// Source(1) = systemStateTable SNMP table
// DeviceID;
OtherDevice.Discovery.Source(1).Type="SnmpTable"
OtherDevice.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.200.10.1"
OtherDevice.Discovery.Source(1).SnmpTableSelectColumns="ID"

// Add "ESM" and "EventLog" as �nd and 3rd columns
// DeviceID;DeviceType;AdditionalLabel
OtherDevice.Discovery.Source(1).Compute(1).Type="RightConcat"
OtherDevice.Discovery.Source(1).Compute(1).Column=1
OtherDevice.Discovery.Source(1).Compute(1).String=";ESM;EventLog"

// Source(2) = remoteAccessTable SNMP table
// DeviceID;DeviceTypeCode;AdditionalLabel
OtherDevice.Discovery.Source(2).Type="SnmpTable"
OtherDevice.Discovery.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1700.10.1"
OtherDevice.Discovery.Source(2).SnmpTableSelectColumns="ID,3,7"

// Translate DeviceTypeCode into a readable DeviceType
// DeviceID;DeviceType;AdditionalLabel
OtherDevice.Discovery.Source(2).Compute(1).Type="Translate"
OtherDevice.Discovery.Source(2).Compute(1).Column=2
OtherDevice.Discovery.Source(2).Compute(1).TranslationTable="RACTypeTranslationTable"

// The RACTypeTranslationTable
RACTypeTranslationTable(3)="DracIII"
RACTypeTranslationTable(4)="ERA"
RACTypeTranslationTable(5)="DRAC4"
RACTypeTranslationTable(6)="DRAC5"
RACTypeTranslationTable(Default)="DRAC"

// Source(3) = sdCardUnit SNMP table
// DeviceID;DeviceType;
OtherDevice.Discovery.Source(3).Type="SnmpTable"
OtherDevice.Discovery.Source(3).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.110.1"
OtherDevice.Discovery.Source(3).SnmpTableSelectColumns="ID,7"

// Make the ID Unique
// DeviceID;DeviceType;
OtherDevice.Discovery.Source(3).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(3).Compute(1).Column=1
OtherDevice.Discovery.Source(3).Compute(1).String="SDCardUnit-"

// Add a BlankColumn
// DeviceID;DeviceType;AdditionalLabel;
OtherDevice.Discovery.Source(3).Compute(2).Type="RightConcat"
OtherDevice.Discovery.Source(3).Compute(2).Column=2
OtherDevice.Discovery.Source(3).Compute(2).String=";"

// Source(4) = sdCardDevice SNMP table
// DeviceID;DeviceType;Size;
OtherDevice.Discovery.Source(4).Type="SnmpTable"
OtherDevice.Discovery.Source(4).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.112.1"
OtherDevice.Discovery.Source(4).SnmpTableSelectColumns="ID,7,10"

// Make the ID Unique
// DeviceID;DeviceType;Size;
OtherDevice.Discovery.Source(4).Compute(1).Type="LeftConcat"
OtherDevice.Discovery.Source(4).Compute(1).Column=1
OtherDevice.Discovery.Source(4).Compute(1).String="SDCardDevice-"

// Add "Size : " to the Size Column
// DeviceID;DeviceType;Size;
OtherDevice.Discovery.Source(4).Compute(2).Type="LeftConcat"
OtherDevice.Discovery.Source(4).Compute(2).Column=3
OtherDevice.Discovery.Source(4).Compute(2).String="Size : "

// Add "MB" to Size Column, and add a BlankColumn
// DeviceID;DeviceType;Size;AdditionalLabel;
OtherDevice.Discovery.Source(4).Compute(3).Type="RightConcat"
OtherDevice.Discovery.Source(4).Compute(3).Column=3
OtherDevice.Discovery.Source(4).Compute(3).String=" MB ;"


// Source(3) = Union of Source(1) and Source(2)
// DeviceID;DeviceType;AdditionalLabel
OtherDevice.Discovery.Source(5).Type="TableUnion"
OtherDevice.Discovery.Source(5).Table1=%OtherDevice.Discovery.Source(1)%
OtherDevice.Discovery.Source(5).Table2=%OtherDevice.Discovery.Source(2)%
OtherDevice.Discovery.Source(5).Table3=%OtherDevice.Discovery.Source(3)%
OtherDevice.Discovery.Source(5).Table4=%OtherDevice.Discovery.Source(4)%

// InstanceTable = Source(1)
OtherDevice.Discovery.InstanceTable=%OtherDevice.Discovery.Source(5)%
OtherDevice.Discovery.Instance.DeviceID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DisplayID=InstanceTable.Column(1)
OtherDevice.Discovery.Instance.DeviceType=InstanceTable.Column(2)
OtherDevice.Discovery.Instance.AdditionalInformation1=InstanceTable.Column(3)
OtherDevice.Discovery.Instance.AdditionalLabel=InstanceTable.Column(4)

//
// Collect

// Collect type is mono-instance
OtherDevice.Collect.Type="MultiInstance"

// Source(1) = systemStateTable SNMP table
// DeviceID;Status;
OtherDevice.Collect.Source(1).Type="SnmpTable"
OtherDevice.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.200.10.1"
OtherDevice.Collect.Source(1).SnmpTableSelectColumns="ID,41"

// Source(2) = remoteAccessTable SNMP table
// DeviceID;Status;
OtherDevice.Collect.Source(2).Type="SnmpTable"
OtherDevice.Collect.Source(2).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1700.10.1"
OtherDevice.Collect.Source(2).SnmpTableSelectColumns="ID,6"

// Source(3) = sdCardUnit SNMP table
// DeviceID;Status;
OtherDevice.Collect.Source(3).Type="SnmpTable"
OtherDevice.Collect.Source(3).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.110.1"
OtherDevice.Collect.Source(3).SnmpTableSelectColumns="ID,8"

// Make the ID Unique
// DeviceID;Status;
OtherDevice.Collect.Source(3).Compute(1).Type="LeftConcat"
OtherDevice.Collect.Source(3).Compute(1).Column=1
OtherDevice.Collect.Source(3).Compute(1).String="SDCardUnit-"

// Source(4) = sdCardUnit SNMP table
// DeviceID;Status;
OtherDevice.Collect.Source(4).Type="SnmpTable"
OtherDevice.Collect.Source(4).SnmpTableOid="1.3.6.1.4.1.674.10892.1.1100.112.1"
OtherDevice.Collect.Source(4).SnmpTableSelectColumns="ID,3"

// Make the ID Unique
// DeviceID;Status;
OtherDevice.Collect.Source(4).Compute(1).Type="LeftConcat"
OtherDevice.Collect.Source(4).Compute(1).Column=1
OtherDevice.Collect.Source(4).Compute(1).String="SDCardDevice-"

// Source(3) = Union of Source(1) and Source(2)
// DeviceID;Status;
OtherDevice.Collect.Source(5).Type="TableUnion"
OtherDevice.Collect.Source(5).Table1=%OtherDevice.Collect.Source(1)%
OtherDevice.Collect.Source(5).Table2=%OtherDevice.Collect.Source(2)%
OtherDevice.Collect.Source(5).Table3=%OtherDevice.Collect.Source(3)%
OtherDevice.Collect.Source(5).Table4=%OtherDevice.Collect.Source(4)%

// Duplicate the Status column
// DeviceID;Status;Status;
OtherDevice.Collect.Source(5).Compute(1).Type="DuplicateColumn"
OtherDevice.Collect.Source(5).Compute(1).Column=2

// Translate the first Status into a PATROL Status
// DeviceID;PATROLStatus;Status;
OtherDevice.Collect.Source(5).Compute(2).Type="Translate"
OtherDevice.Collect.Source(5).Compute(2).Column=2
OtherDevice.Collect.Source(5).Compute(2).TranslationTable="GenericStatusTranslationTable"

// Translate the second Status into a more readable string
// DeviceID;PATROLStatus;StatusInformation;
OtherDevice.Collect.Source(5).Compute(3).Type="Translate"
OtherDevice.Collect.Source(5).Compute(3).Column=3
OtherDevice.Collect.Source(5).Compute(3).TranslationTable="GenericStatusInformationTranslationTable"

// ValueTable = Source(5)
OtherDevice.Collect.ValueTable=%OtherDevice.Collect.Source(5)%
OtherDevice.Collect.DeviceID=ValueTable.Column(1)
OtherDevice.Collect.Status=ValueTable.Column(2)
OtherDevice.Collect.StatusInformation=ValueTable.Column(3)



//
// Batteries
//

//
// Discovery

// Source(1) = batteryTable SNMP Table
// DeviceID;BatteryLocation;
Battery.Discovery.Source(1).Type="SnmpTable"
Battery.Discovery.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.50.1"
Battery.Discovery.Source(1).SnmpTableSelectColumns="ID,7"

// That's it!
// InstanceTable = Source(1)
Battery.Discovery.InstanceTable=%Battery.Discovery.Source(1)%
Battery.Discovery.Instance.DeviceID=InstanceTable.Column(1)
Battery.Discovery.Instance.Type=InstanceTable.Column(2)

//
// Collect

// Collect type is multi-instance
Battery.Collect.Type="MultiInstance"

// Source(1) = batteryTable SNMP table
// DeviceID;Status;Reading;
Battery.Collect.Source(1).Type="SnmpTable"
Battery.Collect.Source(1).SnmpTableOid="1.3.6.1.4.1.674.10892.1.600.50.1"
Battery.Collect.Source(1).SnmpTableSelectColumns="ID,5,6"

// Translate the first Status code into a PATROLStatus
// DeviceID;PATROLStatus;Reading;
Battery.Collect.Source(1).Compute(1).Type="Translate"
Battery.Collect.Source(1).Compute(1).Column=2
Battery.Collect.Source(1).Compute(1).TranslationTable="GenericStatusTranslationTable"

// Translate the reading value into a readable string (I mean: human-readable)
// DeviceID;PATROLStatus;StatusInformation;
Battery.Collect.Source(1).Compute(2).Type="Translate"
Battery.Collect.Source(1).Compute(2).Column=3
Battery.Collect.Source(1).Compute(2).TranslationTable="BatteryStatusInformationTranslationTable"

// The BatteryStatusInformationTranslationTable
BatteryStatusInformationTranslationTable(1)="Predicted Failure"
BatteryStatusInformationTranslationTable(2)="Failed"
BatteryStatusInformationTranslationTable(3)="Failed"
BatteryStatusInformationTranslationTable(4)=""
BatteryStatusInformationTranslationTable(5)="Predicted Failure"
BatteryStatusInformationTranslationTable(6)="Failed"
BatteryStatusInformationTranslationTable(7)="Failed"

// ValueTable = Source(1)
Battery.Collect.ValueTable=%Battery.Collect.Source(1)%
Battery.Collect.DeviceID=ValueTable.Column(1)
Battery.Collect.Status=ValueTable.Column(2)
Battery.Collect.StatusInformation=ValueTable.Column(3)


// The GenericStatusTranslationTable
GenericStatusTranslationTable(3)="OK"
GenericStatusTranslationTable(4)="WARN"
GenericStatusTranslationTable(5)="ALARM"
GenericStatusTranslationTable(6)="ALARM"
GenericStatusTranslationTable(Default)="UNKNOWN"

// The GenericStatusInformationTranslationTable
GenericStatusInformationTranslationTable(3)=""
GenericStatusInformationTranslationTable(4)="Non Critical"
GenericStatusInformationTranslationTable(5)="Critical"
GenericStatusInformationTranslationTable(6)="Unrecoverable"
GenericStatusInformationTranslationTable(Default)="Unknown Status"
